/**
 *  @file MeshGradient.tsx
 *  React-Mesh-Gradient
 *  @author Johnny Leek <https://github.com/JohnnyLeek1>
 *  @version 1.0.0
 *  @description A React WebGL component that renders a mesh gradient utilizing Three.JS and React Three Fiber.
 *
 */
import React from 'react';
import * as THREE from 'three';
/**
 * Properties that are available for the Mesh Gradient.
 *
 * See individual docs inside the interface for explanations of each property
 *
 * @interface MeshGradientProps
 * @property {string[]} colors
 * @property {boolean} [wireframe=false]
 * @property {number} [speed=0.01]
 * @property {number} [backgroundColor=0x000000]
 * @property {number} [backgroundOpacity=0.8]
 * @property {(e: THREE.Event) => void} [onGradientClick]
 * @property {(e: THREE.Event) => void} [onGradientContextMenu]
 * @property {(e: THREE.Event) => void} [onGradientDoubleClick]
 * @property {(e: THREE.Event) => void} [onGradientWheel]
 * @property {(e: THREE.Event) => void} [onGradientPointerUp]
 * @property {(e: THREE.Event) => void} [onGradientPointerDown]
 * @property {(e: THREE.Event) => void} [onGradientPointerOver]
 * @property {(e: THREE.Event) => void} [onGradientPointerOut]
 * @property {(e: THREE.Event) => void} [onGradientPointerMove]
 * @property {(e: THREE.Event) => void} [onGradientPointerEnter]
 * @property {(e: THREE.Event) => void} [onGradientPointerLeave]
 * @property {(e: THREE.Event) => void} [onGradientPointerMove]
 * @property {(e: THREE.Event) => void} [onGradientPropsUpdate]
 */
interface MeshGradientProps {
    /** An array of colors to be used in the gradient. The colors should be in hex format. */
    colors: string[];
    /** Whether or not the gradient should be rendered in wireframe mode. */
    wireframe?: boolean;
    speed?: number;
    backgroundColor?: string;
    backgroundOpacity?: number;
    onGradientClick?: (e: THREE.Event) => void;
    onGradientContextMenu?: (e: THREE.Event) => void;
    onGradientDoubleClick?: (e: THREE.Event) => void;
    onGradientWheel?: (e: THREE.Event) => void;
    onGradientPointerUp?: (e: THREE.Event) => void;
    onGradientPointerDown?: (e: THREE.Event) => void;
    onGradientPointerOver?: (e: THREE.Event) => void;
    onGradientPointerOut?: (e: THREE.Event) => void;
    onGradientPointerEnter?: (e: THREE.Event) => void;
    onGradientPointerLeave?: (e: THREE.Event) => void;
    onGradientPointerMove?: (e: THREE.Event) => void;
    onGradientPropsUpdate?: (e: THREE.Event) => void;
}
/**
 * Properties that are available to the Mesh Gradient Renderer.
 *
 * @interface MeshGradientRendererProps
 * @extends {React.HTMLAttributes<HTMLDivElement>}
 * @extends {MeshGradientProps}
 *
 * See individual docs inside the interface for explanations of each property
 * @property {string} [width]
 * @property {string} [height]
 *
 * Can also pass all properties from {@link MeshGradientProps} and {@link React.HTMLAttributes<HTMLDivElement>}
 *
 */
interface MeshGradientRendererProps extends React.HTMLAttributes<HTMLDivElement>, MeshGradientProps {
    width?: string;
    height?: string;
    style?: React.CSSProperties;
    children?: React.ReactNode;
}
/**
 * The MeshGradientRenderer component. Renders a MeshGradient component inside a customizable div, which contains a
 * responsive Three.JS canvas.
 * @param {MeshGradientRendererProps} props - {@link MeshGradientRendererProps}
 * @returns A div containing the desired MeshGradient
 */
declare const MeshGradientRenderer: React.FunctionComponent<MeshGradientRendererProps>;
export default MeshGradientRenderer;

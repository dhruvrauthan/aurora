import * as Ot from "react";
import Ng, { useReducer as b2, useRef as Bs, useDebugValue as E2, useEffect as $u, useLayoutEffect as w2, useState as xw, useMemo as T2 } from "react";
function C2(u) {
  return u && u.__esModule && Object.prototype.hasOwnProperty.call(u, "default") ? u.default : u;
}
var rp = {}, A2 = {
  get exports() {
    return rp;
  },
  set exports(u) {
    rp = u;
  }
}, Nh = {};
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var wb;
function R2() {
  if (wb)
    return Nh;
  wb = 1;
  var u = Ng, e = Symbol.for("react.element"), t = Symbol.for("react.fragment"), n = Object.prototype.hasOwnProperty, a = u.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, s = { key: !0, ref: !0, __self: !0, __source: !0 };
  function c(f, p, h) {
    var g, _ = {}, x = null, M = null;
    h !== void 0 && (x = "" + h), p.key !== void 0 && (x = "" + p.key), p.ref !== void 0 && (M = p.ref);
    for (g in p)
      n.call(p, g) && !s.hasOwnProperty(g) && (_[g] = p[g]);
    if (f && f.defaultProps)
      for (g in p = f.defaultProps, p)
        _[g] === void 0 && (_[g] = p[g]);
    return { $$typeof: e, type: f, key: x, ref: M, props: _, _owner: a.current };
  }
  return Nh.Fragment = t, Nh.jsx = c, Nh.jsxs = c, Nh;
}
var zh = {};
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Tb;
function L2() {
  return Tb || (Tb = 1, process.env.NODE_ENV !== "production" && function() {
    var u = Ng, e = Symbol.for("react.element"), t = Symbol.for("react.portal"), n = Symbol.for("react.fragment"), a = Symbol.for("react.strict_mode"), s = Symbol.for("react.profiler"), c = Symbol.for("react.provider"), f = Symbol.for("react.context"), p = Symbol.for("react.forward_ref"), h = Symbol.for("react.suspense"), g = Symbol.for("react.suspense_list"), _ = Symbol.for("react.memo"), x = Symbol.for("react.lazy"), M = Symbol.for("react.offscreen"), E = Symbol.iterator, A = "@@iterator";
    function T(O) {
      if (O === null || typeof O != "object")
        return null;
      var ee = E && O[E] || O[A];
      return typeof ee == "function" ? ee : null;
    }
    var b = u.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function L(O) {
      {
        for (var ee = arguments.length, K = new Array(ee > 1 ? ee - 1 : 0), ce = 1; ce < ee; ce++)
          K[ce - 1] = arguments[ce];
        R("error", O, K);
      }
    }
    function R(O, ee, K) {
      {
        var ce = b.ReactDebugCurrentFrame, Ke = ce.getStackAddendum();
        Ke !== "" && (ee += "%s", K = K.concat([Ke]));
        var at = K.map(function($e) {
          return String($e);
        });
        at.unshift("Warning: " + ee), Function.prototype.apply.call(console[O], console, at);
      }
    }
    var U = !1, F = !1, V = !1, k = !1, G = !1, z;
    z = Symbol.for("react.module.reference");
    function I(O) {
      return !!(typeof O == "string" || typeof O == "function" || O === n || O === s || G || O === a || O === h || O === g || k || O === M || U || F || V || typeof O == "object" && O !== null && (O.$$typeof === x || O.$$typeof === _ || O.$$typeof === c || O.$$typeof === f || O.$$typeof === p || // This needs to include all possible module reference object
      // types supported by any Flight configuration anywhere since
      // we don't know which Flight build this will end up being used
      // with.
      O.$$typeof === z || O.getModuleId !== void 0));
    }
    function Q(O, ee, K) {
      var ce = O.displayName;
      if (ce)
        return ce;
      var Ke = ee.displayName || ee.name || "";
      return Ke !== "" ? K + "(" + Ke + ")" : K;
    }
    function te(O) {
      return O.displayName || "Context";
    }
    function $(O) {
      if (O == null)
        return null;
      if (typeof O.tag == "number" && L("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof O == "function")
        return O.displayName || O.name || null;
      if (typeof O == "string")
        return O;
      switch (O) {
        case n:
          return "Fragment";
        case t:
          return "Portal";
        case s:
          return "Profiler";
        case a:
          return "StrictMode";
        case h:
          return "Suspense";
        case g:
          return "SuspenseList";
      }
      if (typeof O == "object")
        switch (O.$$typeof) {
          case f:
            var ee = O;
            return te(ee) + ".Consumer";
          case c:
            var K = O;
            return te(K._context) + ".Provider";
          case p:
            return Q(O, O.render, "ForwardRef");
          case _:
            var ce = O.displayName || null;
            return ce !== null ? ce : $(O.type) || "Memo";
          case x: {
            var Ke = O, at = Ke._payload, $e = Ke._init;
            try {
              return $($e(at));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    var ie = Object.assign, fe = 0, Ee, Te, W, ae, ne, Se, ue;
    function pe() {
    }
    pe.__reactDisabledLog = !0;
    function ye() {
      {
        if (fe === 0) {
          Ee = console.log, Te = console.info, W = console.warn, ae = console.error, ne = console.group, Se = console.groupCollapsed, ue = console.groupEnd;
          var O = {
            configurable: !0,
            enumerable: !0,
            value: pe,
            writable: !0
          };
          Object.defineProperties(console, {
            info: O,
            log: O,
            warn: O,
            error: O,
            group: O,
            groupCollapsed: O,
            groupEnd: O
          });
        }
        fe++;
      }
    }
    function je() {
      {
        if (fe--, fe === 0) {
          var O = {
            configurable: !0,
            enumerable: !0,
            writable: !0
          };
          Object.defineProperties(console, {
            log: ie({}, O, {
              value: Ee
            }),
            info: ie({}, O, {
              value: Te
            }),
            warn: ie({}, O, {
              value: W
            }),
            error: ie({}, O, {
              value: ae
            }),
            group: ie({}, O, {
              value: ne
            }),
            groupCollapsed: ie({}, O, {
              value: Se
            }),
            groupEnd: ie({}, O, {
              value: ue
            })
          });
        }
        fe < 0 && L("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var Be = b.ReactCurrentDispatcher, de;
    function dt(O, ee, K) {
      {
        if (de === void 0)
          try {
            throw Error();
          } catch (Ke) {
            var ce = Ke.stack.trim().match(/\n( *(at )?)/);
            de = ce && ce[1] || "";
          }
        return `
` + de + O;
      }
    }
    var _t = !1, qe;
    {
      var ot = typeof WeakMap == "function" ? WeakMap : Map;
      qe = new ot();
    }
    function Ie(O, ee) {
      if (!O || _t)
        return "";
      {
        var K = qe.get(O);
        if (K !== void 0)
          return K;
      }
      var ce;
      _t = !0;
      var Ke = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var at;
      at = Be.current, Be.current = null, ye();
      try {
        if (ee) {
          var $e = function() {
            throw Error();
          };
          if (Object.defineProperty($e.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct($e, []);
            } catch (bn) {
              ce = bn;
            }
            Reflect.construct(O, [], $e);
          } else {
            try {
              $e.call();
            } catch (bn) {
              ce = bn;
            }
            O.call($e.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (bn) {
            ce = bn;
          }
          O();
        }
      } catch (bn) {
        if (bn && ce && typeof bn.stack == "string") {
          for (var it = bn.stack.split(`
`), bt = ce.stack.split(`
`), Mt = it.length - 1, Ct = bt.length - 1; Mt >= 1 && Ct >= 0 && it[Mt] !== bt[Ct]; )
            Ct--;
          for (; Mt >= 1 && Ct >= 0; Mt--, Ct--)
            if (it[Mt] !== bt[Ct]) {
              if (Mt !== 1 || Ct !== 1)
                do
                  if (Mt--, Ct--, Ct < 0 || it[Mt] !== bt[Ct]) {
                    var Ht = `
` + it[Mt].replace(" at new ", " at ");
                    return O.displayName && Ht.includes("<anonymous>") && (Ht = Ht.replace("<anonymous>", O.displayName)), typeof O == "function" && qe.set(O, Ht), Ht;
                  }
                while (Mt >= 1 && Ct >= 0);
              break;
            }
        }
      } finally {
        _t = !1, Be.current = at, je(), Error.prepareStackTrace = Ke;
      }
      var Cn = O ? O.displayName || O.name : "", Yn = Cn ? dt(Cn) : "";
      return typeof O == "function" && qe.set(O, Yn), Yn;
    }
    function Me(O, ee, K) {
      return Ie(O, !1);
    }
    function Ne(O) {
      var ee = O.prototype;
      return !!(ee && ee.isReactComponent);
    }
    function nt(O, ee, K) {
      if (O == null)
        return "";
      if (typeof O == "function")
        return Ie(O, Ne(O));
      if (typeof O == "string")
        return dt(O);
      switch (O) {
        case h:
          return dt("Suspense");
        case g:
          return dt("SuspenseList");
      }
      if (typeof O == "object")
        switch (O.$$typeof) {
          case p:
            return Me(O.render);
          case _:
            return nt(O.type, ee, K);
          case x: {
            var ce = O, Ke = ce._payload, at = ce._init;
            try {
              return nt(at(Ke), ee, K);
            } catch {
            }
          }
        }
      return "";
    }
    var Ze = Object.prototype.hasOwnProperty, xt = {}, Et = b.ReactDebugCurrentFrame;
    function mt(O) {
      if (O) {
        var ee = O._owner, K = nt(O.type, O._source, ee ? ee.type : null);
        Et.setExtraStackFrame(K);
      } else
        Et.setExtraStackFrame(null);
    }
    function Nt(O, ee, K, ce, Ke) {
      {
        var at = Function.call.bind(Ze);
        for (var $e in O)
          if (at(O, $e)) {
            var it = void 0;
            try {
              if (typeof O[$e] != "function") {
                var bt = Error((ce || "React class") + ": " + K + " type `" + $e + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof O[$e] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw bt.name = "Invariant Violation", bt;
              }
              it = O[$e](ee, $e, ce, K, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (Mt) {
              it = Mt;
            }
            it && !(it instanceof Error) && (mt(Ke), L("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", ce || "React class", K, $e, typeof it), mt(null)), it instanceof Error && !(it.message in xt) && (xt[it.message] = !0, mt(Ke), L("Failed %s type: %s", K, it.message), mt(null));
          }
      }
    }
    var Wt = Array.isArray;
    function Y(O) {
      return Wt(O);
    }
    function H(O) {
      {
        var ee = typeof Symbol == "function" && Symbol.toStringTag, K = ee && O[Symbol.toStringTag] || O.constructor.name || "Object";
        return K;
      }
    }
    function xe(O) {
      try {
        return Ve(O), !1;
      } catch {
        return !0;
      }
    }
    function Ve(O) {
      return "" + O;
    }
    function ke(O) {
      if (xe(O))
        return L("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", H(O)), Ve(O);
    }
    var Qe = b.ReactCurrentOwner, Lt = {
      key: !0,
      ref: !0,
      __self: !0,
      __source: !0
    }, ht, Ae, se;
    se = {};
    function me(O) {
      if (Ze.call(O, "ref")) {
        var ee = Object.getOwnPropertyDescriptor(O, "ref").get;
        if (ee && ee.isReactWarning)
          return !1;
      }
      return O.ref !== void 0;
    }
    function De(O) {
      if (Ze.call(O, "key")) {
        var ee = Object.getOwnPropertyDescriptor(O, "key").get;
        if (ee && ee.isReactWarning)
          return !1;
      }
      return O.key !== void 0;
    }
    function Fe(O, ee) {
      if (typeof O.ref == "string" && Qe.current && ee && Qe.current.stateNode !== ee) {
        var K = $(Qe.current.type);
        se[K] || (L('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', $(Qe.current.type), O.ref), se[K] = !0);
      }
    }
    function Pe(O, ee) {
      {
        var K = function() {
          ht || (ht = !0, L("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", ee));
        };
        K.isReactWarning = !0, Object.defineProperty(O, "key", {
          get: K,
          configurable: !0
        });
      }
    }
    function wt(O, ee) {
      {
        var K = function() {
          Ae || (Ae = !0, L("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", ee));
        };
        K.isReactWarning = !0, Object.defineProperty(O, "ref", {
          get: K,
          configurable: !0
        });
      }
    }
    var St = function(O, ee, K, ce, Ke, at, $e) {
      var it = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: e,
        // Built-in properties that belong on the element
        type: O,
        key: ee,
        ref: K,
        props: $e,
        // Record the component responsible for creating this element.
        _owner: at
      };
      return it._store = {}, Object.defineProperty(it._store, "validated", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: !1
      }), Object.defineProperty(it, "_self", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: ce
      }), Object.defineProperty(it, "_source", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: Ke
      }), Object.freeze && (Object.freeze(it.props), Object.freeze(it)), it;
    };
    function rt(O, ee, K, ce, Ke) {
      {
        var at, $e = {}, it = null, bt = null;
        K !== void 0 && (ke(K), it = "" + K), De(ee) && (ke(ee.key), it = "" + ee.key), me(ee) && (bt = ee.ref, Fe(ee, Ke));
        for (at in ee)
          Ze.call(ee, at) && !Lt.hasOwnProperty(at) && ($e[at] = ee[at]);
        if (O && O.defaultProps) {
          var Mt = O.defaultProps;
          for (at in Mt)
            $e[at] === void 0 && ($e[at] = Mt[at]);
        }
        if (it || bt) {
          var Ct = typeof O == "function" ? O.displayName || O.name || "Unknown" : O;
          it && Pe($e, Ct), bt && wt($e, Ct);
        }
        return St(O, it, bt, Ke, ce, Qe.current, $e);
      }
    }
    var X = b.ReactCurrentOwner, be = b.ReactDebugCurrentFrame;
    function Le(O) {
      if (O) {
        var ee = O._owner, K = nt(O.type, O._source, ee ? ee.type : null);
        be.setExtraStackFrame(K);
      } else
        be.setExtraStackFrame(null);
    }
    var He;
    He = !1;
    function Tt(O) {
      return typeof O == "object" && O !== null && O.$$typeof === e;
    }
    function tn() {
      {
        if (X.current) {
          var O = $(X.current.type);
          if (O)
            return `

Check the render method of \`` + O + "`.";
        }
        return "";
      }
    }
    function mn(O) {
      {
        if (O !== void 0) {
          var ee = O.fileName.replace(/^.*[\\\/]/, ""), K = O.lineNumber;
          return `

Check your code at ` + ee + ":" + K + ".";
        }
        return "";
      }
    }
    var Gn = {};
    function Gt(O) {
      {
        var ee = tn();
        if (!ee) {
          var K = typeof O == "string" ? O : O.displayName || O.name;
          K && (ee = `

Check the top-level render call using <` + K + ">.");
        }
        return ee;
      }
    }
    function ln(O, ee) {
      {
        if (!O._store || O._store.validated || O.key != null)
          return;
        O._store.validated = !0;
        var K = Gt(ee);
        if (Gn[K])
          return;
        Gn[K] = !0;
        var ce = "";
        O && O._owner && O._owner !== X.current && (ce = " It was passed a child from " + $(O._owner.type) + "."), Le(O), L('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', K, ce), Le(null);
      }
    }
    function kn(O, ee) {
      {
        if (typeof O != "object")
          return;
        if (Y(O))
          for (var K = 0; K < O.length; K++) {
            var ce = O[K];
            Tt(ce) && ln(ce, ee);
          }
        else if (Tt(O))
          O._store && (O._store.validated = !0);
        else if (O) {
          var Ke = T(O);
          if (typeof Ke == "function" && Ke !== O.entries)
            for (var at = Ke.call(O), $e; !($e = at.next()).done; )
              Tt($e.value) && ln($e.value, ee);
        }
      }
    }
    function oi(O) {
      {
        var ee = O.type;
        if (ee == null || typeof ee == "string")
          return;
        var K;
        if (typeof ee == "function")
          K = ee.propTypes;
        else if (typeof ee == "object" && (ee.$$typeof === p || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        ee.$$typeof === _))
          K = ee.propTypes;
        else
          return;
        if (K) {
          var ce = $(ee);
          Nt(K, O.props, "prop", ce, O);
        } else if (ee.PropTypes !== void 0 && !He) {
          He = !0;
          var Ke = $(ee);
          L("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", Ke || "Unknown");
        }
        typeof ee.getDefaultProps == "function" && !ee.getDefaultProps.isReactClassApproved && L("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
      }
    }
    function Ei(O) {
      {
        for (var ee = Object.keys(O.props), K = 0; K < ee.length; K++) {
          var ce = ee[K];
          if (ce !== "children" && ce !== "key") {
            Le(O), L("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", ce), Le(null);
            break;
          }
        }
        O.ref !== null && (Le(O), L("Invalid attribute `ref` supplied to `React.Fragment`."), Le(null));
      }
    }
    function wi(O, ee, K, ce, Ke, at) {
      {
        var $e = I(O);
        if (!$e) {
          var it = "";
          (O === void 0 || typeof O == "object" && O !== null && Object.keys(O).length === 0) && (it += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var bt = mn(Ke);
          bt ? it += bt : it += tn();
          var Mt;
          O === null ? Mt = "null" : Y(O) ? Mt = "array" : O !== void 0 && O.$$typeof === e ? (Mt = "<" + ($(O.type) || "Unknown") + " />", it = " Did you accidentally export a JSX literal instead of a component?") : Mt = typeof O, L("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", Mt, it);
        }
        var Ct = rt(O, ee, K, Ke, at);
        if (Ct == null)
          return Ct;
        if ($e) {
          var Ht = ee.children;
          if (Ht !== void 0)
            if (ce)
              if (Y(Ht)) {
                for (var Cn = 0; Cn < Ht.length; Cn++)
                  kn(Ht[Cn], O);
                Object.freeze && Object.freeze(Ht);
              } else
                L("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
            else
              kn(Ht, O);
        }
        return O === n ? Ei(Ct) : oi(Ct), Ct;
      }
    }
    function Io(O, ee, K) {
      return wi(O, ee, K, !0);
    }
    function Rr(O, ee, K) {
      return wi(O, ee, K, !1);
    }
    var ms = Rr, q = Io;
    zh.Fragment = n, zh.jsx = ms, zh.jsxs = q;
  }()), zh;
}
(function(u) {
  process.env.NODE_ENV === "production" ? u.exports = R2() : u.exports = L2();
})(A2);
const D2 = rp.Fragment, Qh = rp.jsx, tx = rp.jsxs;
/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const zg = "151", P2 = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 }, U2 = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 }, Sw = 0, nx = 1, Mw = 2, N2 = 3, bw = 0, Og = 1, Kh = 2, Yu = 3, Do = 0, Cr = 1, fs = 2, z2 = 2, Lo = 0, ec = 1, ix = 2, rx = 3, ax = 4, Ew = 5, Xu = 100, ww = 101, Tw = 102, sx = 103, ox = 104, Cw = 200, Aw = 201, Rw = 202, Lw = 203, qx = 204, Xx = 205, Dw = 206, Pw = 207, Uw = 208, Nw = 209, zw = 210, Ow = 0, Iw = 1, Fw = 2, Tg = 3, Bw = 4, Hw = 5, kw = 6, Vw = 7, bp = 0, Gw = 1, Ww = 2, ds = 0, qw = 1, Xw = 2, jw = 3, jx = 4, Yw = 5, Ig = 300, kl = 301, Vl = 302, ap = 303, sp = 304, sd = 306, op = 1e3, mr = 1001, lp = 1002, bi = 1003, Cg = 1004, O2 = 1004, $h = 1005, I2 = 1005, ai = 1006, Yx = 1007, F2 = 1007, Gl = 1008, B2 = 1008, Po = 1009, Zw = 1010, Jw = 1011, Zx = 1012, Qw = 1013, Fl = 1014, Hs = 1015, ac = 1016, Kw = 1017, $w = 1018, tc = 1020, eT = 1021, Jr = 1023, tT = 1024, nT = 1025, Hl = 1026, sc = 1027, iT = 1028, rT = 1029, aT = 1030, sT = 1031, oT = 1033, yg = 33776, _g = 33777, xg = 33778, Sg = 33779, lx = 35840, ux = 35841, cx = 35842, fx = 35843, lT = 36196, dx = 37492, hx = 37496, px = 37808, mx = 37809, vx = 37810, gx = 37811, yx = 37812, _x = 37813, xx = 37814, Sx = 37815, Mx = 37816, bx = 37817, Ex = 37818, wx = 37819, Tx = 37820, Cx = 37821, Mg = 36492, uT = 36283, Ax = 36284, Rx = 36285, Lx = 36286, cT = 2200, fT = 2201, dT = 2202, up = 2300, cp = 2301, bg = 2302, Zu = 2400, Ju = 2401, fp = 2402, Fg = 2500, Jx = 2501, H2 = 0, k2 = 1, V2 = 2, Uo = 3e3, Pn = 3001, hT = 3200, pT = 3201, ql = 0, mT = 1, G2 = "", us = "srgb", td = "srgb-linear", Qx = "display-p3", W2 = 0, Eg = 7680, q2 = 7681, X2 = 7682, j2 = 7683, Y2 = 34055, Z2 = 34056, J2 = 5386, Q2 = 512, K2 = 513, $2 = 514, eL = 515, tL = 516, nL = 517, iL = 518, vT = 519, dp = 35044, rL = 35048, aL = 35040, sL = 35045, oL = 35049, lL = 35041, uL = 35046, cL = 35050, fL = 35042, dL = "100", Dx = "300 es", Ag = 1035;
class zo {
  addEventListener(e, t) {
    this._listeners === void 0 && (this._listeners = {});
    const n = this._listeners;
    n[e] === void 0 && (n[e] = []), n[e].indexOf(t) === -1 && n[e].push(t);
  }
  hasEventListener(e, t) {
    if (this._listeners === void 0)
      return !1;
    const n = this._listeners;
    return n[e] !== void 0 && n[e].indexOf(t) !== -1;
  }
  removeEventListener(e, t) {
    if (this._listeners === void 0)
      return;
    const a = this._listeners[e];
    if (a !== void 0) {
      const s = a.indexOf(t);
      s !== -1 && a.splice(s, 1);
    }
  }
  dispatchEvent(e) {
    if (this._listeners === void 0)
      return;
    const n = this._listeners[e.type];
    if (n !== void 0) {
      e.target = this;
      const a = n.slice(0);
      for (let s = 0, c = a.length; s < c; s++)
        a[s].call(this, e);
      e.target = null;
    }
  }
}
const hr = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
let Cb = 1234567;
const nc = Math.PI / 180, nd = 180 / Math.PI;
function va() {
  const u = Math.random() * 4294967295 | 0, e = Math.random() * 4294967295 | 0, t = Math.random() * 4294967295 | 0, n = Math.random() * 4294967295 | 0;
  return (hr[u & 255] + hr[u >> 8 & 255] + hr[u >> 16 & 255] + hr[u >> 24 & 255] + "-" + hr[e & 255] + hr[e >> 8 & 255] + "-" + hr[e >> 16 & 15 | 64] + hr[e >> 24 & 255] + "-" + hr[t & 63 | 128] + hr[t >> 8 & 255] + "-" + hr[t >> 16 & 255] + hr[t >> 24 & 255] + hr[n & 255] + hr[n >> 8 & 255] + hr[n >> 16 & 255] + hr[n >> 24 & 255]).toLowerCase();
}
function hi(u, e, t) {
  return Math.max(e, Math.min(t, u));
}
function Kx(u, e) {
  return (u % e + e) % e;
}
function hL(u, e, t, n, a) {
  return n + (u - e) * (a - n) / (t - e);
}
function pL(u, e, t) {
  return u !== e ? (t - u) / (e - u) : 0;
}
function ep(u, e, t) {
  return (1 - t) * u + t * e;
}
function mL(u, e, t, n) {
  return ep(u, e, 1 - Math.exp(-t * n));
}
function vL(u, e = 1) {
  return e - Math.abs(Kx(u, e * 2) - e);
}
function gL(u, e, t) {
  return u <= e ? 0 : u >= t ? 1 : (u = (u - e) / (t - e), u * u * (3 - 2 * u));
}
function yL(u, e, t) {
  return u <= e ? 0 : u >= t ? 1 : (u = (u - e) / (t - e), u * u * u * (u * (u * 6 - 15) + 10));
}
function _L(u, e) {
  return u + Math.floor(Math.random() * (e - u + 1));
}
function xL(u, e) {
  return u + Math.random() * (e - u);
}
function SL(u) {
  return u * (0.5 - Math.random());
}
function ML(u) {
  u !== void 0 && (Cb = u);
  let e = Cb += 1831565813;
  return e = Math.imul(e ^ e >>> 15, e | 1), e ^= e + Math.imul(e ^ e >>> 7, e | 61), ((e ^ e >>> 14) >>> 0) / 4294967296;
}
function bL(u) {
  return u * nc;
}
function EL(u) {
  return u * nd;
}
function Px(u) {
  return (u & u - 1) === 0 && u !== 0;
}
function gT(u) {
  return Math.pow(2, Math.ceil(Math.log(u) / Math.LN2));
}
function yT(u) {
  return Math.pow(2, Math.floor(Math.log(u) / Math.LN2));
}
function wL(u, e, t, n, a) {
  const s = Math.cos, c = Math.sin, f = s(t / 2), p = c(t / 2), h = s((e + n) / 2), g = c((e + n) / 2), _ = s((e - n) / 2), x = c((e - n) / 2), M = s((n - e) / 2), E = c((n - e) / 2);
  switch (a) {
    case "XYX":
      u.set(f * g, p * _, p * x, f * h);
      break;
    case "YZY":
      u.set(p * x, f * g, p * _, f * h);
      break;
    case "ZXZ":
      u.set(p * _, p * x, f * g, f * h);
      break;
    case "XZX":
      u.set(f * g, p * E, p * M, f * h);
      break;
    case "YXY":
      u.set(p * M, f * g, p * E, f * h);
      break;
    case "ZYZ":
      u.set(p * E, p * M, f * g, f * h);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + a);
  }
}
function ma(u, e) {
  switch (e.constructor) {
    case Float32Array:
      return u;
    case Uint16Array:
      return u / 65535;
    case Uint8Array:
      return u / 255;
    case Int16Array:
      return Math.max(u / 32767, -1);
    case Int8Array:
      return Math.max(u / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
function rn(u, e) {
  switch (e.constructor) {
    case Float32Array:
      return u;
    case Uint16Array:
      return Math.round(u * 65535);
    case Uint8Array:
      return Math.round(u * 255);
    case Int16Array:
      return Math.round(u * 32767);
    case Int8Array:
      return Math.round(u * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
const TL = {
  DEG2RAD: nc,
  RAD2DEG: nd,
  generateUUID: va,
  clamp: hi,
  euclideanModulo: Kx,
  mapLinear: hL,
  inverseLerp: pL,
  lerp: ep,
  damp: mL,
  pingpong: vL,
  smoothstep: gL,
  smootherstep: yL,
  randInt: _L,
  randFloat: xL,
  randFloatSpread: SL,
  seededRandom: ML,
  degToRad: bL,
  radToDeg: EL,
  isPowerOfTwo: Px,
  ceilPowerOfTwo: gT,
  floorPowerOfTwo: yT,
  setQuaternionFromProperEuler: wL,
  normalize: rn,
  denormalize: ma
};
class Ge {
  constructor(e = 0, t = 0) {
    Ge.prototype.isVector2 = !0, this.x = e, this.y = t;
  }
  get width() {
    return this.x;
  }
  set width(e) {
    this.x = e;
  }
  get height() {
    return this.y;
  }
  set height(e) {
    this.y = e;
  }
  set(e, t) {
    return this.x = e, this.y = t, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this;
  }
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  applyMatrix3(e) {
    const t = this.x, n = this.y, a = e.elements;
    return this.x = a[0] * t + a[3] * n + a[6], this.y = a[1] * t + a[4] * n + a[7], this;
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
  }
  roundToZero() {
    return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y;
  }
  cross(e) {
    return this.x * e.y - this.y * e.x;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  angle() {
    return Math.atan2(-this.y, -this.x) + Math.PI;
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0)
      return Math.PI / 2;
    const n = this.dot(e) / t;
    return Math.acos(hi(n, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x, n = this.y - e.y;
    return t * t + n * n;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this;
  }
  rotateAround(e, t) {
    const n = Math.cos(t), a = Math.sin(t), s = this.x - e.x, c = this.y - e.y;
    return this.x = s * n - c * a + e.x, this.y = s * a + c * n + e.y, this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y;
  }
}
class cn {
  constructor() {
    cn.prototype.isMatrix3 = !0, this.elements = [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ];
  }
  set(e, t, n, a, s, c, f, p, h) {
    const g = this.elements;
    return g[0] = e, g[1] = a, g[2] = f, g[3] = t, g[4] = s, g[5] = p, g[6] = n, g[7] = c, g[8] = h, this;
  }
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ), this;
  }
  copy(e) {
    const t = this.elements, n = e.elements;
    return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], this;
  }
  extractBasis(e, t, n) {
    return e.setFromMatrix3Column(this, 0), t.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this;
  }
  setFromMatrix4(e) {
    const t = e.elements;
    return this.set(
      t[0],
      t[4],
      t[8],
      t[1],
      t[5],
      t[9],
      t[2],
      t[6],
      t[10]
    ), this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const n = e.elements, a = t.elements, s = this.elements, c = n[0], f = n[3], p = n[6], h = n[1], g = n[4], _ = n[7], x = n[2], M = n[5], E = n[8], A = a[0], T = a[3], b = a[6], L = a[1], R = a[4], U = a[7], F = a[2], V = a[5], k = a[8];
    return s[0] = c * A + f * L + p * F, s[3] = c * T + f * R + p * V, s[6] = c * b + f * U + p * k, s[1] = h * A + g * L + _ * F, s[4] = h * T + g * R + _ * V, s[7] = h * b + g * U + _ * k, s[2] = x * A + M * L + E * F, s[5] = x * T + M * R + E * V, s[8] = x * b + M * U + E * k, this;
  }
  multiplyScalar(e) {
    const t = this.elements;
    return t[0] *= e, t[3] *= e, t[6] *= e, t[1] *= e, t[4] *= e, t[7] *= e, t[2] *= e, t[5] *= e, t[8] *= e, this;
  }
  determinant() {
    const e = this.elements, t = e[0], n = e[1], a = e[2], s = e[3], c = e[4], f = e[5], p = e[6], h = e[7], g = e[8];
    return t * c * g - t * f * h - n * s * g + n * f * p + a * s * h - a * c * p;
  }
  invert() {
    const e = this.elements, t = e[0], n = e[1], a = e[2], s = e[3], c = e[4], f = e[5], p = e[6], h = e[7], g = e[8], _ = g * c - f * h, x = f * p - g * s, M = h * s - c * p, E = t * _ + n * x + a * M;
    if (E === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const A = 1 / E;
    return e[0] = _ * A, e[1] = (a * h - g * n) * A, e[2] = (f * n - a * c) * A, e[3] = x * A, e[4] = (g * t - a * p) * A, e[5] = (a * s - f * t) * A, e[6] = M * A, e[7] = (n * p - h * t) * A, e[8] = (c * t - n * s) * A, this;
  }
  transpose() {
    let e;
    const t = this.elements;
    return e = t[1], t[1] = t[3], t[3] = e, e = t[2], t[2] = t[6], t[6] = e, e = t[5], t[5] = t[7], t[7] = e, this;
  }
  getNormalMatrix(e) {
    return this.setFromMatrix4(e).invert().transpose();
  }
  transposeIntoArray(e) {
    const t = this.elements;
    return e[0] = t[0], e[1] = t[3], e[2] = t[6], e[3] = t[1], e[4] = t[4], e[5] = t[7], e[6] = t[2], e[7] = t[5], e[8] = t[8], this;
  }
  setUvTransform(e, t, n, a, s, c, f) {
    const p = Math.cos(s), h = Math.sin(s);
    return this.set(
      n * p,
      n * h,
      -n * (p * c + h * f) + c + e,
      -a * h,
      a * p,
      -a * (-h * c + p * f) + f + t,
      0,
      0,
      1
    ), this;
  }
  //
  scale(e, t) {
    return this.premultiply(d_.makeScale(e, t)), this;
  }
  rotate(e) {
    return this.premultiply(d_.makeRotation(-e)), this;
  }
  translate(e, t) {
    return this.premultiply(d_.makeTranslation(e, t)), this;
  }
  // for 2D Transforms
  makeTranslation(e, t) {
    return this.set(
      1,
      0,
      e,
      0,
      1,
      t,
      0,
      0,
      1
    ), this;
  }
  makeRotation(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      -n,
      0,
      n,
      t,
      0,
      0,
      0,
      1
    ), this;
  }
  makeScale(e, t) {
    return this.set(
      e,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      1
    ), this;
  }
  //
  equals(e) {
    const t = this.elements, n = e.elements;
    for (let a = 0; a < 9; a++)
      if (t[a] !== n[a])
        return !1;
    return !0;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 9; n++)
      this.elements[n] = e[n + t];
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.elements;
    return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e;
  }
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
}
const d_ = /* @__PURE__ */ new cn();
function _T(u) {
  for (let e = u.length - 1; e >= 0; --e)
    if (u[e] >= 65535)
      return !0;
  return !1;
}
const CL = {
  Int8Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Uint16Array,
  Int32Array,
  Uint32Array,
  Float32Array,
  Float64Array
};
function Zf(u, e) {
  return new CL[u](e);
}
function hp(u) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", u);
}
function $f(u) {
  return u < 0.04045 ? u * 0.0773993808 : Math.pow(u * 0.9478672986 + 0.0521327014, 2.4);
}
function h_(u) {
  return u < 31308e-7 ? u * 12.92 : 1.055 * Math.pow(u, 0.41666) - 0.055;
}
const AL = /* @__PURE__ */ new cn().fromArray([
  0.8224621,
  0.0331941,
  0.0170827,
  0.177538,
  0.9668058,
  0.0723974,
  -1e-7,
  1e-7,
  0.9105199
]), RL = /* @__PURE__ */ new cn().fromArray([
  1.2249401,
  -0.0420569,
  -0.0196376,
  -0.2249404,
  1.0420571,
  -0.0786361,
  1e-7,
  0,
  1.0982735
]);
function LL(u) {
  return u.convertSRGBToLinear().applyMatrix3(RL);
}
function DL(u) {
  return u.applyMatrix3(AL).convertLinearToSRGB();
}
const PL = {
  [td]: (u) => u,
  [us]: (u) => u.convertSRGBToLinear(),
  [Qx]: LL
}, UL = {
  [td]: (u) => u,
  [us]: (u) => u.convertLinearToSRGB(),
  [Qx]: DL
}, jr = {
  enabled: !1,
  get legacyMode() {
    return console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."), !this.enabled;
  },
  set legacyMode(u) {
    console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."), this.enabled = !u;
  },
  get workingColorSpace() {
    return td;
  },
  set workingColorSpace(u) {
    console.warn("THREE.ColorManagement: .workingColorSpace is readonly.");
  },
  convert: function(u, e, t) {
    if (this.enabled === !1 || e === t || !e || !t)
      return u;
    const n = PL[e], a = UL[t];
    if (n === void 0 || a === void 0)
      throw new Error(`Unsupported color space conversion, "${e}" to "${t}".`);
    return a(n(u));
  },
  fromWorkingColorSpace: function(u, e) {
    return this.convert(u, this.workingColorSpace, e);
  },
  toWorkingColorSpace: function(u, e) {
    return this.convert(u, e, this.workingColorSpace);
  }
};
let Ef;
class $x {
  static getDataURL(e) {
    if (/^data:/i.test(e.src) || typeof HTMLCanvasElement > "u")
      return e.src;
    let t;
    if (e instanceof HTMLCanvasElement)
      t = e;
    else {
      Ef === void 0 && (Ef = hp("canvas")), Ef.width = e.width, Ef.height = e.height;
      const n = Ef.getContext("2d");
      e instanceof ImageData ? n.putImageData(e, 0, 0) : n.drawImage(e, 0, 0, e.width, e.height), t = Ef;
    }
    return t.width > 2048 || t.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", e), t.toDataURL("image/jpeg", 0.6)) : t.toDataURL("image/png");
  }
  static sRGBToLinear(e) {
    if (typeof HTMLImageElement < "u" && e instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && e instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && e instanceof ImageBitmap) {
      const t = hp("canvas");
      t.width = e.width, t.height = e.height;
      const n = t.getContext("2d");
      n.drawImage(e, 0, 0, e.width, e.height);
      const a = n.getImageData(0, 0, e.width, e.height), s = a.data;
      for (let c = 0; c < s.length; c++)
        s[c] = $f(s[c] / 255) * 255;
      return n.putImageData(a, 0, 0), t;
    } else if (e.data) {
      const t = e.data.slice(0);
      for (let n = 0; n < t.length; n++)
        t instanceof Uint8Array || t instanceof Uint8ClampedArray ? t[n] = Math.floor($f(t[n] / 255) * 255) : t[n] = $f(t[n]);
      return {
        data: t,
        width: e.width,
        height: e.height
      };
    } else
      return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), e;
  }
}
class Qu {
  constructor(e = null) {
    this.isSource = !0, this.uuid = va(), this.data = e, this.version = 0;
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.images[this.uuid] !== void 0)
      return e.images[this.uuid];
    const n = {
      uuid: this.uuid,
      url: ""
    }, a = this.data;
    if (a !== null) {
      let s;
      if (Array.isArray(a)) {
        s = [];
        for (let c = 0, f = a.length; c < f; c++)
          a[c].isDataTexture ? s.push(p_(a[c].image)) : s.push(p_(a[c]));
      } else
        s = p_(a);
      n.url = s;
    }
    return t || (e.images[this.uuid] = n), n;
  }
}
function p_(u) {
  return typeof HTMLImageElement < "u" && u instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && u instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && u instanceof ImageBitmap ? $x.getDataURL(u) : u.data ? {
    data: Array.from(u.data),
    width: u.width,
    height: u.height,
    type: u.data.constructor.name
  } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
}
let NL = 0;
class pi extends zo {
  constructor(e = pi.DEFAULT_IMAGE, t = pi.DEFAULT_MAPPING, n = mr, a = mr, s = ai, c = Gl, f = Jr, p = Po, h = pi.DEFAULT_ANISOTROPY, g = Uo) {
    super(), this.isTexture = !0, Object.defineProperty(this, "id", { value: NL++ }), this.uuid = va(), this.name = "", this.source = new Qu(e), this.mipmaps = [], this.mapping = t, this.channel = 0, this.wrapS = n, this.wrapT = a, this.magFilter = s, this.minFilter = c, this.anisotropy = h, this.format = f, this.internalFormat = null, this.type = p, this.offset = new Ge(0, 0), this.repeat = new Ge(1, 1), this.center = new Ge(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new cn(), this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, this.encoding = g, this.userData = {}, this.version = 0, this.onUpdate = null, this.isRenderTargetTexture = !1, this.needsPMREMUpdate = !1;
  }
  get image() {
    return this.source.data;
  }
  set image(e = null) {
    this.source.data = e;
  }
  updateMatrix() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.name = e.name, this.source = e.source, this.mipmaps = e.mipmaps.slice(0), this.mapping = e.mapping, this.channel = e.channel, this.wrapS = e.wrapS, this.wrapT = e.wrapT, this.magFilter = e.magFilter, this.minFilter = e.minFilter, this.anisotropy = e.anisotropy, this.format = e.format, this.internalFormat = e.internalFormat, this.type = e.type, this.offset.copy(e.offset), this.repeat.copy(e.repeat), this.center.copy(e.center), this.rotation = e.rotation, this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrix.copy(e.matrix), this.generateMipmaps = e.generateMipmaps, this.premultiplyAlpha = e.premultiplyAlpha, this.flipY = e.flipY, this.unpackAlignment = e.unpackAlignment, this.encoding = e.encoding, this.userData = JSON.parse(JSON.stringify(e.userData)), this.needsUpdate = !0, this;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.textures[this.uuid] !== void 0)
      return e.textures[this.uuid];
    const n = {
      metadata: {
        version: 4.5,
        type: "Texture",
        generator: "Texture.toJSON"
      },
      uuid: this.uuid,
      name: this.name,
      image: this.source.toJSON(e).uuid,
      mapping: this.mapping,
      channel: this.channel,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      internalFormat: this.internalFormat,
      type: this.type,
      encoding: this.encoding,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      generateMipmaps: this.generateMipmaps,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };
    return Object.keys(this.userData).length > 0 && (n.userData = this.userData), t || (e.textures[this.uuid] = n), n;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  transformUv(e) {
    if (this.mapping !== Ig)
      return e;
    if (e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1)
      switch (this.wrapS) {
        case op:
          e.x = e.x - Math.floor(e.x);
          break;
        case mr:
          e.x = e.x < 0 ? 0 : 1;
          break;
        case lp:
          Math.abs(Math.floor(e.x) % 2) === 1 ? e.x = Math.ceil(e.x) - e.x : e.x = e.x - Math.floor(e.x);
          break;
      }
    if (e.y < 0 || e.y > 1)
      switch (this.wrapT) {
        case op:
          e.y = e.y - Math.floor(e.y);
          break;
        case mr:
          e.y = e.y < 0 ? 0 : 1;
          break;
        case lp:
          Math.abs(Math.floor(e.y) % 2) === 1 ? e.y = Math.ceil(e.y) - e.y : e.y = e.y - Math.floor(e.y);
          break;
      }
    return this.flipY && (e.y = 1 - e.y), e;
  }
  set needsUpdate(e) {
    e === !0 && (this.version++, this.source.needsUpdate = !0);
  }
}
pi.DEFAULT_IMAGE = null;
pi.DEFAULT_MAPPING = Ig;
pi.DEFAULT_ANISOTROPY = 1;
class Un {
  constructor(e = 0, t = 0, n = 0, a = 1) {
    Un.prototype.isVector4 = !0, this.x = e, this.y = t, this.z = n, this.w = a;
  }
  get width() {
    return this.z;
  }
  set width(e) {
    this.z = e;
  }
  get height() {
    return this.w;
  }
  set height(e) {
    this.w = e;
  }
  set(e, t, n, a) {
    return this.x = e, this.y = t, this.z = n, this.w = a, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this.w = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setZ(e) {
    return this.z = e, this;
  }
  setW(e) {
    return this.w = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      case 3:
        this.w = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this.w = e.w !== void 0 ? e.w : 1, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this.w += e.w, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this.w += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this.w = e.w + t.w, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this.w += e.w * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this.w -= e.w, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this.w -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this.w = e.w - t.w, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this.w *= e.w, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this;
  }
  applyMatrix4(e) {
    const t = this.x, n = this.y, a = this.z, s = this.w, c = e.elements;
    return this.x = c[0] * t + c[4] * n + c[8] * a + c[12] * s, this.y = c[1] * t + c[5] * n + c[9] * a + c[13] * s, this.z = c[2] * t + c[6] * n + c[10] * a + c[14] * s, this.w = c[3] * t + c[7] * n + c[11] * a + c[15] * s, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  setAxisAngleFromQuaternion(e) {
    this.w = 2 * Math.acos(e.w);
    const t = Math.sqrt(1 - e.w * e.w);
    return t < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = e.x / t, this.y = e.y / t, this.z = e.z / t), this;
  }
  setAxisAngleFromRotationMatrix(e) {
    let t, n, a, s;
    const p = e.elements, h = p[0], g = p[4], _ = p[8], x = p[1], M = p[5], E = p[9], A = p[2], T = p[6], b = p[10];
    if (Math.abs(g - x) < 0.01 && Math.abs(_ - A) < 0.01 && Math.abs(E - T) < 0.01) {
      if (Math.abs(g + x) < 0.1 && Math.abs(_ + A) < 0.1 && Math.abs(E + T) < 0.1 && Math.abs(h + M + b - 3) < 0.1)
        return this.set(1, 0, 0, 0), this;
      t = Math.PI;
      const R = (h + 1) / 2, U = (M + 1) / 2, F = (b + 1) / 2, V = (g + x) / 4, k = (_ + A) / 4, G = (E + T) / 4;
      return R > U && R > F ? R < 0.01 ? (n = 0, a = 0.707106781, s = 0.707106781) : (n = Math.sqrt(R), a = V / n, s = k / n) : U > F ? U < 0.01 ? (n = 0.707106781, a = 0, s = 0.707106781) : (a = Math.sqrt(U), n = V / a, s = G / a) : F < 0.01 ? (n = 0.707106781, a = 0.707106781, s = 0) : (s = Math.sqrt(F), n = k / s, a = G / s), this.set(n, a, s, t), this;
    }
    let L = Math.sqrt((T - E) * (T - E) + (_ - A) * (_ - A) + (x - g) * (x - g));
    return Math.abs(L) < 1e-3 && (L = 1), this.x = (T - E) / L, this.y = (_ - A) / L, this.z = (x - g) / L, this.w = Math.acos((h + M + b - 1) / 2), this;
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this.w = Math.min(this.w, e.w), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this.w = Math.max(this.w, e.w), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this.w = Math.max(e.w, Math.min(t.w, this.w)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this.w = Math.max(e, Math.min(t, this.w)), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
  }
  roundToZero() {
    return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this.w += (e.w - this.w) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this.w = e.w + (t.w - e.w) * n, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this.w = e[t + 3], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e[t + 3] = this.w, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this.w = e.getW(t), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z, yield this.w;
  }
}
class Ga extends zo {
  constructor(e = 1, t = 1, n = {}) {
    super(), this.isWebGLRenderTarget = !0, this.width = e, this.height = t, this.depth = 1, this.scissor = new Un(0, 0, e, t), this.scissorTest = !1, this.viewport = new Un(0, 0, e, t);
    const a = { width: e, height: t, depth: 1 };
    this.texture = new pi(a, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.encoding), this.texture.isRenderTargetTexture = !0, this.texture.flipY = !1, this.texture.generateMipmaps = n.generateMipmaps !== void 0 ? n.generateMipmaps : !1, this.texture.internalFormat = n.internalFormat !== void 0 ? n.internalFormat : null, this.texture.minFilter = n.minFilter !== void 0 ? n.minFilter : ai, this.depthBuffer = n.depthBuffer !== void 0 ? n.depthBuffer : !0, this.stencilBuffer = n.stencilBuffer !== void 0 ? n.stencilBuffer : !1, this.depthTexture = n.depthTexture !== void 0 ? n.depthTexture : null, this.samples = n.samples !== void 0 ? n.samples : 0;
  }
  setSize(e, t, n = 1) {
    (this.width !== e || this.height !== t || this.depth !== n) && (this.width = e, this.height = t, this.depth = n, this.texture.image.width = e, this.texture.image.height = t, this.texture.image.depth = n, this.dispose()), this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.width = e.width, this.height = e.height, this.depth = e.depth, this.viewport.copy(e.viewport), this.texture = e.texture.clone(), this.texture.isRenderTargetTexture = !0;
    const t = Object.assign({}, e.texture.image);
    return this.texture.source = new Qu(t), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.samples = e.samples, this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
class Bg extends pi {
  constructor(e = null, t = 1, n = 1, a = 1) {
    super(null), this.isDataArrayTexture = !0, this.image = { data: e, width: t, height: n, depth: a }, this.magFilter = bi, this.minFilter = bi, this.wrapR = mr, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
class zL extends Ga {
  constructor(e = 1, t = 1, n = 1) {
    super(e, t), this.isWebGLArrayRenderTarget = !0, this.depth = n, this.texture = new Bg(null, e, t, n), this.texture.isRenderTargetTexture = !0;
  }
}
class eS extends pi {
  constructor(e = null, t = 1, n = 1, a = 1) {
    super(null), this.isData3DTexture = !0, this.image = { data: e, width: t, height: n, depth: a }, this.magFilter = bi, this.minFilter = bi, this.wrapR = mr, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
class OL extends Ga {
  constructor(e = 1, t = 1, n = 1) {
    super(e, t), this.isWebGL3DRenderTarget = !0, this.depth = n, this.texture = new eS(null, e, t, n), this.texture.isRenderTargetTexture = !0;
  }
}
class IL extends Ga {
  constructor(e = 1, t = 1, n = 1, a = {}) {
    super(e, t, a), this.isWebGLMultipleRenderTargets = !0;
    const s = this.texture;
    this.texture = [];
    for (let c = 0; c < n; c++)
      this.texture[c] = s.clone(), this.texture[c].isRenderTargetTexture = !0;
  }
  setSize(e, t, n = 1) {
    if (this.width !== e || this.height !== t || this.depth !== n) {
      this.width = e, this.height = t, this.depth = n;
      for (let a = 0, s = this.texture.length; a < s; a++)
        this.texture[a].image.width = e, this.texture[a].image.height = t, this.texture[a].image.depth = n;
      this.dispose();
    }
    return this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t), this;
  }
  copy(e) {
    this.dispose(), this.width = e.width, this.height = e.height, this.depth = e.depth, this.viewport.set(0, 0, this.width, this.height), this.scissor.set(0, 0, this.width, this.height), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.texture.length = 0;
    for (let t = 0, n = e.texture.length; t < n; t++)
      this.texture[t] = e.texture[t].clone(), this.texture[t].isRenderTargetTexture = !0;
    return this;
  }
}
class Qr {
  constructor(e = 0, t = 0, n = 0, a = 1) {
    this.isQuaternion = !0, this._x = e, this._y = t, this._z = n, this._w = a;
  }
  static slerpFlat(e, t, n, a, s, c, f) {
    let p = n[a + 0], h = n[a + 1], g = n[a + 2], _ = n[a + 3];
    const x = s[c + 0], M = s[c + 1], E = s[c + 2], A = s[c + 3];
    if (f === 0) {
      e[t + 0] = p, e[t + 1] = h, e[t + 2] = g, e[t + 3] = _;
      return;
    }
    if (f === 1) {
      e[t + 0] = x, e[t + 1] = M, e[t + 2] = E, e[t + 3] = A;
      return;
    }
    if (_ !== A || p !== x || h !== M || g !== E) {
      let T = 1 - f;
      const b = p * x + h * M + g * E + _ * A, L = b >= 0 ? 1 : -1, R = 1 - b * b;
      if (R > Number.EPSILON) {
        const F = Math.sqrt(R), V = Math.atan2(F, b * L);
        T = Math.sin(T * V) / F, f = Math.sin(f * V) / F;
      }
      const U = f * L;
      if (p = p * T + x * U, h = h * T + M * U, g = g * T + E * U, _ = _ * T + A * U, T === 1 - f) {
        const F = 1 / Math.sqrt(p * p + h * h + g * g + _ * _);
        p *= F, h *= F, g *= F, _ *= F;
      }
    }
    e[t] = p, e[t + 1] = h, e[t + 2] = g, e[t + 3] = _;
  }
  static multiplyQuaternionsFlat(e, t, n, a, s, c) {
    const f = n[a], p = n[a + 1], h = n[a + 2], g = n[a + 3], _ = s[c], x = s[c + 1], M = s[c + 2], E = s[c + 3];
    return e[t] = f * E + g * _ + p * M - h * x, e[t + 1] = p * E + g * x + h * _ - f * M, e[t + 2] = h * E + g * M + f * x - p * _, e[t + 3] = g * E - f * _ - p * x - h * M, e;
  }
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  get w() {
    return this._w;
  }
  set w(e) {
    this._w = e, this._onChangeCallback();
  }
  set(e, t, n, a) {
    return this._x = e, this._y = t, this._z = n, this._w = a, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  copy(e) {
    return this._x = e.x, this._y = e.y, this._z = e.z, this._w = e.w, this._onChangeCallback(), this;
  }
  setFromEuler(e, t) {
    const n = e._x, a = e._y, s = e._z, c = e._order, f = Math.cos, p = Math.sin, h = f(n / 2), g = f(a / 2), _ = f(s / 2), x = p(n / 2), M = p(a / 2), E = p(s / 2);
    switch (c) {
      case "XYZ":
        this._x = x * g * _ + h * M * E, this._y = h * M * _ - x * g * E, this._z = h * g * E + x * M * _, this._w = h * g * _ - x * M * E;
        break;
      case "YXZ":
        this._x = x * g * _ + h * M * E, this._y = h * M * _ - x * g * E, this._z = h * g * E - x * M * _, this._w = h * g * _ + x * M * E;
        break;
      case "ZXY":
        this._x = x * g * _ - h * M * E, this._y = h * M * _ + x * g * E, this._z = h * g * E + x * M * _, this._w = h * g * _ - x * M * E;
        break;
      case "ZYX":
        this._x = x * g * _ - h * M * E, this._y = h * M * _ + x * g * E, this._z = h * g * E - x * M * _, this._w = h * g * _ + x * M * E;
        break;
      case "YZX":
        this._x = x * g * _ + h * M * E, this._y = h * M * _ + x * g * E, this._z = h * g * E - x * M * _, this._w = h * g * _ - x * M * E;
        break;
      case "XZY":
        this._x = x * g * _ - h * M * E, this._y = h * M * _ - x * g * E, this._z = h * g * E + x * M * _, this._w = h * g * _ + x * M * E;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + c);
    }
    return t !== !1 && this._onChangeCallback(), this;
  }
  setFromAxisAngle(e, t) {
    const n = t / 2, a = Math.sin(n);
    return this._x = e.x * a, this._y = e.y * a, this._z = e.z * a, this._w = Math.cos(n), this._onChangeCallback(), this;
  }
  setFromRotationMatrix(e) {
    const t = e.elements, n = t[0], a = t[4], s = t[8], c = t[1], f = t[5], p = t[9], h = t[2], g = t[6], _ = t[10], x = n + f + _;
    if (x > 0) {
      const M = 0.5 / Math.sqrt(x + 1);
      this._w = 0.25 / M, this._x = (g - p) * M, this._y = (s - h) * M, this._z = (c - a) * M;
    } else if (n > f && n > _) {
      const M = 2 * Math.sqrt(1 + n - f - _);
      this._w = (g - p) / M, this._x = 0.25 * M, this._y = (a + c) / M, this._z = (s + h) / M;
    } else if (f > _) {
      const M = 2 * Math.sqrt(1 + f - n - _);
      this._w = (s - h) / M, this._x = (a + c) / M, this._y = 0.25 * M, this._z = (p + g) / M;
    } else {
      const M = 2 * Math.sqrt(1 + _ - n - f);
      this._w = (c - a) / M, this._x = (s + h) / M, this._y = (p + g) / M, this._z = 0.25 * M;
    }
    return this._onChangeCallback(), this;
  }
  setFromUnitVectors(e, t) {
    let n = e.dot(t) + 1;
    return n < Number.EPSILON ? (n = 0, Math.abs(e.x) > Math.abs(e.z) ? (this._x = -e.y, this._y = e.x, this._z = 0, this._w = n) : (this._x = 0, this._y = -e.z, this._z = e.y, this._w = n)) : (this._x = e.y * t.z - e.z * t.y, this._y = e.z * t.x - e.x * t.z, this._z = e.x * t.y - e.y * t.x, this._w = n), this.normalize();
  }
  angleTo(e) {
    return 2 * Math.acos(Math.abs(hi(this.dot(e), -1, 1)));
  }
  rotateTowards(e, t) {
    const n = this.angleTo(e);
    if (n === 0)
      return this;
    const a = Math.min(1, t / n);
    return this.slerp(e, a), this;
  }
  identity() {
    return this.set(0, 0, 0, 1);
  }
  invert() {
    return this.conjugate();
  }
  conjugate() {
    return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
  }
  dot(e) {
    return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w;
  }
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  normalize() {
    let e = this.length();
    return e === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (e = 1 / e, this._x = this._x * e, this._y = this._y * e, this._z = this._z * e, this._w = this._w * e), this._onChangeCallback(), this;
  }
  multiply(e) {
    return this.multiplyQuaternions(this, e);
  }
  premultiply(e) {
    return this.multiplyQuaternions(e, this);
  }
  multiplyQuaternions(e, t) {
    const n = e._x, a = e._y, s = e._z, c = e._w, f = t._x, p = t._y, h = t._z, g = t._w;
    return this._x = n * g + c * f + a * h - s * p, this._y = a * g + c * p + s * f - n * h, this._z = s * g + c * h + n * p - a * f, this._w = c * g - n * f - a * p - s * h, this._onChangeCallback(), this;
  }
  slerp(e, t) {
    if (t === 0)
      return this;
    if (t === 1)
      return this.copy(e);
    const n = this._x, a = this._y, s = this._z, c = this._w;
    let f = c * e._w + n * e._x + a * e._y + s * e._z;
    if (f < 0 ? (this._w = -e._w, this._x = -e._x, this._y = -e._y, this._z = -e._z, f = -f) : this.copy(e), f >= 1)
      return this._w = c, this._x = n, this._y = a, this._z = s, this;
    const p = 1 - f * f;
    if (p <= Number.EPSILON) {
      const M = 1 - t;
      return this._w = M * c + t * this._w, this._x = M * n + t * this._x, this._y = M * a + t * this._y, this._z = M * s + t * this._z, this.normalize(), this._onChangeCallback(), this;
    }
    const h = Math.sqrt(p), g = Math.atan2(h, f), _ = Math.sin((1 - t) * g) / h, x = Math.sin(t * g) / h;
    return this._w = c * _ + this._w * x, this._x = n * _ + this._x * x, this._y = a * _ + this._y * x, this._z = s * _ + this._z * x, this._onChangeCallback(), this;
  }
  slerpQuaternions(e, t, n) {
    return this.copy(e).slerp(t, n);
  }
  random() {
    const e = Math.random(), t = Math.sqrt(1 - e), n = Math.sqrt(e), a = 2 * Math.PI * Math.random(), s = 2 * Math.PI * Math.random();
    return this.set(
      t * Math.cos(a),
      n * Math.sin(s),
      n * Math.cos(s),
      t * Math.sin(a)
    );
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w;
  }
  fromArray(e, t = 0) {
    return this._x = e[t], this._y = e[t + 1], this._z = e[t + 2], this._w = e[t + 3], this._onChangeCallback(), this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._w, e;
  }
  fromBufferAttribute(e, t) {
    return this._x = e.getX(t), this._y = e.getY(t), this._z = e.getZ(t), this._w = e.getW(t), this;
  }
  toJSON() {
    return this.toArray();
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._w;
  }
}
class j {
  constructor(e = 0, t = 0, n = 0) {
    j.prototype.isVector3 = !0, this.x = e, this.y = t, this.z = n;
  }
  set(e, t, n) {
    return n === void 0 && (n = this.z), this.x = e, this.y = t, this.z = n, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setZ(e) {
    return this.z = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this;
  }
  multiplyVectors(e, t) {
    return this.x = e.x * t.x, this.y = e.y * t.y, this.z = e.z * t.z, this;
  }
  applyEuler(e) {
    return this.applyQuaternion(Ab.setFromEuler(e));
  }
  applyAxisAngle(e, t) {
    return this.applyQuaternion(Ab.setFromAxisAngle(e, t));
  }
  applyMatrix3(e) {
    const t = this.x, n = this.y, a = this.z, s = e.elements;
    return this.x = s[0] * t + s[3] * n + s[6] * a, this.y = s[1] * t + s[4] * n + s[7] * a, this.z = s[2] * t + s[5] * n + s[8] * a, this;
  }
  applyNormalMatrix(e) {
    return this.applyMatrix3(e).normalize();
  }
  applyMatrix4(e) {
    const t = this.x, n = this.y, a = this.z, s = e.elements, c = 1 / (s[3] * t + s[7] * n + s[11] * a + s[15]);
    return this.x = (s[0] * t + s[4] * n + s[8] * a + s[12]) * c, this.y = (s[1] * t + s[5] * n + s[9] * a + s[13]) * c, this.z = (s[2] * t + s[6] * n + s[10] * a + s[14]) * c, this;
  }
  applyQuaternion(e) {
    const t = this.x, n = this.y, a = this.z, s = e.x, c = e.y, f = e.z, p = e.w, h = p * t + c * a - f * n, g = p * n + f * t - s * a, _ = p * a + s * n - c * t, x = -s * t - c * n - f * a;
    return this.x = h * p + x * -s + g * -f - _ * -c, this.y = g * p + x * -c + _ * -s - h * -f, this.z = _ * p + x * -f + h * -c - g * -s, this;
  }
  project(e) {
    return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix);
  }
  unproject(e) {
    return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld);
  }
  transformDirection(e) {
    const t = this.x, n = this.y, a = this.z, s = e.elements;
    return this.x = s[0] * t + s[4] * n + s[8] * a, this.y = s[1] * t + s[5] * n + s[9] * a, this.z = s[2] * t + s[6] * n + s[10] * a, this.normalize();
  }
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this.z /= e.z, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
  }
  roundToZero() {
    return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z;
  }
  // TODO lengthSquared?
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this;
  }
  cross(e) {
    return this.crossVectors(this, e);
  }
  crossVectors(e, t) {
    const n = e.x, a = e.y, s = e.z, c = t.x, f = t.y, p = t.z;
    return this.x = a * p - s * f, this.y = s * c - n * p, this.z = n * f - a * c, this;
  }
  projectOnVector(e) {
    const t = e.lengthSq();
    if (t === 0)
      return this.set(0, 0, 0);
    const n = e.dot(this) / t;
    return this.copy(e).multiplyScalar(n);
  }
  projectOnPlane(e) {
    return m_.copy(this).projectOnVector(e), this.sub(m_);
  }
  reflect(e) {
    return this.sub(m_.copy(e).multiplyScalar(2 * this.dot(e)));
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0)
      return Math.PI / 2;
    const n = this.dot(e) / t;
    return Math.acos(hi(n, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x, n = this.y - e.y, a = this.z - e.z;
    return t * t + n * n + a * a;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z);
  }
  setFromSpherical(e) {
    return this.setFromSphericalCoords(e.radius, e.phi, e.theta);
  }
  setFromSphericalCoords(e, t, n) {
    const a = Math.sin(t) * e;
    return this.x = a * Math.sin(n), this.y = Math.cos(t) * e, this.z = a * Math.cos(n), this;
  }
  setFromCylindrical(e) {
    return this.setFromCylindricalCoords(e.radius, e.theta, e.y);
  }
  setFromCylindricalCoords(e, t, n) {
    return this.x = e * Math.sin(t), this.y = n, this.z = e * Math.cos(t), this;
  }
  setFromMatrixPosition(e) {
    const t = e.elements;
    return this.x = t[12], this.y = t[13], this.z = t[14], this;
  }
  setFromMatrixScale(e) {
    const t = this.setFromMatrixColumn(e, 0).length(), n = this.setFromMatrixColumn(e, 1).length(), a = this.setFromMatrixColumn(e, 2).length();
    return this.x = t, this.y = n, this.z = a, this;
  }
  setFromMatrixColumn(e, t) {
    return this.fromArray(e.elements, t * 4);
  }
  setFromMatrix3Column(e, t) {
    return this.fromArray(e.elements, t * 3);
  }
  setFromEuler(e) {
    return this.x = e._x, this.y = e._y, this.z = e._z, this;
  }
  setFromColor(e) {
    return this.x = e.r, this.y = e.g, this.z = e.b, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
  }
  randomDirection() {
    const e = (Math.random() - 0.5) * 2, t = Math.random() * Math.PI * 2, n = Math.sqrt(1 - e ** 2);
    return this.x = n * Math.cos(t), this.y = n * Math.sin(t), this.z = e, this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z;
  }
}
const m_ = /* @__PURE__ */ new j(), Ab = /* @__PURE__ */ new Qr();
class Gs {
  constructor(e = new j(1 / 0, 1 / 0, 1 / 0), t = new j(-1 / 0, -1 / 0, -1 / 0)) {
    this.isBox3 = !0, this.min = e, this.max = t;
  }
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  setFromArray(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t += 3)
      this.expandByPoint(bo.fromArray(e, t));
    return this;
  }
  setFromBufferAttribute(e) {
    this.makeEmpty();
    for (let t = 0, n = e.count; t < n; t++)
      this.expandByPoint(bo.fromBufferAttribute(e, t));
    return this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t++)
      this.expandByPoint(e[t]);
    return this;
  }
  setFromCenterAndSize(e, t) {
    const n = bo.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
  }
  setFromObject(e, t = !1) {
    return this.makeEmpty(), this.expandByObject(e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  makeEmpty() {
    return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  expandByObject(e, t = !1) {
    if (e.updateWorldMatrix(!1, !1), e.boundingBox !== void 0)
      e.boundingBox === null && e.computeBoundingBox(), wf.copy(e.boundingBox), wf.applyMatrix4(e.matrixWorld), this.union(wf);
    else {
      const a = e.geometry;
      if (a !== void 0)
        if (t && a.attributes !== void 0 && a.attributes.position !== void 0) {
          const s = a.attributes.position;
          for (let c = 0, f = s.count; c < f; c++)
            bo.fromBufferAttribute(s, c).applyMatrix4(e.matrixWorld), this.expandByPoint(bo);
        } else
          a.boundingBox === null && a.computeBoundingBox(), wf.copy(a.boundingBox), wf.applyMatrix4(e.matrixWorld), this.union(wf);
    }
    const n = e.children;
    for (let a = 0, s = n.length; a < s; a++)
      this.expandByObject(n[a], t);
    return this;
  }
  containsPoint(e) {
    return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y || e.z < this.min.z || e.z > this.max.z);
  }
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z;
  }
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y),
      (e.z - this.min.z) / (this.max.z - this.min.z)
    );
  }
  intersectsBox(e) {
    return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y || e.max.z < this.min.z || e.min.z > this.max.z);
  }
  intersectsSphere(e) {
    return this.clampPoint(e.center, bo), bo.distanceToSquared(e.center) <= e.radius * e.radius;
  }
  intersectsPlane(e) {
    let t, n;
    return e.normal.x > 0 ? (t = e.normal.x * this.min.x, n = e.normal.x * this.max.x) : (t = e.normal.x * this.max.x, n = e.normal.x * this.min.x), e.normal.y > 0 ? (t += e.normal.y * this.min.y, n += e.normal.y * this.max.y) : (t += e.normal.y * this.max.y, n += e.normal.y * this.min.y), e.normal.z > 0 ? (t += e.normal.z * this.min.z, n += e.normal.z * this.max.z) : (t += e.normal.z * this.max.z, n += e.normal.z * this.min.z), t <= -e.constant && n >= -e.constant;
  }
  intersectsTriangle(e) {
    if (this.isEmpty())
      return !1;
    this.getCenter(Oh), Rv.subVectors(this.max, Oh), Tf.subVectors(e.a, Oh), Cf.subVectors(e.b, Oh), Af.subVectors(e.c, Oh), Ll.subVectors(Cf, Tf), Dl.subVectors(Af, Cf), Iu.subVectors(Tf, Af);
    let t = [
      0,
      -Ll.z,
      Ll.y,
      0,
      -Dl.z,
      Dl.y,
      0,
      -Iu.z,
      Iu.y,
      Ll.z,
      0,
      -Ll.x,
      Dl.z,
      0,
      -Dl.x,
      Iu.z,
      0,
      -Iu.x,
      -Ll.y,
      Ll.x,
      0,
      -Dl.y,
      Dl.x,
      0,
      -Iu.y,
      Iu.x,
      0
    ];
    return !v_(t, Tf, Cf, Af, Rv) || (t = [1, 0, 0, 0, 1, 0, 0, 0, 1], !v_(t, Tf, Cf, Af, Rv)) ? !1 : (Lv.crossVectors(Ll, Dl), t = [Lv.x, Lv.y, Lv.z], v_(t, Tf, Cf, Af, Rv));
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, bo).distanceTo(e);
  }
  getBoundingSphere(e) {
    return this.isEmpty() ? e.makeEmpty() : (this.getCenter(e.center), e.radius = this.getSize(bo).length() * 0.5), e;
  }
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  applyMatrix4(e) {
    return this.isEmpty() ? this : (Mo[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e), Mo[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e), Mo[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e), Mo[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e), Mo[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e), Mo[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e), Mo[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e), Mo[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e), this.setFromPoints(Mo), this);
  }
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const Mo = [
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j()
], bo = /* @__PURE__ */ new j(), wf = /* @__PURE__ */ new Gs(), Tf = /* @__PURE__ */ new j(), Cf = /* @__PURE__ */ new j(), Af = /* @__PURE__ */ new j(), Ll = /* @__PURE__ */ new j(), Dl = /* @__PURE__ */ new j(), Iu = /* @__PURE__ */ new j(), Oh = /* @__PURE__ */ new j(), Rv = /* @__PURE__ */ new j(), Lv = /* @__PURE__ */ new j(), Fu = /* @__PURE__ */ new j();
function v_(u, e, t, n, a) {
  for (let s = 0, c = u.length - 3; s <= c; s += 3) {
    Fu.fromArray(u, s);
    const f = a.x * Math.abs(Fu.x) + a.y * Math.abs(Fu.y) + a.z * Math.abs(Fu.z), p = e.dot(Fu), h = t.dot(Fu), g = n.dot(Fu);
    if (Math.max(-Math.max(p, h, g), Math.min(p, h, g)) > f)
      return !1;
  }
  return !0;
}
const FL = /* @__PURE__ */ new Gs(), Ih = /* @__PURE__ */ new j(), g_ = /* @__PURE__ */ new j();
class Ws {
  constructor(e = new j(), t = -1) {
    this.center = e, this.radius = t;
  }
  set(e, t) {
    return this.center.copy(e), this.radius = t, this;
  }
  setFromPoints(e, t) {
    const n = this.center;
    t !== void 0 ? n.copy(t) : FL.setFromPoints(e).getCenter(n);
    let a = 0;
    for (let s = 0, c = e.length; s < c; s++)
      a = Math.max(a, n.distanceToSquared(e[s]));
    return this.radius = Math.sqrt(a), this;
  }
  copy(e) {
    return this.center.copy(e.center), this.radius = e.radius, this;
  }
  isEmpty() {
    return this.radius < 0;
  }
  makeEmpty() {
    return this.center.set(0, 0, 0), this.radius = -1, this;
  }
  containsPoint(e) {
    return e.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  distanceToPoint(e) {
    return e.distanceTo(this.center) - this.radius;
  }
  intersectsSphere(e) {
    const t = this.radius + e.radius;
    return e.center.distanceToSquared(this.center) <= t * t;
  }
  intersectsBox(e) {
    return e.intersectsSphere(this);
  }
  intersectsPlane(e) {
    return Math.abs(e.distanceToPoint(this.center)) <= this.radius;
  }
  clampPoint(e, t) {
    const n = this.center.distanceToSquared(e);
    return t.copy(e), n > this.radius * this.radius && (t.sub(this.center).normalize(), t.multiplyScalar(this.radius).add(this.center)), t;
  }
  getBoundingBox(e) {
    return this.isEmpty() ? (e.makeEmpty(), e) : (e.set(this.center, this.center), e.expandByScalar(this.radius), e);
  }
  applyMatrix4(e) {
    return this.center.applyMatrix4(e), this.radius = this.radius * e.getMaxScaleOnAxis(), this;
  }
  translate(e) {
    return this.center.add(e), this;
  }
  expandByPoint(e) {
    if (this.isEmpty())
      return this.center.copy(e), this.radius = 0, this;
    Ih.subVectors(e, this.center);
    const t = Ih.lengthSq();
    if (t > this.radius * this.radius) {
      const n = Math.sqrt(t), a = (n - this.radius) * 0.5;
      this.center.addScaledVector(Ih, a / n), this.radius += a;
    }
    return this;
  }
  union(e) {
    return e.isEmpty() ? this : this.isEmpty() ? (this.copy(e), this) : (this.center.equals(e.center) === !0 ? this.radius = Math.max(this.radius, e.radius) : (g_.subVectors(e.center, this.center).setLength(e.radius), this.expandByPoint(Ih.copy(e.center).add(g_)), this.expandByPoint(Ih.copy(e.center).sub(g_))), this);
  }
  equals(e) {
    return e.center.equals(this.center) && e.radius === this.radius;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const Eo = /* @__PURE__ */ new j(), y_ = /* @__PURE__ */ new j(), Dv = /* @__PURE__ */ new j(), Pl = /* @__PURE__ */ new j(), __ = /* @__PURE__ */ new j(), Pv = /* @__PURE__ */ new j(), x_ = /* @__PURE__ */ new j();
class Ep {
  constructor(e = new j(), t = new j(0, 0, -1)) {
    this.origin = e, this.direction = t;
  }
  set(e, t) {
    return this.origin.copy(e), this.direction.copy(t), this;
  }
  copy(e) {
    return this.origin.copy(e.origin), this.direction.copy(e.direction), this;
  }
  at(e, t) {
    return t.copy(this.origin).addScaledVector(this.direction, e);
  }
  lookAt(e) {
    return this.direction.copy(e).sub(this.origin).normalize(), this;
  }
  recast(e) {
    return this.origin.copy(this.at(e, Eo)), this;
  }
  closestPointToPoint(e, t) {
    t.subVectors(e, this.origin);
    const n = t.dot(this.direction);
    return n < 0 ? t.copy(this.origin) : t.copy(this.origin).addScaledVector(this.direction, n);
  }
  distanceToPoint(e) {
    return Math.sqrt(this.distanceSqToPoint(e));
  }
  distanceSqToPoint(e) {
    const t = Eo.subVectors(e, this.origin).dot(this.direction);
    return t < 0 ? this.origin.distanceToSquared(e) : (Eo.copy(this.origin).addScaledVector(this.direction, t), Eo.distanceToSquared(e));
  }
  distanceSqToSegment(e, t, n, a) {
    y_.copy(e).add(t).multiplyScalar(0.5), Dv.copy(t).sub(e).normalize(), Pl.copy(this.origin).sub(y_);
    const s = e.distanceTo(t) * 0.5, c = -this.direction.dot(Dv), f = Pl.dot(this.direction), p = -Pl.dot(Dv), h = Pl.lengthSq(), g = Math.abs(1 - c * c);
    let _, x, M, E;
    if (g > 0)
      if (_ = c * p - f, x = c * f - p, E = s * g, _ >= 0)
        if (x >= -E)
          if (x <= E) {
            const A = 1 / g;
            _ *= A, x *= A, M = _ * (_ + c * x + 2 * f) + x * (c * _ + x + 2 * p) + h;
          } else
            x = s, _ = Math.max(0, -(c * x + f)), M = -_ * _ + x * (x + 2 * p) + h;
        else
          x = -s, _ = Math.max(0, -(c * x + f)), M = -_ * _ + x * (x + 2 * p) + h;
      else
        x <= -E ? (_ = Math.max(0, -(-c * s + f)), x = _ > 0 ? -s : Math.min(Math.max(-s, -p), s), M = -_ * _ + x * (x + 2 * p) + h) : x <= E ? (_ = 0, x = Math.min(Math.max(-s, -p), s), M = x * (x + 2 * p) + h) : (_ = Math.max(0, -(c * s + f)), x = _ > 0 ? s : Math.min(Math.max(-s, -p), s), M = -_ * _ + x * (x + 2 * p) + h);
    else
      x = c > 0 ? -s : s, _ = Math.max(0, -(c * x + f)), M = -_ * _ + x * (x + 2 * p) + h;
    return n && n.copy(this.origin).addScaledVector(this.direction, _), a && a.copy(y_).addScaledVector(Dv, x), M;
  }
  intersectSphere(e, t) {
    Eo.subVectors(e.center, this.origin);
    const n = Eo.dot(this.direction), a = Eo.dot(Eo) - n * n, s = e.radius * e.radius;
    if (a > s)
      return null;
    const c = Math.sqrt(s - a), f = n - c, p = n + c;
    return p < 0 ? null : f < 0 ? this.at(p, t) : this.at(f, t);
  }
  intersectsSphere(e) {
    return this.distanceSqToPoint(e.center) <= e.radius * e.radius;
  }
  distanceToPlane(e) {
    const t = e.normal.dot(this.direction);
    if (t === 0)
      return e.distanceToPoint(this.origin) === 0 ? 0 : null;
    const n = -(this.origin.dot(e.normal) + e.constant) / t;
    return n >= 0 ? n : null;
  }
  intersectPlane(e, t) {
    const n = this.distanceToPlane(e);
    return n === null ? null : this.at(n, t);
  }
  intersectsPlane(e) {
    const t = e.distanceToPoint(this.origin);
    return t === 0 || e.normal.dot(this.direction) * t < 0;
  }
  intersectBox(e, t) {
    let n, a, s, c, f, p;
    const h = 1 / this.direction.x, g = 1 / this.direction.y, _ = 1 / this.direction.z, x = this.origin;
    return h >= 0 ? (n = (e.min.x - x.x) * h, a = (e.max.x - x.x) * h) : (n = (e.max.x - x.x) * h, a = (e.min.x - x.x) * h), g >= 0 ? (s = (e.min.y - x.y) * g, c = (e.max.y - x.y) * g) : (s = (e.max.y - x.y) * g, c = (e.min.y - x.y) * g), n > c || s > a || ((s > n || isNaN(n)) && (n = s), (c < a || isNaN(a)) && (a = c), _ >= 0 ? (f = (e.min.z - x.z) * _, p = (e.max.z - x.z) * _) : (f = (e.max.z - x.z) * _, p = (e.min.z - x.z) * _), n > p || f > a) || ((f > n || n !== n) && (n = f), (p < a || a !== a) && (a = p), a < 0) ? null : this.at(n >= 0 ? n : a, t);
  }
  intersectsBox(e) {
    return this.intersectBox(e, Eo) !== null;
  }
  intersectTriangle(e, t, n, a, s) {
    __.subVectors(t, e), Pv.subVectors(n, e), x_.crossVectors(__, Pv);
    let c = this.direction.dot(x_), f;
    if (c > 0) {
      if (a)
        return null;
      f = 1;
    } else if (c < 0)
      f = -1, c = -c;
    else
      return null;
    Pl.subVectors(this.origin, e);
    const p = f * this.direction.dot(Pv.crossVectors(Pl, Pv));
    if (p < 0)
      return null;
    const h = f * this.direction.dot(__.cross(Pl));
    if (h < 0 || p + h > c)
      return null;
    const g = -f * Pl.dot(x_);
    return g < 0 ? null : this.at(g / c, s);
  }
  applyMatrix4(e) {
    return this.origin.applyMatrix4(e), this.direction.transformDirection(e), this;
  }
  equals(e) {
    return e.origin.equals(this.origin) && e.direction.equals(this.direction);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class Qt {
  constructor() {
    Qt.prototype.isMatrix4 = !0, this.elements = [
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ];
  }
  set(e, t, n, a, s, c, f, p, h, g, _, x, M, E, A, T) {
    const b = this.elements;
    return b[0] = e, b[4] = t, b[8] = n, b[12] = a, b[1] = s, b[5] = c, b[9] = f, b[13] = p, b[2] = h, b[6] = g, b[10] = _, b[14] = x, b[3] = M, b[7] = E, b[11] = A, b[15] = T, this;
  }
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  clone() {
    return new Qt().fromArray(this.elements);
  }
  copy(e) {
    const t = this.elements, n = e.elements;
    return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], t[9] = n[9], t[10] = n[10], t[11] = n[11], t[12] = n[12], t[13] = n[13], t[14] = n[14], t[15] = n[15], this;
  }
  copyPosition(e) {
    const t = this.elements, n = e.elements;
    return t[12] = n[12], t[13] = n[13], t[14] = n[14], this;
  }
  setFromMatrix3(e) {
    const t = e.elements;
    return this.set(
      t[0],
      t[3],
      t[6],
      0,
      t[1],
      t[4],
      t[7],
      0,
      t[2],
      t[5],
      t[8],
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  extractBasis(e, t, n) {
    return e.setFromMatrixColumn(this, 0), t.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this;
  }
  makeBasis(e, t, n) {
    return this.set(
      e.x,
      t.x,
      n.x,
      0,
      e.y,
      t.y,
      n.y,
      0,
      e.z,
      t.z,
      n.z,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  extractRotation(e) {
    const t = this.elements, n = e.elements, a = 1 / Rf.setFromMatrixColumn(e, 0).length(), s = 1 / Rf.setFromMatrixColumn(e, 1).length(), c = 1 / Rf.setFromMatrixColumn(e, 2).length();
    return t[0] = n[0] * a, t[1] = n[1] * a, t[2] = n[2] * a, t[3] = 0, t[4] = n[4] * s, t[5] = n[5] * s, t[6] = n[6] * s, t[7] = 0, t[8] = n[8] * c, t[9] = n[9] * c, t[10] = n[10] * c, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
  }
  makeRotationFromEuler(e) {
    const t = this.elements, n = e.x, a = e.y, s = e.z, c = Math.cos(n), f = Math.sin(n), p = Math.cos(a), h = Math.sin(a), g = Math.cos(s), _ = Math.sin(s);
    if (e.order === "XYZ") {
      const x = c * g, M = c * _, E = f * g, A = f * _;
      t[0] = p * g, t[4] = -p * _, t[8] = h, t[1] = M + E * h, t[5] = x - A * h, t[9] = -f * p, t[2] = A - x * h, t[6] = E + M * h, t[10] = c * p;
    } else if (e.order === "YXZ") {
      const x = p * g, M = p * _, E = h * g, A = h * _;
      t[0] = x + A * f, t[4] = E * f - M, t[8] = c * h, t[1] = c * _, t[5] = c * g, t[9] = -f, t[2] = M * f - E, t[6] = A + x * f, t[10] = c * p;
    } else if (e.order === "ZXY") {
      const x = p * g, M = p * _, E = h * g, A = h * _;
      t[0] = x - A * f, t[4] = -c * _, t[8] = E + M * f, t[1] = M + E * f, t[5] = c * g, t[9] = A - x * f, t[2] = -c * h, t[6] = f, t[10] = c * p;
    } else if (e.order === "ZYX") {
      const x = c * g, M = c * _, E = f * g, A = f * _;
      t[0] = p * g, t[4] = E * h - M, t[8] = x * h + A, t[1] = p * _, t[5] = A * h + x, t[9] = M * h - E, t[2] = -h, t[6] = f * p, t[10] = c * p;
    } else if (e.order === "YZX") {
      const x = c * p, M = c * h, E = f * p, A = f * h;
      t[0] = p * g, t[4] = A - x * _, t[8] = E * _ + M, t[1] = _, t[5] = c * g, t[9] = -f * g, t[2] = -h * g, t[6] = M * _ + E, t[10] = x - A * _;
    } else if (e.order === "XZY") {
      const x = c * p, M = c * h, E = f * p, A = f * h;
      t[0] = p * g, t[4] = -_, t[8] = h * g, t[1] = x * _ + A, t[5] = c * g, t[9] = M * _ - E, t[2] = E * _ - M, t[6] = f * g, t[10] = A * _ + x;
    }
    return t[3] = 0, t[7] = 0, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
  }
  makeRotationFromQuaternion(e) {
    return this.compose(BL, e, HL);
  }
  lookAt(e, t, n) {
    const a = this.elements;
    return ha.subVectors(e, t), ha.lengthSq() === 0 && (ha.z = 1), ha.normalize(), Ul.crossVectors(n, ha), Ul.lengthSq() === 0 && (Math.abs(n.z) === 1 ? ha.x += 1e-4 : ha.z += 1e-4, ha.normalize(), Ul.crossVectors(n, ha)), Ul.normalize(), Uv.crossVectors(ha, Ul), a[0] = Ul.x, a[4] = Uv.x, a[8] = ha.x, a[1] = Ul.y, a[5] = Uv.y, a[9] = ha.y, a[2] = Ul.z, a[6] = Uv.z, a[10] = ha.z, this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const n = e.elements, a = t.elements, s = this.elements, c = n[0], f = n[4], p = n[8], h = n[12], g = n[1], _ = n[5], x = n[9], M = n[13], E = n[2], A = n[6], T = n[10], b = n[14], L = n[3], R = n[7], U = n[11], F = n[15], V = a[0], k = a[4], G = a[8], z = a[12], I = a[1], Q = a[5], te = a[9], $ = a[13], ie = a[2], fe = a[6], Ee = a[10], Te = a[14], W = a[3], ae = a[7], ne = a[11], Se = a[15];
    return s[0] = c * V + f * I + p * ie + h * W, s[4] = c * k + f * Q + p * fe + h * ae, s[8] = c * G + f * te + p * Ee + h * ne, s[12] = c * z + f * $ + p * Te + h * Se, s[1] = g * V + _ * I + x * ie + M * W, s[5] = g * k + _ * Q + x * fe + M * ae, s[9] = g * G + _ * te + x * Ee + M * ne, s[13] = g * z + _ * $ + x * Te + M * Se, s[2] = E * V + A * I + T * ie + b * W, s[6] = E * k + A * Q + T * fe + b * ae, s[10] = E * G + A * te + T * Ee + b * ne, s[14] = E * z + A * $ + T * Te + b * Se, s[3] = L * V + R * I + U * ie + F * W, s[7] = L * k + R * Q + U * fe + F * ae, s[11] = L * G + R * te + U * Ee + F * ne, s[15] = L * z + R * $ + U * Te + F * Se, this;
  }
  multiplyScalar(e) {
    const t = this.elements;
    return t[0] *= e, t[4] *= e, t[8] *= e, t[12] *= e, t[1] *= e, t[5] *= e, t[9] *= e, t[13] *= e, t[2] *= e, t[6] *= e, t[10] *= e, t[14] *= e, t[3] *= e, t[7] *= e, t[11] *= e, t[15] *= e, this;
  }
  determinant() {
    const e = this.elements, t = e[0], n = e[4], a = e[8], s = e[12], c = e[1], f = e[5], p = e[9], h = e[13], g = e[2], _ = e[6], x = e[10], M = e[14], E = e[3], A = e[7], T = e[11], b = e[15];
    return E * (+s * p * _ - a * h * _ - s * f * x + n * h * x + a * f * M - n * p * M) + A * (+t * p * M - t * h * x + s * c * x - a * c * M + a * h * g - s * p * g) + T * (+t * h * _ - t * f * M - s * c * _ + n * c * M + s * f * g - n * h * g) + b * (-a * f * g - t * p * _ + t * f * x + a * c * _ - n * c * x + n * p * g);
  }
  transpose() {
    const e = this.elements;
    let t;
    return t = e[1], e[1] = e[4], e[4] = t, t = e[2], e[2] = e[8], e[8] = t, t = e[6], e[6] = e[9], e[9] = t, t = e[3], e[3] = e[12], e[12] = t, t = e[7], e[7] = e[13], e[13] = t, t = e[11], e[11] = e[14], e[14] = t, this;
  }
  setPosition(e, t, n) {
    const a = this.elements;
    return e.isVector3 ? (a[12] = e.x, a[13] = e.y, a[14] = e.z) : (a[12] = e, a[13] = t, a[14] = n), this;
  }
  invert() {
    const e = this.elements, t = e[0], n = e[1], a = e[2], s = e[3], c = e[4], f = e[5], p = e[6], h = e[7], g = e[8], _ = e[9], x = e[10], M = e[11], E = e[12], A = e[13], T = e[14], b = e[15], L = _ * T * h - A * x * h + A * p * M - f * T * M - _ * p * b + f * x * b, R = E * x * h - g * T * h - E * p * M + c * T * M + g * p * b - c * x * b, U = g * A * h - E * _ * h + E * f * M - c * A * M - g * f * b + c * _ * b, F = E * _ * p - g * A * p - E * f * x + c * A * x + g * f * T - c * _ * T, V = t * L + n * R + a * U + s * F;
    if (V === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const k = 1 / V;
    return e[0] = L * k, e[1] = (A * x * s - _ * T * s - A * a * M + n * T * M + _ * a * b - n * x * b) * k, e[2] = (f * T * s - A * p * s + A * a * h - n * T * h - f * a * b + n * p * b) * k, e[3] = (_ * p * s - f * x * s - _ * a * h + n * x * h + f * a * M - n * p * M) * k, e[4] = R * k, e[5] = (g * T * s - E * x * s + E * a * M - t * T * M - g * a * b + t * x * b) * k, e[6] = (E * p * s - c * T * s - E * a * h + t * T * h + c * a * b - t * p * b) * k, e[7] = (c * x * s - g * p * s + g * a * h - t * x * h - c * a * M + t * p * M) * k, e[8] = U * k, e[9] = (E * _ * s - g * A * s - E * n * M + t * A * M + g * n * b - t * _ * b) * k, e[10] = (c * A * s - E * f * s + E * n * h - t * A * h - c * n * b + t * f * b) * k, e[11] = (g * f * s - c * _ * s - g * n * h + t * _ * h + c * n * M - t * f * M) * k, e[12] = F * k, e[13] = (g * A * a - E * _ * a + E * n * x - t * A * x - g * n * T + t * _ * T) * k, e[14] = (E * f * a - c * A * a - E * n * p + t * A * p + c * n * T - t * f * T) * k, e[15] = (c * _ * a - g * f * a + g * n * p - t * _ * p - c * n * x + t * f * x) * k, this;
  }
  scale(e) {
    const t = this.elements, n = e.x, a = e.y, s = e.z;
    return t[0] *= n, t[4] *= a, t[8] *= s, t[1] *= n, t[5] *= a, t[9] *= s, t[2] *= n, t[6] *= a, t[10] *= s, t[3] *= n, t[7] *= a, t[11] *= s, this;
  }
  getMaxScaleOnAxis() {
    const e = this.elements, t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2], n = e[4] * e[4] + e[5] * e[5] + e[6] * e[6], a = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
    return Math.sqrt(Math.max(t, n, a));
  }
  makeTranslation(e, t, n) {
    return this.set(
      1,
      0,
      0,
      e,
      0,
      1,
      0,
      t,
      0,
      0,
      1,
      n,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationX(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      1,
      0,
      0,
      0,
      0,
      t,
      -n,
      0,
      0,
      n,
      t,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationY(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      0,
      n,
      0,
      0,
      1,
      0,
      0,
      -n,
      0,
      t,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationZ(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      -n,
      0,
      0,
      n,
      t,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationAxis(e, t) {
    const n = Math.cos(t), a = Math.sin(t), s = 1 - n, c = e.x, f = e.y, p = e.z, h = s * c, g = s * f;
    return this.set(
      h * c + n,
      h * f - a * p,
      h * p + a * f,
      0,
      h * f + a * p,
      g * f + n,
      g * p - a * c,
      0,
      h * p - a * f,
      g * p + a * c,
      s * p * p + n,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeScale(e, t, n) {
    return this.set(
      e,
      0,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      0,
      n,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeShear(e, t, n, a, s, c) {
    return this.set(
      1,
      n,
      s,
      0,
      e,
      1,
      c,
      0,
      t,
      a,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  compose(e, t, n) {
    const a = this.elements, s = t._x, c = t._y, f = t._z, p = t._w, h = s + s, g = c + c, _ = f + f, x = s * h, M = s * g, E = s * _, A = c * g, T = c * _, b = f * _, L = p * h, R = p * g, U = p * _, F = n.x, V = n.y, k = n.z;
    return a[0] = (1 - (A + b)) * F, a[1] = (M + U) * F, a[2] = (E - R) * F, a[3] = 0, a[4] = (M - U) * V, a[5] = (1 - (x + b)) * V, a[6] = (T + L) * V, a[7] = 0, a[8] = (E + R) * k, a[9] = (T - L) * k, a[10] = (1 - (x + A)) * k, a[11] = 0, a[12] = e.x, a[13] = e.y, a[14] = e.z, a[15] = 1, this;
  }
  decompose(e, t, n) {
    const a = this.elements;
    let s = Rf.set(a[0], a[1], a[2]).length();
    const c = Rf.set(a[4], a[5], a[6]).length(), f = Rf.set(a[8], a[9], a[10]).length();
    this.determinant() < 0 && (s = -s), e.x = a[12], e.y = a[13], e.z = a[14], ss.copy(this);
    const h = 1 / s, g = 1 / c, _ = 1 / f;
    return ss.elements[0] *= h, ss.elements[1] *= h, ss.elements[2] *= h, ss.elements[4] *= g, ss.elements[5] *= g, ss.elements[6] *= g, ss.elements[8] *= _, ss.elements[9] *= _, ss.elements[10] *= _, t.setFromRotationMatrix(ss), n.x = s, n.y = c, n.z = f, this;
  }
  makePerspective(e, t, n, a, s, c) {
    const f = this.elements, p = 2 * s / (t - e), h = 2 * s / (n - a), g = (t + e) / (t - e), _ = (n + a) / (n - a), x = -(c + s) / (c - s), M = -2 * c * s / (c - s);
    return f[0] = p, f[4] = 0, f[8] = g, f[12] = 0, f[1] = 0, f[5] = h, f[9] = _, f[13] = 0, f[2] = 0, f[6] = 0, f[10] = x, f[14] = M, f[3] = 0, f[7] = 0, f[11] = -1, f[15] = 0, this;
  }
  makeOrthographic(e, t, n, a, s, c) {
    const f = this.elements, p = 1 / (t - e), h = 1 / (n - a), g = 1 / (c - s), _ = (t + e) * p, x = (n + a) * h, M = (c + s) * g;
    return f[0] = 2 * p, f[4] = 0, f[8] = 0, f[12] = -_, f[1] = 0, f[5] = 2 * h, f[9] = 0, f[13] = -x, f[2] = 0, f[6] = 0, f[10] = -2 * g, f[14] = -M, f[3] = 0, f[7] = 0, f[11] = 0, f[15] = 1, this;
  }
  equals(e) {
    const t = this.elements, n = e.elements;
    for (let a = 0; a < 16; a++)
      if (t[a] !== n[a])
        return !1;
    return !0;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 16; n++)
      this.elements[n] = e[n + t];
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.elements;
    return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e[t + 9] = n[9], e[t + 10] = n[10], e[t + 11] = n[11], e[t + 12] = n[12], e[t + 13] = n[13], e[t + 14] = n[14], e[t + 15] = n[15], e;
  }
}
const Rf = /* @__PURE__ */ new j(), ss = /* @__PURE__ */ new Qt(), BL = /* @__PURE__ */ new j(0, 0, 0), HL = /* @__PURE__ */ new j(1, 1, 1), Ul = /* @__PURE__ */ new j(), Uv = /* @__PURE__ */ new j(), ha = /* @__PURE__ */ new j(), Rb = /* @__PURE__ */ new Qt(), Lb = /* @__PURE__ */ new Qr();
class wp {
  constructor(e = 0, t = 0, n = 0, a = wp.DEFAULT_ORDER) {
    this.isEuler = !0, this._x = e, this._y = t, this._z = n, this._order = a;
  }
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  get order() {
    return this._order;
  }
  set order(e) {
    this._order = e, this._onChangeCallback();
  }
  set(e, t, n, a = this._order) {
    return this._x = e, this._y = t, this._z = n, this._order = a, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  copy(e) {
    return this._x = e._x, this._y = e._y, this._z = e._z, this._order = e._order, this._onChangeCallback(), this;
  }
  setFromRotationMatrix(e, t = this._order, n = !0) {
    const a = e.elements, s = a[0], c = a[4], f = a[8], p = a[1], h = a[5], g = a[9], _ = a[2], x = a[6], M = a[10];
    switch (t) {
      case "XYZ":
        this._y = Math.asin(hi(f, -1, 1)), Math.abs(f) < 0.9999999 ? (this._x = Math.atan2(-g, M), this._z = Math.atan2(-c, s)) : (this._x = Math.atan2(x, h), this._z = 0);
        break;
      case "YXZ":
        this._x = Math.asin(-hi(g, -1, 1)), Math.abs(g) < 0.9999999 ? (this._y = Math.atan2(f, M), this._z = Math.atan2(p, h)) : (this._y = Math.atan2(-_, s), this._z = 0);
        break;
      case "ZXY":
        this._x = Math.asin(hi(x, -1, 1)), Math.abs(x) < 0.9999999 ? (this._y = Math.atan2(-_, M), this._z = Math.atan2(-c, h)) : (this._y = 0, this._z = Math.atan2(p, s));
        break;
      case "ZYX":
        this._y = Math.asin(-hi(_, -1, 1)), Math.abs(_) < 0.9999999 ? (this._x = Math.atan2(x, M), this._z = Math.atan2(p, s)) : (this._x = 0, this._z = Math.atan2(-c, h));
        break;
      case "YZX":
        this._z = Math.asin(hi(p, -1, 1)), Math.abs(p) < 0.9999999 ? (this._x = Math.atan2(-g, h), this._y = Math.atan2(-_, s)) : (this._x = 0, this._y = Math.atan2(f, M));
        break;
      case "XZY":
        this._z = Math.asin(-hi(c, -1, 1)), Math.abs(c) < 0.9999999 ? (this._x = Math.atan2(x, h), this._y = Math.atan2(f, s)) : (this._x = Math.atan2(-g, M), this._y = 0);
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + t);
    }
    return this._order = t, n === !0 && this._onChangeCallback(), this;
  }
  setFromQuaternion(e, t, n) {
    return Rb.makeRotationFromQuaternion(e), this.setFromRotationMatrix(Rb, t, n);
  }
  setFromVector3(e, t = this._order) {
    return this.set(e.x, e.y, e.z, t);
  }
  reorder(e) {
    return Lb.setFromEuler(this), this.setFromQuaternion(Lb, e);
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order;
  }
  fromArray(e) {
    return this._x = e[0], this._y = e[1], this._z = e[2], e[3] !== void 0 && (this._order = e[3]), this._onChangeCallback(), this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._order, e;
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._order;
  }
}
wp.DEFAULT_ORDER = "XYZ";
class ic {
  constructor() {
    this.mask = 1;
  }
  set(e) {
    this.mask = (1 << e | 0) >>> 0;
  }
  enable(e) {
    this.mask |= 1 << e | 0;
  }
  enableAll() {
    this.mask = -1;
  }
  toggle(e) {
    this.mask ^= 1 << e | 0;
  }
  disable(e) {
    this.mask &= ~(1 << e | 0);
  }
  disableAll() {
    this.mask = 0;
  }
  test(e) {
    return (this.mask & e.mask) !== 0;
  }
  isEnabled(e) {
    return (this.mask & (1 << e | 0)) !== 0;
  }
}
let kL = 0;
const Db = /* @__PURE__ */ new j(), Lf = /* @__PURE__ */ new Qr(), wo = /* @__PURE__ */ new Qt(), Nv = /* @__PURE__ */ new j(), Fh = /* @__PURE__ */ new j(), VL = /* @__PURE__ */ new j(), GL = /* @__PURE__ */ new Qr(), Pb = /* @__PURE__ */ new j(1, 0, 0), Ub = /* @__PURE__ */ new j(0, 1, 0), Nb = /* @__PURE__ */ new j(0, 0, 1), WL = { type: "added" }, zb = { type: "removed" };
class Mn extends zo {
  constructor() {
    super(), this.isObject3D = !0, Object.defineProperty(this, "id", { value: kL++ }), this.uuid = va(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = Mn.DEFAULT_UP.clone();
    const e = new j(), t = new wp(), n = new Qr(), a = new j(1, 1, 1);
    function s() {
      n.setFromEuler(t, !1);
    }
    function c() {
      t.setFromQuaternion(n, void 0, !1);
    }
    t._onChange(s), n._onChange(c), Object.defineProperties(this, {
      position: {
        configurable: !0,
        enumerable: !0,
        value: e
      },
      rotation: {
        configurable: !0,
        enumerable: !0,
        value: t
      },
      quaternion: {
        configurable: !0,
        enumerable: !0,
        value: n
      },
      scale: {
        configurable: !0,
        enumerable: !0,
        value: a
      },
      modelViewMatrix: {
        value: new Qt()
      },
      normalMatrix: {
        value: new cn()
      }
    }), this.matrix = new Qt(), this.matrixWorld = new Qt(), this.matrixAutoUpdate = Mn.DEFAULT_MATRIX_AUTO_UPDATE, this.matrixWorldNeedsUpdate = !1, this.matrixWorldAutoUpdate = Mn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, this.layers = new ic(), this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.userData = {};
  }
  onBeforeRender() {
  }
  onAfterRender() {
  }
  applyMatrix4(e) {
    this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(e), this.matrix.decompose(this.position, this.quaternion, this.scale);
  }
  applyQuaternion(e) {
    return this.quaternion.premultiply(e), this;
  }
  setRotationFromAxisAngle(e, t) {
    this.quaternion.setFromAxisAngle(e, t);
  }
  setRotationFromEuler(e) {
    this.quaternion.setFromEuler(e, !0);
  }
  setRotationFromMatrix(e) {
    this.quaternion.setFromRotationMatrix(e);
  }
  setRotationFromQuaternion(e) {
    this.quaternion.copy(e);
  }
  rotateOnAxis(e, t) {
    return Lf.setFromAxisAngle(e, t), this.quaternion.multiply(Lf), this;
  }
  rotateOnWorldAxis(e, t) {
    return Lf.setFromAxisAngle(e, t), this.quaternion.premultiply(Lf), this;
  }
  rotateX(e) {
    return this.rotateOnAxis(Pb, e);
  }
  rotateY(e) {
    return this.rotateOnAxis(Ub, e);
  }
  rotateZ(e) {
    return this.rotateOnAxis(Nb, e);
  }
  translateOnAxis(e, t) {
    return Db.copy(e).applyQuaternion(this.quaternion), this.position.add(Db.multiplyScalar(t)), this;
  }
  translateX(e) {
    return this.translateOnAxis(Pb, e);
  }
  translateY(e) {
    return this.translateOnAxis(Ub, e);
  }
  translateZ(e) {
    return this.translateOnAxis(Nb, e);
  }
  localToWorld(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(this.matrixWorld);
  }
  worldToLocal(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(wo.copy(this.matrixWorld).invert());
  }
  lookAt(e, t, n) {
    e.isVector3 ? Nv.copy(e) : Nv.set(e, t, n);
    const a = this.parent;
    this.updateWorldMatrix(!0, !1), Fh.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? wo.lookAt(Fh, Nv, this.up) : wo.lookAt(Nv, Fh, this.up), this.quaternion.setFromRotationMatrix(wo), a && (wo.extractRotation(a.matrixWorld), Lf.setFromRotationMatrix(wo), this.quaternion.premultiply(Lf.invert()));
  }
  add(e) {
    if (arguments.length > 1) {
      for (let t = 0; t < arguments.length; t++)
        this.add(arguments[t]);
      return this;
    }
    return e === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e), this) : (e && e.isObject3D ? (e.parent !== null && e.parent.remove(e), e.parent = this, this.children.push(e), e.dispatchEvent(WL)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e), this);
  }
  remove(e) {
    if (arguments.length > 1) {
      for (let n = 0; n < arguments.length; n++)
        this.remove(arguments[n]);
      return this;
    }
    const t = this.children.indexOf(e);
    return t !== -1 && (e.parent = null, this.children.splice(t, 1), e.dispatchEvent(zb)), this;
  }
  removeFromParent() {
    const e = this.parent;
    return e !== null && e.remove(this), this;
  }
  clear() {
    for (let e = 0; e < this.children.length; e++) {
      const t = this.children[e];
      t.parent = null, t.dispatchEvent(zb);
    }
    return this.children.length = 0, this;
  }
  attach(e) {
    return this.updateWorldMatrix(!0, !1), wo.copy(this.matrixWorld).invert(), e.parent !== null && (e.parent.updateWorldMatrix(!0, !1), wo.multiply(e.parent.matrixWorld)), e.applyMatrix4(wo), this.add(e), e.updateWorldMatrix(!1, !0), this;
  }
  getObjectById(e) {
    return this.getObjectByProperty("id", e);
  }
  getObjectByName(e) {
    return this.getObjectByProperty("name", e);
  }
  getObjectByProperty(e, t) {
    if (this[e] === t)
      return this;
    for (let n = 0, a = this.children.length; n < a; n++) {
      const c = this.children[n].getObjectByProperty(e, t);
      if (c !== void 0)
        return c;
    }
  }
  getObjectsByProperty(e, t) {
    let n = [];
    this[e] === t && n.push(this);
    for (let a = 0, s = this.children.length; a < s; a++) {
      const c = this.children[a].getObjectsByProperty(e, t);
      c.length > 0 && (n = n.concat(c));
    }
    return n;
  }
  getWorldPosition(e) {
    return this.updateWorldMatrix(!0, !1), e.setFromMatrixPosition(this.matrixWorld);
  }
  getWorldQuaternion(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(Fh, e, VL), e;
  }
  getWorldScale(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(Fh, GL, e), e;
  }
  getWorldDirection(e) {
    this.updateWorldMatrix(!0, !1);
    const t = this.matrixWorld.elements;
    return e.set(t[8], t[9], t[10]).normalize();
  }
  raycast() {
  }
  traverse(e) {
    e(this);
    const t = this.children;
    for (let n = 0, a = t.length; n < a; n++)
      t[n].traverse(e);
  }
  traverseVisible(e) {
    if (this.visible === !1)
      return;
    e(this);
    const t = this.children;
    for (let n = 0, a = t.length; n < a; n++)
      t[n].traverseVisible(e);
  }
  traverseAncestors(e) {
    const t = this.parent;
    t !== null && (e(t), t.traverseAncestors(e));
  }
  updateMatrix() {
    this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0;
  }
  updateMatrixWorld(e) {
    this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || e) && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, e = !0);
    const t = this.children;
    for (let n = 0, a = t.length; n < a; n++) {
      const s = t[n];
      (s.matrixWorldAutoUpdate === !0 || e === !0) && s.updateMatrixWorld(e);
    }
  }
  updateWorldMatrix(e, t) {
    const n = this.parent;
    if (e === !0 && n !== null && n.matrixWorldAutoUpdate === !0 && n.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), t === !0) {
      const a = this.children;
      for (let s = 0, c = a.length; s < c; s++) {
        const f = a[s];
        f.matrixWorldAutoUpdate === !0 && f.updateWorldMatrix(!1, !0);
      }
    }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string", n = {};
    t && (e = {
      geometries: {},
      materials: {},
      textures: {},
      images: {},
      shapes: {},
      skeletons: {},
      animations: {},
      nodes: {}
    }, n.metadata = {
      version: 4.5,
      type: "Object",
      generator: "Object3D.toJSON"
    });
    const a = {};
    a.uuid = this.uuid, a.type = this.type, this.name !== "" && (a.name = this.name), this.castShadow === !0 && (a.castShadow = !0), this.receiveShadow === !0 && (a.receiveShadow = !0), this.visible === !1 && (a.visible = !1), this.frustumCulled === !1 && (a.frustumCulled = !1), this.renderOrder !== 0 && (a.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (a.userData = this.userData), a.layers = this.layers.mask, a.matrix = this.matrix.toArray(), a.up = this.up.toArray(), this.matrixAutoUpdate === !1 && (a.matrixAutoUpdate = !1), this.isInstancedMesh && (a.type = "InstancedMesh", a.count = this.count, a.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (a.instanceColor = this.instanceColor.toJSON()));
    function s(f, p) {
      return f[p.uuid] === void 0 && (f[p.uuid] = p.toJSON(e)), p.uuid;
    }
    if (this.isScene)
      this.background && (this.background.isColor ? a.background = this.background.toJSON() : this.background.isTexture && (a.background = this.background.toJSON(e).uuid)), this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== !0 && (a.environment = this.environment.toJSON(e).uuid);
    else if (this.isMesh || this.isLine || this.isPoints) {
      a.geometry = s(e.geometries, this.geometry);
      const f = this.geometry.parameters;
      if (f !== void 0 && f.shapes !== void 0) {
        const p = f.shapes;
        if (Array.isArray(p))
          for (let h = 0, g = p.length; h < g; h++) {
            const _ = p[h];
            s(e.shapes, _);
          }
        else
          s(e.shapes, p);
      }
    }
    if (this.isSkinnedMesh && (a.bindMode = this.bindMode, a.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (s(e.skeletons, this.skeleton), a.skeleton = this.skeleton.uuid)), this.material !== void 0)
      if (Array.isArray(this.material)) {
        const f = [];
        for (let p = 0, h = this.material.length; p < h; p++)
          f.push(s(e.materials, this.material[p]));
        a.material = f;
      } else
        a.material = s(e.materials, this.material);
    if (this.children.length > 0) {
      a.children = [];
      for (let f = 0; f < this.children.length; f++)
        a.children.push(this.children[f].toJSON(e).object);
    }
    if (this.animations.length > 0) {
      a.animations = [];
      for (let f = 0; f < this.animations.length; f++) {
        const p = this.animations[f];
        a.animations.push(s(e.animations, p));
      }
    }
    if (t) {
      const f = c(e.geometries), p = c(e.materials), h = c(e.textures), g = c(e.images), _ = c(e.shapes), x = c(e.skeletons), M = c(e.animations), E = c(e.nodes);
      f.length > 0 && (n.geometries = f), p.length > 0 && (n.materials = p), h.length > 0 && (n.textures = h), g.length > 0 && (n.images = g), _.length > 0 && (n.shapes = _), x.length > 0 && (n.skeletons = x), M.length > 0 && (n.animations = M), E.length > 0 && (n.nodes = E);
    }
    return n.object = a, n;
    function c(f) {
      const p = [];
      for (const h in f) {
        const g = f[h];
        delete g.metadata, p.push(g);
      }
      return p;
    }
  }
  clone(e) {
    return new this.constructor().copy(this, e);
  }
  copy(e, t = !0) {
    if (this.name = e.name, this.up.copy(e.up), this.position.copy(e.position), this.rotation.order = e.rotation.order, this.quaternion.copy(e.quaternion), this.scale.copy(e.scale), this.matrix.copy(e.matrix), this.matrixWorld.copy(e.matrixWorld), this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate, this.matrixWorldAutoUpdate = e.matrixWorldAutoUpdate, this.layers.mask = e.layers.mask, this.visible = e.visible, this.castShadow = e.castShadow, this.receiveShadow = e.receiveShadow, this.frustumCulled = e.frustumCulled, this.renderOrder = e.renderOrder, this.userData = JSON.parse(JSON.stringify(e.userData)), t === !0)
      for (let n = 0; n < e.children.length; n++) {
        const a = e.children[n];
        this.add(a.clone());
      }
    return this;
  }
}
Mn.DEFAULT_UP = /* @__PURE__ */ new j(0, 1, 0);
Mn.DEFAULT_MATRIX_AUTO_UPDATE = !0;
Mn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0;
const os = /* @__PURE__ */ new j(), To = /* @__PURE__ */ new j(), S_ = /* @__PURE__ */ new j(), Co = /* @__PURE__ */ new j(), Df = /* @__PURE__ */ new j(), Pf = /* @__PURE__ */ new j(), Ob = /* @__PURE__ */ new j(), M_ = /* @__PURE__ */ new j(), b_ = /* @__PURE__ */ new j(), E_ = /* @__PURE__ */ new j();
let zv = !1;
class Zr {
  constructor(e = new j(), t = new j(), n = new j()) {
    this.a = e, this.b = t, this.c = n;
  }
  static getNormal(e, t, n, a) {
    a.subVectors(n, t), os.subVectors(e, t), a.cross(os);
    const s = a.lengthSq();
    return s > 0 ? a.multiplyScalar(1 / Math.sqrt(s)) : a.set(0, 0, 0);
  }
  // static/instance method to calculate barycentric coordinates
  // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
  static getBarycoord(e, t, n, a, s) {
    os.subVectors(a, t), To.subVectors(n, t), S_.subVectors(e, t);
    const c = os.dot(os), f = os.dot(To), p = os.dot(S_), h = To.dot(To), g = To.dot(S_), _ = c * h - f * f;
    if (_ === 0)
      return s.set(-2, -1, -1);
    const x = 1 / _, M = (h * p - f * g) * x, E = (c * g - f * p) * x;
    return s.set(1 - M - E, E, M);
  }
  static containsPoint(e, t, n, a) {
    return this.getBarycoord(e, t, n, a, Co), Co.x >= 0 && Co.y >= 0 && Co.x + Co.y <= 1;
  }
  static getUV(e, t, n, a, s, c, f, p) {
    return zv === !1 && (console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."), zv = !0), this.getInterpolation(e, t, n, a, s, c, f, p);
  }
  static getInterpolation(e, t, n, a, s, c, f, p) {
    return this.getBarycoord(e, t, n, a, Co), p.setScalar(0), p.addScaledVector(s, Co.x), p.addScaledVector(c, Co.y), p.addScaledVector(f, Co.z), p;
  }
  static isFrontFacing(e, t, n, a) {
    return os.subVectors(n, t), To.subVectors(e, t), os.cross(To).dot(a) < 0;
  }
  set(e, t, n) {
    return this.a.copy(e), this.b.copy(t), this.c.copy(n), this;
  }
  setFromPointsAndIndices(e, t, n, a) {
    return this.a.copy(e[t]), this.b.copy(e[n]), this.c.copy(e[a]), this;
  }
  setFromAttributeAndIndices(e, t, n, a) {
    return this.a.fromBufferAttribute(e, t), this.b.fromBufferAttribute(e, n), this.c.fromBufferAttribute(e, a), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this;
  }
  getArea() {
    return os.subVectors(this.c, this.b), To.subVectors(this.a, this.b), os.cross(To).length() * 0.5;
  }
  getMidpoint(e) {
    return e.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  getNormal(e) {
    return Zr.getNormal(this.a, this.b, this.c, e);
  }
  getPlane(e) {
    return e.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  getBarycoord(e, t) {
    return Zr.getBarycoord(e, this.a, this.b, this.c, t);
  }
  getUV(e, t, n, a, s) {
    return zv === !1 && (console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."), zv = !0), Zr.getInterpolation(e, this.a, this.b, this.c, t, n, a, s);
  }
  getInterpolation(e, t, n, a, s) {
    return Zr.getInterpolation(e, this.a, this.b, this.c, t, n, a, s);
  }
  containsPoint(e) {
    return Zr.containsPoint(e, this.a, this.b, this.c);
  }
  isFrontFacing(e) {
    return Zr.isFrontFacing(this.a, this.b, this.c, e);
  }
  intersectsBox(e) {
    return e.intersectsTriangle(this);
  }
  closestPointToPoint(e, t) {
    const n = this.a, a = this.b, s = this.c;
    let c, f;
    Df.subVectors(a, n), Pf.subVectors(s, n), M_.subVectors(e, n);
    const p = Df.dot(M_), h = Pf.dot(M_);
    if (p <= 0 && h <= 0)
      return t.copy(n);
    b_.subVectors(e, a);
    const g = Df.dot(b_), _ = Pf.dot(b_);
    if (g >= 0 && _ <= g)
      return t.copy(a);
    const x = p * _ - g * h;
    if (x <= 0 && p >= 0 && g <= 0)
      return c = p / (p - g), t.copy(n).addScaledVector(Df, c);
    E_.subVectors(e, s);
    const M = Df.dot(E_), E = Pf.dot(E_);
    if (E >= 0 && M <= E)
      return t.copy(s);
    const A = M * h - p * E;
    if (A <= 0 && h >= 0 && E <= 0)
      return f = h / (h - E), t.copy(n).addScaledVector(Pf, f);
    const T = g * E - M * _;
    if (T <= 0 && _ - g >= 0 && M - E >= 0)
      return Ob.subVectors(s, a), f = (_ - g) / (_ - g + (M - E)), t.copy(a).addScaledVector(Ob, f);
    const b = 1 / (T + A + x);
    return c = A * b, f = x * b, t.copy(n).addScaledVector(Df, c).addScaledVector(Pf, f);
  }
  equals(e) {
    return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
  }
}
let qL = 0;
class nr extends zo {
  constructor() {
    super(), this.isMaterial = !0, Object.defineProperty(this, "id", { value: qL++ }), this.uuid = va(), this.name = "", this.type = "Material", this.blending = ec, this.side = Do, this.vertexColors = !1, this.opacity = 1, this.transparent = !1, this.blendSrc = qx, this.blendDst = Xx, this.blendEquation = Xu, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.depthFunc = Tg, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = vT, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = Eg, this.stencilZFail = Eg, this.stencilZPass = Eg, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaToCoverage = !1, this.premultipliedAlpha = !1, this.forceSinglePass = !1, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0, this._alphaTest = 0;
  }
  get alphaTest() {
    return this._alphaTest;
  }
  set alphaTest(e) {
    this._alphaTest > 0 != e > 0 && this.version++, this._alphaTest = e;
  }
  onBuild() {
  }
  onBeforeRender() {
  }
  onBeforeCompile() {
  }
  customProgramCacheKey() {
    return this.onBeforeCompile.toString();
  }
  setValues(e) {
    if (e !== void 0)
      for (const t in e) {
        const n = e[t];
        if (n === void 0) {
          console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);
          continue;
        }
        const a = this[t];
        if (a === void 0) {
          console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);
          continue;
        }
        a && a.isColor ? a.set(n) : a && a.isVector3 && n && n.isVector3 ? a.copy(n) : this[t] = n;
      }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    t && (e = {
      textures: {},
      images: {}
    });
    const n = {
      metadata: {
        version: 4.5,
        type: "Material",
        generator: "Material.toJSON"
      }
    };
    n.uuid = this.uuid, n.type = this.type, this.name !== "" && (n.name = this.name), this.color && this.color.isColor && (n.color = this.color.getHex()), this.roughness !== void 0 && (n.roughness = this.roughness), this.metalness !== void 0 && (n.metalness = this.metalness), this.sheen !== void 0 && (n.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (n.sheenColor = this.sheenColor.getHex()), this.sheenRoughness !== void 0 && (n.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()), this.emissiveIntensity && this.emissiveIntensity !== 1 && (n.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (n.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (n.specularColor = this.specularColor.getHex()), this.shininess !== void 0 && (n.shininess = this.shininess), this.clearcoat !== void 0 && (n.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (n.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(e).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid, n.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.iridescence !== void 0 && (n.iridescence = this.iridescence), this.iridescenceIOR !== void 0 && (n.iridescenceIOR = this.iridescenceIOR), this.iridescenceThicknessRange !== void 0 && (n.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (n.iridescenceMap = this.iridescenceMap.toJSON(e).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (n.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(e).uuid), this.map && this.map.isTexture && (n.map = this.map.toJSON(e).uuid), this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(e).uuid), this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(e).uuid), this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(e).uuid, n.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(e).uuid, n.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(e).uuid, n.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(e).uuid, n.normalMapType = this.normalMapType, n.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(e).uuid, n.displacementScale = this.displacementScale, n.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(e).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(e).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(e).uuid), this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(e).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (n.specularIntensityMap = this.specularIntensityMap.toJSON(e).uuid), this.specularColorMap && this.specularColorMap.isTexture && (n.specularColorMap = this.specularColorMap.toJSON(e).uuid), this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(e).uuid, this.combine !== void 0 && (n.combine = this.combine)), this.envMapIntensity !== void 0 && (n.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (n.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (n.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(e).uuid), this.transmission !== void 0 && (n.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (n.transmissionMap = this.transmissionMap.toJSON(e).uuid), this.thickness !== void 0 && (n.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (n.thicknessMap = this.thicknessMap.toJSON(e).uuid), this.attenuationDistance !== void 0 && this.attenuationDistance !== 1 / 0 && (n.attenuationDistance = this.attenuationDistance), this.attenuationColor !== void 0 && (n.attenuationColor = this.attenuationColor.getHex()), this.size !== void 0 && (n.size = this.size), this.shadowSide !== null && (n.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (n.sizeAttenuation = this.sizeAttenuation), this.blending !== ec && (n.blending = this.blending), this.side !== Do && (n.side = this.side), this.vertexColors && (n.vertexColors = !0), this.opacity < 1 && (n.opacity = this.opacity), this.transparent === !0 && (n.transparent = this.transparent), n.depthFunc = this.depthFunc, n.depthTest = this.depthTest, n.depthWrite = this.depthWrite, n.colorWrite = this.colorWrite, n.stencilWrite = this.stencilWrite, n.stencilWriteMask = this.stencilWriteMask, n.stencilFunc = this.stencilFunc, n.stencilRef = this.stencilRef, n.stencilFuncMask = this.stencilFuncMask, n.stencilFail = this.stencilFail, n.stencilZFail = this.stencilZFail, n.stencilZPass = this.stencilZPass, this.rotation !== void 0 && this.rotation !== 0 && (n.rotation = this.rotation), this.polygonOffset === !0 && (n.polygonOffset = !0), this.polygonOffsetFactor !== 0 && (n.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (n.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth !== void 0 && this.linewidth !== 1 && (n.linewidth = this.linewidth), this.dashSize !== void 0 && (n.dashSize = this.dashSize), this.gapSize !== void 0 && (n.gapSize = this.gapSize), this.scale !== void 0 && (n.scale = this.scale), this.dithering === !0 && (n.dithering = !0), this.alphaTest > 0 && (n.alphaTest = this.alphaTest), this.alphaToCoverage === !0 && (n.alphaToCoverage = this.alphaToCoverage), this.premultipliedAlpha === !0 && (n.premultipliedAlpha = this.premultipliedAlpha), this.forceSinglePass === !0 && (n.forceSinglePass = this.forceSinglePass), this.wireframe === !0 && (n.wireframe = this.wireframe), this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (n.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (n.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === !0 && (n.flatShading = this.flatShading), this.visible === !1 && (n.visible = !1), this.toneMapped === !1 && (n.toneMapped = !1), this.fog === !1 && (n.fog = !1), Object.keys(this.userData).length > 0 && (n.userData = this.userData);
    function a(s) {
      const c = [];
      for (const f in s) {
        const p = s[f];
        delete p.metadata, c.push(p);
      }
      return c;
    }
    if (t) {
      const s = a(e.textures), c = a(e.images);
      s.length > 0 && (n.textures = s), c.length > 0 && (n.images = c);
    }
    return n;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.name = e.name, this.blending = e.blending, this.side = e.side, this.vertexColors = e.vertexColors, this.opacity = e.opacity, this.transparent = e.transparent, this.blendSrc = e.blendSrc, this.blendDst = e.blendDst, this.blendEquation = e.blendEquation, this.blendSrcAlpha = e.blendSrcAlpha, this.blendDstAlpha = e.blendDstAlpha, this.blendEquationAlpha = e.blendEquationAlpha, this.depthFunc = e.depthFunc, this.depthTest = e.depthTest, this.depthWrite = e.depthWrite, this.stencilWriteMask = e.stencilWriteMask, this.stencilFunc = e.stencilFunc, this.stencilRef = e.stencilRef, this.stencilFuncMask = e.stencilFuncMask, this.stencilFail = e.stencilFail, this.stencilZFail = e.stencilZFail, this.stencilZPass = e.stencilZPass, this.stencilWrite = e.stencilWrite;
    const t = e.clippingPlanes;
    let n = null;
    if (t !== null) {
      const a = t.length;
      n = new Array(a);
      for (let s = 0; s !== a; ++s)
        n[s] = t[s].clone();
    }
    return this.clippingPlanes = n, this.clipIntersection = e.clipIntersection, this.clipShadows = e.clipShadows, this.shadowSide = e.shadowSide, this.colorWrite = e.colorWrite, this.precision = e.precision, this.polygonOffset = e.polygonOffset, this.polygonOffsetFactor = e.polygonOffsetFactor, this.polygonOffsetUnits = e.polygonOffsetUnits, this.dithering = e.dithering, this.alphaTest = e.alphaTest, this.alphaToCoverage = e.alphaToCoverage, this.premultipliedAlpha = e.premultipliedAlpha, this.forceSinglePass = e.forceSinglePass, this.visible = e.visible, this.toneMapped = e.toneMapped, this.userData = JSON.parse(JSON.stringify(e.userData)), this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
}
const xT = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
}, ls = { h: 0, s: 0, l: 0 }, Ov = { h: 0, s: 0, l: 0 };
function w_(u, e, t) {
  return t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6 ? u + (e - u) * 6 * t : t < 1 / 2 ? e : t < 2 / 3 ? u + (e - u) * 6 * (2 / 3 - t) : u;
}
class yt {
  constructor(e, t, n) {
    return this.isColor = !0, this.r = 1, this.g = 1, this.b = 1, t === void 0 && n === void 0 ? this.set(e) : this.setRGB(e, t, n);
  }
  set(e) {
    return e && e.isColor ? this.copy(e) : typeof e == "number" ? this.setHex(e) : typeof e == "string" && this.setStyle(e), this;
  }
  setScalar(e) {
    return this.r = e, this.g = e, this.b = e, this;
  }
  setHex(e, t = us) {
    return e = Math.floor(e), this.r = (e >> 16 & 255) / 255, this.g = (e >> 8 & 255) / 255, this.b = (e & 255) / 255, jr.toWorkingColorSpace(this, t), this;
  }
  setRGB(e, t, n, a = jr.workingColorSpace) {
    return this.r = e, this.g = t, this.b = n, jr.toWorkingColorSpace(this, a), this;
  }
  setHSL(e, t, n, a = jr.workingColorSpace) {
    if (e = Kx(e, 1), t = hi(t, 0, 1), n = hi(n, 0, 1), t === 0)
      this.r = this.g = this.b = n;
    else {
      const s = n <= 0.5 ? n * (1 + t) : n + t - n * t, c = 2 * n - s;
      this.r = w_(c, s, e + 1 / 3), this.g = w_(c, s, e), this.b = w_(c, s, e - 1 / 3);
    }
    return jr.toWorkingColorSpace(this, a), this;
  }
  setStyle(e, t = us) {
    function n(s) {
      s !== void 0 && parseFloat(s) < 1 && console.warn("THREE.Color: Alpha component of " + e + " will be ignored.");
    }
    let a;
    if (a = /^(\w+)\(([^\)]*)\)/.exec(e)) {
      let s;
      const c = a[1], f = a[2];
      switch (c) {
        case "rgb":
        case "rgba":
          if (s = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(f))
            return this.r = Math.min(255, parseInt(s[1], 10)) / 255, this.g = Math.min(255, parseInt(s[2], 10)) / 255, this.b = Math.min(255, parseInt(s[3], 10)) / 255, jr.toWorkingColorSpace(this, t), n(s[4]), this;
          if (s = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(f))
            return this.r = Math.min(100, parseInt(s[1], 10)) / 100, this.g = Math.min(100, parseInt(s[2], 10)) / 100, this.b = Math.min(100, parseInt(s[3], 10)) / 100, jr.toWorkingColorSpace(this, t), n(s[4]), this;
          break;
        case "hsl":
        case "hsla":
          if (s = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(f)) {
            const p = parseFloat(s[1]) / 360, h = parseFloat(s[2]) / 100, g = parseFloat(s[3]) / 100;
            return n(s[4]), this.setHSL(p, h, g, t);
          }
          break;
        default:
          console.warn("THREE.Color: Unknown color model " + e);
      }
    } else if (a = /^\#([A-Fa-f\d]+)$/.exec(e)) {
      const s = a[1], c = s.length;
      if (c === 3)
        return this.setRGB(
          parseInt(s.charAt(0), 16) / 15,
          parseInt(s.charAt(1), 16) / 15,
          parseInt(s.charAt(2), 16) / 15,
          t
        );
      if (c === 6)
        return this.setHex(parseInt(s, 16), t);
      console.warn("THREE.Color: Invalid hex color " + e);
    } else if (e && e.length > 0)
      return this.setColorName(e, t);
    return this;
  }
  setColorName(e, t = us) {
    const n = xT[e.toLowerCase()];
    return n !== void 0 ? this.setHex(n, t) : console.warn("THREE.Color: Unknown color " + e), this;
  }
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  copy(e) {
    return this.r = e.r, this.g = e.g, this.b = e.b, this;
  }
  copySRGBToLinear(e) {
    return this.r = $f(e.r), this.g = $f(e.g), this.b = $f(e.b), this;
  }
  copyLinearToSRGB(e) {
    return this.r = h_(e.r), this.g = h_(e.g), this.b = h_(e.b), this;
  }
  convertSRGBToLinear() {
    return this.copySRGBToLinear(this), this;
  }
  convertLinearToSRGB() {
    return this.copyLinearToSRGB(this), this;
  }
  getHex(e = us) {
    return jr.fromWorkingColorSpace(pr.copy(this), e), hi(pr.r * 255, 0, 255) << 16 ^ hi(pr.g * 255, 0, 255) << 8 ^ hi(pr.b * 255, 0, 255) << 0;
  }
  getHexString(e = us) {
    return ("000000" + this.getHex(e).toString(16)).slice(-6);
  }
  getHSL(e, t = jr.workingColorSpace) {
    jr.fromWorkingColorSpace(pr.copy(this), t);
    const n = pr.r, a = pr.g, s = pr.b, c = Math.max(n, a, s), f = Math.min(n, a, s);
    let p, h;
    const g = (f + c) / 2;
    if (f === c)
      p = 0, h = 0;
    else {
      const _ = c - f;
      switch (h = g <= 0.5 ? _ / (c + f) : _ / (2 - c - f), c) {
        case n:
          p = (a - s) / _ + (a < s ? 6 : 0);
          break;
        case a:
          p = (s - n) / _ + 2;
          break;
        case s:
          p = (n - a) / _ + 4;
          break;
      }
      p /= 6;
    }
    return e.h = p, e.s = h, e.l = g, e;
  }
  getRGB(e, t = jr.workingColorSpace) {
    return jr.fromWorkingColorSpace(pr.copy(this), t), e.r = pr.r, e.g = pr.g, e.b = pr.b, e;
  }
  getStyle(e = us) {
    jr.fromWorkingColorSpace(pr.copy(this), e);
    const t = pr.r, n = pr.g, a = pr.b;
    return e !== us ? `color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${a.toFixed(3)})` : `rgb(${t * 255 | 0},${n * 255 | 0},${a * 255 | 0})`;
  }
  offsetHSL(e, t, n) {
    return this.getHSL(ls), ls.h += e, ls.s += t, ls.l += n, this.setHSL(ls.h, ls.s, ls.l), this;
  }
  add(e) {
    return this.r += e.r, this.g += e.g, this.b += e.b, this;
  }
  addColors(e, t) {
    return this.r = e.r + t.r, this.g = e.g + t.g, this.b = e.b + t.b, this;
  }
  addScalar(e) {
    return this.r += e, this.g += e, this.b += e, this;
  }
  sub(e) {
    return this.r = Math.max(0, this.r - e.r), this.g = Math.max(0, this.g - e.g), this.b = Math.max(0, this.b - e.b), this;
  }
  multiply(e) {
    return this.r *= e.r, this.g *= e.g, this.b *= e.b, this;
  }
  multiplyScalar(e) {
    return this.r *= e, this.g *= e, this.b *= e, this;
  }
  lerp(e, t) {
    return this.r += (e.r - this.r) * t, this.g += (e.g - this.g) * t, this.b += (e.b - this.b) * t, this;
  }
  lerpColors(e, t, n) {
    return this.r = e.r + (t.r - e.r) * n, this.g = e.g + (t.g - e.g) * n, this.b = e.b + (t.b - e.b) * n, this;
  }
  lerpHSL(e, t) {
    this.getHSL(ls), e.getHSL(Ov);
    const n = ep(ls.h, Ov.h, t), a = ep(ls.s, Ov.s, t), s = ep(ls.l, Ov.l, t);
    return this.setHSL(n, a, s), this;
  }
  setFromVector3(e) {
    return this.r = e.x, this.g = e.y, this.b = e.z, this;
  }
  applyMatrix3(e) {
    const t = this.r, n = this.g, a = this.b, s = e.elements;
    return this.r = s[0] * t + s[3] * n + s[6] * a, this.g = s[1] * t + s[4] * n + s[7] * a, this.b = s[2] * t + s[5] * n + s[8] * a, this;
  }
  equals(e) {
    return e.r === this.r && e.g === this.g && e.b === this.b;
  }
  fromArray(e, t = 0) {
    return this.r = e[t], this.g = e[t + 1], this.b = e[t + 2], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.r, e[t + 1] = this.g, e[t + 2] = this.b, e;
  }
  fromBufferAttribute(e, t) {
    return this.r = e.getX(t), this.g = e.getY(t), this.b = e.getZ(t), this;
  }
  toJSON() {
    return this.getHex();
  }
  *[Symbol.iterator]() {
    yield this.r, yield this.g, yield this.b;
  }
}
const pr = /* @__PURE__ */ new yt();
yt.NAMES = xT;
class Xl extends nr {
  constructor(e) {
    super(), this.isMeshBasicMaterial = !0, this.type = "MeshBasicMaterial", this.color = new yt(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = bp, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
const Ro = /* @__PURE__ */ XL();
function XL() {
  const u = new ArrayBuffer(4), e = new Float32Array(u), t = new Uint32Array(u), n = new Uint32Array(512), a = new Uint32Array(512);
  for (let p = 0; p < 256; ++p) {
    const h = p - 127;
    h < -27 ? (n[p] = 0, n[p | 256] = 32768, a[p] = 24, a[p | 256] = 24) : h < -14 ? (n[p] = 1024 >> -h - 14, n[p | 256] = 1024 >> -h - 14 | 32768, a[p] = -h - 1, a[p | 256] = -h - 1) : h <= 15 ? (n[p] = h + 15 << 10, n[p | 256] = h + 15 << 10 | 32768, a[p] = 13, a[p | 256] = 13) : h < 128 ? (n[p] = 31744, n[p | 256] = 64512, a[p] = 24, a[p | 256] = 24) : (n[p] = 31744, n[p | 256] = 64512, a[p] = 13, a[p | 256] = 13);
  }
  const s = new Uint32Array(2048), c = new Uint32Array(64), f = new Uint32Array(64);
  for (let p = 1; p < 1024; ++p) {
    let h = p << 13, g = 0;
    for (; !(h & 8388608); )
      h <<= 1, g -= 8388608;
    h &= -8388609, g += 947912704, s[p] = h | g;
  }
  for (let p = 1024; p < 2048; ++p)
    s[p] = 939524096 + (p - 1024 << 13);
  for (let p = 1; p < 31; ++p)
    c[p] = p << 23;
  c[31] = 1199570944, c[32] = 2147483648;
  for (let p = 33; p < 63; ++p)
    c[p] = 2147483648 + (p - 32 << 23);
  c[63] = 3347054592;
  for (let p = 1; p < 64; ++p)
    p !== 32 && (f[p] = 1024);
  return {
    floatView: e,
    uint32View: t,
    baseTable: n,
    shiftTable: a,
    mantissaTable: s,
    exponentTable: c,
    offsetTable: f
  };
}
function Yr(u) {
  Math.abs(u) > 65504 && console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."), u = hi(u, -65504, 65504), Ro.floatView[0] = u;
  const e = Ro.uint32View[0], t = e >> 23 & 511;
  return Ro.baseTable[t] + ((e & 8388607) >> Ro.shiftTable[t]);
}
function Zh(u) {
  const e = u >> 10;
  return Ro.uint32View[0] = Ro.mantissaTable[Ro.offsetTable[e] + (u & 1023)] + Ro.exponentTable[e], Ro.floatView[0];
}
const jL = {
  toHalfFloat: Yr,
  fromHalfFloat: Zh
}, Ai = /* @__PURE__ */ new j(), Iv = /* @__PURE__ */ new Ge();
class Hn {
  constructor(e, t, n = !1) {
    if (Array.isArray(e))
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    this.isBufferAttribute = !0, this.name = "", this.array = e, this.itemSize = t, this.count = e !== void 0 ? e.length / t : 0, this.normalized = n, this.usage = dp, this.updateRange = { offset: 0, count: -1 }, this.version = 0;
  }
  onUploadCallback() {
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  copy(e) {
    return this.name = e.name, this.array = new e.array.constructor(e.array), this.itemSize = e.itemSize, this.count = e.count, this.normalized = e.normalized, this.usage = e.usage, this;
  }
  copyAt(e, t, n) {
    e *= this.itemSize, n *= t.itemSize;
    for (let a = 0, s = this.itemSize; a < s; a++)
      this.array[e + a] = t.array[n + a];
    return this;
  }
  copyArray(e) {
    return this.array.set(e), this;
  }
  applyMatrix3(e) {
    if (this.itemSize === 2)
      for (let t = 0, n = this.count; t < n; t++)
        Iv.fromBufferAttribute(this, t), Iv.applyMatrix3(e), this.setXY(t, Iv.x, Iv.y);
    else if (this.itemSize === 3)
      for (let t = 0, n = this.count; t < n; t++)
        Ai.fromBufferAttribute(this, t), Ai.applyMatrix3(e), this.setXYZ(t, Ai.x, Ai.y, Ai.z);
    return this;
  }
  applyMatrix4(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Ai.fromBufferAttribute(this, t), Ai.applyMatrix4(e), this.setXYZ(t, Ai.x, Ai.y, Ai.z);
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Ai.fromBufferAttribute(this, t), Ai.applyNormalMatrix(e), this.setXYZ(t, Ai.x, Ai.y, Ai.z);
    return this;
  }
  transformDirection(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Ai.fromBufferAttribute(this, t), Ai.transformDirection(e), this.setXYZ(t, Ai.x, Ai.y, Ai.z);
    return this;
  }
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  getX(e) {
    let t = this.array[e * this.itemSize];
    return this.normalized && (t = ma(t, this.array)), t;
  }
  setX(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.array[e * this.itemSize] = t, this;
  }
  getY(e) {
    let t = this.array[e * this.itemSize + 1];
    return this.normalized && (t = ma(t, this.array)), t;
  }
  setY(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.array[e * this.itemSize + 1] = t, this;
  }
  getZ(e) {
    let t = this.array[e * this.itemSize + 2];
    return this.normalized && (t = ma(t, this.array)), t;
  }
  setZ(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.array[e * this.itemSize + 2] = t, this;
  }
  getW(e) {
    let t = this.array[e * this.itemSize + 3];
    return this.normalized && (t = ma(t, this.array)), t;
  }
  setW(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.array[e * this.itemSize + 3] = t, this;
  }
  setXY(e, t, n) {
    return e *= this.itemSize, this.normalized && (t = rn(t, this.array), n = rn(n, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this;
  }
  setXYZ(e, t, n, a) {
    return e *= this.itemSize, this.normalized && (t = rn(t, this.array), n = rn(n, this.array), a = rn(a, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = a, this;
  }
  setXYZW(e, t, n, a, s) {
    return e *= this.itemSize, this.normalized && (t = rn(t, this.array), n = rn(n, this.array), a = rn(a, this.array), s = rn(s, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = a, this.array[e + 3] = s, this;
  }
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
  toJSON() {
    const e = {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.from(this.array),
      normalized: this.normalized
    };
    return this.name !== "" && (e.name = this.name), this.usage !== dp && (e.usage = this.usage), (this.updateRange.offset !== 0 || this.updateRange.count !== -1) && (e.updateRange = this.updateRange), e;
  }
  copyColorsArray() {
    console.error("THREE.BufferAttribute: copyColorsArray() was removed in r144.");
  }
  copyVector2sArray() {
    console.error("THREE.BufferAttribute: copyVector2sArray() was removed in r144.");
  }
  copyVector3sArray() {
    console.error("THREE.BufferAttribute: copyVector3sArray() was removed in r144.");
  }
  copyVector4sArray() {
    console.error("THREE.BufferAttribute: copyVector4sArray() was removed in r144.");
  }
}
class YL extends Hn {
  constructor(e, t, n) {
    super(new Int8Array(e), t, n);
  }
}
class ZL extends Hn {
  constructor(e, t, n) {
    super(new Uint8Array(e), t, n);
  }
}
class JL extends Hn {
  constructor(e, t, n) {
    super(new Uint8ClampedArray(e), t, n);
  }
}
class QL extends Hn {
  constructor(e, t, n) {
    super(new Int16Array(e), t, n);
  }
}
class tS extends Hn {
  constructor(e, t, n) {
    super(new Uint16Array(e), t, n);
  }
}
class KL extends Hn {
  constructor(e, t, n) {
    super(new Int32Array(e), t, n);
  }
}
class nS extends Hn {
  constructor(e, t, n) {
    super(new Uint32Array(e), t, n);
  }
}
class $L extends Hn {
  constructor(e, t, n) {
    super(new Uint16Array(e), t, n), this.isFloat16BufferAttribute = !0;
  }
  getX(e) {
    let t = Zh(this.array[e * this.itemSize]);
    return this.normalized && (t = ma(t, this.array)), t;
  }
  setX(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.array[e * this.itemSize] = Yr(t), this;
  }
  getY(e) {
    let t = Zh(this.array[e * this.itemSize + 1]);
    return this.normalized && (t = ma(t, this.array)), t;
  }
  setY(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.array[e * this.itemSize + 1] = Yr(t), this;
  }
  getZ(e) {
    let t = Zh(this.array[e * this.itemSize + 2]);
    return this.normalized && (t = ma(t, this.array)), t;
  }
  setZ(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.array[e * this.itemSize + 2] = Yr(t), this;
  }
  getW(e) {
    let t = Zh(this.array[e * this.itemSize + 3]);
    return this.normalized && (t = ma(t, this.array)), t;
  }
  setW(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.array[e * this.itemSize + 3] = Yr(t), this;
  }
  setXY(e, t, n) {
    return e *= this.itemSize, this.normalized && (t = rn(t, this.array), n = rn(n, this.array)), this.array[e + 0] = Yr(t), this.array[e + 1] = Yr(n), this;
  }
  setXYZ(e, t, n, a) {
    return e *= this.itemSize, this.normalized && (t = rn(t, this.array), n = rn(n, this.array), a = rn(a, this.array)), this.array[e + 0] = Yr(t), this.array[e + 1] = Yr(n), this.array[e + 2] = Yr(a), this;
  }
  setXYZW(e, t, n, a, s) {
    return e *= this.itemSize, this.normalized && (t = rn(t, this.array), n = rn(n, this.array), a = rn(a, this.array), s = rn(s, this.array)), this.array[e + 0] = Yr(t), this.array[e + 1] = Yr(n), this.array[e + 2] = Yr(a), this.array[e + 3] = Yr(s), this;
  }
}
class Rt extends Hn {
  constructor(e, t, n) {
    super(new Float32Array(e), t, n);
  }
}
class eD extends Hn {
  constructor(e, t, n) {
    super(new Float64Array(e), t, n);
  }
}
let tD = 0;
const ka = /* @__PURE__ */ new Qt(), T_ = /* @__PURE__ */ new Mn(), Uf = /* @__PURE__ */ new j(), pa = /* @__PURE__ */ new Gs(), Bh = /* @__PURE__ */ new Gs(), qi = /* @__PURE__ */ new j();
class an extends zo {
  constructor() {
    super(), this.isBufferGeometry = !0, Object.defineProperty(this, "id", { value: tD++ }), this.uuid = va(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = { start: 0, count: 1 / 0 }, this.userData = {};
  }
  getIndex() {
    return this.index;
  }
  setIndex(e) {
    return Array.isArray(e) ? this.index = new (_T(e) ? nS : tS)(e, 1) : this.index = e, this;
  }
  getAttribute(e) {
    return this.attributes[e];
  }
  setAttribute(e, t) {
    return this.attributes[e] = t, this;
  }
  deleteAttribute(e) {
    return delete this.attributes[e], this;
  }
  hasAttribute(e) {
    return this.attributes[e] !== void 0;
  }
  addGroup(e, t, n = 0) {
    this.groups.push({
      start: e,
      count: t,
      materialIndex: n
    });
  }
  clearGroups() {
    this.groups = [];
  }
  setDrawRange(e, t) {
    this.drawRange.start = e, this.drawRange.count = t;
  }
  applyMatrix4(e) {
    const t = this.attributes.position;
    t !== void 0 && (t.applyMatrix4(e), t.needsUpdate = !0);
    const n = this.attributes.normal;
    if (n !== void 0) {
      const s = new cn().getNormalMatrix(e);
      n.applyNormalMatrix(s), n.needsUpdate = !0;
    }
    const a = this.attributes.tangent;
    return a !== void 0 && (a.transformDirection(e), a.needsUpdate = !0), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this;
  }
  applyQuaternion(e) {
    return ka.makeRotationFromQuaternion(e), this.applyMatrix4(ka), this;
  }
  rotateX(e) {
    return ka.makeRotationX(e), this.applyMatrix4(ka), this;
  }
  rotateY(e) {
    return ka.makeRotationY(e), this.applyMatrix4(ka), this;
  }
  rotateZ(e) {
    return ka.makeRotationZ(e), this.applyMatrix4(ka), this;
  }
  translate(e, t, n) {
    return ka.makeTranslation(e, t, n), this.applyMatrix4(ka), this;
  }
  scale(e, t, n) {
    return ka.makeScale(e, t, n), this.applyMatrix4(ka), this;
  }
  lookAt(e) {
    return T_.lookAt(e), T_.updateMatrix(), this.applyMatrix4(T_.matrix), this;
  }
  center() {
    return this.computeBoundingBox(), this.boundingBox.getCenter(Uf).negate(), this.translate(Uf.x, Uf.y, Uf.z), this;
  }
  setFromPoints(e) {
    const t = [];
    for (let n = 0, a = e.length; n < a; n++) {
      const s = e[n];
      t.push(s.x, s.y, s.z || 0);
    }
    return this.setAttribute("position", new Rt(t, 3)), this;
  }
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new Gs());
    const e = this.attributes.position, t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingBox.set(
        new j(-1 / 0, -1 / 0, -1 / 0),
        new j(1 / 0, 1 / 0, 1 / 0)
      );
      return;
    }
    if (e !== void 0) {
      if (this.boundingBox.setFromBufferAttribute(e), t)
        for (let n = 0, a = t.length; n < a; n++) {
          const s = t[n];
          pa.setFromBufferAttribute(s), this.morphTargetsRelative ? (qi.addVectors(this.boundingBox.min, pa.min), this.boundingBox.expandByPoint(qi), qi.addVectors(this.boundingBox.max, pa.max), this.boundingBox.expandByPoint(qi)) : (this.boundingBox.expandByPoint(pa.min), this.boundingBox.expandByPoint(pa.max));
        }
    } else
      this.boundingBox.makeEmpty();
    (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
  }
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new Ws());
    const e = this.attributes.position, t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingSphere.set(new j(), 1 / 0);
      return;
    }
    if (e) {
      const n = this.boundingSphere.center;
      if (pa.setFromBufferAttribute(e), t)
        for (let s = 0, c = t.length; s < c; s++) {
          const f = t[s];
          Bh.setFromBufferAttribute(f), this.morphTargetsRelative ? (qi.addVectors(pa.min, Bh.min), pa.expandByPoint(qi), qi.addVectors(pa.max, Bh.max), pa.expandByPoint(qi)) : (pa.expandByPoint(Bh.min), pa.expandByPoint(Bh.max));
        }
      pa.getCenter(n);
      let a = 0;
      for (let s = 0, c = e.count; s < c; s++)
        qi.fromBufferAttribute(e, s), a = Math.max(a, n.distanceToSquared(qi));
      if (t)
        for (let s = 0, c = t.length; s < c; s++) {
          const f = t[s], p = this.morphTargetsRelative;
          for (let h = 0, g = f.count; h < g; h++)
            qi.fromBufferAttribute(f, h), p && (Uf.fromBufferAttribute(e, h), qi.add(Uf)), a = Math.max(a, n.distanceToSquared(qi));
        }
      this.boundingSphere.radius = Math.sqrt(a), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
    }
  }
  computeTangents() {
    const e = this.index, t = this.attributes;
    if (e === null || t.position === void 0 || t.normal === void 0 || t.uv === void 0) {
      console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
      return;
    }
    const n = e.array, a = t.position.array, s = t.normal.array, c = t.uv.array, f = a.length / 3;
    this.hasAttribute("tangent") === !1 && this.setAttribute("tangent", new Hn(new Float32Array(4 * f), 4));
    const p = this.getAttribute("tangent").array, h = [], g = [];
    for (let I = 0; I < f; I++)
      h[I] = new j(), g[I] = new j();
    const _ = new j(), x = new j(), M = new j(), E = new Ge(), A = new Ge(), T = new Ge(), b = new j(), L = new j();
    function R(I, Q, te) {
      _.fromArray(a, I * 3), x.fromArray(a, Q * 3), M.fromArray(a, te * 3), E.fromArray(c, I * 2), A.fromArray(c, Q * 2), T.fromArray(c, te * 2), x.sub(_), M.sub(_), A.sub(E), T.sub(E);
      const $ = 1 / (A.x * T.y - T.x * A.y);
      isFinite($) && (b.copy(x).multiplyScalar(T.y).addScaledVector(M, -A.y).multiplyScalar($), L.copy(M).multiplyScalar(A.x).addScaledVector(x, -T.x).multiplyScalar($), h[I].add(b), h[Q].add(b), h[te].add(b), g[I].add(L), g[Q].add(L), g[te].add(L));
    }
    let U = this.groups;
    U.length === 0 && (U = [{
      start: 0,
      count: n.length
    }]);
    for (let I = 0, Q = U.length; I < Q; ++I) {
      const te = U[I], $ = te.start, ie = te.count;
      for (let fe = $, Ee = $ + ie; fe < Ee; fe += 3)
        R(
          n[fe + 0],
          n[fe + 1],
          n[fe + 2]
        );
    }
    const F = new j(), V = new j(), k = new j(), G = new j();
    function z(I) {
      k.fromArray(s, I * 3), G.copy(k);
      const Q = h[I];
      F.copy(Q), F.sub(k.multiplyScalar(k.dot(Q))).normalize(), V.crossVectors(G, Q);
      const $ = V.dot(g[I]) < 0 ? -1 : 1;
      p[I * 4] = F.x, p[I * 4 + 1] = F.y, p[I * 4 + 2] = F.z, p[I * 4 + 3] = $;
    }
    for (let I = 0, Q = U.length; I < Q; ++I) {
      const te = U[I], $ = te.start, ie = te.count;
      for (let fe = $, Ee = $ + ie; fe < Ee; fe += 3)
        z(n[fe + 0]), z(n[fe + 1]), z(n[fe + 2]);
    }
  }
  computeVertexNormals() {
    const e = this.index, t = this.getAttribute("position");
    if (t !== void 0) {
      let n = this.getAttribute("normal");
      if (n === void 0)
        n = new Hn(new Float32Array(t.count * 3), 3), this.setAttribute("normal", n);
      else
        for (let x = 0, M = n.count; x < M; x++)
          n.setXYZ(x, 0, 0, 0);
      const a = new j(), s = new j(), c = new j(), f = new j(), p = new j(), h = new j(), g = new j(), _ = new j();
      if (e)
        for (let x = 0, M = e.count; x < M; x += 3) {
          const E = e.getX(x + 0), A = e.getX(x + 1), T = e.getX(x + 2);
          a.fromBufferAttribute(t, E), s.fromBufferAttribute(t, A), c.fromBufferAttribute(t, T), g.subVectors(c, s), _.subVectors(a, s), g.cross(_), f.fromBufferAttribute(n, E), p.fromBufferAttribute(n, A), h.fromBufferAttribute(n, T), f.add(g), p.add(g), h.add(g), n.setXYZ(E, f.x, f.y, f.z), n.setXYZ(A, p.x, p.y, p.z), n.setXYZ(T, h.x, h.y, h.z);
        }
      else
        for (let x = 0, M = t.count; x < M; x += 3)
          a.fromBufferAttribute(t, x + 0), s.fromBufferAttribute(t, x + 1), c.fromBufferAttribute(t, x + 2), g.subVectors(c, s), _.subVectors(a, s), g.cross(_), n.setXYZ(x + 0, g.x, g.y, g.z), n.setXYZ(x + 1, g.x, g.y, g.z), n.setXYZ(x + 2, g.x, g.y, g.z);
      this.normalizeNormals(), n.needsUpdate = !0;
    }
  }
  merge() {
    return console.error("THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeGeometries() instead."), this;
  }
  normalizeNormals() {
    const e = this.attributes.normal;
    for (let t = 0, n = e.count; t < n; t++)
      qi.fromBufferAttribute(e, t), qi.normalize(), e.setXYZ(t, qi.x, qi.y, qi.z);
  }
  toNonIndexed() {
    function e(f, p) {
      const h = f.array, g = f.itemSize, _ = f.normalized, x = new h.constructor(p.length * g);
      let M = 0, E = 0;
      for (let A = 0, T = p.length; A < T; A++) {
        f.isInterleavedBufferAttribute ? M = p[A] * f.data.stride + f.offset : M = p[A] * g;
        for (let b = 0; b < g; b++)
          x[E++] = h[M++];
      }
      return new Hn(x, g, _);
    }
    if (this.index === null)
      return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
    const t = new an(), n = this.index.array, a = this.attributes;
    for (const f in a) {
      const p = a[f], h = e(p, n);
      t.setAttribute(f, h);
    }
    const s = this.morphAttributes;
    for (const f in s) {
      const p = [], h = s[f];
      for (let g = 0, _ = h.length; g < _; g++) {
        const x = h[g], M = e(x, n);
        p.push(M);
      }
      t.morphAttributes[f] = p;
    }
    t.morphTargetsRelative = this.morphTargetsRelative;
    const c = this.groups;
    for (let f = 0, p = c.length; f < p; f++) {
      const h = c[f];
      t.addGroup(h.start, h.count, h.materialIndex);
    }
    return t;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.5,
        type: "BufferGeometry",
        generator: "BufferGeometry.toJSON"
      }
    };
    if (e.uuid = this.uuid, e.type = this.type, this.name !== "" && (e.name = this.name), Object.keys(this.userData).length > 0 && (e.userData = this.userData), this.parameters !== void 0) {
      const p = this.parameters;
      for (const h in p)
        p[h] !== void 0 && (e[h] = p[h]);
      return e;
    }
    e.data = { attributes: {} };
    const t = this.index;
    t !== null && (e.data.index = {
      type: t.array.constructor.name,
      array: Array.prototype.slice.call(t.array)
    });
    const n = this.attributes;
    for (const p in n) {
      const h = n[p];
      e.data.attributes[p] = h.toJSON(e.data);
    }
    const a = {};
    let s = !1;
    for (const p in this.morphAttributes) {
      const h = this.morphAttributes[p], g = [];
      for (let _ = 0, x = h.length; _ < x; _++) {
        const M = h[_];
        g.push(M.toJSON(e.data));
      }
      g.length > 0 && (a[p] = g, s = !0);
    }
    s && (e.data.morphAttributes = a, e.data.morphTargetsRelative = this.morphTargetsRelative);
    const c = this.groups;
    c.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(c)));
    const f = this.boundingSphere;
    return f !== null && (e.data.boundingSphere = {
      center: f.center.toArray(),
      radius: f.radius
    }), e;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
    const t = {};
    this.name = e.name;
    const n = e.index;
    n !== null && this.setIndex(n.clone(t));
    const a = e.attributes;
    for (const h in a) {
      const g = a[h];
      this.setAttribute(h, g.clone(t));
    }
    const s = e.morphAttributes;
    for (const h in s) {
      const g = [], _ = s[h];
      for (let x = 0, M = _.length; x < M; x++)
        g.push(_[x].clone(t));
      this.morphAttributes[h] = g;
    }
    this.morphTargetsRelative = e.morphTargetsRelative;
    const c = e.groups;
    for (let h = 0, g = c.length; h < g; h++) {
      const _ = c[h];
      this.addGroup(_.start, _.count, _.materialIndex);
    }
    const f = e.boundingBox;
    f !== null && (this.boundingBox = f.clone());
    const p = e.boundingSphere;
    return p !== null && (this.boundingSphere = p.clone()), this.drawRange.start = e.drawRange.start, this.drawRange.count = e.drawRange.count, this.userData = e.userData, this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
const Ib = /* @__PURE__ */ new Qt(), Fs = /* @__PURE__ */ new Ep(), Fv = /* @__PURE__ */ new Ws(), Fb = /* @__PURE__ */ new j(), Nf = /* @__PURE__ */ new j(), zf = /* @__PURE__ */ new j(), Of = /* @__PURE__ */ new j(), C_ = /* @__PURE__ */ new j(), Bv = /* @__PURE__ */ new j(), Hv = /* @__PURE__ */ new Ge(), kv = /* @__PURE__ */ new Ge(), Vv = /* @__PURE__ */ new Ge(), Bb = /* @__PURE__ */ new j(), Hb = /* @__PURE__ */ new j(), kb = /* @__PURE__ */ new j(), Gv = /* @__PURE__ */ new j(), Wv = /* @__PURE__ */ new j();
class tr extends Mn {
  constructor(e = new an(), t = new Xl()) {
    super(), this.isMesh = !0, this.type = "Mesh", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), e.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = e.morphTargetInfluences.slice()), e.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary)), this.material = e.material, this.geometry = e.geometry, this;
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const a = t[n[0]];
      if (a !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let s = 0, c = a.length; s < c; s++) {
          const f = a[s].name || String(s);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[f] = s;
        }
      }
    }
  }
  getVertexPosition(e, t) {
    const n = this.geometry, a = n.attributes.position, s = n.morphAttributes.position, c = n.morphTargetsRelative;
    t.fromBufferAttribute(a, e);
    const f = this.morphTargetInfluences;
    if (s && f) {
      Bv.set(0, 0, 0);
      for (let p = 0, h = s.length; p < h; p++) {
        const g = f[p], _ = s[p];
        g !== 0 && (C_.fromBufferAttribute(_, e), c ? Bv.addScaledVector(C_, g) : Bv.addScaledVector(C_.sub(t), g));
      }
      t.add(Bv);
    }
    return this.isSkinnedMesh && this.applyBoneTransform(e, t), t;
  }
  raycast(e, t) {
    const n = this.geometry, a = this.material, s = this.matrixWorld;
    if (a === void 0 || (n.boundingSphere === null && n.computeBoundingSphere(), Fv.copy(n.boundingSphere), Fv.applyMatrix4(s), Fs.copy(e.ray).recast(e.near), Fv.containsPoint(Fs.origin) === !1 && (Fs.intersectSphere(Fv, Fb) === null || Fs.origin.distanceToSquared(Fb) > (e.far - e.near) ** 2)) || (Ib.copy(s).invert(), Fs.copy(e.ray).applyMatrix4(Ib), n.boundingBox !== null && Fs.intersectsBox(n.boundingBox) === !1))
      return;
    let c;
    const f = n.index, p = n.attributes.position, h = n.attributes.uv, g = n.attributes.uv2, _ = n.attributes.normal, x = n.groups, M = n.drawRange;
    if (f !== null)
      if (Array.isArray(a))
        for (let E = 0, A = x.length; E < A; E++) {
          const T = x[E], b = a[T.materialIndex], L = Math.max(T.start, M.start), R = Math.min(f.count, Math.min(T.start + T.count, M.start + M.count));
          for (let U = L, F = R; U < F; U += 3) {
            const V = f.getX(U), k = f.getX(U + 1), G = f.getX(U + 2);
            c = qv(this, b, e, Fs, h, g, _, V, k, G), c && (c.faceIndex = Math.floor(U / 3), c.face.materialIndex = T.materialIndex, t.push(c));
          }
        }
      else {
        const E = Math.max(0, M.start), A = Math.min(f.count, M.start + M.count);
        for (let T = E, b = A; T < b; T += 3) {
          const L = f.getX(T), R = f.getX(T + 1), U = f.getX(T + 2);
          c = qv(this, a, e, Fs, h, g, _, L, R, U), c && (c.faceIndex = Math.floor(T / 3), t.push(c));
        }
      }
    else if (p !== void 0)
      if (Array.isArray(a))
        for (let E = 0, A = x.length; E < A; E++) {
          const T = x[E], b = a[T.materialIndex], L = Math.max(T.start, M.start), R = Math.min(p.count, Math.min(T.start + T.count, M.start + M.count));
          for (let U = L, F = R; U < F; U += 3) {
            const V = U, k = U + 1, G = U + 2;
            c = qv(this, b, e, Fs, h, g, _, V, k, G), c && (c.faceIndex = Math.floor(U / 3), c.face.materialIndex = T.materialIndex, t.push(c));
          }
        }
      else {
        const E = Math.max(0, M.start), A = Math.min(p.count, M.start + M.count);
        for (let T = E, b = A; T < b; T += 3) {
          const L = T, R = T + 1, U = T + 2;
          c = qv(this, a, e, Fs, h, g, _, L, R, U), c && (c.faceIndex = Math.floor(T / 3), t.push(c));
        }
      }
  }
}
function nD(u, e, t, n, a, s, c, f) {
  let p;
  if (e.side === Cr ? p = n.intersectTriangle(c, s, a, !0, f) : p = n.intersectTriangle(a, s, c, e.side === Do, f), p === null)
    return null;
  Wv.copy(f), Wv.applyMatrix4(u.matrixWorld);
  const h = t.ray.origin.distanceTo(Wv);
  return h < t.near || h > t.far ? null : {
    distance: h,
    point: Wv.clone(),
    object: u
  };
}
function qv(u, e, t, n, a, s, c, f, p, h) {
  u.getVertexPosition(f, Nf), u.getVertexPosition(p, zf), u.getVertexPosition(h, Of);
  const g = nD(u, e, t, n, Nf, zf, Of, Gv);
  if (g) {
    a && (Hv.fromBufferAttribute(a, f), kv.fromBufferAttribute(a, p), Vv.fromBufferAttribute(a, h), g.uv = Zr.getInterpolation(Gv, Nf, zf, Of, Hv, kv, Vv, new Ge())), s && (Hv.fromBufferAttribute(s, f), kv.fromBufferAttribute(s, p), Vv.fromBufferAttribute(s, h), g.uv2 = Zr.getInterpolation(Gv, Nf, zf, Of, Hv, kv, Vv, new Ge())), c && (Bb.fromBufferAttribute(c, f), Hb.fromBufferAttribute(c, p), kb.fromBufferAttribute(c, h), g.normal = Zr.getInterpolation(Gv, Nf, zf, Of, Bb, Hb, kb, new j()), g.normal.dot(n.direction) > 0 && g.normal.multiplyScalar(-1));
    const _ = {
      a: f,
      b: p,
      c: h,
      normal: new j(),
      materialIndex: 0
    };
    Zr.getNormal(Nf, zf, Of, _.normal), g.face = _;
  }
  return g;
}
class jl extends an {
  constructor(e = 1, t = 1, n = 1, a = 1, s = 1, c = 1) {
    super(), this.type = "BoxGeometry", this.parameters = {
      width: e,
      height: t,
      depth: n,
      widthSegments: a,
      heightSegments: s,
      depthSegments: c
    };
    const f = this;
    a = Math.floor(a), s = Math.floor(s), c = Math.floor(c);
    const p = [], h = [], g = [], _ = [];
    let x = 0, M = 0;
    E("z", "y", "x", -1, -1, n, t, e, c, s, 0), E("z", "y", "x", 1, -1, n, t, -e, c, s, 1), E("x", "z", "y", 1, 1, e, n, t, a, c, 2), E("x", "z", "y", 1, -1, e, n, -t, a, c, 3), E("x", "y", "z", 1, -1, e, t, n, a, s, 4), E("x", "y", "z", -1, -1, e, t, -n, a, s, 5), this.setIndex(p), this.setAttribute("position", new Rt(h, 3)), this.setAttribute("normal", new Rt(g, 3)), this.setAttribute("uv", new Rt(_, 2));
    function E(A, T, b, L, R, U, F, V, k, G, z) {
      const I = U / k, Q = F / G, te = U / 2, $ = F / 2, ie = V / 2, fe = k + 1, Ee = G + 1;
      let Te = 0, W = 0;
      const ae = new j();
      for (let ne = 0; ne < Ee; ne++) {
        const Se = ne * Q - $;
        for (let ue = 0; ue < fe; ue++) {
          const pe = ue * I - te;
          ae[A] = pe * L, ae[T] = Se * R, ae[b] = ie, h.push(ae.x, ae.y, ae.z), ae[A] = 0, ae[T] = 0, ae[b] = V > 0 ? 1 : -1, g.push(ae.x, ae.y, ae.z), _.push(ue / k), _.push(1 - ne / G), Te += 1;
        }
      }
      for (let ne = 0; ne < G; ne++)
        for (let Se = 0; Se < k; Se++) {
          const ue = x + Se + fe * ne, pe = x + Se + fe * (ne + 1), ye = x + (Se + 1) + fe * (ne + 1), je = x + (Se + 1) + fe * ne;
          p.push(ue, pe, je), p.push(pe, ye, je), W += 6;
        }
      f.addGroup(M, W, z), M += W, x += Te;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new jl(e.width, e.height, e.depth, e.widthSegments, e.heightSegments, e.depthSegments);
  }
}
function id(u) {
  const e = {};
  for (const t in u) {
    e[t] = {};
    for (const n in u[t]) {
      const a = u[t][n];
      a && (a.isColor || a.isMatrix3 || a.isMatrix4 || a.isVector2 || a.isVector3 || a.isVector4 || a.isTexture || a.isQuaternion) ? a.isRenderTargetTexture ? (console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."), e[t][n] = null) : e[t][n] = a.clone() : Array.isArray(a) ? e[t][n] = a.slice() : e[t][n] = a;
    }
  }
  return e;
}
function Tr(u) {
  const e = {};
  for (let t = 0; t < u.length; t++) {
    const n = id(u[t]);
    for (const a in n)
      e[a] = n[a];
  }
  return e;
}
function iD(u) {
  const e = [];
  for (let t = 0; t < u.length; t++)
    e.push(u[t].clone());
  return e;
}
function ST(u) {
  return u.getRenderTarget() === null && u.outputEncoding === Pn ? us : td;
}
const MT = { clone: id, merge: Tr };
var rD = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`, aD = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;
class Vs extends nr {
  constructor(e) {
    super(), this.isShaderMaterial = !0, this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.uniformsGroups = [], this.vertexShader = rD, this.fragmentShader = aD, this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.forceSinglePass = !0, this.extensions = {
      derivatives: !1,
      // set to use derivatives
      fragDepth: !1,
      // set to use fragment depth values
      drawBuffers: !1,
      // set to use draw buffers
      shaderTextureLOD: !1
      // set to use shader texture LOD
    }, this.defaultAttributeValues = {
      color: [1, 1, 1],
      uv: [0, 0],
      uv2: [0, 0]
    }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, e !== void 0 && this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.fragmentShader = e.fragmentShader, this.vertexShader = e.vertexShader, this.uniforms = id(e.uniforms), this.uniformsGroups = iD(e.uniformsGroups), this.defines = Object.assign({}, e.defines), this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.fog = e.fog, this.lights = e.lights, this.clipping = e.clipping, this.extensions = Object.assign({}, e.extensions), this.glslVersion = e.glslVersion, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    t.glslVersion = this.glslVersion, t.uniforms = {};
    for (const a in this.uniforms) {
      const c = this.uniforms[a].value;
      c && c.isTexture ? t.uniforms[a] = {
        type: "t",
        value: c.toJSON(e).uuid
      } : c && c.isColor ? t.uniforms[a] = {
        type: "c",
        value: c.getHex()
      } : c && c.isVector2 ? t.uniforms[a] = {
        type: "v2",
        value: c.toArray()
      } : c && c.isVector3 ? t.uniforms[a] = {
        type: "v3",
        value: c.toArray()
      } : c && c.isVector4 ? t.uniforms[a] = {
        type: "v4",
        value: c.toArray()
      } : c && c.isMatrix3 ? t.uniforms[a] = {
        type: "m3",
        value: c.toArray()
      } : c && c.isMatrix4 ? t.uniforms[a] = {
        type: "m4",
        value: c.toArray()
      } : t.uniforms[a] = {
        value: c
      };
    }
    Object.keys(this.defines).length > 0 && (t.defines = this.defines), t.vertexShader = this.vertexShader, t.fragmentShader = this.fragmentShader;
    const n = {};
    for (const a in this.extensions)
      this.extensions[a] === !0 && (n[a] = !0);
    return Object.keys(n).length > 0 && (t.extensions = n), t;
  }
}
class Tp extends Mn {
  constructor() {
    super(), this.isCamera = !0, this.type = "Camera", this.matrixWorldInverse = new Qt(), this.projectionMatrix = new Qt(), this.projectionMatrixInverse = new Qt();
  }
  copy(e, t) {
    return super.copy(e, t), this.matrixWorldInverse.copy(e.matrixWorldInverse), this.projectionMatrix.copy(e.projectionMatrix), this.projectionMatrixInverse.copy(e.projectionMatrixInverse), this;
  }
  getWorldDirection(e) {
    this.updateWorldMatrix(!0, !1);
    const t = this.matrixWorld.elements;
    return e.set(-t[8], -t[9], -t[10]).normalize();
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  updateWorldMatrix(e, t) {
    super.updateWorldMatrix(e, t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
let Xi = class extends Tp {
  constructor(e = 50, t = 1, n = 0.1, a = 2e3) {
    super(), this.isPerspectiveCamera = !0, this.type = "PerspectiveCamera", this.fov = e, this.zoom = 1, this.near = n, this.far = a, this.focus = 10, this.aspect = t, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
  }
  copy(e, t) {
    return super.copy(e, t), this.fov = e.fov, this.zoom = e.zoom, this.near = e.near, this.far = e.far, this.focus = e.focus, this.aspect = e.aspect, this.view = e.view === null ? null : Object.assign({}, e.view), this.filmGauge = e.filmGauge, this.filmOffset = e.filmOffset, this;
  }
  /**
   * Sets the FOV by focal length in respect to the current .filmGauge.
   *
   * The default film gauge is 35, so that the focal length can be specified for
   * a 35mm (full frame) camera.
   *
   * Values for focal length and film gauge must have the same unit.
   */
  setFocalLength(e) {
    const t = 0.5 * this.getFilmHeight() / e;
    this.fov = nd * 2 * Math.atan(t), this.updateProjectionMatrix();
  }
  /**
   * Calculates the focal length from the current .fov and .filmGauge.
   */
  getFocalLength() {
    const e = Math.tan(nc * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / e;
  }
  getEffectiveFOV() {
    return nd * 2 * Math.atan(
      Math.tan(nc * 0.5 * this.fov) / this.zoom
    );
  }
  getFilmWidth() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }
  getFilmHeight() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
   * the monitors are in grid like this
   *
   *   +---+---+---+
   *   | A | B | C |
   *   +---+---+---+
   *   | D | E | F |
   *   +---+---+---+
   *
   * then for each monitor you would call it like this
   *
   *   const w = 1920;
   *   const h = 1080;
   *   const fullWidth = w * 3;
   *   const fullHeight = h * 2;
   *
   *   --A--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
   *   --B--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
   *   --C--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
   *   --D--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
   *   --E--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
   *   --F--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
   *
   *   Note there is no reason monitors have to be the same size or in a grid.
   */
  setViewOffset(e, t, n, a, s, c) {
    this.aspect = e / t, this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = a, this.view.width = s, this.view.height = c, this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = this.near;
    let t = e * Math.tan(nc * 0.5 * this.fov) / this.zoom, n = 2 * t, a = this.aspect * n, s = -0.5 * a;
    const c = this.view;
    if (this.view !== null && this.view.enabled) {
      const p = c.fullWidth, h = c.fullHeight;
      s += c.offsetX * a / p, t -= c.offsetY * n / h, a *= c.width / p, n *= c.height / h;
    }
    const f = this.filmOffset;
    f !== 0 && (s += e * f / this.getFilmWidth()), this.projectionMatrix.makePerspective(s, s + a, t, t - n, e, this.far), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.fov = this.fov, t.object.zoom = this.zoom, t.object.near = this.near, t.object.far = this.far, t.object.focus = this.focus, t.object.aspect = this.aspect, this.view !== null && (t.object.view = Object.assign({}, this.view)), t.object.filmGauge = this.filmGauge, t.object.filmOffset = this.filmOffset, t;
  }
};
const If = -90, Ff = 1;
class bT extends Mn {
  constructor(e, t, n) {
    super(), this.type = "CubeCamera", this.renderTarget = n;
    const a = new Xi(If, Ff, e, t);
    a.layers = this.layers, a.up.set(0, 1, 0), a.lookAt(1, 0, 0), this.add(a);
    const s = new Xi(If, Ff, e, t);
    s.layers = this.layers, s.up.set(0, 1, 0), s.lookAt(-1, 0, 0), this.add(s);
    const c = new Xi(If, Ff, e, t);
    c.layers = this.layers, c.up.set(0, 0, -1), c.lookAt(0, 1, 0), this.add(c);
    const f = new Xi(If, Ff, e, t);
    f.layers = this.layers, f.up.set(0, 0, 1), f.lookAt(0, -1, 0), this.add(f);
    const p = new Xi(If, Ff, e, t);
    p.layers = this.layers, p.up.set(0, 1, 0), p.lookAt(0, 0, 1), this.add(p);
    const h = new Xi(If, Ff, e, t);
    h.layers = this.layers, h.up.set(0, 1, 0), h.lookAt(0, 0, -1), this.add(h);
  }
  update(e, t) {
    this.parent === null && this.updateMatrixWorld();
    const n = this.renderTarget, [a, s, c, f, p, h] = this.children, g = e.getRenderTarget(), _ = e.toneMapping, x = e.xr.enabled;
    e.toneMapping = ds, e.xr.enabled = !1;
    const M = n.texture.generateMipmaps;
    n.texture.generateMipmaps = !1, e.setRenderTarget(n, 0), e.render(t, a), e.setRenderTarget(n, 1), e.render(t, s), e.setRenderTarget(n, 2), e.render(t, c), e.setRenderTarget(n, 3), e.render(t, f), e.setRenderTarget(n, 4), e.render(t, p), n.texture.generateMipmaps = M, e.setRenderTarget(n, 5), e.render(t, h), e.setRenderTarget(g), e.toneMapping = _, e.xr.enabled = x, n.texture.needsPMREMUpdate = !0;
  }
}
class Cp extends pi {
  constructor(e, t, n, a, s, c, f, p, h, g) {
    e = e !== void 0 ? e : [], t = t !== void 0 ? t : kl, super(e, t, n, a, s, c, f, p, h, g), this.isCubeTexture = !0, this.flipY = !1;
  }
  get images() {
    return this.image;
  }
  set images(e) {
    this.image = e;
  }
}
class ET extends Ga {
  constructor(e = 1, t = {}) {
    super(e, e, t), this.isWebGLCubeRenderTarget = !0;
    const n = { width: e, height: e, depth: 1 }, a = [n, n, n, n, n, n];
    this.texture = new Cp(a, t.mapping, t.wrapS, t.wrapT, t.magFilter, t.minFilter, t.format, t.type, t.anisotropy, t.encoding), this.texture.isRenderTargetTexture = !0, this.texture.generateMipmaps = t.generateMipmaps !== void 0 ? t.generateMipmaps : !1, this.texture.minFilter = t.minFilter !== void 0 ? t.minFilter : ai;
  }
  fromEquirectangularTexture(e, t) {
    this.texture.type = t.type, this.texture.encoding = t.encoding, this.texture.generateMipmaps = t.generateMipmaps, this.texture.minFilter = t.minFilter, this.texture.magFilter = t.magFilter;
    const n = {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: (
        /* glsl */
        `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
      ),
      fragmentShader: (
        /* glsl */
        `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
      )
    }, a = new jl(5, 5, 5), s = new Vs({
      name: "CubemapFromEquirect",
      uniforms: id(n.uniforms),
      vertexShader: n.vertexShader,
      fragmentShader: n.fragmentShader,
      side: Cr,
      blending: Lo
    });
    s.uniforms.tEquirect.value = t;
    const c = new tr(a, s), f = t.minFilter;
    return t.minFilter === Gl && (t.minFilter = ai), new bT(1, 10, this).update(e, c), t.minFilter = f, c.geometry.dispose(), c.material.dispose(), this;
  }
  clear(e, t, n, a) {
    const s = e.getRenderTarget();
    for (let c = 0; c < 6; c++)
      e.setRenderTarget(this, c), e.clear(t, n, a);
    e.setRenderTarget(s);
  }
}
const A_ = /* @__PURE__ */ new j(), sD = /* @__PURE__ */ new j(), oD = /* @__PURE__ */ new cn();
class Il {
  constructor(e = new j(1, 0, 0), t = 0) {
    this.isPlane = !0, this.normal = e, this.constant = t;
  }
  set(e, t) {
    return this.normal.copy(e), this.constant = t, this;
  }
  setComponents(e, t, n, a) {
    return this.normal.set(e, t, n), this.constant = a, this;
  }
  setFromNormalAndCoplanarPoint(e, t) {
    return this.normal.copy(e), this.constant = -t.dot(this.normal), this;
  }
  setFromCoplanarPoints(e, t, n) {
    const a = A_.subVectors(n, t).cross(sD.subVectors(e, t)).normalize();
    return this.setFromNormalAndCoplanarPoint(a, e), this;
  }
  copy(e) {
    return this.normal.copy(e.normal), this.constant = e.constant, this;
  }
  normalize() {
    const e = 1 / this.normal.length();
    return this.normal.multiplyScalar(e), this.constant *= e, this;
  }
  negate() {
    return this.constant *= -1, this.normal.negate(), this;
  }
  distanceToPoint(e) {
    return this.normal.dot(e) + this.constant;
  }
  distanceToSphere(e) {
    return this.distanceToPoint(e.center) - e.radius;
  }
  projectPoint(e, t) {
    return t.copy(e).addScaledVector(this.normal, -this.distanceToPoint(e));
  }
  intersectLine(e, t) {
    const n = e.delta(A_), a = this.normal.dot(n);
    if (a === 0)
      return this.distanceToPoint(e.start) === 0 ? t.copy(e.start) : null;
    const s = -(e.start.dot(this.normal) + this.constant) / a;
    return s < 0 || s > 1 ? null : t.copy(e.start).addScaledVector(n, s);
  }
  intersectsLine(e) {
    const t = this.distanceToPoint(e.start), n = this.distanceToPoint(e.end);
    return t < 0 && n > 0 || n < 0 && t > 0;
  }
  intersectsBox(e) {
    return e.intersectsPlane(this);
  }
  intersectsSphere(e) {
    return e.intersectsPlane(this);
  }
  coplanarPoint(e) {
    return e.copy(this.normal).multiplyScalar(-this.constant);
  }
  applyMatrix4(e, t) {
    const n = t || oD.getNormalMatrix(e), a = this.coplanarPoint(A_).applyMatrix4(e), s = this.normal.applyMatrix3(n).normalize();
    return this.constant = -a.dot(s), this;
  }
  translate(e) {
    return this.constant -= e.dot(this.normal), this;
  }
  equals(e) {
    return e.normal.equals(this.normal) && e.constant === this.constant;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const Bu = /* @__PURE__ */ new Ws(), Xv = /* @__PURE__ */ new j();
class Hg {
  constructor(e = new Il(), t = new Il(), n = new Il(), a = new Il(), s = new Il(), c = new Il()) {
    this.planes = [e, t, n, a, s, c];
  }
  set(e, t, n, a, s, c) {
    const f = this.planes;
    return f[0].copy(e), f[1].copy(t), f[2].copy(n), f[3].copy(a), f[4].copy(s), f[5].copy(c), this;
  }
  copy(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++)
      t[n].copy(e.planes[n]);
    return this;
  }
  setFromProjectionMatrix(e) {
    const t = this.planes, n = e.elements, a = n[0], s = n[1], c = n[2], f = n[3], p = n[4], h = n[5], g = n[6], _ = n[7], x = n[8], M = n[9], E = n[10], A = n[11], T = n[12], b = n[13], L = n[14], R = n[15];
    return t[0].setComponents(f - a, _ - p, A - x, R - T).normalize(), t[1].setComponents(f + a, _ + p, A + x, R + T).normalize(), t[2].setComponents(f + s, _ + h, A + M, R + b).normalize(), t[3].setComponents(f - s, _ - h, A - M, R - b).normalize(), t[4].setComponents(f - c, _ - g, A - E, R - L).normalize(), t[5].setComponents(f + c, _ + g, A + E, R + L).normalize(), this;
  }
  intersectsObject(e) {
    if (e.boundingSphere !== void 0)
      e.boundingSphere === null && e.computeBoundingSphere(), Bu.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);
    else {
      const t = e.geometry;
      t.boundingSphere === null && t.computeBoundingSphere(), Bu.copy(t.boundingSphere).applyMatrix4(e.matrixWorld);
    }
    return this.intersectsSphere(Bu);
  }
  intersectsSprite(e) {
    return Bu.center.set(0, 0, 0), Bu.radius = 0.7071067811865476, Bu.applyMatrix4(e.matrixWorld), this.intersectsSphere(Bu);
  }
  intersectsSphere(e) {
    const t = this.planes, n = e.center, a = -e.radius;
    for (let s = 0; s < 6; s++)
      if (t[s].distanceToPoint(n) < a)
        return !1;
    return !0;
  }
  intersectsBox(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++) {
      const a = t[n];
      if (Xv.x = a.normal.x > 0 ? e.max.x : e.min.x, Xv.y = a.normal.y > 0 ? e.max.y : e.min.y, Xv.z = a.normal.z > 0 ? e.max.z : e.min.z, a.distanceToPoint(Xv) < 0)
        return !1;
    }
    return !0;
  }
  containsPoint(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++)
      if (t[n].distanceToPoint(e) < 0)
        return !1;
    return !0;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
function wT() {
  let u = null, e = !1, t = null, n = null;
  function a(s, c) {
    t(s, c), n = u.requestAnimationFrame(a);
  }
  return {
    start: function() {
      e !== !0 && t !== null && (n = u.requestAnimationFrame(a), e = !0);
    },
    stop: function() {
      u.cancelAnimationFrame(n), e = !1;
    },
    setAnimationLoop: function(s) {
      t = s;
    },
    setContext: function(s) {
      u = s;
    }
  };
}
function lD(u, e) {
  const t = e.isWebGL2, n = /* @__PURE__ */ new WeakMap();
  function a(h, g) {
    const _ = h.array, x = h.usage, M = u.createBuffer();
    u.bindBuffer(g, M), u.bufferData(g, _, x), h.onUploadCallback();
    let E;
    if (_ instanceof Float32Array)
      E = 5126;
    else if (_ instanceof Uint16Array)
      if (h.isFloat16BufferAttribute)
        if (t)
          E = 5131;
        else
          throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
      else
        E = 5123;
    else if (_ instanceof Int16Array)
      E = 5122;
    else if (_ instanceof Uint32Array)
      E = 5125;
    else if (_ instanceof Int32Array)
      E = 5124;
    else if (_ instanceof Int8Array)
      E = 5120;
    else if (_ instanceof Uint8Array)
      E = 5121;
    else if (_ instanceof Uint8ClampedArray)
      E = 5121;
    else
      throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + _);
    return {
      buffer: M,
      type: E,
      bytesPerElement: _.BYTES_PER_ELEMENT,
      version: h.version
    };
  }
  function s(h, g, _) {
    const x = g.array, M = g.updateRange;
    u.bindBuffer(_, h), M.count === -1 ? u.bufferSubData(_, 0, x) : (t ? u.bufferSubData(
      _,
      M.offset * x.BYTES_PER_ELEMENT,
      x,
      M.offset,
      M.count
    ) : u.bufferSubData(
      _,
      M.offset * x.BYTES_PER_ELEMENT,
      x.subarray(M.offset, M.offset + M.count)
    ), M.count = -1), g.onUploadCallback();
  }
  function c(h) {
    return h.isInterleavedBufferAttribute && (h = h.data), n.get(h);
  }
  function f(h) {
    h.isInterleavedBufferAttribute && (h = h.data);
    const g = n.get(h);
    g && (u.deleteBuffer(g.buffer), n.delete(h));
  }
  function p(h, g) {
    if (h.isGLBufferAttribute) {
      const x = n.get(h);
      (!x || x.version < h.version) && n.set(h, {
        buffer: h.buffer,
        type: h.type,
        bytesPerElement: h.elementSize,
        version: h.version
      });
      return;
    }
    h.isInterleavedBufferAttribute && (h = h.data);
    const _ = n.get(h);
    _ === void 0 ? n.set(h, a(h, g)) : _.version < h.version && (s(_.buffer, h, g), _.version = h.version);
  }
  return {
    get: c,
    remove: f,
    update: p
  };
}
class od extends an {
  constructor(e = 1, t = 1, n = 1, a = 1) {
    super(), this.type = "PlaneGeometry", this.parameters = {
      width: e,
      height: t,
      widthSegments: n,
      heightSegments: a
    };
    const s = e / 2, c = t / 2, f = Math.floor(n), p = Math.floor(a), h = f + 1, g = p + 1, _ = e / f, x = t / p, M = [], E = [], A = [], T = [];
    for (let b = 0; b < g; b++) {
      const L = b * x - c;
      for (let R = 0; R < h; R++) {
        const U = R * _ - s;
        E.push(U, -L, 0), A.push(0, 0, 1), T.push(R / f), T.push(1 - b / p);
      }
    }
    for (let b = 0; b < p; b++)
      for (let L = 0; L < f; L++) {
        const R = L + h * b, U = L + h * (b + 1), F = L + 1 + h * (b + 1), V = L + 1 + h * b;
        M.push(R, U, V), M.push(U, F, V);
      }
    this.setIndex(M), this.setAttribute("position", new Rt(E, 3)), this.setAttribute("normal", new Rt(A, 3)), this.setAttribute("uv", new Rt(T, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new od(e.width, e.height, e.widthSegments, e.heightSegments);
  }
}
var uD = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`, cD = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, fD = `#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`, dD = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`, hD = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`, pD = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`, mD = "vec3 transformed = vec3( position );", vD = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`, gD = `float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`, yD = `#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			 return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float R21 = R12;
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`, _D = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = dFdx( surf_pos.xyz );
		vec3 vSigmaY = dFdy( surf_pos.xyz );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`, xD = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`, SD = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`, MD = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`, bD = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`, ED = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`, wD = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`, TD = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`, CD = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`, AD = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`, RD = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_v0 0.339
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_v1 0.276
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_v4 0.046
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_v5 0.016
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_v6 0.0038
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`, LD = `vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`, DD = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`, PD = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`, UD = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`, ND = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`, zD = "gl_FragColor = linearToOutputTexel( gl_FragColor );", OD = `vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`, ID = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`, FD = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`, BD = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`, HD = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`, kD = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`, VD = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`, GD = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`, WD = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`, qD = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`, XD = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`, jD = `#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`, YD = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`, ZD = `LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`, JD = `varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`, QD = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( LEGACY_LIGHTS )
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#else
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`, KD = `#if defined( USE_ENVMAP )
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`, $D = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`, eP = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`, tP = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`, nP = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`, iP = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif`, rP = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec3 sheenSpecular = vec3( 0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`, aP = `
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometry.viewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`, sP = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry.normal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`, oP = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`, lP = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`, uP = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, cP = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`, fP = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`, dP = `#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`, hP = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`, pP = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`, mP = `#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, vP = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`, gP = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`, yP = `#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`, _P = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`, xP = `#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`, SP = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`, MP = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#ifdef USE_NORMALMAP_TANGENTSPACE
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal, vNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 geometryNormal = normal;`, bP = `#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`, EP = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, wP = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, TP = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`, CP = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`, AP = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`, RP = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`, LP = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`, DP = `#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`, PP = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`, UP = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}
float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`, NP = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`, zP = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`, OP = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`, IP = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`, FP = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`, BP = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`, HP = `#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`, kP = `#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`, VP = `#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`, GP = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`, WP = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`, qP = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	uniform int boneTextureSize;
	mat4 getBoneMatrix( const in float i ) {
		float j = i * 4.0;
		float x = mod( j, float( boneTextureSize ) );
		float y = floor( j / float( boneTextureSize ) );
		float dx = 1.0 / float( boneTextureSize );
		float dy = 1.0 / float( boneTextureSize );
		y = dy * ( y + 0.5 );
		vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
		vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
		vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
		vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
		mat4 bone = mat4( v1, v2, v3, v4 );
		return bone;
	}
#endif`, XP = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`, jP = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`, YP = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`, ZP = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`, JP = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`, QP = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`, KP = `#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );
#endif`, $P = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, vec2 fullSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		
		vec2 lodFudge = pow( 1.95, lod ) / fullSize;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec2 fullSize = vec2( textureSize( sampler, 0 ) );
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), fullSize, floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), fullSize, ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`, eU = `#ifdef USE_UV
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, tU = `#ifdef USE_UV
	varying vec2 vUv;
#endif
#ifdef USE_UV2
	attribute vec2 uv2;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, nU = `#ifdef USE_UV
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`, iU = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;
const rU = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`, aU = `uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`, sU = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, oU = `#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`, lU = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, uU = `uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`, cU = `#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`, fU = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`, dU = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`, hU = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`, pU = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`, mU = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`, vU = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, gU = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, yU = `#include <common>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`, _U = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, xU = `#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, SU = `#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, MU = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`, bU = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, EU = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`, wU = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`, TU = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, CU = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, AU = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`, RU = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, LU = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, DU = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, PU = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`, UU = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, NU = `#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, zU = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`, OU = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, IU = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`, nn = {
  alphamap_fragment: uD,
  alphamap_pars_fragment: cD,
  alphatest_fragment: fD,
  alphatest_pars_fragment: dD,
  aomap_fragment: hD,
  aomap_pars_fragment: pD,
  begin_vertex: mD,
  beginnormal_vertex: vD,
  bsdfs: gD,
  iridescence_fragment: yD,
  bumpmap_pars_fragment: _D,
  clipping_planes_fragment: xD,
  clipping_planes_pars_fragment: SD,
  clipping_planes_pars_vertex: MD,
  clipping_planes_vertex: bD,
  color_fragment: ED,
  color_pars_fragment: wD,
  color_pars_vertex: TD,
  color_vertex: CD,
  common: AD,
  cube_uv_reflection_fragment: RD,
  defaultnormal_vertex: LD,
  displacementmap_pars_vertex: DD,
  displacementmap_vertex: PD,
  emissivemap_fragment: UD,
  emissivemap_pars_fragment: ND,
  encodings_fragment: zD,
  encodings_pars_fragment: OD,
  envmap_fragment: ID,
  envmap_common_pars_fragment: FD,
  envmap_pars_fragment: BD,
  envmap_pars_vertex: HD,
  envmap_physical_pars_fragment: KD,
  envmap_vertex: kD,
  fog_vertex: VD,
  fog_pars_vertex: GD,
  fog_fragment: WD,
  fog_pars_fragment: qD,
  gradientmap_pars_fragment: XD,
  lightmap_fragment: jD,
  lightmap_pars_fragment: YD,
  lights_lambert_fragment: ZD,
  lights_lambert_pars_fragment: JD,
  lights_pars_begin: QD,
  lights_toon_fragment: $D,
  lights_toon_pars_fragment: eP,
  lights_phong_fragment: tP,
  lights_phong_pars_fragment: nP,
  lights_physical_fragment: iP,
  lights_physical_pars_fragment: rP,
  lights_fragment_begin: aP,
  lights_fragment_maps: sP,
  lights_fragment_end: oP,
  logdepthbuf_fragment: lP,
  logdepthbuf_pars_fragment: uP,
  logdepthbuf_pars_vertex: cP,
  logdepthbuf_vertex: fP,
  map_fragment: dP,
  map_pars_fragment: hP,
  map_particle_fragment: pP,
  map_particle_pars_fragment: mP,
  metalnessmap_fragment: vP,
  metalnessmap_pars_fragment: gP,
  morphcolor_vertex: yP,
  morphnormal_vertex: _P,
  morphtarget_pars_vertex: xP,
  morphtarget_vertex: SP,
  normal_fragment_begin: MP,
  normal_fragment_maps: bP,
  normal_pars_fragment: EP,
  normal_pars_vertex: wP,
  normal_vertex: TP,
  normalmap_pars_fragment: CP,
  clearcoat_normal_fragment_begin: AP,
  clearcoat_normal_fragment_maps: RP,
  clearcoat_pars_fragment: LP,
  iridescence_pars_fragment: DP,
  output_fragment: PP,
  packing: UP,
  premultiplied_alpha_fragment: NP,
  project_vertex: zP,
  dithering_fragment: OP,
  dithering_pars_fragment: IP,
  roughnessmap_fragment: FP,
  roughnessmap_pars_fragment: BP,
  shadowmap_pars_fragment: HP,
  shadowmap_pars_vertex: kP,
  shadowmap_vertex: VP,
  shadowmask_pars_fragment: GP,
  skinbase_vertex: WP,
  skinning_pars_vertex: qP,
  skinning_vertex: XP,
  skinnormal_vertex: jP,
  specularmap_fragment: YP,
  specularmap_pars_fragment: ZP,
  tonemapping_fragment: JP,
  tonemapping_pars_fragment: QP,
  transmission_fragment: KP,
  transmission_pars_fragment: $P,
  uv_pars_fragment: eU,
  uv_pars_vertex: tU,
  uv_vertex: nU,
  worldpos_vertex: iU,
  background_vert: rU,
  background_frag: aU,
  backgroundCube_vert: sU,
  backgroundCube_frag: oU,
  cube_vert: lU,
  cube_frag: uU,
  depth_vert: cU,
  depth_frag: fU,
  distanceRGBA_vert: dU,
  distanceRGBA_frag: hU,
  equirect_vert: pU,
  equirect_frag: mU,
  linedashed_vert: vU,
  linedashed_frag: gU,
  meshbasic_vert: yU,
  meshbasic_frag: _U,
  meshlambert_vert: xU,
  meshlambert_frag: SU,
  meshmatcap_vert: MU,
  meshmatcap_frag: bU,
  meshnormal_vert: EU,
  meshnormal_frag: wU,
  meshphong_vert: TU,
  meshphong_frag: CU,
  meshphysical_vert: AU,
  meshphysical_frag: RU,
  meshtoon_vert: LU,
  meshtoon_frag: DU,
  points_vert: PU,
  points_frag: UU,
  shadow_vert: NU,
  shadow_frag: zU,
  sprite_vert: OU,
  sprite_frag: IU
}, lt = {
  common: {
    diffuse: { value: /* @__PURE__ */ new yt(16777215) },
    opacity: { value: 1 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new cn() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new cn() },
    alphaTest: { value: 0 }
  },
  specularmap: {
    specularMap: { value: null },
    specularMapTransform: { value: /* @__PURE__ */ new cn() }
  },
  envmap: {
    envMap: { value: null },
    flipEnvMap: { value: -1 },
    reflectivity: { value: 1 },
    // basic, lambert, phong
    ior: { value: 1.5 },
    // physical
    refractionRatio: { value: 0.98 }
    // basic, lambert, phong
  },
  aomap: {
    aoMap: { value: null },
    aoMapIntensity: { value: 1 },
    aoMapTransform: { value: /* @__PURE__ */ new cn() }
  },
  lightmap: {
    lightMap: { value: null },
    lightMapIntensity: { value: 1 },
    lightMapTransform: { value: /* @__PURE__ */ new cn() }
  },
  bumpmap: {
    bumpMap: { value: null },
    bumpMapTransform: { value: /* @__PURE__ */ new cn() },
    bumpScale: { value: 1 }
  },
  normalmap: {
    normalMap: { value: null },
    normalMapTransform: { value: /* @__PURE__ */ new cn() },
    normalScale: { value: /* @__PURE__ */ new Ge(1, 1) }
  },
  displacementmap: {
    displacementMap: { value: null },
    displacementMapTransform: { value: /* @__PURE__ */ new cn() },
    displacementScale: { value: 1 },
    displacementBias: { value: 0 }
  },
  emissivemap: {
    emissiveMap: { value: null },
    emissiveMapTransform: { value: /* @__PURE__ */ new cn() }
  },
  metalnessmap: {
    metalnessMap: { value: null },
    metalnessMapTransform: { value: /* @__PURE__ */ new cn() }
  },
  roughnessmap: {
    roughnessMap: { value: null },
    roughnessMapTransform: { value: /* @__PURE__ */ new cn() }
  },
  gradientmap: {
    gradientMap: { value: null }
  },
  fog: {
    fogDensity: { value: 25e-5 },
    fogNear: { value: 1 },
    fogFar: { value: 2e3 },
    fogColor: { value: /* @__PURE__ */ new yt(16777215) }
  },
  lights: {
    ambientLightColor: { value: [] },
    lightProbe: { value: [] },
    directionalLights: { value: [], properties: {
      direction: {},
      color: {}
    } },
    directionalLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    directionalShadowMap: { value: [] },
    directionalShadowMatrix: { value: [] },
    spotLights: { value: [], properties: {
      color: {},
      position: {},
      direction: {},
      distance: {},
      coneCos: {},
      penumbraCos: {},
      decay: {}
    } },
    spotLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    spotLightMap: { value: [] },
    spotShadowMap: { value: [] },
    spotLightMatrix: { value: [] },
    pointLights: { value: [], properties: {
      color: {},
      position: {},
      decay: {},
      distance: {}
    } },
    pointLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {},
      shadowCameraNear: {},
      shadowCameraFar: {}
    } },
    pointShadowMap: { value: [] },
    pointShadowMatrix: { value: [] },
    hemisphereLights: { value: [], properties: {
      direction: {},
      skyColor: {},
      groundColor: {}
    } },
    // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    rectAreaLights: { value: [], properties: {
      color: {},
      position: {},
      width: {},
      height: {}
    } },
    ltc_1: { value: null },
    ltc_2: { value: null }
  },
  points: {
    diffuse: { value: /* @__PURE__ */ new yt(16777215) },
    opacity: { value: 1 },
    size: { value: 1 },
    scale: { value: 1 },
    map: { value: null },
    alphaMap: { value: null },
    alphaTest: { value: 0 },
    uvTransform: { value: /* @__PURE__ */ new cn() }
  },
  sprite: {
    diffuse: { value: /* @__PURE__ */ new yt(16777215) },
    opacity: { value: 1 },
    center: { value: /* @__PURE__ */ new Ge(0.5, 0.5) },
    rotation: { value: 0 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new cn() },
    alphaMap: { value: null },
    alphaTest: { value: 0 }
  }
}, cs = {
  basic: {
    uniforms: /* @__PURE__ */ Tr([
      lt.common,
      lt.specularmap,
      lt.envmap,
      lt.aomap,
      lt.lightmap,
      lt.fog
    ]),
    vertexShader: nn.meshbasic_vert,
    fragmentShader: nn.meshbasic_frag
  },
  lambert: {
    uniforms: /* @__PURE__ */ Tr([
      lt.common,
      lt.specularmap,
      lt.envmap,
      lt.aomap,
      lt.lightmap,
      lt.emissivemap,
      lt.bumpmap,
      lt.normalmap,
      lt.displacementmap,
      lt.fog,
      lt.lights,
      {
        emissive: { value: /* @__PURE__ */ new yt(0) }
      }
    ]),
    vertexShader: nn.meshlambert_vert,
    fragmentShader: nn.meshlambert_frag
  },
  phong: {
    uniforms: /* @__PURE__ */ Tr([
      lt.common,
      lt.specularmap,
      lt.envmap,
      lt.aomap,
      lt.lightmap,
      lt.emissivemap,
      lt.bumpmap,
      lt.normalmap,
      lt.displacementmap,
      lt.fog,
      lt.lights,
      {
        emissive: { value: /* @__PURE__ */ new yt(0) },
        specular: { value: /* @__PURE__ */ new yt(1118481) },
        shininess: { value: 30 }
      }
    ]),
    vertexShader: nn.meshphong_vert,
    fragmentShader: nn.meshphong_frag
  },
  standard: {
    uniforms: /* @__PURE__ */ Tr([
      lt.common,
      lt.envmap,
      lt.aomap,
      lt.lightmap,
      lt.emissivemap,
      lt.bumpmap,
      lt.normalmap,
      lt.displacementmap,
      lt.roughnessmap,
      lt.metalnessmap,
      lt.fog,
      lt.lights,
      {
        emissive: { value: /* @__PURE__ */ new yt(0) },
        roughness: { value: 1 },
        metalness: { value: 0 },
        envMapIntensity: { value: 1 }
        // temporary
      }
    ]),
    vertexShader: nn.meshphysical_vert,
    fragmentShader: nn.meshphysical_frag
  },
  toon: {
    uniforms: /* @__PURE__ */ Tr([
      lt.common,
      lt.aomap,
      lt.lightmap,
      lt.emissivemap,
      lt.bumpmap,
      lt.normalmap,
      lt.displacementmap,
      lt.gradientmap,
      lt.fog,
      lt.lights,
      {
        emissive: { value: /* @__PURE__ */ new yt(0) }
      }
    ]),
    vertexShader: nn.meshtoon_vert,
    fragmentShader: nn.meshtoon_frag
  },
  matcap: {
    uniforms: /* @__PURE__ */ Tr([
      lt.common,
      lt.bumpmap,
      lt.normalmap,
      lt.displacementmap,
      lt.fog,
      {
        matcap: { value: null }
      }
    ]),
    vertexShader: nn.meshmatcap_vert,
    fragmentShader: nn.meshmatcap_frag
  },
  points: {
    uniforms: /* @__PURE__ */ Tr([
      lt.points,
      lt.fog
    ]),
    vertexShader: nn.points_vert,
    fragmentShader: nn.points_frag
  },
  dashed: {
    uniforms: /* @__PURE__ */ Tr([
      lt.common,
      lt.fog,
      {
        scale: { value: 1 },
        dashSize: { value: 1 },
        totalSize: { value: 2 }
      }
    ]),
    vertexShader: nn.linedashed_vert,
    fragmentShader: nn.linedashed_frag
  },
  depth: {
    uniforms: /* @__PURE__ */ Tr([
      lt.common,
      lt.displacementmap
    ]),
    vertexShader: nn.depth_vert,
    fragmentShader: nn.depth_frag
  },
  normal: {
    uniforms: /* @__PURE__ */ Tr([
      lt.common,
      lt.bumpmap,
      lt.normalmap,
      lt.displacementmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: nn.meshnormal_vert,
    fragmentShader: nn.meshnormal_frag
  },
  sprite: {
    uniforms: /* @__PURE__ */ Tr([
      lt.sprite,
      lt.fog
    ]),
    vertexShader: nn.sprite_vert,
    fragmentShader: nn.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: { value: /* @__PURE__ */ new cn() },
      t2D: { value: null },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: nn.background_vert,
    fragmentShader: nn.background_frag
  },
  backgroundCube: {
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 },
      backgroundBlurriness: { value: 0 },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: nn.backgroundCube_vert,
    fragmentShader: nn.backgroundCube_frag
  },
  cube: {
    uniforms: {
      tCube: { value: null },
      tFlip: { value: -1 },
      opacity: { value: 1 }
    },
    vertexShader: nn.cube_vert,
    fragmentShader: nn.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: nn.equirect_vert,
    fragmentShader: nn.equirect_frag
  },
  distanceRGBA: {
    uniforms: /* @__PURE__ */ Tr([
      lt.common,
      lt.displacementmap,
      {
        referencePosition: { value: /* @__PURE__ */ new j() },
        nearDistance: { value: 1 },
        farDistance: { value: 1e3 }
      }
    ]),
    vertexShader: nn.distanceRGBA_vert,
    fragmentShader: nn.distanceRGBA_frag
  },
  shadow: {
    uniforms: /* @__PURE__ */ Tr([
      lt.lights,
      lt.fog,
      {
        color: { value: /* @__PURE__ */ new yt(0) },
        opacity: { value: 1 }
      }
    ]),
    vertexShader: nn.shadow_vert,
    fragmentShader: nn.shadow_frag
  }
};
cs.physical = {
  uniforms: /* @__PURE__ */ Tr([
    cs.standard.uniforms,
    {
      clearcoat: { value: 0 },
      clearcoatMap: { value: null },
      clearcoatMapTransform: { value: /* @__PURE__ */ new cn() },
      clearcoatNormalMap: { value: null },
      clearcoatNormalMapTransform: { value: /* @__PURE__ */ new cn() },
      clearcoatNormalScale: { value: /* @__PURE__ */ new Ge(1, 1) },
      clearcoatRoughness: { value: 0 },
      clearcoatRoughnessMap: { value: null },
      clearcoatRoughnessMapTransform: { value: /* @__PURE__ */ new cn() },
      iridescence: { value: 0 },
      iridescenceMap: { value: null },
      iridescenceMapTransform: { value: /* @__PURE__ */ new cn() },
      iridescenceIOR: { value: 1.3 },
      iridescenceThicknessMinimum: { value: 100 },
      iridescenceThicknessMaximum: { value: 400 },
      iridescenceThicknessMap: { value: null },
      iridescenceThicknessMapTransform: { value: /* @__PURE__ */ new cn() },
      sheen: { value: 0 },
      sheenColor: { value: /* @__PURE__ */ new yt(0) },
      sheenColorMap: { value: null },
      sheenColorMapTransform: { value: /* @__PURE__ */ new cn() },
      sheenRoughness: { value: 1 },
      sheenRoughnessMap: { value: null },
      sheenRoughnessMapTransform: { value: /* @__PURE__ */ new cn() },
      transmission: { value: 0 },
      transmissionMap: { value: null },
      transmissionMapTransform: { value: /* @__PURE__ */ new cn() },
      transmissionSamplerSize: { value: /* @__PURE__ */ new Ge() },
      transmissionSamplerMap: { value: null },
      thickness: { value: 0 },
      thicknessMap: { value: null },
      thicknessMapTransform: { value: /* @__PURE__ */ new cn() },
      attenuationDistance: { value: 0 },
      attenuationColor: { value: /* @__PURE__ */ new yt(0) },
      specularColor: { value: /* @__PURE__ */ new yt(1, 1, 1) },
      specularColorMap: { value: null },
      specularColorMapTransform: { value: /* @__PURE__ */ new cn() },
      specularIntensity: { value: 1 },
      specularIntensityMap: { value: null },
      specularIntensityMapTransform: { value: /* @__PURE__ */ new cn() }
    }
  ]),
  vertexShader: nn.meshphysical_vert,
  fragmentShader: nn.meshphysical_frag
};
const jv = { r: 0, b: 0, g: 0 };
function FU(u, e, t, n, a, s, c) {
  const f = new yt(0);
  let p = s === !0 ? 0 : 1, h, g, _ = null, x = 0, M = null;
  function E(T, b) {
    let L = !1, R = b.isScene === !0 ? b.background : null;
    R && R.isTexture && (R = (b.backgroundBlurriness > 0 ? t : e).get(R));
    const U = u.xr, F = U.getSession && U.getSession();
    F && F.environmentBlendMode === "additive" && (R = null), R === null ? A(f, p) : R && R.isColor && (A(R, 1), L = !0), (u.autoClear || L) && u.clear(u.autoClearColor, u.autoClearDepth, u.autoClearStencil), R && (R.isCubeTexture || R.mapping === sd) ? (g === void 0 && (g = new tr(
      new jl(1, 1, 1),
      new Vs({
        name: "BackgroundCubeMaterial",
        uniforms: id(cs.backgroundCube.uniforms),
        vertexShader: cs.backgroundCube.vertexShader,
        fragmentShader: cs.backgroundCube.fragmentShader,
        side: Cr,
        depthTest: !1,
        depthWrite: !1,
        fog: !1
      })
    ), g.geometry.deleteAttribute("normal"), g.geometry.deleteAttribute("uv"), g.onBeforeRender = function(V, k, G) {
      this.matrixWorld.copyPosition(G.matrixWorld);
    }, Object.defineProperty(g.material, "envMap", {
      get: function() {
        return this.uniforms.envMap.value;
      }
    }), a.update(g)), g.material.uniforms.envMap.value = R, g.material.uniforms.flipEnvMap.value = R.isCubeTexture && R.isRenderTargetTexture === !1 ? -1 : 1, g.material.uniforms.backgroundBlurriness.value = b.backgroundBlurriness, g.material.uniforms.backgroundIntensity.value = b.backgroundIntensity, g.material.toneMapped = R.encoding !== Pn, (_ !== R || x !== R.version || M !== u.toneMapping) && (g.material.needsUpdate = !0, _ = R, x = R.version, M = u.toneMapping), g.layers.enableAll(), T.unshift(g, g.geometry, g.material, 0, 0, null)) : R && R.isTexture && (h === void 0 && (h = new tr(
      new od(2, 2),
      new Vs({
        name: "BackgroundMaterial",
        uniforms: id(cs.background.uniforms),
        vertexShader: cs.background.vertexShader,
        fragmentShader: cs.background.fragmentShader,
        side: Do,
        depthTest: !1,
        depthWrite: !1,
        fog: !1
      })
    ), h.geometry.deleteAttribute("normal"), Object.defineProperty(h.material, "map", {
      get: function() {
        return this.uniforms.t2D.value;
      }
    }), a.update(h)), h.material.uniforms.t2D.value = R, h.material.uniforms.backgroundIntensity.value = b.backgroundIntensity, h.material.toneMapped = R.encoding !== Pn, R.matrixAutoUpdate === !0 && R.updateMatrix(), h.material.uniforms.uvTransform.value.copy(R.matrix), (_ !== R || x !== R.version || M !== u.toneMapping) && (h.material.needsUpdate = !0, _ = R, x = R.version, M = u.toneMapping), h.layers.enableAll(), T.unshift(h, h.geometry, h.material, 0, 0, null));
  }
  function A(T, b) {
    T.getRGB(jv, ST(u)), n.buffers.color.setClear(jv.r, jv.g, jv.b, b, c);
  }
  return {
    getClearColor: function() {
      return f;
    },
    setClearColor: function(T, b = 1) {
      f.set(T), p = b, A(f, p);
    },
    getClearAlpha: function() {
      return p;
    },
    setClearAlpha: function(T) {
      p = T, A(f, p);
    },
    render: E
  };
}
function BU(u, e, t, n) {
  const a = u.getParameter(34921), s = n.isWebGL2 ? null : e.get("OES_vertex_array_object"), c = n.isWebGL2 || s !== null, f = {}, p = T(null);
  let h = p, g = !1;
  function _(ie, fe, Ee, Te, W) {
    let ae = !1;
    if (c) {
      const ne = A(Te, Ee, fe);
      h !== ne && (h = ne, M(h.object)), ae = b(ie, Te, Ee, W), ae && L(ie, Te, Ee, W);
    } else {
      const ne = fe.wireframe === !0;
      (h.geometry !== Te.id || h.program !== Ee.id || h.wireframe !== ne) && (h.geometry = Te.id, h.program = Ee.id, h.wireframe = ne, ae = !0);
    }
    W !== null && t.update(W, 34963), (ae || g) && (g = !1, G(ie, fe, Ee, Te), W !== null && u.bindBuffer(34963, t.get(W).buffer));
  }
  function x() {
    return n.isWebGL2 ? u.createVertexArray() : s.createVertexArrayOES();
  }
  function M(ie) {
    return n.isWebGL2 ? u.bindVertexArray(ie) : s.bindVertexArrayOES(ie);
  }
  function E(ie) {
    return n.isWebGL2 ? u.deleteVertexArray(ie) : s.deleteVertexArrayOES(ie);
  }
  function A(ie, fe, Ee) {
    const Te = Ee.wireframe === !0;
    let W = f[ie.id];
    W === void 0 && (W = {}, f[ie.id] = W);
    let ae = W[fe.id];
    ae === void 0 && (ae = {}, W[fe.id] = ae);
    let ne = ae[Te];
    return ne === void 0 && (ne = T(x()), ae[Te] = ne), ne;
  }
  function T(ie) {
    const fe = [], Ee = [], Te = [];
    for (let W = 0; W < a; W++)
      fe[W] = 0, Ee[W] = 0, Te[W] = 0;
    return {
      // for backward compatibility on non-VAO support browser
      geometry: null,
      program: null,
      wireframe: !1,
      newAttributes: fe,
      enabledAttributes: Ee,
      attributeDivisors: Te,
      object: ie,
      attributes: {},
      index: null
    };
  }
  function b(ie, fe, Ee, Te) {
    const W = h.attributes, ae = fe.attributes;
    let ne = 0;
    const Se = Ee.getAttributes();
    for (const ue in Se)
      if (Se[ue].location >= 0) {
        const ye = W[ue];
        let je = ae[ue];
        if (je === void 0 && (ue === "instanceMatrix" && ie.instanceMatrix && (je = ie.instanceMatrix), ue === "instanceColor" && ie.instanceColor && (je = ie.instanceColor)), ye === void 0 || ye.attribute !== je || je && ye.data !== je.data)
          return !0;
        ne++;
      }
    return h.attributesNum !== ne || h.index !== Te;
  }
  function L(ie, fe, Ee, Te) {
    const W = {}, ae = fe.attributes;
    let ne = 0;
    const Se = Ee.getAttributes();
    for (const ue in Se)
      if (Se[ue].location >= 0) {
        let ye = ae[ue];
        ye === void 0 && (ue === "instanceMatrix" && ie.instanceMatrix && (ye = ie.instanceMatrix), ue === "instanceColor" && ie.instanceColor && (ye = ie.instanceColor));
        const je = {};
        je.attribute = ye, ye && ye.data && (je.data = ye.data), W[ue] = je, ne++;
      }
    h.attributes = W, h.attributesNum = ne, h.index = Te;
  }
  function R() {
    const ie = h.newAttributes;
    for (let fe = 0, Ee = ie.length; fe < Ee; fe++)
      ie[fe] = 0;
  }
  function U(ie) {
    F(ie, 0);
  }
  function F(ie, fe) {
    const Ee = h.newAttributes, Te = h.enabledAttributes, W = h.attributeDivisors;
    Ee[ie] = 1, Te[ie] === 0 && (u.enableVertexAttribArray(ie), Te[ie] = 1), W[ie] !== fe && ((n.isWebGL2 ? u : e.get("ANGLE_instanced_arrays"))[n.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](ie, fe), W[ie] = fe);
  }
  function V() {
    const ie = h.newAttributes, fe = h.enabledAttributes;
    for (let Ee = 0, Te = fe.length; Ee < Te; Ee++)
      fe[Ee] !== ie[Ee] && (u.disableVertexAttribArray(Ee), fe[Ee] = 0);
  }
  function k(ie, fe, Ee, Te, W, ae) {
    n.isWebGL2 === !0 && (Ee === 5124 || Ee === 5125) ? u.vertexAttribIPointer(ie, fe, Ee, W, ae) : u.vertexAttribPointer(ie, fe, Ee, Te, W, ae);
  }
  function G(ie, fe, Ee, Te) {
    if (n.isWebGL2 === !1 && (ie.isInstancedMesh || Te.isInstancedBufferGeometry) && e.get("ANGLE_instanced_arrays") === null)
      return;
    R();
    const W = Te.attributes, ae = Ee.getAttributes(), ne = fe.defaultAttributeValues;
    for (const Se in ae) {
      const ue = ae[Se];
      if (ue.location >= 0) {
        let pe = W[Se];
        if (pe === void 0 && (Se === "instanceMatrix" && ie.instanceMatrix && (pe = ie.instanceMatrix), Se === "instanceColor" && ie.instanceColor && (pe = ie.instanceColor)), pe !== void 0) {
          const ye = pe.normalized, je = pe.itemSize, Be = t.get(pe);
          if (Be === void 0)
            continue;
          const de = Be.buffer, dt = Be.type, _t = Be.bytesPerElement;
          if (pe.isInterleavedBufferAttribute) {
            const qe = pe.data, ot = qe.stride, Ie = pe.offset;
            if (qe.isInstancedInterleavedBuffer) {
              for (let Me = 0; Me < ue.locationSize; Me++)
                F(ue.location + Me, qe.meshPerAttribute);
              ie.isInstancedMesh !== !0 && Te._maxInstanceCount === void 0 && (Te._maxInstanceCount = qe.meshPerAttribute * qe.count);
            } else
              for (let Me = 0; Me < ue.locationSize; Me++)
                U(ue.location + Me);
            u.bindBuffer(34962, de);
            for (let Me = 0; Me < ue.locationSize; Me++)
              k(
                ue.location + Me,
                je / ue.locationSize,
                dt,
                ye,
                ot * _t,
                (Ie + je / ue.locationSize * Me) * _t
              );
          } else {
            if (pe.isInstancedBufferAttribute) {
              for (let qe = 0; qe < ue.locationSize; qe++)
                F(ue.location + qe, pe.meshPerAttribute);
              ie.isInstancedMesh !== !0 && Te._maxInstanceCount === void 0 && (Te._maxInstanceCount = pe.meshPerAttribute * pe.count);
            } else
              for (let qe = 0; qe < ue.locationSize; qe++)
                U(ue.location + qe);
            u.bindBuffer(34962, de);
            for (let qe = 0; qe < ue.locationSize; qe++)
              k(
                ue.location + qe,
                je / ue.locationSize,
                dt,
                ye,
                je * _t,
                je / ue.locationSize * qe * _t
              );
          }
        } else if (ne !== void 0) {
          const ye = ne[Se];
          if (ye !== void 0)
            switch (ye.length) {
              case 2:
                u.vertexAttrib2fv(ue.location, ye);
                break;
              case 3:
                u.vertexAttrib3fv(ue.location, ye);
                break;
              case 4:
                u.vertexAttrib4fv(ue.location, ye);
                break;
              default:
                u.vertexAttrib1fv(ue.location, ye);
            }
        }
      }
    }
    V();
  }
  function z() {
    te();
    for (const ie in f) {
      const fe = f[ie];
      for (const Ee in fe) {
        const Te = fe[Ee];
        for (const W in Te)
          E(Te[W].object), delete Te[W];
        delete fe[Ee];
      }
      delete f[ie];
    }
  }
  function I(ie) {
    if (f[ie.id] === void 0)
      return;
    const fe = f[ie.id];
    for (const Ee in fe) {
      const Te = fe[Ee];
      for (const W in Te)
        E(Te[W].object), delete Te[W];
      delete fe[Ee];
    }
    delete f[ie.id];
  }
  function Q(ie) {
    for (const fe in f) {
      const Ee = f[fe];
      if (Ee[ie.id] === void 0)
        continue;
      const Te = Ee[ie.id];
      for (const W in Te)
        E(Te[W].object), delete Te[W];
      delete Ee[ie.id];
    }
  }
  function te() {
    $(), g = !0, h !== p && (h = p, M(h.object));
  }
  function $() {
    p.geometry = null, p.program = null, p.wireframe = !1;
  }
  return {
    setup: _,
    reset: te,
    resetDefaultState: $,
    dispose: z,
    releaseStatesOfGeometry: I,
    releaseStatesOfProgram: Q,
    initAttributes: R,
    enableAttribute: U,
    disableUnusedAttributes: V
  };
}
function HU(u, e, t, n) {
  const a = n.isWebGL2;
  let s;
  function c(h) {
    s = h;
  }
  function f(h, g) {
    u.drawArrays(s, h, g), t.update(g, s, 1);
  }
  function p(h, g, _) {
    if (_ === 0)
      return;
    let x, M;
    if (a)
      x = u, M = "drawArraysInstanced";
    else if (x = e.get("ANGLE_instanced_arrays"), M = "drawArraysInstancedANGLE", x === null) {
      console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
      return;
    }
    x[M](s, h, g, _), t.update(g, s, _);
  }
  this.setMode = c, this.render = f, this.renderInstances = p;
}
function kU(u, e, t) {
  let n;
  function a() {
    if (n !== void 0)
      return n;
    if (e.has("EXT_texture_filter_anisotropic") === !0) {
      const k = e.get("EXT_texture_filter_anisotropic");
      n = u.getParameter(k.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else
      n = 0;
    return n;
  }
  function s(k) {
    if (k === "highp") {
      if (u.getShaderPrecisionFormat(35633, 36338).precision > 0 && u.getShaderPrecisionFormat(35632, 36338).precision > 0)
        return "highp";
      k = "mediump";
    }
    return k === "mediump" && u.getShaderPrecisionFormat(35633, 36337).precision > 0 && u.getShaderPrecisionFormat(35632, 36337).precision > 0 ? "mediump" : "lowp";
  }
  const c = typeof WebGL2RenderingContext < "u" && u.constructor.name === "WebGL2RenderingContext";
  let f = t.precision !== void 0 ? t.precision : "highp";
  const p = s(f);
  p !== f && (console.warn("THREE.WebGLRenderer:", f, "not supported, using", p, "instead."), f = p);
  const h = c || e.has("WEBGL_draw_buffers"), g = t.logarithmicDepthBuffer === !0, _ = u.getParameter(34930), x = u.getParameter(35660), M = u.getParameter(3379), E = u.getParameter(34076), A = u.getParameter(34921), T = u.getParameter(36347), b = u.getParameter(36348), L = u.getParameter(36349), R = x > 0, U = c || e.has("OES_texture_float"), F = R && U, V = c ? u.getParameter(36183) : 0;
  return {
    isWebGL2: c,
    drawBuffers: h,
    getMaxAnisotropy: a,
    getMaxPrecision: s,
    precision: f,
    logarithmicDepthBuffer: g,
    maxTextures: _,
    maxVertexTextures: x,
    maxTextureSize: M,
    maxCubemapSize: E,
    maxAttributes: A,
    maxVertexUniforms: T,
    maxVaryings: b,
    maxFragmentUniforms: L,
    vertexTextures: R,
    floatFragmentTextures: U,
    floatVertexTextures: F,
    maxSamples: V
  };
}
function VU(u) {
  const e = this;
  let t = null, n = 0, a = !1, s = !1;
  const c = new Il(), f = new cn(), p = { value: null, needsUpdate: !1 };
  this.uniform = p, this.numPlanes = 0, this.numIntersection = 0, this.init = function(_, x) {
    const M = _.length !== 0 || x || // enable state of previous frame - the clipping code has to
    // run another frame in order to reset the state:
    n !== 0 || a;
    return a = x, n = _.length, M;
  }, this.beginShadows = function() {
    s = !0, g(null);
  }, this.endShadows = function() {
    s = !1;
  }, this.setGlobalState = function(_, x) {
    t = g(_, x, 0);
  }, this.setState = function(_, x, M) {
    const E = _.clippingPlanes, A = _.clipIntersection, T = _.clipShadows, b = u.get(_);
    if (!a || E === null || E.length === 0 || s && !T)
      s ? g(null) : h();
    else {
      const L = s ? 0 : n, R = L * 4;
      let U = b.clippingState || null;
      p.value = U, U = g(E, x, R, M);
      for (let F = 0; F !== R; ++F)
        U[F] = t[F];
      b.clippingState = U, this.numIntersection = A ? this.numPlanes : 0, this.numPlanes += L;
    }
  };
  function h() {
    p.value !== t && (p.value = t, p.needsUpdate = n > 0), e.numPlanes = n, e.numIntersection = 0;
  }
  function g(_, x, M, E) {
    const A = _ !== null ? _.length : 0;
    let T = null;
    if (A !== 0) {
      if (T = p.value, E !== !0 || T === null) {
        const b = M + A * 4, L = x.matrixWorldInverse;
        f.getNormalMatrix(L), (T === null || T.length < b) && (T = new Float32Array(b));
        for (let R = 0, U = M; R !== A; ++R, U += 4)
          c.copy(_[R]).applyMatrix4(L, f), c.normal.toArray(T, U), T[U + 3] = c.constant;
      }
      p.value = T, p.needsUpdate = !0;
    }
    return e.numPlanes = A, e.numIntersection = 0, T;
  }
}
function GU(u) {
  let e = /* @__PURE__ */ new WeakMap();
  function t(c, f) {
    return f === ap ? c.mapping = kl : f === sp && (c.mapping = Vl), c;
  }
  function n(c) {
    if (c && c.isTexture && c.isRenderTargetTexture === !1) {
      const f = c.mapping;
      if (f === ap || f === sp)
        if (e.has(c)) {
          const p = e.get(c).texture;
          return t(p, c.mapping);
        } else {
          const p = c.image;
          if (p && p.height > 0) {
            const h = new ET(p.height / 2);
            return h.fromEquirectangularTexture(u, c), e.set(c, h), c.addEventListener("dispose", a), t(h.texture, c.mapping);
          } else
            return null;
        }
    }
    return c;
  }
  function a(c) {
    const f = c.target;
    f.removeEventListener("dispose", a);
    const p = e.get(f);
    p !== void 0 && (e.delete(f), p.dispose());
  }
  function s() {
    e = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: n,
    dispose: s
  };
}
class Ap extends Tp {
  constructor(e = -1, t = 1, n = 1, a = -1, s = 0.1, c = 2e3) {
    super(), this.isOrthographicCamera = !0, this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = e, this.right = t, this.top = n, this.bottom = a, this.near = s, this.far = c, this.updateProjectionMatrix();
  }
  copy(e, t) {
    return super.copy(e, t), this.left = e.left, this.right = e.right, this.top = e.top, this.bottom = e.bottom, this.near = e.near, this.far = e.far, this.zoom = e.zoom, this.view = e.view === null ? null : Object.assign({}, e.view), this;
  }
  setViewOffset(e, t, n, a, s, c) {
    this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = a, this.view.width = s, this.view.height = c, this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = (this.right - this.left) / (2 * this.zoom), t = (this.top - this.bottom) / (2 * this.zoom), n = (this.right + this.left) / 2, a = (this.top + this.bottom) / 2;
    let s = n - e, c = n + e, f = a + t, p = a - t;
    if (this.view !== null && this.view.enabled) {
      const h = (this.right - this.left) / this.view.fullWidth / this.zoom, g = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      s += h * this.view.offsetX, c = s + h * this.view.width, f -= g * this.view.offsetY, p = f - g * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(s, c, f, p, this.near, this.far), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.zoom = this.zoom, t.object.left = this.left, t.object.right = this.right, t.object.top = this.top, t.object.bottom = this.bottom, t.object.near = this.near, t.object.far = this.far, this.view !== null && (t.object.view = Object.assign({}, this.view)), t;
  }
}
const Jf = 4, Vb = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582], ju = 20, R_ = /* @__PURE__ */ new Ap(), Gb = /* @__PURE__ */ new yt();
let L_ = null;
const qu = (1 + Math.sqrt(5)) / 2, Bf = 1 / qu, Wb = [
  /* @__PURE__ */ new j(1, 1, 1),
  /* @__PURE__ */ new j(-1, 1, 1),
  /* @__PURE__ */ new j(1, 1, -1),
  /* @__PURE__ */ new j(-1, 1, -1),
  /* @__PURE__ */ new j(0, qu, Bf),
  /* @__PURE__ */ new j(0, qu, -Bf),
  /* @__PURE__ */ new j(Bf, 0, qu),
  /* @__PURE__ */ new j(-Bf, 0, qu),
  /* @__PURE__ */ new j(qu, Bf, 0),
  /* @__PURE__ */ new j(-qu, Bf, 0)
];
class Ux {
  constructor(e) {
    this._renderer = e, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial);
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety (the cubeCamera
   * is placed at the origin).
   */
  fromScene(e, t = 0, n = 0.1, a = 100) {
    L_ = this._renderer.getRenderTarget(), this._setSize(256);
    const s = this._allocateTargets();
    return s.depthBuffer = !0, this._sceneToCubeUV(e, n, a, s), t > 0 && this._blur(s, 0, 0, t), this._applyPMREM(s), this._cleanup(s), s;
  }
  /**
   * Generates a PMREM from an equirectangular texture, which can be either LDR
   * or HDR. The ideal input image size is 1k (1024 x 512),
   * as this matches best with the 256 x 256 cubemap output.
   */
  fromEquirectangular(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Generates a PMREM from an cubemap texture, which can be either LDR
   * or HDR. The ideal input cube size is 256 x 256,
   * as this matches best with the 256 x 256 cubemap output.
   */
  fromCubemap(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileCubemapShader() {
    this._cubemapMaterial === null && (this._cubemapMaterial = jb(), this._compileMaterial(this._cubemapMaterial));
  }
  /**
   * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileEquirectangularShader() {
    this._equirectMaterial === null && (this._equirectMaterial = Xb(), this._compileMaterial(this._equirectMaterial));
  }
  /**
   * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
   * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
   * one of them will cause any others to also become unusable.
   */
  dispose() {
    this._dispose(), this._cubemapMaterial !== null && this._cubemapMaterial.dispose(), this._equirectMaterial !== null && this._equirectMaterial.dispose();
  }
  // private interface
  _setSize(e) {
    this._lodMax = Math.floor(Math.log2(e)), this._cubeSize = Math.pow(2, this._lodMax);
  }
  _dispose() {
    this._blurMaterial !== null && this._blurMaterial.dispose(), this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose();
    for (let e = 0; e < this._lodPlanes.length; e++)
      this._lodPlanes[e].dispose();
  }
  _cleanup(e) {
    this._renderer.setRenderTarget(L_), e.scissorTest = !1, Yv(e, 0, 0, e.width, e.height);
  }
  _fromTexture(e, t) {
    e.mapping === kl || e.mapping === Vl ? this._setSize(e.image.length === 0 ? 16 : e.image[0].width || e.image[0].image.width) : this._setSize(e.image.width / 4), L_ = this._renderer.getRenderTarget();
    const n = t || this._allocateTargets();
    return this._textureToCubeUV(e, n), this._applyPMREM(n), this._cleanup(n), n;
  }
  _allocateTargets() {
    const e = 3 * Math.max(this._cubeSize, 112), t = 4 * this._cubeSize, n = {
      magFilter: ai,
      minFilter: ai,
      generateMipmaps: !1,
      type: ac,
      format: Jr,
      encoding: Uo,
      depthBuffer: !1
    }, a = qb(e, t, n);
    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== e || this._pingPongRenderTarget.height !== t) {
      this._pingPongRenderTarget !== null && this._dispose(), this._pingPongRenderTarget = qb(e, t, n);
      const { _lodMax: s } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = WU(s)), this._blurMaterial = qU(s, e, t);
    }
    return a;
  }
  _compileMaterial(e) {
    const t = new tr(this._lodPlanes[0], e);
    this._renderer.compile(t, R_);
  }
  _sceneToCubeUV(e, t, n, a) {
    const f = new Xi(90, 1, t, n), p = [1, -1, 1, 1, 1, 1], h = [1, 1, 1, -1, -1, -1], g = this._renderer, _ = g.autoClear, x = g.toneMapping;
    g.getClearColor(Gb), g.toneMapping = ds, g.autoClear = !1;
    const M = new Xl({
      name: "PMREM.Background",
      side: Cr,
      depthWrite: !1,
      depthTest: !1
    }), E = new tr(new jl(), M);
    let A = !1;
    const T = e.background;
    T ? T.isColor && (M.color.copy(T), e.background = null, A = !0) : (M.color.copy(Gb), A = !0);
    for (let b = 0; b < 6; b++) {
      const L = b % 3;
      L === 0 ? (f.up.set(0, p[b], 0), f.lookAt(h[b], 0, 0)) : L === 1 ? (f.up.set(0, 0, p[b]), f.lookAt(0, h[b], 0)) : (f.up.set(0, p[b], 0), f.lookAt(0, 0, h[b]));
      const R = this._cubeSize;
      Yv(a, L * R, b > 2 ? R : 0, R, R), g.setRenderTarget(a), A && g.render(E, f), g.render(e, f);
    }
    E.geometry.dispose(), E.material.dispose(), g.toneMapping = x, g.autoClear = _, e.background = T;
  }
  _textureToCubeUV(e, t) {
    const n = this._renderer, a = e.mapping === kl || e.mapping === Vl;
    a ? (this._cubemapMaterial === null && (this._cubemapMaterial = jb()), this._cubemapMaterial.uniforms.flipEnvMap.value = e.isRenderTargetTexture === !1 ? -1 : 1) : this._equirectMaterial === null && (this._equirectMaterial = Xb());
    const s = a ? this._cubemapMaterial : this._equirectMaterial, c = new tr(this._lodPlanes[0], s), f = s.uniforms;
    f.envMap.value = e;
    const p = this._cubeSize;
    Yv(t, 0, 0, 3 * p, 2 * p), n.setRenderTarget(t), n.render(c, R_);
  }
  _applyPMREM(e) {
    const t = this._renderer, n = t.autoClear;
    t.autoClear = !1;
    for (let a = 1; a < this._lodPlanes.length; a++) {
      const s = Math.sqrt(this._sigmas[a] * this._sigmas[a] - this._sigmas[a - 1] * this._sigmas[a - 1]), c = Wb[(a - 1) % Wb.length];
      this._blur(e, a - 1, a, s, c);
    }
    t.autoClear = n;
  }
  /**
   * This is a two-pass Gaussian blur for a cubemap. Normally this is done
   * vertically and horizontally, but this breaks down on a cube. Here we apply
   * the blur latitudinally (around the poles), and then longitudinally (towards
   * the poles) to approximate the orthogonally-separable blur. It is least
   * accurate at the poles, but still does a decent job.
   */
  _blur(e, t, n, a, s) {
    const c = this._pingPongRenderTarget;
    this._halfBlur(
      e,
      c,
      t,
      n,
      a,
      "latitudinal",
      s
    ), this._halfBlur(
      c,
      e,
      n,
      n,
      a,
      "longitudinal",
      s
    );
  }
  _halfBlur(e, t, n, a, s, c, f) {
    const p = this._renderer, h = this._blurMaterial;
    c !== "latitudinal" && c !== "longitudinal" && console.error(
      "blur direction must be either latitudinal or longitudinal!"
    );
    const g = 3, _ = new tr(this._lodPlanes[a], h), x = h.uniforms, M = this._sizeLods[n] - 1, E = isFinite(s) ? Math.PI / (2 * M) : 2 * Math.PI / (2 * ju - 1), A = s / E, T = isFinite(s) ? 1 + Math.floor(g * A) : ju;
    T > ju && console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${T} samples when the maximum is set to ${ju}`);
    const b = [];
    let L = 0;
    for (let k = 0; k < ju; ++k) {
      const G = k / A, z = Math.exp(-G * G / 2);
      b.push(z), k === 0 ? L += z : k < T && (L += 2 * z);
    }
    for (let k = 0; k < b.length; k++)
      b[k] = b[k] / L;
    x.envMap.value = e.texture, x.samples.value = T, x.weights.value = b, x.latitudinal.value = c === "latitudinal", f && (x.poleAxis.value = f);
    const { _lodMax: R } = this;
    x.dTheta.value = E, x.mipInt.value = R - n;
    const U = this._sizeLods[a], F = 3 * U * (a > R - Jf ? a - R + Jf : 0), V = 4 * (this._cubeSize - U);
    Yv(t, F, V, 3 * U, 2 * U), p.setRenderTarget(t), p.render(_, R_);
  }
}
function WU(u) {
  const e = [], t = [], n = [];
  let a = u;
  const s = u - Jf + 1 + Vb.length;
  for (let c = 0; c < s; c++) {
    const f = Math.pow(2, a);
    t.push(f);
    let p = 1 / f;
    c > u - Jf ? p = Vb[c - u + Jf - 1] : c === 0 && (p = 0), n.push(p);
    const h = 1 / (f - 2), g = -h, _ = 1 + h, x = [g, g, _, g, _, _, g, g, _, _, g, _], M = 6, E = 6, A = 3, T = 2, b = 1, L = new Float32Array(A * E * M), R = new Float32Array(T * E * M), U = new Float32Array(b * E * M);
    for (let V = 0; V < M; V++) {
      const k = V % 3 * 2 / 3 - 1, G = V > 2 ? 0 : -1, z = [
        k,
        G,
        0,
        k + 2 / 3,
        G,
        0,
        k + 2 / 3,
        G + 1,
        0,
        k,
        G,
        0,
        k + 2 / 3,
        G + 1,
        0,
        k,
        G + 1,
        0
      ];
      L.set(z, A * E * V), R.set(x, T * E * V);
      const I = [V, V, V, V, V, V];
      U.set(I, b * E * V);
    }
    const F = new an();
    F.setAttribute("position", new Hn(L, A)), F.setAttribute("uv", new Hn(R, T)), F.setAttribute("faceIndex", new Hn(U, b)), e.push(F), a > Jf && a--;
  }
  return { lodPlanes: e, sizeLods: t, sigmas: n };
}
function qb(u, e, t) {
  const n = new Ga(u, e, t);
  return n.texture.mapping = sd, n.texture.name = "PMREM.cubeUv", n.scissorTest = !0, n;
}
function Yv(u, e, t, n, a) {
  u.viewport.set(e, t, n, a), u.scissor.set(e, t, n, a);
}
function qU(u, e, t) {
  const n = new Float32Array(ju), a = new j(0, 1, 0);
  return new Vs({
    name: "SphericalGaussianBlur",
    defines: {
      n: ju,
      CUBEUV_TEXEL_WIDTH: 1 / e,
      CUBEUV_TEXEL_HEIGHT: 1 / t,
      CUBEUV_MAX_MIP: `${u}.0`
    },
    uniforms: {
      envMap: { value: null },
      samples: { value: 1 },
      weights: { value: n },
      latitudinal: { value: !1 },
      dTheta: { value: 0 },
      mipInt: { value: 0 },
      poleAxis: { value: a }
    },
    vertexShader: iS(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
    ),
    blending: Lo,
    depthTest: !1,
    depthWrite: !1
  });
}
function Xb() {
  return new Vs({
    name: "EquirectangularToCubeUV",
    uniforms: {
      envMap: { value: null }
    },
    vertexShader: iS(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
    ),
    blending: Lo,
    depthTest: !1,
    depthWrite: !1
  });
}
function jb() {
  return new Vs({
    name: "CubemapToCubeUV",
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 }
    },
    vertexShader: iS(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
    ),
    blending: Lo,
    depthTest: !1,
    depthWrite: !1
  });
}
function iS() {
  return (
    /* glsl */
    `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
  );
}
function XU(u) {
  let e = /* @__PURE__ */ new WeakMap(), t = null;
  function n(f) {
    if (f && f.isTexture) {
      const p = f.mapping, h = p === ap || p === sp, g = p === kl || p === Vl;
      if (h || g)
        if (f.isRenderTargetTexture && f.needsPMREMUpdate === !0) {
          f.needsPMREMUpdate = !1;
          let _ = e.get(f);
          return t === null && (t = new Ux(u)), _ = h ? t.fromEquirectangular(f, _) : t.fromCubemap(f, _), e.set(f, _), _.texture;
        } else {
          if (e.has(f))
            return e.get(f).texture;
          {
            const _ = f.image;
            if (h && _ && _.height > 0 || g && _ && a(_)) {
              t === null && (t = new Ux(u));
              const x = h ? t.fromEquirectangular(f) : t.fromCubemap(f);
              return e.set(f, x), f.addEventListener("dispose", s), x.texture;
            } else
              return null;
          }
        }
    }
    return f;
  }
  function a(f) {
    let p = 0;
    const h = 6;
    for (let g = 0; g < h; g++)
      f[g] !== void 0 && p++;
    return p === h;
  }
  function s(f) {
    const p = f.target;
    p.removeEventListener("dispose", s);
    const h = e.get(p);
    h !== void 0 && (e.delete(p), h.dispose());
  }
  function c() {
    e = /* @__PURE__ */ new WeakMap(), t !== null && (t.dispose(), t = null);
  }
  return {
    get: n,
    dispose: c
  };
}
function jU(u) {
  const e = {};
  function t(n) {
    if (e[n] !== void 0)
      return e[n];
    let a;
    switch (n) {
      case "WEBGL_depth_texture":
        a = u.getExtension("WEBGL_depth_texture") || u.getExtension("MOZ_WEBGL_depth_texture") || u.getExtension("WEBKIT_WEBGL_depth_texture");
        break;
      case "EXT_texture_filter_anisotropic":
        a = u.getExtension("EXT_texture_filter_anisotropic") || u.getExtension("MOZ_EXT_texture_filter_anisotropic") || u.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
        break;
      case "WEBGL_compressed_texture_s3tc":
        a = u.getExtension("WEBGL_compressed_texture_s3tc") || u.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || u.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
        break;
      case "WEBGL_compressed_texture_pvrtc":
        a = u.getExtension("WEBGL_compressed_texture_pvrtc") || u.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
        break;
      default:
        a = u.getExtension(n);
    }
    return e[n] = a, a;
  }
  return {
    has: function(n) {
      return t(n) !== null;
    },
    init: function(n) {
      n.isWebGL2 ? t("EXT_color_buffer_float") : (t("WEBGL_depth_texture"), t("OES_texture_float"), t("OES_texture_half_float"), t("OES_texture_half_float_linear"), t("OES_standard_derivatives"), t("OES_element_index_uint"), t("OES_vertex_array_object"), t("ANGLE_instanced_arrays")), t("OES_texture_float_linear"), t("EXT_color_buffer_half_float"), t("WEBGL_multisampled_render_to_texture");
    },
    get: function(n) {
      const a = t(n);
      return a === null && console.warn("THREE.WebGLRenderer: " + n + " extension not supported."), a;
    }
  };
}
function YU(u, e, t, n) {
  const a = {}, s = /* @__PURE__ */ new WeakMap();
  function c(_) {
    const x = _.target;
    x.index !== null && e.remove(x.index);
    for (const E in x.attributes)
      e.remove(x.attributes[E]);
    x.removeEventListener("dispose", c), delete a[x.id];
    const M = s.get(x);
    M && (e.remove(M), s.delete(x)), n.releaseStatesOfGeometry(x), x.isInstancedBufferGeometry === !0 && delete x._maxInstanceCount, t.memory.geometries--;
  }
  function f(_, x) {
    return a[x.id] === !0 || (x.addEventListener("dispose", c), a[x.id] = !0, t.memory.geometries++), x;
  }
  function p(_) {
    const x = _.attributes;
    for (const E in x)
      e.update(x[E], 34962);
    const M = _.morphAttributes;
    for (const E in M) {
      const A = M[E];
      for (let T = 0, b = A.length; T < b; T++)
        e.update(A[T], 34962);
    }
  }
  function h(_) {
    const x = [], M = _.index, E = _.attributes.position;
    let A = 0;
    if (M !== null) {
      const L = M.array;
      A = M.version;
      for (let R = 0, U = L.length; R < U; R += 3) {
        const F = L[R + 0], V = L[R + 1], k = L[R + 2];
        x.push(F, V, V, k, k, F);
      }
    } else {
      const L = E.array;
      A = E.version;
      for (let R = 0, U = L.length / 3 - 1; R < U; R += 3) {
        const F = R + 0, V = R + 1, k = R + 2;
        x.push(F, V, V, k, k, F);
      }
    }
    const T = new (_T(x) ? nS : tS)(x, 1);
    T.version = A;
    const b = s.get(_);
    b && e.remove(b), s.set(_, T);
  }
  function g(_) {
    const x = s.get(_);
    if (x) {
      const M = _.index;
      M !== null && x.version < M.version && h(_);
    } else
      h(_);
    return s.get(_);
  }
  return {
    get: f,
    update: p,
    getWireframeAttribute: g
  };
}
function ZU(u, e, t, n) {
  const a = n.isWebGL2;
  let s;
  function c(x) {
    s = x;
  }
  let f, p;
  function h(x) {
    f = x.type, p = x.bytesPerElement;
  }
  function g(x, M) {
    u.drawElements(s, M, f, x * p), t.update(M, s, 1);
  }
  function _(x, M, E) {
    if (E === 0)
      return;
    let A, T;
    if (a)
      A = u, T = "drawElementsInstanced";
    else if (A = e.get("ANGLE_instanced_arrays"), T = "drawElementsInstancedANGLE", A === null) {
      console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
      return;
    }
    A[T](s, M, f, x * p, E), t.update(M, s, E);
  }
  this.setMode = c, this.setIndex = h, this.render = g, this.renderInstances = _;
}
function JU(u) {
  const e = {
    geometries: 0,
    textures: 0
  }, t = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };
  function n(s, c, f) {
    switch (t.calls++, c) {
      case 4:
        t.triangles += f * (s / 3);
        break;
      case 1:
        t.lines += f * (s / 2);
        break;
      case 3:
        t.lines += f * (s - 1);
        break;
      case 2:
        t.lines += f * s;
        break;
      case 0:
        t.points += f * s;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", c);
        break;
    }
  }
  function a() {
    t.frame++, t.calls = 0, t.triangles = 0, t.points = 0, t.lines = 0;
  }
  return {
    memory: e,
    render: t,
    programs: null,
    autoReset: !0,
    reset: a,
    update: n
  };
}
function QU(u, e) {
  return u[0] - e[0];
}
function KU(u, e) {
  return Math.abs(e[1]) - Math.abs(u[1]);
}
function $U(u, e, t) {
  const n = {}, a = new Float32Array(8), s = /* @__PURE__ */ new WeakMap(), c = new Un(), f = [];
  for (let h = 0; h < 8; h++)
    f[h] = [h, 0];
  function p(h, g, _) {
    const x = h.morphTargetInfluences;
    if (e.isWebGL2 === !0) {
      const M = g.morphAttributes.position || g.morphAttributes.normal || g.morphAttributes.color, E = M !== void 0 ? M.length : 0;
      let A = s.get(g);
      if (A === void 0 || A.count !== E) {
        let ie = function() {
          te.dispose(), s.delete(g), g.removeEventListener("dispose", ie);
        };
        A !== void 0 && A.texture.dispose();
        const L = g.morphAttributes.position !== void 0, R = g.morphAttributes.normal !== void 0, U = g.morphAttributes.color !== void 0, F = g.morphAttributes.position || [], V = g.morphAttributes.normal || [], k = g.morphAttributes.color || [];
        let G = 0;
        L === !0 && (G = 1), R === !0 && (G = 2), U === !0 && (G = 3);
        let z = g.attributes.position.count * G, I = 1;
        z > e.maxTextureSize && (I = Math.ceil(z / e.maxTextureSize), z = e.maxTextureSize);
        const Q = new Float32Array(z * I * 4 * E), te = new Bg(Q, z, I, E);
        te.type = Hs, te.needsUpdate = !0;
        const $ = G * 4;
        for (let fe = 0; fe < E; fe++) {
          const Ee = F[fe], Te = V[fe], W = k[fe], ae = z * I * 4 * fe;
          for (let ne = 0; ne < Ee.count; ne++) {
            const Se = ne * $;
            L === !0 && (c.fromBufferAttribute(Ee, ne), Q[ae + Se + 0] = c.x, Q[ae + Se + 1] = c.y, Q[ae + Se + 2] = c.z, Q[ae + Se + 3] = 0), R === !0 && (c.fromBufferAttribute(Te, ne), Q[ae + Se + 4] = c.x, Q[ae + Se + 5] = c.y, Q[ae + Se + 6] = c.z, Q[ae + Se + 7] = 0), U === !0 && (c.fromBufferAttribute(W, ne), Q[ae + Se + 8] = c.x, Q[ae + Se + 9] = c.y, Q[ae + Se + 10] = c.z, Q[ae + Se + 11] = W.itemSize === 4 ? c.w : 1);
          }
        }
        A = {
          count: E,
          texture: te,
          size: new Ge(z, I)
        }, s.set(g, A), g.addEventListener("dispose", ie);
      }
      let T = 0;
      for (let L = 0; L < x.length; L++)
        T += x[L];
      const b = g.morphTargetsRelative ? 1 : 1 - T;
      _.getUniforms().setValue(u, "morphTargetBaseInfluence", b), _.getUniforms().setValue(u, "morphTargetInfluences", x), _.getUniforms().setValue(u, "morphTargetsTexture", A.texture, t), _.getUniforms().setValue(u, "morphTargetsTextureSize", A.size);
    } else {
      const M = x === void 0 ? 0 : x.length;
      let E = n[g.id];
      if (E === void 0 || E.length !== M) {
        E = [];
        for (let R = 0; R < M; R++)
          E[R] = [R, 0];
        n[g.id] = E;
      }
      for (let R = 0; R < M; R++) {
        const U = E[R];
        U[0] = R, U[1] = x[R];
      }
      E.sort(KU);
      for (let R = 0; R < 8; R++)
        R < M && E[R][1] ? (f[R][0] = E[R][0], f[R][1] = E[R][1]) : (f[R][0] = Number.MAX_SAFE_INTEGER, f[R][1] = 0);
      f.sort(QU);
      const A = g.morphAttributes.position, T = g.morphAttributes.normal;
      let b = 0;
      for (let R = 0; R < 8; R++) {
        const U = f[R], F = U[0], V = U[1];
        F !== Number.MAX_SAFE_INTEGER && V ? (A && g.getAttribute("morphTarget" + R) !== A[F] && g.setAttribute("morphTarget" + R, A[F]), T && g.getAttribute("morphNormal" + R) !== T[F] && g.setAttribute("morphNormal" + R, T[F]), a[R] = V, b += V) : (A && g.hasAttribute("morphTarget" + R) === !0 && g.deleteAttribute("morphTarget" + R), T && g.hasAttribute("morphNormal" + R) === !0 && g.deleteAttribute("morphNormal" + R), a[R] = 0);
      }
      const L = g.morphTargetsRelative ? 1 : 1 - b;
      _.getUniforms().setValue(u, "morphTargetBaseInfluence", L), _.getUniforms().setValue(u, "morphTargetInfluences", a);
    }
  }
  return {
    update: p
  };
}
function eN(u, e, t, n) {
  let a = /* @__PURE__ */ new WeakMap();
  function s(p) {
    const h = n.render.frame, g = p.geometry, _ = e.get(p, g);
    return a.get(_) !== h && (e.update(_), a.set(_, h)), p.isInstancedMesh && (p.hasEventListener("dispose", f) === !1 && p.addEventListener("dispose", f), t.update(p.instanceMatrix, 34962), p.instanceColor !== null && t.update(p.instanceColor, 34962)), _;
  }
  function c() {
    a = /* @__PURE__ */ new WeakMap();
  }
  function f(p) {
    const h = p.target;
    h.removeEventListener("dispose", f), t.remove(h.instanceMatrix), h.instanceColor !== null && t.remove(h.instanceColor);
  }
  return {
    update: s,
    dispose: c
  };
}
const TT = /* @__PURE__ */ new pi(), CT = /* @__PURE__ */ new Bg(), AT = /* @__PURE__ */ new eS(), RT = /* @__PURE__ */ new Cp(), Yb = [], Zb = [], Jb = new Float32Array(16), Qb = new Float32Array(9), Kb = new Float32Array(4);
function ld(u, e, t) {
  const n = u[0];
  if (n <= 0 || n > 0)
    return u;
  const a = e * t;
  let s = Yb[a];
  if (s === void 0 && (s = new Float32Array(a), Yb[a] = s), e !== 0) {
    n.toArray(s, 0);
    for (let c = 1, f = 0; c !== e; ++c)
      f += t, u[c].toArray(s, f);
  }
  return s;
}
function Bi(u, e) {
  if (u.length !== e.length)
    return !1;
  for (let t = 0, n = u.length; t < n; t++)
    if (u[t] !== e[t])
      return !1;
  return !0;
}
function Hi(u, e) {
  for (let t = 0, n = e.length; t < n; t++)
    u[t] = e[t];
}
function kg(u, e) {
  let t = Zb[e];
  t === void 0 && (t = new Int32Array(e), Zb[e] = t);
  for (let n = 0; n !== e; ++n)
    t[n] = u.allocateTextureUnit();
  return t;
}
function tN(u, e) {
  const t = this.cache;
  t[0] !== e && (u.uniform1f(this.addr, e), t[0] = e);
}
function nN(u, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (u.uniform2f(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (Bi(t, e))
      return;
    u.uniform2fv(this.addr, e), Hi(t, e);
  }
}
function iN(u, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (u.uniform3f(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else if (e.r !== void 0)
    (t[0] !== e.r || t[1] !== e.g || t[2] !== e.b) && (u.uniform3f(this.addr, e.r, e.g, e.b), t[0] = e.r, t[1] = e.g, t[2] = e.b);
  else {
    if (Bi(t, e))
      return;
    u.uniform3fv(this.addr, e), Hi(t, e);
  }
}
function rN(u, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (u.uniform4f(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (Bi(t, e))
      return;
    u.uniform4fv(this.addr, e), Hi(t, e);
  }
}
function aN(u, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (Bi(t, e))
      return;
    u.uniformMatrix2fv(this.addr, !1, e), Hi(t, e);
  } else {
    if (Bi(t, n))
      return;
    Kb.set(n), u.uniformMatrix2fv(this.addr, !1, Kb), Hi(t, n);
  }
}
function sN(u, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (Bi(t, e))
      return;
    u.uniformMatrix3fv(this.addr, !1, e), Hi(t, e);
  } else {
    if (Bi(t, n))
      return;
    Qb.set(n), u.uniformMatrix3fv(this.addr, !1, Qb), Hi(t, n);
  }
}
function oN(u, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (Bi(t, e))
      return;
    u.uniformMatrix4fv(this.addr, !1, e), Hi(t, e);
  } else {
    if (Bi(t, n))
      return;
    Jb.set(n), u.uniformMatrix4fv(this.addr, !1, Jb), Hi(t, n);
  }
}
function lN(u, e) {
  const t = this.cache;
  t[0] !== e && (u.uniform1i(this.addr, e), t[0] = e);
}
function uN(u, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (u.uniform2i(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (Bi(t, e))
      return;
    u.uniform2iv(this.addr, e), Hi(t, e);
  }
}
function cN(u, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (u.uniform3i(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else {
    if (Bi(t, e))
      return;
    u.uniform3iv(this.addr, e), Hi(t, e);
  }
}
function fN(u, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (u.uniform4i(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (Bi(t, e))
      return;
    u.uniform4iv(this.addr, e), Hi(t, e);
  }
}
function dN(u, e) {
  const t = this.cache;
  t[0] !== e && (u.uniform1ui(this.addr, e), t[0] = e);
}
function hN(u, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (u.uniform2ui(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (Bi(t, e))
      return;
    u.uniform2uiv(this.addr, e), Hi(t, e);
  }
}
function pN(u, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (u.uniform3ui(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else {
    if (Bi(t, e))
      return;
    u.uniform3uiv(this.addr, e), Hi(t, e);
  }
}
function mN(u, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (u.uniform4ui(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (Bi(t, e))
      return;
    u.uniform4uiv(this.addr, e), Hi(t, e);
  }
}
function vN(u, e, t) {
  const n = this.cache, a = t.allocateTextureUnit();
  n[0] !== a && (u.uniform1i(this.addr, a), n[0] = a), t.setTexture2D(e || TT, a);
}
function gN(u, e, t) {
  const n = this.cache, a = t.allocateTextureUnit();
  n[0] !== a && (u.uniform1i(this.addr, a), n[0] = a), t.setTexture3D(e || AT, a);
}
function yN(u, e, t) {
  const n = this.cache, a = t.allocateTextureUnit();
  n[0] !== a && (u.uniform1i(this.addr, a), n[0] = a), t.setTextureCube(e || RT, a);
}
function _N(u, e, t) {
  const n = this.cache, a = t.allocateTextureUnit();
  n[0] !== a && (u.uniform1i(this.addr, a), n[0] = a), t.setTexture2DArray(e || CT, a);
}
function xN(u) {
  switch (u) {
    case 5126:
      return tN;
    case 35664:
      return nN;
    case 35665:
      return iN;
    case 35666:
      return rN;
    case 35674:
      return aN;
    case 35675:
      return sN;
    case 35676:
      return oN;
    case 5124:
    case 35670:
      return lN;
    case 35667:
    case 35671:
      return uN;
    case 35668:
    case 35672:
      return cN;
    case 35669:
    case 35673:
      return fN;
    case 5125:
      return dN;
    case 36294:
      return hN;
    case 36295:
      return pN;
    case 36296:
      return mN;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return vN;
    case 35679:
    case 36299:
    case 36307:
      return gN;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return yN;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return _N;
  }
}
function SN(u, e) {
  u.uniform1fv(this.addr, e);
}
function MN(u, e) {
  const t = ld(e, this.size, 2);
  u.uniform2fv(this.addr, t);
}
function bN(u, e) {
  const t = ld(e, this.size, 3);
  u.uniform3fv(this.addr, t);
}
function EN(u, e) {
  const t = ld(e, this.size, 4);
  u.uniform4fv(this.addr, t);
}
function wN(u, e) {
  const t = ld(e, this.size, 4);
  u.uniformMatrix2fv(this.addr, !1, t);
}
function TN(u, e) {
  const t = ld(e, this.size, 9);
  u.uniformMatrix3fv(this.addr, !1, t);
}
function CN(u, e) {
  const t = ld(e, this.size, 16);
  u.uniformMatrix4fv(this.addr, !1, t);
}
function AN(u, e) {
  u.uniform1iv(this.addr, e);
}
function RN(u, e) {
  u.uniform2iv(this.addr, e);
}
function LN(u, e) {
  u.uniform3iv(this.addr, e);
}
function DN(u, e) {
  u.uniform4iv(this.addr, e);
}
function PN(u, e) {
  u.uniform1uiv(this.addr, e);
}
function UN(u, e) {
  u.uniform2uiv(this.addr, e);
}
function NN(u, e) {
  u.uniform3uiv(this.addr, e);
}
function zN(u, e) {
  u.uniform4uiv(this.addr, e);
}
function ON(u, e, t) {
  const n = this.cache, a = e.length, s = kg(t, a);
  Bi(n, s) || (u.uniform1iv(this.addr, s), Hi(n, s));
  for (let c = 0; c !== a; ++c)
    t.setTexture2D(e[c] || TT, s[c]);
}
function IN(u, e, t) {
  const n = this.cache, a = e.length, s = kg(t, a);
  Bi(n, s) || (u.uniform1iv(this.addr, s), Hi(n, s));
  for (let c = 0; c !== a; ++c)
    t.setTexture3D(e[c] || AT, s[c]);
}
function FN(u, e, t) {
  const n = this.cache, a = e.length, s = kg(t, a);
  Bi(n, s) || (u.uniform1iv(this.addr, s), Hi(n, s));
  for (let c = 0; c !== a; ++c)
    t.setTextureCube(e[c] || RT, s[c]);
}
function BN(u, e, t) {
  const n = this.cache, a = e.length, s = kg(t, a);
  Bi(n, s) || (u.uniform1iv(this.addr, s), Hi(n, s));
  for (let c = 0; c !== a; ++c)
    t.setTexture2DArray(e[c] || CT, s[c]);
}
function HN(u) {
  switch (u) {
    case 5126:
      return SN;
    case 35664:
      return MN;
    case 35665:
      return bN;
    case 35666:
      return EN;
    case 35674:
      return wN;
    case 35675:
      return TN;
    case 35676:
      return CN;
    case 5124:
    case 35670:
      return AN;
    case 35667:
    case 35671:
      return RN;
    case 35668:
    case 35672:
      return LN;
    case 35669:
    case 35673:
      return DN;
    case 5125:
      return PN;
    case 36294:
      return UN;
    case 36295:
      return NN;
    case 36296:
      return zN;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return ON;
    case 35679:
    case 36299:
    case 36307:
      return IN;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return FN;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return BN;
  }
}
class kN {
  constructor(e, t, n) {
    this.id = e, this.addr = n, this.cache = [], this.setValue = xN(t.type);
  }
}
class VN {
  constructor(e, t, n) {
    this.id = e, this.addr = n, this.cache = [], this.size = t.size, this.setValue = HN(t.type);
  }
}
class GN {
  constructor(e) {
    this.id = e, this.seq = [], this.map = {};
  }
  setValue(e, t, n) {
    const a = this.seq;
    for (let s = 0, c = a.length; s !== c; ++s) {
      const f = a[s];
      f.setValue(e, t[f.id], n);
    }
  }
}
const D_ = /(\w+)(\])?(\[|\.)?/g;
function $b(u, e) {
  u.seq.push(e), u.map[e.id] = e;
}
function WN(u, e, t) {
  const n = u.name, a = n.length;
  for (D_.lastIndex = 0; ; ) {
    const s = D_.exec(n), c = D_.lastIndex;
    let f = s[1];
    const p = s[2] === "]", h = s[3];
    if (p && (f = f | 0), h === void 0 || h === "[" && c + 2 === a) {
      $b(t, h === void 0 ? new kN(f, u, e) : new VN(f, u, e));
      break;
    } else {
      let _ = t.map[f];
      _ === void 0 && (_ = new GN(f), $b(t, _)), t = _;
    }
  }
}
class wg {
  constructor(e, t) {
    this.seq = [], this.map = {};
    const n = e.getProgramParameter(t, 35718);
    for (let a = 0; a < n; ++a) {
      const s = e.getActiveUniform(t, a), c = e.getUniformLocation(t, s.name);
      WN(s, c, this);
    }
  }
  setValue(e, t, n, a) {
    const s = this.map[t];
    s !== void 0 && s.setValue(e, n, a);
  }
  setOptional(e, t, n) {
    const a = t[n];
    a !== void 0 && this.setValue(e, n, a);
  }
  static upload(e, t, n, a) {
    for (let s = 0, c = t.length; s !== c; ++s) {
      const f = t[s], p = n[f.id];
      p.needsUpdate !== !1 && f.setValue(e, p.value, a);
    }
  }
  static seqWithValue(e, t) {
    const n = [];
    for (let a = 0, s = e.length; a !== s; ++a) {
      const c = e[a];
      c.id in t && n.push(c);
    }
    return n;
  }
}
function eE(u, e, t) {
  const n = u.createShader(e);
  return u.shaderSource(n, t), u.compileShader(n), n;
}
let qN = 0;
function XN(u, e) {
  const t = u.split(`
`), n = [], a = Math.max(e - 6, 0), s = Math.min(e + 6, t.length);
  for (let c = a; c < s; c++) {
    const f = c + 1;
    n.push(`${f === e ? ">" : " "} ${f}: ${t[c]}`);
  }
  return n.join(`
`);
}
function jN(u) {
  switch (u) {
    case Uo:
      return ["Linear", "( value )"];
    case Pn:
      return ["sRGB", "( value )"];
    default:
      return console.warn("THREE.WebGLProgram: Unsupported encoding:", u), ["Linear", "( value )"];
  }
}
function tE(u, e, t) {
  const n = u.getShaderParameter(e, 35713), a = u.getShaderInfoLog(e).trim();
  if (n && a === "")
    return "";
  const s = /ERROR: 0:(\d+)/.exec(a);
  if (s) {
    const c = parseInt(s[1]);
    return t.toUpperCase() + `

` + a + `

` + XN(u.getShaderSource(e), c);
  } else
    return a;
}
function YN(u, e) {
  const t = jN(e);
  return "vec4 " + u + "( vec4 value ) { return LinearTo" + t[0] + t[1] + "; }";
}
function ZN(u, e) {
  let t;
  switch (e) {
    case qw:
      t = "Linear";
      break;
    case Xw:
      t = "Reinhard";
      break;
    case jw:
      t = "OptimizedCineon";
      break;
    case jx:
      t = "ACESFilmic";
      break;
    case Yw:
      t = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), t = "Linear";
  }
  return "vec3 " + u + "( vec3 color ) { return " + t + "ToneMapping( color ); }";
}
function JN(u) {
  return [
    u.extensionDerivatives || u.envMapCubeUVHeight || u.bumpMap || u.normalMapTangentSpace || u.clearcoatNormalMap || u.flatShading || u.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
    (u.extensionFragDepth || u.logarithmicDepthBuffer) && u.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
    u.extensionDrawBuffers && u.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
    (u.extensionShaderTextureLOD || u.envMap || u.transmission) && u.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
  ].filter(Jh).join(`
`);
}
function QN(u) {
  const e = [];
  for (const t in u) {
    const n = u[t];
    n !== !1 && e.push("#define " + t + " " + n);
  }
  return e.join(`
`);
}
function KN(u, e) {
  const t = {}, n = u.getProgramParameter(e, 35721);
  for (let a = 0; a < n; a++) {
    const s = u.getActiveAttrib(e, a), c = s.name;
    let f = 1;
    s.type === 35674 && (f = 2), s.type === 35675 && (f = 3), s.type === 35676 && (f = 4), t[c] = {
      type: s.type,
      location: u.getAttribLocation(e, c),
      locationSize: f
    };
  }
  return t;
}
function Jh(u) {
  return u !== "";
}
function nE(u, e) {
  const t = e.numSpotLightShadows + e.numSpotLightMaps - e.numSpotLightShadowsWithMaps;
  return u.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, t).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
}
function iE(u, e) {
  return u.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
}
const $N = /^[ \t]*#include +<([\w\d./]+)>/gm;
function Nx(u) {
  return u.replace($N, ez);
}
function ez(u, e) {
  const t = nn[e];
  if (t === void 0)
    throw new Error("Can not resolve #include <" + e + ">");
  return Nx(t);
}
const tz = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function rE(u) {
  return u.replace(tz, nz);
}
function nz(u, e, t, n) {
  let a = "";
  for (let s = parseInt(e); s < parseInt(t); s++)
    a += n.replace(/\[\s*i\s*\]/g, "[ " + s + " ]").replace(/UNROLLED_LOOP_INDEX/g, s);
  return a;
}
function aE(u) {
  let e = "precision " + u.precision + ` float;
precision ` + u.precision + " int;";
  return u.precision === "highp" ? e += `
#define HIGH_PRECISION` : u.precision === "mediump" ? e += `
#define MEDIUM_PRECISION` : u.precision === "lowp" && (e += `
#define LOW_PRECISION`), e;
}
function iz(u) {
  let e = "SHADOWMAP_TYPE_BASIC";
  return u.shadowMapType === Og ? e = "SHADOWMAP_TYPE_PCF" : u.shadowMapType === Kh ? e = "SHADOWMAP_TYPE_PCF_SOFT" : u.shadowMapType === Yu && (e = "SHADOWMAP_TYPE_VSM"), e;
}
function rz(u) {
  let e = "ENVMAP_TYPE_CUBE";
  if (u.envMap)
    switch (u.envMapMode) {
      case kl:
      case Vl:
        e = "ENVMAP_TYPE_CUBE";
        break;
      case sd:
        e = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
  return e;
}
function az(u) {
  let e = "ENVMAP_MODE_REFLECTION";
  if (u.envMap)
    switch (u.envMapMode) {
      case Vl:
        e = "ENVMAP_MODE_REFRACTION";
        break;
    }
  return e;
}
function sz(u) {
  let e = "ENVMAP_BLENDING_NONE";
  if (u.envMap)
    switch (u.combine) {
      case bp:
        e = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case Gw:
        e = "ENVMAP_BLENDING_MIX";
        break;
      case Ww:
        e = "ENVMAP_BLENDING_ADD";
        break;
    }
  return e;
}
function oz(u) {
  const e = u.envMapCubeUVHeight;
  if (e === null)
    return null;
  const t = Math.log2(e) - 2, n = 1 / e;
  return { texelWidth: 1 / (3 * Math.max(Math.pow(2, t), 7 * 16)), texelHeight: n, maxMip: t };
}
function lz(u, e, t, n) {
  const a = u.getContext(), s = t.defines;
  let c = t.vertexShader, f = t.fragmentShader;
  const p = iz(t), h = rz(t), g = az(t), _ = sz(t), x = oz(t), M = t.isWebGL2 ? "" : JN(t), E = QN(s), A = a.createProgram();
  let T, b, L = t.glslVersion ? "#version " + t.glslVersion + `
` : "";
  t.isRawShaderMaterial ? (T = [
    E
  ].filter(Jh).join(`
`), T.length > 0 && (T += `
`), b = [
    M,
    E
  ].filter(Jh).join(`
`), b.length > 0 && (b += `
`)) : (T = [
    aE(t),
    "#define SHADER_NAME " + t.shaderName,
    E,
    t.instancing ? "#define USE_INSTANCING" : "",
    t.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
    t.useFog && t.fog ? "#define USE_FOG" : "",
    t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
    t.map ? "#define USE_MAP" : "",
    t.envMap ? "#define USE_ENVMAP" : "",
    t.envMap ? "#define " + g : "",
    t.lightMap ? "#define USE_LIGHTMAP" : "",
    t.aoMap ? "#define USE_AOMAP" : "",
    t.bumpMap ? "#define USE_BUMPMAP" : "",
    t.normalMap ? "#define USE_NORMALMAP" : "",
    t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    t.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
    t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    t.specularMap ? "#define USE_SPECULARMAP" : "",
    t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    t.metalnessMap ? "#define USE_METALNESSMAP" : "",
    t.alphaMap ? "#define USE_ALPHAMAP" : "",
    t.transmission ? "#define USE_TRANSMISSION" : "",
    t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    //
    t.mapUv ? "#define MAP_UV " + t.mapUv : "",
    t.alphaMapUv ? "#define ALPHAMAP_UV " + t.alphaMapUv : "",
    t.lightMapUv ? "#define LIGHTMAP_UV " + t.lightMapUv : "",
    t.aoMapUv ? "#define AOMAP_UV " + t.aoMapUv : "",
    t.emissiveMapUv ? "#define EMISSIVEMAP_UV " + t.emissiveMapUv : "",
    t.bumpMapUv ? "#define BUMPMAP_UV " + t.bumpMapUv : "",
    t.normalMapUv ? "#define NORMALMAP_UV " + t.normalMapUv : "",
    t.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + t.displacementMapUv : "",
    t.metalnessMapUv ? "#define METALNESSMAP_UV " + t.metalnessMapUv : "",
    t.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + t.roughnessMapUv : "",
    t.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + t.clearcoatMapUv : "",
    t.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + t.clearcoatNormalMapUv : "",
    t.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + t.clearcoatRoughnessMapUv : "",
    t.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + t.iridescenceMapUv : "",
    t.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + t.iridescenceThicknessMapUv : "",
    t.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + t.sheenColorMapUv : "",
    t.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + t.sheenRoughnessMapUv : "",
    t.specularMapUv ? "#define SPECULARMAP_UV " + t.specularMapUv : "",
    t.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + t.specularColorMapUv : "",
    t.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + t.specularIntensityMapUv : "",
    t.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + t.transmissionMapUv : "",
    t.thicknessMapUv ? "#define THICKNESSMAP_UV " + t.thicknessMapUv : "",
    //
    t.vertexTangents ? "#define USE_TANGENT" : "",
    t.vertexColors ? "#define USE_COLOR" : "",
    t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    t.vertexUvs2 ? "#define USE_UV2" : "",
    t.pointsUvs ? "#define USE_POINTS_UV" : "",
    t.flatShading ? "#define FLAT_SHADED" : "",
    t.skinning ? "#define USE_SKINNING" : "",
    t.morphTargets ? "#define USE_MORPHTARGETS" : "",
    t.morphNormals && t.flatShading === !1 ? "#define USE_MORPHNORMALS" : "",
    t.morphColors && t.isWebGL2 ? "#define USE_MORPHCOLORS" : "",
    t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "",
    t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + t.morphTextureStride : "",
    t.morphTargetsCount > 0 && t.isWebGL2 ? "#define MORPHTARGETS_COUNT " + t.morphTargetsCount : "",
    t.doubleSided ? "#define DOUBLE_SIDED" : "",
    t.flipSided ? "#define FLIP_SIDED" : "",
    t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    t.shadowMapEnabled ? "#define " + p : "",
    t.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
    t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
    "uniform mat4 modelMatrix;",
    "uniform mat4 modelViewMatrix;",
    "uniform mat4 projectionMatrix;",
    "uniform mat4 viewMatrix;",
    "uniform mat3 normalMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    "#ifdef USE_INSTANCING",
    "	attribute mat4 instanceMatrix;",
    "#endif",
    "#ifdef USE_INSTANCING_COLOR",
    "	attribute vec3 instanceColor;",
    "#endif",
    "attribute vec3 position;",
    "attribute vec3 normal;",
    "attribute vec2 uv;",
    "#ifdef USE_TANGENT",
    "	attribute vec4 tangent;",
    "#endif",
    "#if defined( USE_COLOR_ALPHA )",
    "	attribute vec4 color;",
    "#elif defined( USE_COLOR )",
    "	attribute vec3 color;",
    "#endif",
    "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
    "	attribute vec3 morphTarget0;",
    "	attribute vec3 morphTarget1;",
    "	attribute vec3 morphTarget2;",
    "	attribute vec3 morphTarget3;",
    "	#ifdef USE_MORPHNORMALS",
    "		attribute vec3 morphNormal0;",
    "		attribute vec3 morphNormal1;",
    "		attribute vec3 morphNormal2;",
    "		attribute vec3 morphNormal3;",
    "	#else",
    "		attribute vec3 morphTarget4;",
    "		attribute vec3 morphTarget5;",
    "		attribute vec3 morphTarget6;",
    "		attribute vec3 morphTarget7;",
    "	#endif",
    "#endif",
    "#ifdef USE_SKINNING",
    "	attribute vec4 skinIndex;",
    "	attribute vec4 skinWeight;",
    "#endif",
    `
`
  ].filter(Jh).join(`
`), b = [
    M,
    aE(t),
    "#define SHADER_NAME " + t.shaderName,
    E,
    t.useFog && t.fog ? "#define USE_FOG" : "",
    t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
    t.map ? "#define USE_MAP" : "",
    t.matcap ? "#define USE_MATCAP" : "",
    t.envMap ? "#define USE_ENVMAP" : "",
    t.envMap ? "#define " + h : "",
    t.envMap ? "#define " + g : "",
    t.envMap ? "#define " + _ : "",
    x ? "#define CUBEUV_TEXEL_WIDTH " + x.texelWidth : "",
    x ? "#define CUBEUV_TEXEL_HEIGHT " + x.texelHeight : "",
    x ? "#define CUBEUV_MAX_MIP " + x.maxMip + ".0" : "",
    t.lightMap ? "#define USE_LIGHTMAP" : "",
    t.aoMap ? "#define USE_AOMAP" : "",
    t.bumpMap ? "#define USE_BUMPMAP" : "",
    t.normalMap ? "#define USE_NORMALMAP" : "",
    t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    t.clearcoat ? "#define USE_CLEARCOAT" : "",
    t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    t.iridescence ? "#define USE_IRIDESCENCE" : "",
    t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    t.specularMap ? "#define USE_SPECULARMAP" : "",
    t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    t.metalnessMap ? "#define USE_METALNESSMAP" : "",
    t.alphaMap ? "#define USE_ALPHAMAP" : "",
    t.alphaTest ? "#define USE_ALPHATEST" : "",
    t.sheen ? "#define USE_SHEEN" : "",
    t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    t.transmission ? "#define USE_TRANSMISSION" : "",
    t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    t.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
    t.vertexTangents ? "#define USE_TANGENT" : "",
    t.vertexColors || t.instancingColor ? "#define USE_COLOR" : "",
    t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    t.vertexUvs2 ? "#define USE_UV2" : "",
    t.pointsUvs ? "#define USE_POINTS_UV" : "",
    t.gradientMap ? "#define USE_GRADIENTMAP" : "",
    t.flatShading ? "#define FLAT_SHADED" : "",
    t.doubleSided ? "#define DOUBLE_SIDED" : "",
    t.flipSided ? "#define FLIP_SIDED" : "",
    t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    t.shadowMapEnabled ? "#define " + p : "",
    t.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
    t.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
    t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
    "uniform mat4 viewMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    t.toneMapping !== ds ? "#define TONE_MAPPING" : "",
    t.toneMapping !== ds ? nn.tonemapping_pars_fragment : "",
    // this code is required here because it is used by the toneMapping() function defined below
    t.toneMapping !== ds ? ZN("toneMapping", t.toneMapping) : "",
    t.dithering ? "#define DITHERING" : "",
    t.opaque ? "#define OPAQUE" : "",
    nn.encodings_pars_fragment,
    // this code is required here because it is used by the various encoding/decoding function defined below
    YN("linearToOutputTexel", t.outputEncoding),
    t.useDepthPacking ? "#define DEPTH_PACKING " + t.depthPacking : "",
    `
`
  ].filter(Jh).join(`
`)), c = Nx(c), c = nE(c, t), c = iE(c, t), f = Nx(f), f = nE(f, t), f = iE(f, t), c = rE(c), f = rE(f), t.isWebGL2 && t.isRawShaderMaterial !== !0 && (L = `#version 300 es
`, T = [
    "precision mediump sampler2DArray;",
    "#define attribute in",
    "#define varying out",
    "#define texture2D texture"
  ].join(`
`) + `
` + T, b = [
    "#define varying in",
    t.glslVersion === Dx ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
    t.glslVersion === Dx ? "" : "#define gl_FragColor pc_fragColor",
    "#define gl_FragDepthEXT gl_FragDepth",
    "#define texture2D texture",
    "#define textureCube texture",
    "#define texture2DProj textureProj",
    "#define texture2DLodEXT textureLod",
    "#define texture2DProjLodEXT textureProjLod",
    "#define textureCubeLodEXT textureLod",
    "#define texture2DGradEXT textureGrad",
    "#define texture2DProjGradEXT textureProjGrad",
    "#define textureCubeGradEXT textureGrad"
  ].join(`
`) + `
` + b);
  const R = L + T + c, U = L + b + f, F = eE(a, 35633, R), V = eE(a, 35632, U);
  if (a.attachShader(A, F), a.attachShader(A, V), t.index0AttributeName !== void 0 ? a.bindAttribLocation(A, 0, t.index0AttributeName) : t.morphTargets === !0 && a.bindAttribLocation(A, 0, "position"), a.linkProgram(A), u.debug.checkShaderErrors) {
    const z = a.getProgramInfoLog(A).trim(), I = a.getShaderInfoLog(F).trim(), Q = a.getShaderInfoLog(V).trim();
    let te = !0, $ = !0;
    if (a.getProgramParameter(A, 35714) === !1)
      if (te = !1, typeof u.debug.onShaderError == "function")
        u.debug.onShaderError(a, A, F, V);
      else {
        const ie = tE(a, F, "vertex"), fe = tE(a, V, "fragment");
        console.error(
          "THREE.WebGLProgram: Shader Error " + a.getError() + " - VALIDATE_STATUS " + a.getProgramParameter(A, 35715) + `

Program Info Log: ` + z + `
` + ie + `
` + fe
        );
      }
    else
      z !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", z) : (I === "" || Q === "") && ($ = !1);
    $ && (this.diagnostics = {
      runnable: te,
      programLog: z,
      vertexShader: {
        log: I,
        prefix: T
      },
      fragmentShader: {
        log: Q,
        prefix: b
      }
    });
  }
  a.deleteShader(F), a.deleteShader(V);
  let k;
  this.getUniforms = function() {
    return k === void 0 && (k = new wg(a, A)), k;
  };
  let G;
  return this.getAttributes = function() {
    return G === void 0 && (G = KN(a, A)), G;
  }, this.destroy = function() {
    n.releaseStatesOfProgram(this), a.deleteProgram(A), this.program = void 0;
  }, this.name = t.shaderName, this.id = qN++, this.cacheKey = e, this.usedTimes = 1, this.program = A, this.vertexShader = F, this.fragmentShader = V, this;
}
let uz = 0;
class cz {
  constructor() {
    this.shaderCache = /* @__PURE__ */ new Map(), this.materialCache = /* @__PURE__ */ new Map();
  }
  update(e) {
    const t = e.vertexShader, n = e.fragmentShader, a = this._getShaderStage(t), s = this._getShaderStage(n), c = this._getShaderCacheForMaterial(e);
    return c.has(a) === !1 && (c.add(a), a.usedTimes++), c.has(s) === !1 && (c.add(s), s.usedTimes++), this;
  }
  remove(e) {
    const t = this.materialCache.get(e);
    for (const n of t)
      n.usedTimes--, n.usedTimes === 0 && this.shaderCache.delete(n.code);
    return this.materialCache.delete(e), this;
  }
  getVertexShaderID(e) {
    return this._getShaderStage(e.vertexShader).id;
  }
  getFragmentShaderID(e) {
    return this._getShaderStage(e.fragmentShader).id;
  }
  dispose() {
    this.shaderCache.clear(), this.materialCache.clear();
  }
  _getShaderCacheForMaterial(e) {
    const t = this.materialCache;
    let n = t.get(e);
    return n === void 0 && (n = /* @__PURE__ */ new Set(), t.set(e, n)), n;
  }
  _getShaderStage(e) {
    const t = this.shaderCache;
    let n = t.get(e);
    return n === void 0 && (n = new fz(e), t.set(e, n)), n;
  }
}
class fz {
  constructor(e) {
    this.id = uz++, this.code = e, this.usedTimes = 0;
  }
}
function dz(u, e, t, n, a, s, c) {
  const f = new ic(), p = new cz(), h = [], g = a.isWebGL2, _ = a.logarithmicDepthBuffer, x = a.vertexTextures;
  let M = a.precision;
  const E = {
    MeshDepthMaterial: "depth",
    MeshDistanceMaterial: "distanceRGBA",
    MeshNormalMaterial: "normal",
    MeshBasicMaterial: "basic",
    MeshLambertMaterial: "lambert",
    MeshPhongMaterial: "phong",
    MeshToonMaterial: "toon",
    MeshStandardMaterial: "physical",
    MeshPhysicalMaterial: "physical",
    MeshMatcapMaterial: "matcap",
    LineBasicMaterial: "basic",
    LineDashedMaterial: "dashed",
    PointsMaterial: "points",
    ShadowMaterial: "shadow",
    SpriteMaterial: "sprite"
  };
  function A(z) {
    return z === 1 ? "uv2" : "uv";
  }
  function T(z, I, Q, te, $) {
    const ie = te.fog, fe = $.geometry, Ee = z.isMeshStandardMaterial ? te.environment : null, Te = (z.isMeshStandardMaterial ? t : e).get(z.envMap || Ee), W = Te && Te.mapping === sd ? Te.image.height : null, ae = E[z.type];
    z.precision !== null && (M = a.getMaxPrecision(z.precision), M !== z.precision && console.warn("THREE.WebGLProgram.getParameters:", z.precision, "not supported, using", M, "instead."));
    const ne = fe.morphAttributes.position || fe.morphAttributes.normal || fe.morphAttributes.color, Se = ne !== void 0 ? ne.length : 0;
    let ue = 0;
    fe.morphAttributes.position !== void 0 && (ue = 1), fe.morphAttributes.normal !== void 0 && (ue = 2), fe.morphAttributes.color !== void 0 && (ue = 3);
    let pe, ye, je, Be;
    if (ae) {
      const He = cs[ae];
      pe = He.vertexShader, ye = He.fragmentShader;
    } else
      pe = z.vertexShader, ye = z.fragmentShader, p.update(z), je = p.getVertexShaderID(z), Be = p.getFragmentShaderID(z);
    const de = u.getRenderTarget(), dt = $.isInstancedMesh === !0, _t = !!z.map, qe = !!z.matcap, ot = !!Te, Ie = !!z.aoMap, Me = !!z.lightMap, Ne = !!z.bumpMap, nt = !!z.normalMap, Ze = !!z.displacementMap, xt = !!z.emissiveMap, Et = !!z.metalnessMap, mt = !!z.roughnessMap, Nt = z.clearcoat > 0, Wt = z.iridescence > 0, Y = z.sheen > 0, H = z.transmission > 0, xe = Nt && !!z.clearcoatMap, Ve = Nt && !!z.clearcoatNormalMap, ke = Nt && !!z.clearcoatRoughnessMap, Qe = Wt && !!z.iridescenceMap, Lt = Wt && !!z.iridescenceThicknessMap, ht = Y && !!z.sheenColorMap, Ae = Y && !!z.sheenRoughnessMap, se = !!z.specularMap, me = !!z.specularColorMap, De = !!z.specularIntensityMap, Fe = H && !!z.transmissionMap, Pe = H && !!z.thicknessMap, wt = !!z.gradientMap, St = !!z.alphaMap, rt = z.alphaTest > 0, X = !!z.extensions, be = !!fe.attributes.uv2;
    return {
      isWebGL2: g,
      shaderID: ae,
      shaderName: z.type,
      vertexShader: pe,
      fragmentShader: ye,
      defines: z.defines,
      customVertexShaderID: je,
      customFragmentShaderID: Be,
      isRawShaderMaterial: z.isRawShaderMaterial === !0,
      glslVersion: z.glslVersion,
      precision: M,
      instancing: dt,
      instancingColor: dt && $.instanceColor !== null,
      supportsVertexTextures: x,
      outputEncoding: de === null ? u.outputEncoding : de.isXRRenderTarget === !0 ? de.texture.encoding : Uo,
      map: _t,
      matcap: qe,
      envMap: ot,
      envMapMode: ot && Te.mapping,
      envMapCubeUVHeight: W,
      aoMap: Ie,
      lightMap: Me,
      bumpMap: Ne,
      normalMap: nt,
      displacementMap: x && Ze,
      emissiveMap: xt,
      normalMapObjectSpace: nt && z.normalMapType === mT,
      normalMapTangentSpace: nt && z.normalMapType === ql,
      decodeVideoTexture: _t && z.map.isVideoTexture === !0 && z.map.encoding === Pn,
      metalnessMap: Et,
      roughnessMap: mt,
      clearcoat: Nt,
      clearcoatMap: xe,
      clearcoatNormalMap: Ve,
      clearcoatRoughnessMap: ke,
      iridescence: Wt,
      iridescenceMap: Qe,
      iridescenceThicknessMap: Lt,
      sheen: Y,
      sheenColorMap: ht,
      sheenRoughnessMap: Ae,
      specularMap: se,
      specularColorMap: me,
      specularIntensityMap: De,
      transmission: H,
      transmissionMap: Fe,
      thicknessMap: Pe,
      gradientMap: wt,
      opaque: z.transparent === !1 && z.blending === ec,
      alphaMap: St,
      alphaTest: rt,
      combine: z.combine,
      //
      mapUv: _t && A(z.map.channel),
      aoMapUv: Ie && A(z.aoMap.channel),
      lightMapUv: Me && A(z.lightMap.channel),
      bumpMapUv: Ne && A(z.bumpMap.channel),
      normalMapUv: nt && A(z.normalMap.channel),
      displacementMapUv: Ze && A(z.displacementMap.channel),
      emissiveMapUv: xt && A(z.emissiveMap.channel),
      metalnessMapUv: Et && A(z.metalnessMap.channel),
      roughnessMapUv: mt && A(z.roughnessMap.channel),
      clearcoatMapUv: xe && A(z.clearcoatMap.channel),
      clearcoatNormalMapUv: Ve && A(z.clearcoatNormalMap.channel),
      clearcoatRoughnessMapUv: ke && A(z.clearcoatRoughnessMap.channel),
      iridescenceMapUv: Qe && A(z.iridescenceMap.channel),
      iridescenceThicknessMapUv: Lt && A(z.iridescenceThicknessMap.channel),
      sheenColorMapUv: ht && A(z.sheenColorMap.channel),
      sheenRoughnessMapUv: Ae && A(z.sheenRoughnessMap.channel),
      specularMapUv: se && A(z.specularMap.channel),
      specularColorMapUv: me && A(z.specularColorMap.channel),
      specularIntensityMapUv: De && A(z.specularIntensityMap.channel),
      transmissionMapUv: Fe && A(z.transmissionMap.channel),
      thicknessMapUv: Pe && A(z.thicknessMap.channel),
      alphaMapUv: St && A(z.alphaMap.channel),
      //
      vertexTangents: nt && !!fe.attributes.tangent,
      vertexColors: z.vertexColors,
      vertexAlphas: z.vertexColors === !0 && !!fe.attributes.color && fe.attributes.color.itemSize === 4,
      vertexUvs2: be,
      pointsUvs: $.isPoints === !0 && !!fe.attributes.uv && (_t || St),
      fog: !!ie,
      useFog: z.fog === !0,
      fogExp2: ie && ie.isFogExp2,
      flatShading: z.flatShading === !0,
      sizeAttenuation: z.sizeAttenuation === !0,
      logarithmicDepthBuffer: _,
      skinning: $.isSkinnedMesh === !0,
      morphTargets: fe.morphAttributes.position !== void 0,
      morphNormals: fe.morphAttributes.normal !== void 0,
      morphColors: fe.morphAttributes.color !== void 0,
      morphTargetsCount: Se,
      morphTextureStride: ue,
      numDirLights: I.directional.length,
      numPointLights: I.point.length,
      numSpotLights: I.spot.length,
      numSpotLightMaps: I.spotLightMap.length,
      numRectAreaLights: I.rectArea.length,
      numHemiLights: I.hemi.length,
      numDirLightShadows: I.directionalShadowMap.length,
      numPointLightShadows: I.pointShadowMap.length,
      numSpotLightShadows: I.spotShadowMap.length,
      numSpotLightShadowsWithMaps: I.numSpotLightShadowsWithMaps,
      numClippingPlanes: c.numPlanes,
      numClipIntersection: c.numIntersection,
      dithering: z.dithering,
      shadowMapEnabled: u.shadowMap.enabled && Q.length > 0,
      shadowMapType: u.shadowMap.type,
      toneMapping: z.toneMapped ? u.toneMapping : ds,
      useLegacyLights: u.useLegacyLights,
      premultipliedAlpha: z.premultipliedAlpha,
      doubleSided: z.side === fs,
      flipSided: z.side === Cr,
      useDepthPacking: z.depthPacking >= 0,
      depthPacking: z.depthPacking || 0,
      index0AttributeName: z.index0AttributeName,
      extensionDerivatives: X && z.extensions.derivatives === !0,
      extensionFragDepth: X && z.extensions.fragDepth === !0,
      extensionDrawBuffers: X && z.extensions.drawBuffers === !0,
      extensionShaderTextureLOD: X && z.extensions.shaderTextureLOD === !0,
      rendererExtensionFragDepth: g || n.has("EXT_frag_depth"),
      rendererExtensionDrawBuffers: g || n.has("WEBGL_draw_buffers"),
      rendererExtensionShaderTextureLod: g || n.has("EXT_shader_texture_lod"),
      customProgramCacheKey: z.customProgramCacheKey()
    };
  }
  function b(z) {
    const I = [];
    if (z.shaderID ? I.push(z.shaderID) : (I.push(z.customVertexShaderID), I.push(z.customFragmentShaderID)), z.defines !== void 0)
      for (const Q in z.defines)
        I.push(Q), I.push(z.defines[Q]);
    return z.isRawShaderMaterial === !1 && (L(I, z), R(I, z), I.push(u.outputEncoding)), I.push(z.customProgramCacheKey), I.join();
  }
  function L(z, I) {
    z.push(I.precision), z.push(I.outputEncoding), z.push(I.envMapMode), z.push(I.envMapCubeUVHeight), z.push(I.mapUv), z.push(I.alphaMapUv), z.push(I.lightMapUv), z.push(I.aoMapUv), z.push(I.bumpMapUv), z.push(I.normalMapUv), z.push(I.displacementMapUv), z.push(I.emissiveMapUv), z.push(I.metalnessMapUv), z.push(I.roughnessMapUv), z.push(I.clearcoatMapUv), z.push(I.clearcoatNormalMapUv), z.push(I.clearcoatRoughnessMapUv), z.push(I.iridescenceMapUv), z.push(I.iridescenceThicknessMapUv), z.push(I.sheenColorMapUv), z.push(I.sheenRoughnessMapUv), z.push(I.specularMapUv), z.push(I.specularColorMapUv), z.push(I.specularIntensityMapUv), z.push(I.transmissionMapUv), z.push(I.thicknessMapUv), z.push(I.combine), z.push(I.fogExp2), z.push(I.sizeAttenuation), z.push(I.morphTargetsCount), z.push(I.morphAttributeCount), z.push(I.numDirLights), z.push(I.numPointLights), z.push(I.numSpotLights), z.push(I.numSpotLightMaps), z.push(I.numHemiLights), z.push(I.numRectAreaLights), z.push(I.numDirLightShadows), z.push(I.numPointLightShadows), z.push(I.numSpotLightShadows), z.push(I.numSpotLightShadowsWithMaps), z.push(I.shadowMapType), z.push(I.toneMapping), z.push(I.numClippingPlanes), z.push(I.numClipIntersection), z.push(I.depthPacking);
  }
  function R(z, I) {
    f.disableAll(), I.isWebGL2 && f.enable(0), I.supportsVertexTextures && f.enable(1), I.instancing && f.enable(2), I.instancingColor && f.enable(3), I.matcap && f.enable(4), I.envMap && f.enable(5), I.normalMapObjectSpace && f.enable(6), I.normalMapTangentSpace && f.enable(7), I.clearcoat && f.enable(8), I.iridescence && f.enable(9), I.alphaTest && f.enable(10), I.vertexColors && f.enable(11), I.vertexAlphas && f.enable(12), I.vertexUvs2 && f.enable(13), I.vertexTangents && f.enable(14), z.push(f.mask), f.disableAll(), I.fog && f.enable(0), I.useFog && f.enable(1), I.flatShading && f.enable(2), I.logarithmicDepthBuffer && f.enable(3), I.skinning && f.enable(4), I.morphTargets && f.enable(5), I.morphNormals && f.enable(6), I.morphColors && f.enable(7), I.premultipliedAlpha && f.enable(8), I.shadowMapEnabled && f.enable(9), I.useLegacyLights && f.enable(10), I.doubleSided && f.enable(11), I.flipSided && f.enable(12), I.useDepthPacking && f.enable(13), I.dithering && f.enable(14), I.transmission && f.enable(15), I.sheen && f.enable(16), I.decodeVideoTexture && f.enable(17), I.opaque && f.enable(18), I.pointsUvs && f.enable(19), z.push(f.mask);
  }
  function U(z) {
    const I = E[z.type];
    let Q;
    if (I) {
      const te = cs[I];
      Q = MT.clone(te.uniforms);
    } else
      Q = z.uniforms;
    return Q;
  }
  function F(z, I) {
    let Q;
    for (let te = 0, $ = h.length; te < $; te++) {
      const ie = h[te];
      if (ie.cacheKey === I) {
        Q = ie, ++Q.usedTimes;
        break;
      }
    }
    return Q === void 0 && (Q = new lz(u, I, z, s), h.push(Q)), Q;
  }
  function V(z) {
    if (--z.usedTimes === 0) {
      const I = h.indexOf(z);
      h[I] = h[h.length - 1], h.pop(), z.destroy();
    }
  }
  function k(z) {
    p.remove(z);
  }
  function G() {
    p.dispose();
  }
  return {
    getParameters: T,
    getProgramCacheKey: b,
    getUniforms: U,
    acquireProgram: F,
    releaseProgram: V,
    releaseShaderCache: k,
    // Exposed for resource monitoring & error feedback via renderer.info:
    programs: h,
    dispose: G
  };
}
function hz() {
  let u = /* @__PURE__ */ new WeakMap();
  function e(s) {
    let c = u.get(s);
    return c === void 0 && (c = {}, u.set(s, c)), c;
  }
  function t(s) {
    u.delete(s);
  }
  function n(s, c, f) {
    u.get(s)[c] = f;
  }
  function a() {
    u = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    remove: t,
    update: n,
    dispose: a
  };
}
function pz(u, e) {
  return u.groupOrder !== e.groupOrder ? u.groupOrder - e.groupOrder : u.renderOrder !== e.renderOrder ? u.renderOrder - e.renderOrder : u.material.id !== e.material.id ? u.material.id - e.material.id : u.z !== e.z ? u.z - e.z : u.id - e.id;
}
function sE(u, e) {
  return u.groupOrder !== e.groupOrder ? u.groupOrder - e.groupOrder : u.renderOrder !== e.renderOrder ? u.renderOrder - e.renderOrder : u.z !== e.z ? e.z - u.z : u.id - e.id;
}
function oE() {
  const u = [];
  let e = 0;
  const t = [], n = [], a = [];
  function s() {
    e = 0, t.length = 0, n.length = 0, a.length = 0;
  }
  function c(_, x, M, E, A, T) {
    let b = u[e];
    return b === void 0 ? (b = {
      id: _.id,
      object: _,
      geometry: x,
      material: M,
      groupOrder: E,
      renderOrder: _.renderOrder,
      z: A,
      group: T
    }, u[e] = b) : (b.id = _.id, b.object = _, b.geometry = x, b.material = M, b.groupOrder = E, b.renderOrder = _.renderOrder, b.z = A, b.group = T), e++, b;
  }
  function f(_, x, M, E, A, T) {
    const b = c(_, x, M, E, A, T);
    M.transmission > 0 ? n.push(b) : M.transparent === !0 ? a.push(b) : t.push(b);
  }
  function p(_, x, M, E, A, T) {
    const b = c(_, x, M, E, A, T);
    M.transmission > 0 ? n.unshift(b) : M.transparent === !0 ? a.unshift(b) : t.unshift(b);
  }
  function h(_, x) {
    t.length > 1 && t.sort(_ || pz), n.length > 1 && n.sort(x || sE), a.length > 1 && a.sort(x || sE);
  }
  function g() {
    for (let _ = e, x = u.length; _ < x; _++) {
      const M = u[_];
      if (M.id === null)
        break;
      M.id = null, M.object = null, M.geometry = null, M.material = null, M.group = null;
    }
  }
  return {
    opaque: t,
    transmissive: n,
    transparent: a,
    init: s,
    push: f,
    unshift: p,
    finish: g,
    sort: h
  };
}
function mz() {
  let u = /* @__PURE__ */ new WeakMap();
  function e(n, a) {
    const s = u.get(n);
    let c;
    return s === void 0 ? (c = new oE(), u.set(n, [c])) : a >= s.length ? (c = new oE(), s.push(c)) : c = s[a], c;
  }
  function t() {
    u = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    dispose: t
  };
}
function vz() {
  const u = {};
  return {
    get: function(e) {
      if (u[e.id] !== void 0)
        return u[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            direction: new j(),
            color: new yt()
          };
          break;
        case "SpotLight":
          t = {
            position: new j(),
            direction: new j(),
            color: new yt(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0
          };
          break;
        case "PointLight":
          t = {
            position: new j(),
            color: new yt(),
            distance: 0,
            decay: 0
          };
          break;
        case "HemisphereLight":
          t = {
            direction: new j(),
            skyColor: new yt(),
            groundColor: new yt()
          };
          break;
        case "RectAreaLight":
          t = {
            color: new yt(),
            position: new j(),
            halfWidth: new j(),
            halfHeight: new j()
          };
          break;
      }
      return u[e.id] = t, t;
    }
  };
}
function gz() {
  const u = {};
  return {
    get: function(e) {
      if (u[e.id] !== void 0)
        return u[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Ge()
          };
          break;
        case "SpotLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Ge()
          };
          break;
        case "PointLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Ge(),
            shadowCameraNear: 1,
            shadowCameraFar: 1e3
          };
          break;
      }
      return u[e.id] = t, t;
    }
  };
}
let yz = 0;
function _z(u, e) {
  return (e.castShadow ? 2 : 0) - (u.castShadow ? 2 : 0) + (e.map ? 1 : 0) - (u.map ? 1 : 0);
}
function xz(u, e) {
  const t = new vz(), n = gz(), a = {
    version: 0,
    hash: {
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      numDirectionalShadows: -1,
      numPointShadows: -1,
      numSpotShadows: -1,
      numSpotMaps: -1
    },
    ambient: [0, 0, 0],
    probe: [],
    directional: [],
    directionalShadow: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotLightMap: [],
    spotShadow: [],
    spotShadowMap: [],
    spotLightMatrix: [],
    rectArea: [],
    rectAreaLTC1: null,
    rectAreaLTC2: null,
    point: [],
    pointShadow: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: [],
    numSpotLightShadowsWithMaps: 0
  };
  for (let g = 0; g < 9; g++)
    a.probe.push(new j());
  const s = new j(), c = new Qt(), f = new Qt();
  function p(g, _) {
    let x = 0, M = 0, E = 0;
    for (let Q = 0; Q < 9; Q++)
      a.probe[Q].set(0, 0, 0);
    let A = 0, T = 0, b = 0, L = 0, R = 0, U = 0, F = 0, V = 0, k = 0, G = 0;
    g.sort(_z);
    const z = _ === !0 ? Math.PI : 1;
    for (let Q = 0, te = g.length; Q < te; Q++) {
      const $ = g[Q], ie = $.color, fe = $.intensity, Ee = $.distance, Te = $.shadow && $.shadow.map ? $.shadow.map.texture : null;
      if ($.isAmbientLight)
        x += ie.r * fe * z, M += ie.g * fe * z, E += ie.b * fe * z;
      else if ($.isLightProbe)
        for (let W = 0; W < 9; W++)
          a.probe[W].addScaledVector($.sh.coefficients[W], fe);
      else if ($.isDirectionalLight) {
        const W = t.get($);
        if (W.color.copy($.color).multiplyScalar($.intensity * z), $.castShadow) {
          const ae = $.shadow, ne = n.get($);
          ne.shadowBias = ae.bias, ne.shadowNormalBias = ae.normalBias, ne.shadowRadius = ae.radius, ne.shadowMapSize = ae.mapSize, a.directionalShadow[A] = ne, a.directionalShadowMap[A] = Te, a.directionalShadowMatrix[A] = $.shadow.matrix, U++;
        }
        a.directional[A] = W, A++;
      } else if ($.isSpotLight) {
        const W = t.get($);
        W.position.setFromMatrixPosition($.matrixWorld), W.color.copy(ie).multiplyScalar(fe * z), W.distance = Ee, W.coneCos = Math.cos($.angle), W.penumbraCos = Math.cos($.angle * (1 - $.penumbra)), W.decay = $.decay, a.spot[b] = W;
        const ae = $.shadow;
        if ($.map && (a.spotLightMap[k] = $.map, k++, ae.updateMatrices($), $.castShadow && G++), a.spotLightMatrix[b] = ae.matrix, $.castShadow) {
          const ne = n.get($);
          ne.shadowBias = ae.bias, ne.shadowNormalBias = ae.normalBias, ne.shadowRadius = ae.radius, ne.shadowMapSize = ae.mapSize, a.spotShadow[b] = ne, a.spotShadowMap[b] = Te, V++;
        }
        b++;
      } else if ($.isRectAreaLight) {
        const W = t.get($);
        W.color.copy(ie).multiplyScalar(fe), W.halfWidth.set($.width * 0.5, 0, 0), W.halfHeight.set(0, $.height * 0.5, 0), a.rectArea[L] = W, L++;
      } else if ($.isPointLight) {
        const W = t.get($);
        if (W.color.copy($.color).multiplyScalar($.intensity * z), W.distance = $.distance, W.decay = $.decay, $.castShadow) {
          const ae = $.shadow, ne = n.get($);
          ne.shadowBias = ae.bias, ne.shadowNormalBias = ae.normalBias, ne.shadowRadius = ae.radius, ne.shadowMapSize = ae.mapSize, ne.shadowCameraNear = ae.camera.near, ne.shadowCameraFar = ae.camera.far, a.pointShadow[T] = ne, a.pointShadowMap[T] = Te, a.pointShadowMatrix[T] = $.shadow.matrix, F++;
        }
        a.point[T] = W, T++;
      } else if ($.isHemisphereLight) {
        const W = t.get($);
        W.skyColor.copy($.color).multiplyScalar(fe * z), W.groundColor.copy($.groundColor).multiplyScalar(fe * z), a.hemi[R] = W, R++;
      }
    }
    L > 0 && (e.isWebGL2 || u.has("OES_texture_float_linear") === !0 ? (a.rectAreaLTC1 = lt.LTC_FLOAT_1, a.rectAreaLTC2 = lt.LTC_FLOAT_2) : u.has("OES_texture_half_float_linear") === !0 ? (a.rectAreaLTC1 = lt.LTC_HALF_1, a.rectAreaLTC2 = lt.LTC_HALF_2) : console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")), a.ambient[0] = x, a.ambient[1] = M, a.ambient[2] = E;
    const I = a.hash;
    (I.directionalLength !== A || I.pointLength !== T || I.spotLength !== b || I.rectAreaLength !== L || I.hemiLength !== R || I.numDirectionalShadows !== U || I.numPointShadows !== F || I.numSpotShadows !== V || I.numSpotMaps !== k) && (a.directional.length = A, a.spot.length = b, a.rectArea.length = L, a.point.length = T, a.hemi.length = R, a.directionalShadow.length = U, a.directionalShadowMap.length = U, a.pointShadow.length = F, a.pointShadowMap.length = F, a.spotShadow.length = V, a.spotShadowMap.length = V, a.directionalShadowMatrix.length = U, a.pointShadowMatrix.length = F, a.spotLightMatrix.length = V + k - G, a.spotLightMap.length = k, a.numSpotLightShadowsWithMaps = G, I.directionalLength = A, I.pointLength = T, I.spotLength = b, I.rectAreaLength = L, I.hemiLength = R, I.numDirectionalShadows = U, I.numPointShadows = F, I.numSpotShadows = V, I.numSpotMaps = k, a.version = yz++);
  }
  function h(g, _) {
    let x = 0, M = 0, E = 0, A = 0, T = 0;
    const b = _.matrixWorldInverse;
    for (let L = 0, R = g.length; L < R; L++) {
      const U = g[L];
      if (U.isDirectionalLight) {
        const F = a.directional[x];
        F.direction.setFromMatrixPosition(U.matrixWorld), s.setFromMatrixPosition(U.target.matrixWorld), F.direction.sub(s), F.direction.transformDirection(b), x++;
      } else if (U.isSpotLight) {
        const F = a.spot[E];
        F.position.setFromMatrixPosition(U.matrixWorld), F.position.applyMatrix4(b), F.direction.setFromMatrixPosition(U.matrixWorld), s.setFromMatrixPosition(U.target.matrixWorld), F.direction.sub(s), F.direction.transformDirection(b), E++;
      } else if (U.isRectAreaLight) {
        const F = a.rectArea[A];
        F.position.setFromMatrixPosition(U.matrixWorld), F.position.applyMatrix4(b), f.identity(), c.copy(U.matrixWorld), c.premultiply(b), f.extractRotation(c), F.halfWidth.set(U.width * 0.5, 0, 0), F.halfHeight.set(0, U.height * 0.5, 0), F.halfWidth.applyMatrix4(f), F.halfHeight.applyMatrix4(f), A++;
      } else if (U.isPointLight) {
        const F = a.point[M];
        F.position.setFromMatrixPosition(U.matrixWorld), F.position.applyMatrix4(b), M++;
      } else if (U.isHemisphereLight) {
        const F = a.hemi[T];
        F.direction.setFromMatrixPosition(U.matrixWorld), F.direction.transformDirection(b), T++;
      }
    }
  }
  return {
    setup: p,
    setupView: h,
    state: a
  };
}
function lE(u, e) {
  const t = new xz(u, e), n = [], a = [];
  function s() {
    n.length = 0, a.length = 0;
  }
  function c(_) {
    n.push(_);
  }
  function f(_) {
    a.push(_);
  }
  function p(_) {
    t.setup(n, _);
  }
  function h(_) {
    t.setupView(n, _);
  }
  return {
    init: s,
    state: {
      lightsArray: n,
      shadowsArray: a,
      lights: t
    },
    setupLights: p,
    setupLightsView: h,
    pushLight: c,
    pushShadow: f
  };
}
function Sz(u, e) {
  let t = /* @__PURE__ */ new WeakMap();
  function n(s, c = 0) {
    const f = t.get(s);
    let p;
    return f === void 0 ? (p = new lE(u, e), t.set(s, [p])) : c >= f.length ? (p = new lE(u, e), f.push(p)) : p = f[c], p;
  }
  function a() {
    t = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: n,
    dispose: a
  };
}
class rS extends nr {
  constructor(e) {
    super(), this.isMeshDepthMaterial = !0, this.type = "MeshDepthMaterial", this.depthPacking = hT, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.depthPacking = e.depthPacking, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this;
  }
}
class aS extends nr {
  constructor(e) {
    super(), this.isMeshDistanceMaterial = !0, this.type = "MeshDistanceMaterial", this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this;
  }
}
const Mz = `void main() {
	gl_Position = vec4( position, 1.0 );
}`, bz = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;
function Ez(u, e, t) {
  let n = new Hg();
  const a = new Ge(), s = new Ge(), c = new Un(), f = new rS({ depthPacking: pT }), p = new aS(), h = {}, g = t.maxTextureSize, _ = { [Do]: Cr, [Cr]: Do, [fs]: fs }, x = new Vs({
    defines: {
      VSM_SAMPLES: 8
    },
    uniforms: {
      shadow_pass: { value: null },
      resolution: { value: new Ge() },
      radius: { value: 4 }
    },
    vertexShader: Mz,
    fragmentShader: bz
  }), M = x.clone();
  M.defines.HORIZONTAL_PASS = 1;
  const E = new an();
  E.setAttribute(
    "position",
    new Hn(
      new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
      3
    )
  );
  const A = new tr(E, x), T = this;
  this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = Og, this.render = function(U, F, V) {
    if (T.enabled === !1 || T.autoUpdate === !1 && T.needsUpdate === !1 || U.length === 0)
      return;
    const k = u.getRenderTarget(), G = u.getActiveCubeFace(), z = u.getActiveMipmapLevel(), I = u.state;
    I.setBlending(Lo), I.buffers.color.setClear(1, 1, 1, 1), I.buffers.depth.setTest(!0), I.setScissorTest(!1);
    for (let Q = 0, te = U.length; Q < te; Q++) {
      const $ = U[Q], ie = $.shadow;
      if (ie === void 0) {
        console.warn("THREE.WebGLShadowMap:", $, "has no shadow.");
        continue;
      }
      if (ie.autoUpdate === !1 && ie.needsUpdate === !1)
        continue;
      a.copy(ie.mapSize);
      const fe = ie.getFrameExtents();
      if (a.multiply(fe), s.copy(ie.mapSize), (a.x > g || a.y > g) && (a.x > g && (s.x = Math.floor(g / fe.x), a.x = s.x * fe.x, ie.mapSize.x = s.x), a.y > g && (s.y = Math.floor(g / fe.y), a.y = s.y * fe.y, ie.mapSize.y = s.y)), ie.map === null) {
        const Te = this.type !== Yu ? { minFilter: bi, magFilter: bi } : {};
        ie.map = new Ga(a.x, a.y, Te), ie.map.texture.name = $.name + ".shadowMap", ie.camera.updateProjectionMatrix();
      }
      u.setRenderTarget(ie.map), u.clear();
      const Ee = ie.getViewportCount();
      for (let Te = 0; Te < Ee; Te++) {
        const W = ie.getViewport(Te);
        c.set(
          s.x * W.x,
          s.y * W.y,
          s.x * W.z,
          s.y * W.w
        ), I.viewport(c), ie.updateMatrices($, Te), n = ie.getFrustum(), R(F, V, ie.camera, $, this.type);
      }
      ie.isPointLightShadow !== !0 && this.type === Yu && b(ie, V), ie.needsUpdate = !1;
    }
    T.needsUpdate = !1, u.setRenderTarget(k, G, z);
  };
  function b(U, F) {
    const V = e.update(A);
    x.defines.VSM_SAMPLES !== U.blurSamples && (x.defines.VSM_SAMPLES = U.blurSamples, M.defines.VSM_SAMPLES = U.blurSamples, x.needsUpdate = !0, M.needsUpdate = !0), U.mapPass === null && (U.mapPass = new Ga(a.x, a.y)), x.uniforms.shadow_pass.value = U.map.texture, x.uniforms.resolution.value = U.mapSize, x.uniforms.radius.value = U.radius, u.setRenderTarget(U.mapPass), u.clear(), u.renderBufferDirect(F, null, V, x, A, null), M.uniforms.shadow_pass.value = U.mapPass.texture, M.uniforms.resolution.value = U.mapSize, M.uniforms.radius.value = U.radius, u.setRenderTarget(U.map), u.clear(), u.renderBufferDirect(F, null, V, M, A, null);
  }
  function L(U, F, V, k) {
    let G = null;
    const z = V.isPointLight === !0 ? U.customDistanceMaterial : U.customDepthMaterial;
    if (z !== void 0)
      G = z;
    else if (G = V.isPointLight === !0 ? p : f, u.localClippingEnabled && F.clipShadows === !0 && Array.isArray(F.clippingPlanes) && F.clippingPlanes.length !== 0 || F.displacementMap && F.displacementScale !== 0 || F.alphaMap && F.alphaTest > 0 || F.map && F.alphaTest > 0) {
      const I = G.uuid, Q = F.uuid;
      let te = h[I];
      te === void 0 && (te = {}, h[I] = te);
      let $ = te[Q];
      $ === void 0 && ($ = G.clone(), te[Q] = $), G = $;
    }
    if (G.visible = F.visible, G.wireframe = F.wireframe, k === Yu ? G.side = F.shadowSide !== null ? F.shadowSide : F.side : G.side = F.shadowSide !== null ? F.shadowSide : _[F.side], G.alphaMap = F.alphaMap, G.alphaTest = F.alphaTest, G.map = F.map, G.clipShadows = F.clipShadows, G.clippingPlanes = F.clippingPlanes, G.clipIntersection = F.clipIntersection, G.displacementMap = F.displacementMap, G.displacementScale = F.displacementScale, G.displacementBias = F.displacementBias, G.wireframeLinewidth = F.wireframeLinewidth, G.linewidth = F.linewidth, V.isPointLight === !0 && G.isMeshDistanceMaterial === !0) {
      const I = u.properties.get(G);
      I.light = V;
    }
    return G;
  }
  function R(U, F, V, k, G) {
    if (U.visible === !1)
      return;
    if (U.layers.test(F.layers) && (U.isMesh || U.isLine || U.isPoints) && (U.castShadow || U.receiveShadow && G === Yu) && (!U.frustumCulled || n.intersectsObject(U))) {
      U.modelViewMatrix.multiplyMatrices(V.matrixWorldInverse, U.matrixWorld);
      const Q = e.update(U), te = U.material;
      if (Array.isArray(te)) {
        const $ = Q.groups;
        for (let ie = 0, fe = $.length; ie < fe; ie++) {
          const Ee = $[ie], Te = te[Ee.materialIndex];
          if (Te && Te.visible) {
            const W = L(U, Te, k, G);
            u.renderBufferDirect(V, null, Q, W, U, Ee);
          }
        }
      } else if (te.visible) {
        const $ = L(U, te, k, G);
        u.renderBufferDirect(V, null, Q, $, U, null);
      }
    }
    const I = U.children;
    for (let Q = 0, te = I.length; Q < te; Q++)
      R(I[Q], F, V, k, G);
  }
}
function wz(u, e, t) {
  const n = t.isWebGL2;
  function a() {
    let X = !1;
    const be = new Un();
    let Le = null;
    const He = new Un(0, 0, 0, 0);
    return {
      setMask: function(Tt) {
        Le !== Tt && !X && (u.colorMask(Tt, Tt, Tt, Tt), Le = Tt);
      },
      setLocked: function(Tt) {
        X = Tt;
      },
      setClear: function(Tt, tn, mn, Gn, Gt) {
        Gt === !0 && (Tt *= Gn, tn *= Gn, mn *= Gn), be.set(Tt, tn, mn, Gn), He.equals(be) === !1 && (u.clearColor(Tt, tn, mn, Gn), He.copy(be));
      },
      reset: function() {
        X = !1, Le = null, He.set(-1, 0, 0, 0);
      }
    };
  }
  function s() {
    let X = !1, be = null, Le = null, He = null;
    return {
      setTest: function(Tt) {
        Tt ? de(2929) : dt(2929);
      },
      setMask: function(Tt) {
        be !== Tt && !X && (u.depthMask(Tt), be = Tt);
      },
      setFunc: function(Tt) {
        if (Le !== Tt) {
          switch (Tt) {
            case Ow:
              u.depthFunc(512);
              break;
            case Iw:
              u.depthFunc(519);
              break;
            case Fw:
              u.depthFunc(513);
              break;
            case Tg:
              u.depthFunc(515);
              break;
            case Bw:
              u.depthFunc(514);
              break;
            case Hw:
              u.depthFunc(518);
              break;
            case kw:
              u.depthFunc(516);
              break;
            case Vw:
              u.depthFunc(517);
              break;
            default:
              u.depthFunc(515);
          }
          Le = Tt;
        }
      },
      setLocked: function(Tt) {
        X = Tt;
      },
      setClear: function(Tt) {
        He !== Tt && (u.clearDepth(Tt), He = Tt);
      },
      reset: function() {
        X = !1, be = null, Le = null, He = null;
      }
    };
  }
  function c() {
    let X = !1, be = null, Le = null, He = null, Tt = null, tn = null, mn = null, Gn = null, Gt = null;
    return {
      setTest: function(ln) {
        X || (ln ? de(2960) : dt(2960));
      },
      setMask: function(ln) {
        be !== ln && !X && (u.stencilMask(ln), be = ln);
      },
      setFunc: function(ln, kn, oi) {
        (Le !== ln || He !== kn || Tt !== oi) && (u.stencilFunc(ln, kn, oi), Le = ln, He = kn, Tt = oi);
      },
      setOp: function(ln, kn, oi) {
        (tn !== ln || mn !== kn || Gn !== oi) && (u.stencilOp(ln, kn, oi), tn = ln, mn = kn, Gn = oi);
      },
      setLocked: function(ln) {
        X = ln;
      },
      setClear: function(ln) {
        Gt !== ln && (u.clearStencil(ln), Gt = ln);
      },
      reset: function() {
        X = !1, be = null, Le = null, He = null, Tt = null, tn = null, mn = null, Gn = null, Gt = null;
      }
    };
  }
  const f = new a(), p = new s(), h = new c(), g = /* @__PURE__ */ new WeakMap(), _ = /* @__PURE__ */ new WeakMap();
  let x = {}, M = {}, E = /* @__PURE__ */ new WeakMap(), A = [], T = null, b = !1, L = null, R = null, U = null, F = null, V = null, k = null, G = null, z = !1, I = null, Q = null, te = null, $ = null, ie = null;
  const fe = u.getParameter(35661);
  let Ee = !1, Te = 0;
  const W = u.getParameter(7938);
  W.indexOf("WebGL") !== -1 ? (Te = parseFloat(/^WebGL (\d)/.exec(W)[1]), Ee = Te >= 1) : W.indexOf("OpenGL ES") !== -1 && (Te = parseFloat(/^OpenGL ES (\d)/.exec(W)[1]), Ee = Te >= 2);
  let ae = null, ne = {};
  const Se = u.getParameter(3088), ue = u.getParameter(2978), pe = new Un().fromArray(Se), ye = new Un().fromArray(ue);
  function je(X, be, Le) {
    const He = new Uint8Array(4), Tt = u.createTexture();
    u.bindTexture(X, Tt), u.texParameteri(X, 10241, 9728), u.texParameteri(X, 10240, 9728);
    for (let tn = 0; tn < Le; tn++)
      u.texImage2D(be + tn, 0, 6408, 1, 1, 0, 6408, 5121, He);
    return Tt;
  }
  const Be = {};
  Be[3553] = je(3553, 3553, 1), Be[34067] = je(34067, 34069, 6), f.setClear(0, 0, 0, 1), p.setClear(1), h.setClear(0), de(2929), p.setFunc(Tg), Ze(!1), xt(nx), de(2884), Ne(Lo);
  function de(X) {
    x[X] !== !0 && (u.enable(X), x[X] = !0);
  }
  function dt(X) {
    x[X] !== !1 && (u.disable(X), x[X] = !1);
  }
  function _t(X, be) {
    return M[X] !== be ? (u.bindFramebuffer(X, be), M[X] = be, n && (X === 36009 && (M[36160] = be), X === 36160 && (M[36009] = be)), !0) : !1;
  }
  function qe(X, be) {
    let Le = A, He = !1;
    if (X)
      if (Le = E.get(be), Le === void 0 && (Le = [], E.set(be, Le)), X.isWebGLMultipleRenderTargets) {
        const Tt = X.texture;
        if (Le.length !== Tt.length || Le[0] !== 36064) {
          for (let tn = 0, mn = Tt.length; tn < mn; tn++)
            Le[tn] = 36064 + tn;
          Le.length = Tt.length, He = !0;
        }
      } else
        Le[0] !== 36064 && (Le[0] = 36064, He = !0);
    else
      Le[0] !== 1029 && (Le[0] = 1029, He = !0);
    He && (t.isWebGL2 ? u.drawBuffers(Le) : e.get("WEBGL_draw_buffers").drawBuffersWEBGL(Le));
  }
  function ot(X) {
    return T !== X ? (u.useProgram(X), T = X, !0) : !1;
  }
  const Ie = {
    [Xu]: 32774,
    [ww]: 32778,
    [Tw]: 32779
  };
  if (n)
    Ie[sx] = 32775, Ie[ox] = 32776;
  else {
    const X = e.get("EXT_blend_minmax");
    X !== null && (Ie[sx] = X.MIN_EXT, Ie[ox] = X.MAX_EXT);
  }
  const Me = {
    [Cw]: 0,
    [Aw]: 1,
    [Rw]: 768,
    [qx]: 770,
    [zw]: 776,
    [Uw]: 774,
    [Dw]: 772,
    [Lw]: 769,
    [Xx]: 771,
    [Nw]: 775,
    [Pw]: 773
  };
  function Ne(X, be, Le, He, Tt, tn, mn, Gn) {
    if (X === Lo) {
      b === !0 && (dt(3042), b = !1);
      return;
    }
    if (b === !1 && (de(3042), b = !0), X !== Ew) {
      if (X !== L || Gn !== z) {
        if ((R !== Xu || V !== Xu) && (u.blendEquation(32774), R = Xu, V = Xu), Gn)
          switch (X) {
            case ec:
              u.blendFuncSeparate(1, 771, 1, 771);
              break;
            case ix:
              u.blendFunc(1, 1);
              break;
            case rx:
              u.blendFuncSeparate(0, 769, 0, 1);
              break;
            case ax:
              u.blendFuncSeparate(0, 768, 0, 770);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", X);
              break;
          }
        else
          switch (X) {
            case ec:
              u.blendFuncSeparate(770, 771, 1, 771);
              break;
            case ix:
              u.blendFunc(770, 1);
              break;
            case rx:
              u.blendFuncSeparate(0, 769, 0, 1);
              break;
            case ax:
              u.blendFunc(0, 768);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", X);
              break;
          }
        U = null, F = null, k = null, G = null, L = X, z = Gn;
      }
      return;
    }
    Tt = Tt || be, tn = tn || Le, mn = mn || He, (be !== R || Tt !== V) && (u.blendEquationSeparate(Ie[be], Ie[Tt]), R = be, V = Tt), (Le !== U || He !== F || tn !== k || mn !== G) && (u.blendFuncSeparate(Me[Le], Me[He], Me[tn], Me[mn]), U = Le, F = He, k = tn, G = mn), L = X, z = !1;
  }
  function nt(X, be) {
    X.side === fs ? dt(2884) : de(2884);
    let Le = X.side === Cr;
    be && (Le = !Le), Ze(Le), X.blending === ec && X.transparent === !1 ? Ne(Lo) : Ne(X.blending, X.blendEquation, X.blendSrc, X.blendDst, X.blendEquationAlpha, X.blendSrcAlpha, X.blendDstAlpha, X.premultipliedAlpha), p.setFunc(X.depthFunc), p.setTest(X.depthTest), p.setMask(X.depthWrite), f.setMask(X.colorWrite);
    const He = X.stencilWrite;
    h.setTest(He), He && (h.setMask(X.stencilWriteMask), h.setFunc(X.stencilFunc, X.stencilRef, X.stencilFuncMask), h.setOp(X.stencilFail, X.stencilZFail, X.stencilZPass)), mt(X.polygonOffset, X.polygonOffsetFactor, X.polygonOffsetUnits), X.alphaToCoverage === !0 ? de(32926) : dt(32926);
  }
  function Ze(X) {
    I !== X && (X ? u.frontFace(2304) : u.frontFace(2305), I = X);
  }
  function xt(X) {
    X !== Sw ? (de(2884), X !== Q && (X === nx ? u.cullFace(1029) : X === Mw ? u.cullFace(1028) : u.cullFace(1032))) : dt(2884), Q = X;
  }
  function Et(X) {
    X !== te && (Ee && u.lineWidth(X), te = X);
  }
  function mt(X, be, Le) {
    X ? (de(32823), ($ !== be || ie !== Le) && (u.polygonOffset(be, Le), $ = be, ie = Le)) : dt(32823);
  }
  function Nt(X) {
    X ? de(3089) : dt(3089);
  }
  function Wt(X) {
    X === void 0 && (X = 33984 + fe - 1), ae !== X && (u.activeTexture(X), ae = X);
  }
  function Y(X, be, Le) {
    Le === void 0 && (ae === null ? Le = 33984 + fe - 1 : Le = ae);
    let He = ne[Le];
    He === void 0 && (He = { type: void 0, texture: void 0 }, ne[Le] = He), (He.type !== X || He.texture !== be) && (ae !== Le && (u.activeTexture(Le), ae = Le), u.bindTexture(X, be || Be[X]), He.type = X, He.texture = be);
  }
  function H() {
    const X = ne[ae];
    X !== void 0 && X.type !== void 0 && (u.bindTexture(X.type, null), X.type = void 0, X.texture = void 0);
  }
  function xe() {
    try {
      u.compressedTexImage2D.apply(u, arguments);
    } catch (X) {
      console.error("THREE.WebGLState:", X);
    }
  }
  function Ve() {
    try {
      u.compressedTexImage3D.apply(u, arguments);
    } catch (X) {
      console.error("THREE.WebGLState:", X);
    }
  }
  function ke() {
    try {
      u.texSubImage2D.apply(u, arguments);
    } catch (X) {
      console.error("THREE.WebGLState:", X);
    }
  }
  function Qe() {
    try {
      u.texSubImage3D.apply(u, arguments);
    } catch (X) {
      console.error("THREE.WebGLState:", X);
    }
  }
  function Lt() {
    try {
      u.compressedTexSubImage2D.apply(u, arguments);
    } catch (X) {
      console.error("THREE.WebGLState:", X);
    }
  }
  function ht() {
    try {
      u.compressedTexSubImage3D.apply(u, arguments);
    } catch (X) {
      console.error("THREE.WebGLState:", X);
    }
  }
  function Ae() {
    try {
      u.texStorage2D.apply(u, arguments);
    } catch (X) {
      console.error("THREE.WebGLState:", X);
    }
  }
  function se() {
    try {
      u.texStorage3D.apply(u, arguments);
    } catch (X) {
      console.error("THREE.WebGLState:", X);
    }
  }
  function me() {
    try {
      u.texImage2D.apply(u, arguments);
    } catch (X) {
      console.error("THREE.WebGLState:", X);
    }
  }
  function De() {
    try {
      u.texImage3D.apply(u, arguments);
    } catch (X) {
      console.error("THREE.WebGLState:", X);
    }
  }
  function Fe(X) {
    pe.equals(X) === !1 && (u.scissor(X.x, X.y, X.z, X.w), pe.copy(X));
  }
  function Pe(X) {
    ye.equals(X) === !1 && (u.viewport(X.x, X.y, X.z, X.w), ye.copy(X));
  }
  function wt(X, be) {
    let Le = _.get(be);
    Le === void 0 && (Le = /* @__PURE__ */ new WeakMap(), _.set(be, Le));
    let He = Le.get(X);
    He === void 0 && (He = u.getUniformBlockIndex(be, X.name), Le.set(X, He));
  }
  function St(X, be) {
    const He = _.get(be).get(X);
    g.get(be) !== He && (u.uniformBlockBinding(be, He, X.__bindingPointIndex), g.set(be, He));
  }
  function rt() {
    u.disable(3042), u.disable(2884), u.disable(2929), u.disable(32823), u.disable(3089), u.disable(2960), u.disable(32926), u.blendEquation(32774), u.blendFunc(1, 0), u.blendFuncSeparate(1, 0, 1, 0), u.colorMask(!0, !0, !0, !0), u.clearColor(0, 0, 0, 0), u.depthMask(!0), u.depthFunc(513), u.clearDepth(1), u.stencilMask(4294967295), u.stencilFunc(519, 0, 4294967295), u.stencilOp(7680, 7680, 7680), u.clearStencil(0), u.cullFace(1029), u.frontFace(2305), u.polygonOffset(0, 0), u.activeTexture(33984), u.bindFramebuffer(36160, null), n === !0 && (u.bindFramebuffer(36009, null), u.bindFramebuffer(36008, null)), u.useProgram(null), u.lineWidth(1), u.scissor(0, 0, u.canvas.width, u.canvas.height), u.viewport(0, 0, u.canvas.width, u.canvas.height), x = {}, ae = null, ne = {}, M = {}, E = /* @__PURE__ */ new WeakMap(), A = [], T = null, b = !1, L = null, R = null, U = null, F = null, V = null, k = null, G = null, z = !1, I = null, Q = null, te = null, $ = null, ie = null, pe.set(0, 0, u.canvas.width, u.canvas.height), ye.set(0, 0, u.canvas.width, u.canvas.height), f.reset(), p.reset(), h.reset();
  }
  return {
    buffers: {
      color: f,
      depth: p,
      stencil: h
    },
    enable: de,
    disable: dt,
    bindFramebuffer: _t,
    drawBuffers: qe,
    useProgram: ot,
    setBlending: Ne,
    setMaterial: nt,
    setFlipSided: Ze,
    setCullFace: xt,
    setLineWidth: Et,
    setPolygonOffset: mt,
    setScissorTest: Nt,
    activeTexture: Wt,
    bindTexture: Y,
    unbindTexture: H,
    compressedTexImage2D: xe,
    compressedTexImage3D: Ve,
    texImage2D: me,
    texImage3D: De,
    updateUBOMapping: wt,
    uniformBlockBinding: St,
    texStorage2D: Ae,
    texStorage3D: se,
    texSubImage2D: ke,
    texSubImage3D: Qe,
    compressedTexSubImage2D: Lt,
    compressedTexSubImage3D: ht,
    scissor: Fe,
    viewport: Pe,
    reset: rt
  };
}
function Tz(u, e, t, n, a, s, c) {
  const f = a.isWebGL2, p = a.maxTextures, h = a.maxCubemapSize, g = a.maxTextureSize, _ = a.maxSamples, x = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : null, M = typeof navigator > "u" ? !1 : /OculusBrowser/g.test(navigator.userAgent), E = /* @__PURE__ */ new WeakMap();
  let A;
  const T = /* @__PURE__ */ new WeakMap();
  let b = !1;
  try {
    b = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch {
  }
  function L(Y, H) {
    return b ? (
      // eslint-disable-next-line compat/compat
      new OffscreenCanvas(Y, H)
    ) : hp("canvas");
  }
  function R(Y, H, xe, Ve) {
    let ke = 1;
    if ((Y.width > Ve || Y.height > Ve) && (ke = Ve / Math.max(Y.width, Y.height)), ke < 1 || H === !0)
      if (typeof HTMLImageElement < "u" && Y instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && Y instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && Y instanceof ImageBitmap) {
        const Qe = H ? yT : Math.floor, Lt = Qe(ke * Y.width), ht = Qe(ke * Y.height);
        A === void 0 && (A = L(Lt, ht));
        const Ae = xe ? L(Lt, ht) : A;
        return Ae.width = Lt, Ae.height = ht, Ae.getContext("2d").drawImage(Y, 0, 0, Lt, ht), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + Y.width + "x" + Y.height + ") to (" + Lt + "x" + ht + ")."), Ae;
      } else
        return "data" in Y && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + Y.width + "x" + Y.height + ")."), Y;
    return Y;
  }
  function U(Y) {
    return Px(Y.width) && Px(Y.height);
  }
  function F(Y) {
    return f ? !1 : Y.wrapS !== mr || Y.wrapT !== mr || Y.minFilter !== bi && Y.minFilter !== ai;
  }
  function V(Y, H) {
    return Y.generateMipmaps && H && Y.minFilter !== bi && Y.minFilter !== ai;
  }
  function k(Y) {
    u.generateMipmap(Y);
  }
  function G(Y, H, xe, Ve, ke = !1) {
    if (f === !1)
      return H;
    if (Y !== null) {
      if (u[Y] !== void 0)
        return u[Y];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + Y + "'");
    }
    let Qe = H;
    return H === 6403 && (xe === 5126 && (Qe = 33326), xe === 5131 && (Qe = 33325), xe === 5121 && (Qe = 33321)), H === 33319 && (xe === 5126 && (Qe = 33328), xe === 5131 && (Qe = 33327), xe === 5121 && (Qe = 33323)), H === 6408 && (xe === 5126 && (Qe = 34836), xe === 5131 && (Qe = 34842), xe === 5121 && (Qe = Ve === Pn && ke === !1 ? 35907 : 32856), xe === 32819 && (Qe = 32854), xe === 32820 && (Qe = 32855)), (Qe === 33325 || Qe === 33326 || Qe === 33327 || Qe === 33328 || Qe === 34842 || Qe === 34836) && e.get("EXT_color_buffer_float"), Qe;
  }
  function z(Y, H, xe) {
    return V(Y, xe) === !0 || Y.isFramebufferTexture && Y.minFilter !== bi && Y.minFilter !== ai ? Math.log2(Math.max(H.width, H.height)) + 1 : Y.mipmaps !== void 0 && Y.mipmaps.length > 0 ? Y.mipmaps.length : Y.isCompressedTexture && Array.isArray(Y.image) ? H.mipmaps.length : 1;
  }
  function I(Y) {
    return Y === bi || Y === Cg || Y === $h ? 9728 : 9729;
  }
  function Q(Y) {
    const H = Y.target;
    H.removeEventListener("dispose", Q), $(H), H.isVideoTexture && E.delete(H);
  }
  function te(Y) {
    const H = Y.target;
    H.removeEventListener("dispose", te), fe(H);
  }
  function $(Y) {
    const H = n.get(Y);
    if (H.__webglInit === void 0)
      return;
    const xe = Y.source, Ve = T.get(xe);
    if (Ve) {
      const ke = Ve[H.__cacheKey];
      ke.usedTimes--, ke.usedTimes === 0 && ie(Y), Object.keys(Ve).length === 0 && T.delete(xe);
    }
    n.remove(Y);
  }
  function ie(Y) {
    const H = n.get(Y);
    u.deleteTexture(H.__webglTexture);
    const xe = Y.source, Ve = T.get(xe);
    delete Ve[H.__cacheKey], c.memory.textures--;
  }
  function fe(Y) {
    const H = Y.texture, xe = n.get(Y), Ve = n.get(H);
    if (Ve.__webglTexture !== void 0 && (u.deleteTexture(Ve.__webglTexture), c.memory.textures--), Y.depthTexture && Y.depthTexture.dispose(), Y.isWebGLCubeRenderTarget)
      for (let ke = 0; ke < 6; ke++)
        u.deleteFramebuffer(xe.__webglFramebuffer[ke]), xe.__webglDepthbuffer && u.deleteRenderbuffer(xe.__webglDepthbuffer[ke]);
    else {
      if (u.deleteFramebuffer(xe.__webglFramebuffer), xe.__webglDepthbuffer && u.deleteRenderbuffer(xe.__webglDepthbuffer), xe.__webglMultisampledFramebuffer && u.deleteFramebuffer(xe.__webglMultisampledFramebuffer), xe.__webglColorRenderbuffer)
        for (let ke = 0; ke < xe.__webglColorRenderbuffer.length; ke++)
          xe.__webglColorRenderbuffer[ke] && u.deleteRenderbuffer(xe.__webglColorRenderbuffer[ke]);
      xe.__webglDepthRenderbuffer && u.deleteRenderbuffer(xe.__webglDepthRenderbuffer);
    }
    if (Y.isWebGLMultipleRenderTargets)
      for (let ke = 0, Qe = H.length; ke < Qe; ke++) {
        const Lt = n.get(H[ke]);
        Lt.__webglTexture && (u.deleteTexture(Lt.__webglTexture), c.memory.textures--), n.remove(H[ke]);
      }
    n.remove(H), n.remove(Y);
  }
  let Ee = 0;
  function Te() {
    Ee = 0;
  }
  function W() {
    const Y = Ee;
    return Y >= p && console.warn("THREE.WebGLTextures: Trying to use " + Y + " texture units while this GPU supports only " + p), Ee += 1, Y;
  }
  function ae(Y) {
    const H = [];
    return H.push(Y.wrapS), H.push(Y.wrapT), H.push(Y.wrapR || 0), H.push(Y.magFilter), H.push(Y.minFilter), H.push(Y.anisotropy), H.push(Y.internalFormat), H.push(Y.format), H.push(Y.type), H.push(Y.generateMipmaps), H.push(Y.premultiplyAlpha), H.push(Y.flipY), H.push(Y.unpackAlignment), H.push(Y.encoding), H.join();
  }
  function ne(Y, H) {
    const xe = n.get(Y);
    if (Y.isVideoTexture && Nt(Y), Y.isRenderTargetTexture === !1 && Y.version > 0 && xe.__version !== Y.version) {
      const Ve = Y.image;
      if (Ve === null)
        console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
      else if (Ve.complete === !1)
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      else {
        dt(xe, Y, H);
        return;
      }
    }
    t.bindTexture(3553, xe.__webglTexture, 33984 + H);
  }
  function Se(Y, H) {
    const xe = n.get(Y);
    if (Y.version > 0 && xe.__version !== Y.version) {
      dt(xe, Y, H);
      return;
    }
    t.bindTexture(35866, xe.__webglTexture, 33984 + H);
  }
  function ue(Y, H) {
    const xe = n.get(Y);
    if (Y.version > 0 && xe.__version !== Y.version) {
      dt(xe, Y, H);
      return;
    }
    t.bindTexture(32879, xe.__webglTexture, 33984 + H);
  }
  function pe(Y, H) {
    const xe = n.get(Y);
    if (Y.version > 0 && xe.__version !== Y.version) {
      _t(xe, Y, H);
      return;
    }
    t.bindTexture(34067, xe.__webglTexture, 33984 + H);
  }
  const ye = {
    [op]: 10497,
    [mr]: 33071,
    [lp]: 33648
  }, je = {
    [bi]: 9728,
    [Cg]: 9984,
    [$h]: 9986,
    [ai]: 9729,
    [Yx]: 9985,
    [Gl]: 9987
  };
  function Be(Y, H, xe) {
    if (xe ? (u.texParameteri(Y, 10242, ye[H.wrapS]), u.texParameteri(Y, 10243, ye[H.wrapT]), (Y === 32879 || Y === 35866) && u.texParameteri(Y, 32882, ye[H.wrapR]), u.texParameteri(Y, 10240, je[H.magFilter]), u.texParameteri(Y, 10241, je[H.minFilter])) : (u.texParameteri(Y, 10242, 33071), u.texParameteri(Y, 10243, 33071), (Y === 32879 || Y === 35866) && u.texParameteri(Y, 32882, 33071), (H.wrapS !== mr || H.wrapT !== mr) && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), u.texParameteri(Y, 10240, I(H.magFilter)), u.texParameteri(Y, 10241, I(H.minFilter)), H.minFilter !== bi && H.minFilter !== ai && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")), e.has("EXT_texture_filter_anisotropic") === !0) {
      const Ve = e.get("EXT_texture_filter_anisotropic");
      if (H.magFilter === bi || H.minFilter !== $h && H.minFilter !== Gl || H.type === Hs && e.has("OES_texture_float_linear") === !1 || f === !1 && H.type === ac && e.has("OES_texture_half_float_linear") === !1)
        return;
      (H.anisotropy > 1 || n.get(H).__currentAnisotropy) && (u.texParameterf(Y, Ve.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(H.anisotropy, a.getMaxAnisotropy())), n.get(H).__currentAnisotropy = H.anisotropy);
    }
  }
  function de(Y, H) {
    let xe = !1;
    Y.__webglInit === void 0 && (Y.__webglInit = !0, H.addEventListener("dispose", Q));
    const Ve = H.source;
    let ke = T.get(Ve);
    ke === void 0 && (ke = {}, T.set(Ve, ke));
    const Qe = ae(H);
    if (Qe !== Y.__cacheKey) {
      ke[Qe] === void 0 && (ke[Qe] = {
        texture: u.createTexture(),
        usedTimes: 0
      }, c.memory.textures++, xe = !0), ke[Qe].usedTimes++;
      const Lt = ke[Y.__cacheKey];
      Lt !== void 0 && (ke[Y.__cacheKey].usedTimes--, Lt.usedTimes === 0 && ie(H)), Y.__cacheKey = Qe, Y.__webglTexture = ke[Qe].texture;
    }
    return xe;
  }
  function dt(Y, H, xe) {
    let Ve = 3553;
    (H.isDataArrayTexture || H.isCompressedArrayTexture) && (Ve = 35866), H.isData3DTexture && (Ve = 32879);
    const ke = de(Y, H), Qe = H.source;
    t.bindTexture(Ve, Y.__webglTexture, 33984 + xe);
    const Lt = n.get(Qe);
    if (Qe.version !== Lt.__version || ke === !0) {
      t.activeTexture(33984 + xe), u.pixelStorei(37440, H.flipY), u.pixelStorei(37441, H.premultiplyAlpha), u.pixelStorei(3317, H.unpackAlignment), u.pixelStorei(37443, 0);
      const ht = F(H) && U(H.image) === !1;
      let Ae = R(H.image, ht, !1, g);
      Ae = Wt(H, Ae);
      const se = U(Ae) || f, me = s.convert(H.format, H.encoding);
      let De = s.convert(H.type), Fe = G(H.internalFormat, me, De, H.encoding, H.isVideoTexture);
      Be(Ve, H, se);
      let Pe;
      const wt = H.mipmaps, St = f && H.isVideoTexture !== !0, rt = Lt.__version === void 0 || ke === !0, X = z(H, Ae, se);
      if (H.isDepthTexture)
        Fe = 6402, f ? H.type === Hs ? Fe = 36012 : H.type === Fl ? Fe = 33190 : H.type === tc ? Fe = 35056 : Fe = 33189 : H.type === Hs && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."), H.format === Hl && Fe === 6402 && H.type !== Zx && H.type !== Fl && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), H.type = Fl, De = s.convert(H.type)), H.format === sc && Fe === 6402 && (Fe = 34041, H.type !== tc && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), H.type = tc, De = s.convert(H.type))), rt && (St ? t.texStorage2D(3553, 1, Fe, Ae.width, Ae.height) : t.texImage2D(3553, 0, Fe, Ae.width, Ae.height, 0, me, De, null));
      else if (H.isDataTexture)
        if (wt.length > 0 && se) {
          St && rt && t.texStorage2D(3553, X, Fe, wt[0].width, wt[0].height);
          for (let be = 0, Le = wt.length; be < Le; be++)
            Pe = wt[be], St ? t.texSubImage2D(3553, be, 0, 0, Pe.width, Pe.height, me, De, Pe.data) : t.texImage2D(3553, be, Fe, Pe.width, Pe.height, 0, me, De, Pe.data);
          H.generateMipmaps = !1;
        } else
          St ? (rt && t.texStorage2D(3553, X, Fe, Ae.width, Ae.height), t.texSubImage2D(3553, 0, 0, 0, Ae.width, Ae.height, me, De, Ae.data)) : t.texImage2D(3553, 0, Fe, Ae.width, Ae.height, 0, me, De, Ae.data);
      else if (H.isCompressedTexture)
        if (H.isCompressedArrayTexture) {
          St && rt && t.texStorage3D(35866, X, Fe, wt[0].width, wt[0].height, Ae.depth);
          for (let be = 0, Le = wt.length; be < Le; be++)
            Pe = wt[be], H.format !== Jr ? me !== null ? St ? t.compressedTexSubImage3D(35866, be, 0, 0, 0, Pe.width, Pe.height, Ae.depth, me, Pe.data, 0, 0) : t.compressedTexImage3D(35866, be, Fe, Pe.width, Pe.height, Ae.depth, 0, Pe.data, 0, 0) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : St ? t.texSubImage3D(35866, be, 0, 0, 0, Pe.width, Pe.height, Ae.depth, me, De, Pe.data) : t.texImage3D(35866, be, Fe, Pe.width, Pe.height, Ae.depth, 0, me, De, Pe.data);
        } else {
          St && rt && t.texStorage2D(3553, X, Fe, wt[0].width, wt[0].height);
          for (let be = 0, Le = wt.length; be < Le; be++)
            Pe = wt[be], H.format !== Jr ? me !== null ? St ? t.compressedTexSubImage2D(3553, be, 0, 0, Pe.width, Pe.height, me, Pe.data) : t.compressedTexImage2D(3553, be, Fe, Pe.width, Pe.height, 0, Pe.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : St ? t.texSubImage2D(3553, be, 0, 0, Pe.width, Pe.height, me, De, Pe.data) : t.texImage2D(3553, be, Fe, Pe.width, Pe.height, 0, me, De, Pe.data);
        }
      else if (H.isDataArrayTexture)
        St ? (rt && t.texStorage3D(35866, X, Fe, Ae.width, Ae.height, Ae.depth), t.texSubImage3D(35866, 0, 0, 0, 0, Ae.width, Ae.height, Ae.depth, me, De, Ae.data)) : t.texImage3D(35866, 0, Fe, Ae.width, Ae.height, Ae.depth, 0, me, De, Ae.data);
      else if (H.isData3DTexture)
        St ? (rt && t.texStorage3D(32879, X, Fe, Ae.width, Ae.height, Ae.depth), t.texSubImage3D(32879, 0, 0, 0, 0, Ae.width, Ae.height, Ae.depth, me, De, Ae.data)) : t.texImage3D(32879, 0, Fe, Ae.width, Ae.height, Ae.depth, 0, me, De, Ae.data);
      else if (H.isFramebufferTexture) {
        if (rt)
          if (St)
            t.texStorage2D(3553, X, Fe, Ae.width, Ae.height);
          else {
            let be = Ae.width, Le = Ae.height;
            for (let He = 0; He < X; He++)
              t.texImage2D(3553, He, Fe, be, Le, 0, me, De, null), be >>= 1, Le >>= 1;
          }
      } else if (wt.length > 0 && se) {
        St && rt && t.texStorage2D(3553, X, Fe, wt[0].width, wt[0].height);
        for (let be = 0, Le = wt.length; be < Le; be++)
          Pe = wt[be], St ? t.texSubImage2D(3553, be, 0, 0, me, De, Pe) : t.texImage2D(3553, be, Fe, me, De, Pe);
        H.generateMipmaps = !1;
      } else
        St ? (rt && t.texStorage2D(3553, X, Fe, Ae.width, Ae.height), t.texSubImage2D(3553, 0, 0, 0, me, De, Ae)) : t.texImage2D(3553, 0, Fe, me, De, Ae);
      V(H, se) && k(Ve), Lt.__version = Qe.version, H.onUpdate && H.onUpdate(H);
    }
    Y.__version = H.version;
  }
  function _t(Y, H, xe) {
    if (H.image.length !== 6)
      return;
    const Ve = de(Y, H), ke = H.source;
    t.bindTexture(34067, Y.__webglTexture, 33984 + xe);
    const Qe = n.get(ke);
    if (ke.version !== Qe.__version || Ve === !0) {
      t.activeTexture(33984 + xe), u.pixelStorei(37440, H.flipY), u.pixelStorei(37441, H.premultiplyAlpha), u.pixelStorei(3317, H.unpackAlignment), u.pixelStorei(37443, 0);
      const Lt = H.isCompressedTexture || H.image[0].isCompressedTexture, ht = H.image[0] && H.image[0].isDataTexture, Ae = [];
      for (let be = 0; be < 6; be++)
        !Lt && !ht ? Ae[be] = R(H.image[be], !1, !0, h) : Ae[be] = ht ? H.image[be].image : H.image[be], Ae[be] = Wt(H, Ae[be]);
      const se = Ae[0], me = U(se) || f, De = s.convert(H.format, H.encoding), Fe = s.convert(H.type), Pe = G(H.internalFormat, De, Fe, H.encoding), wt = f && H.isVideoTexture !== !0, St = Qe.__version === void 0 || Ve === !0;
      let rt = z(H, se, me);
      Be(34067, H, me);
      let X;
      if (Lt) {
        wt && St && t.texStorage2D(34067, rt, Pe, se.width, se.height);
        for (let be = 0; be < 6; be++) {
          X = Ae[be].mipmaps;
          for (let Le = 0; Le < X.length; Le++) {
            const He = X[Le];
            H.format !== Jr ? De !== null ? wt ? t.compressedTexSubImage2D(34069 + be, Le, 0, 0, He.width, He.height, De, He.data) : t.compressedTexImage2D(34069 + be, Le, Pe, He.width, He.height, 0, He.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : wt ? t.texSubImage2D(34069 + be, Le, 0, 0, He.width, He.height, De, Fe, He.data) : t.texImage2D(34069 + be, Le, Pe, He.width, He.height, 0, De, Fe, He.data);
          }
        }
      } else {
        X = H.mipmaps, wt && St && (X.length > 0 && rt++, t.texStorage2D(34067, rt, Pe, Ae[0].width, Ae[0].height));
        for (let be = 0; be < 6; be++)
          if (ht) {
            wt ? t.texSubImage2D(34069 + be, 0, 0, 0, Ae[be].width, Ae[be].height, De, Fe, Ae[be].data) : t.texImage2D(34069 + be, 0, Pe, Ae[be].width, Ae[be].height, 0, De, Fe, Ae[be].data);
            for (let Le = 0; Le < X.length; Le++) {
              const Tt = X[Le].image[be].image;
              wt ? t.texSubImage2D(34069 + be, Le + 1, 0, 0, Tt.width, Tt.height, De, Fe, Tt.data) : t.texImage2D(34069 + be, Le + 1, Pe, Tt.width, Tt.height, 0, De, Fe, Tt.data);
            }
          } else {
            wt ? t.texSubImage2D(34069 + be, 0, 0, 0, De, Fe, Ae[be]) : t.texImage2D(34069 + be, 0, Pe, De, Fe, Ae[be]);
            for (let Le = 0; Le < X.length; Le++) {
              const He = X[Le];
              wt ? t.texSubImage2D(34069 + be, Le + 1, 0, 0, De, Fe, He.image[be]) : t.texImage2D(34069 + be, Le + 1, Pe, De, Fe, He.image[be]);
            }
          }
      }
      V(H, me) && k(34067), Qe.__version = ke.version, H.onUpdate && H.onUpdate(H);
    }
    Y.__version = H.version;
  }
  function qe(Y, H, xe, Ve, ke) {
    const Qe = s.convert(xe.format, xe.encoding), Lt = s.convert(xe.type), ht = G(xe.internalFormat, Qe, Lt, xe.encoding);
    n.get(H).__hasExternalTextures || (ke === 32879 || ke === 35866 ? t.texImage3D(ke, 0, ht, H.width, H.height, H.depth, 0, Qe, Lt, null) : t.texImage2D(ke, 0, ht, H.width, H.height, 0, Qe, Lt, null)), t.bindFramebuffer(36160, Y), mt(H) ? x.framebufferTexture2DMultisampleEXT(36160, Ve, ke, n.get(xe).__webglTexture, 0, Et(H)) : (ke === 3553 || ke >= 34069 && ke <= 34074) && u.framebufferTexture2D(36160, Ve, ke, n.get(xe).__webglTexture, 0), t.bindFramebuffer(36160, null);
  }
  function ot(Y, H, xe) {
    if (u.bindRenderbuffer(36161, Y), H.depthBuffer && !H.stencilBuffer) {
      let Ve = 33189;
      if (xe || mt(H)) {
        const ke = H.depthTexture;
        ke && ke.isDepthTexture && (ke.type === Hs ? Ve = 36012 : ke.type === Fl && (Ve = 33190));
        const Qe = Et(H);
        mt(H) ? x.renderbufferStorageMultisampleEXT(36161, Qe, Ve, H.width, H.height) : u.renderbufferStorageMultisample(36161, Qe, Ve, H.width, H.height);
      } else
        u.renderbufferStorage(36161, Ve, H.width, H.height);
      u.framebufferRenderbuffer(36160, 36096, 36161, Y);
    } else if (H.depthBuffer && H.stencilBuffer) {
      const Ve = Et(H);
      xe && mt(H) === !1 ? u.renderbufferStorageMultisample(36161, Ve, 35056, H.width, H.height) : mt(H) ? x.renderbufferStorageMultisampleEXT(36161, Ve, 35056, H.width, H.height) : u.renderbufferStorage(36161, 34041, H.width, H.height), u.framebufferRenderbuffer(36160, 33306, 36161, Y);
    } else {
      const Ve = H.isWebGLMultipleRenderTargets === !0 ? H.texture : [H.texture];
      for (let ke = 0; ke < Ve.length; ke++) {
        const Qe = Ve[ke], Lt = s.convert(Qe.format, Qe.encoding), ht = s.convert(Qe.type), Ae = G(Qe.internalFormat, Lt, ht, Qe.encoding), se = Et(H);
        xe && mt(H) === !1 ? u.renderbufferStorageMultisample(36161, se, Ae, H.width, H.height) : mt(H) ? x.renderbufferStorageMultisampleEXT(36161, se, Ae, H.width, H.height) : u.renderbufferStorage(36161, Ae, H.width, H.height);
      }
    }
    u.bindRenderbuffer(36161, null);
  }
  function Ie(Y, H) {
    if (H && H.isWebGLCubeRenderTarget)
      throw new Error("Depth Texture with cube render targets is not supported");
    if (t.bindFramebuffer(36160, Y), !(H.depthTexture && H.depthTexture.isDepthTexture))
      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    (!n.get(H.depthTexture).__webglTexture || H.depthTexture.image.width !== H.width || H.depthTexture.image.height !== H.height) && (H.depthTexture.image.width = H.width, H.depthTexture.image.height = H.height, H.depthTexture.needsUpdate = !0), ne(H.depthTexture, 0);
    const Ve = n.get(H.depthTexture).__webglTexture, ke = Et(H);
    if (H.depthTexture.format === Hl)
      mt(H) ? x.framebufferTexture2DMultisampleEXT(36160, 36096, 3553, Ve, 0, ke) : u.framebufferTexture2D(36160, 36096, 3553, Ve, 0);
    else if (H.depthTexture.format === sc)
      mt(H) ? x.framebufferTexture2DMultisampleEXT(36160, 33306, 3553, Ve, 0, ke) : u.framebufferTexture2D(36160, 33306, 3553, Ve, 0);
    else
      throw new Error("Unknown depthTexture format");
  }
  function Me(Y) {
    const H = n.get(Y), xe = Y.isWebGLCubeRenderTarget === !0;
    if (Y.depthTexture && !H.__autoAllocateDepthBuffer) {
      if (xe)
        throw new Error("target.depthTexture not supported in Cube render targets");
      Ie(H.__webglFramebuffer, Y);
    } else if (xe) {
      H.__webglDepthbuffer = [];
      for (let Ve = 0; Ve < 6; Ve++)
        t.bindFramebuffer(36160, H.__webglFramebuffer[Ve]), H.__webglDepthbuffer[Ve] = u.createRenderbuffer(), ot(H.__webglDepthbuffer[Ve], Y, !1);
    } else
      t.bindFramebuffer(36160, H.__webglFramebuffer), H.__webglDepthbuffer = u.createRenderbuffer(), ot(H.__webglDepthbuffer, Y, !1);
    t.bindFramebuffer(36160, null);
  }
  function Ne(Y, H, xe) {
    const Ve = n.get(Y);
    H !== void 0 && qe(Ve.__webglFramebuffer, Y, Y.texture, 36064, 3553), xe !== void 0 && Me(Y);
  }
  function nt(Y) {
    const H = Y.texture, xe = n.get(Y), Ve = n.get(H);
    Y.addEventListener("dispose", te), Y.isWebGLMultipleRenderTargets !== !0 && (Ve.__webglTexture === void 0 && (Ve.__webglTexture = u.createTexture()), Ve.__version = H.version, c.memory.textures++);
    const ke = Y.isWebGLCubeRenderTarget === !0, Qe = Y.isWebGLMultipleRenderTargets === !0, Lt = U(Y) || f;
    if (ke) {
      xe.__webglFramebuffer = [];
      for (let ht = 0; ht < 6; ht++)
        xe.__webglFramebuffer[ht] = u.createFramebuffer();
    } else {
      if (xe.__webglFramebuffer = u.createFramebuffer(), Qe)
        if (a.drawBuffers) {
          const ht = Y.texture;
          for (let Ae = 0, se = ht.length; Ae < se; Ae++) {
            const me = n.get(ht[Ae]);
            me.__webglTexture === void 0 && (me.__webglTexture = u.createTexture(), c.memory.textures++);
          }
        } else
          console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
      if (f && Y.samples > 0 && mt(Y) === !1) {
        const ht = Qe ? H : [H];
        xe.__webglMultisampledFramebuffer = u.createFramebuffer(), xe.__webglColorRenderbuffer = [], t.bindFramebuffer(36160, xe.__webglMultisampledFramebuffer);
        for (let Ae = 0; Ae < ht.length; Ae++) {
          const se = ht[Ae];
          xe.__webglColorRenderbuffer[Ae] = u.createRenderbuffer(), u.bindRenderbuffer(36161, xe.__webglColorRenderbuffer[Ae]);
          const me = s.convert(se.format, se.encoding), De = s.convert(se.type), Fe = G(se.internalFormat, me, De, se.encoding, Y.isXRRenderTarget === !0), Pe = Et(Y);
          u.renderbufferStorageMultisample(36161, Pe, Fe, Y.width, Y.height), u.framebufferRenderbuffer(36160, 36064 + Ae, 36161, xe.__webglColorRenderbuffer[Ae]);
        }
        u.bindRenderbuffer(36161, null), Y.depthBuffer && (xe.__webglDepthRenderbuffer = u.createRenderbuffer(), ot(xe.__webglDepthRenderbuffer, Y, !0)), t.bindFramebuffer(36160, null);
      }
    }
    if (ke) {
      t.bindTexture(34067, Ve.__webglTexture), Be(34067, H, Lt);
      for (let ht = 0; ht < 6; ht++)
        qe(xe.__webglFramebuffer[ht], Y, H, 36064, 34069 + ht);
      V(H, Lt) && k(34067), t.unbindTexture();
    } else if (Qe) {
      const ht = Y.texture;
      for (let Ae = 0, se = ht.length; Ae < se; Ae++) {
        const me = ht[Ae], De = n.get(me);
        t.bindTexture(3553, De.__webglTexture), Be(3553, me, Lt), qe(xe.__webglFramebuffer, Y, me, 36064 + Ae, 3553), V(me, Lt) && k(3553);
      }
      t.unbindTexture();
    } else {
      let ht = 3553;
      (Y.isWebGL3DRenderTarget || Y.isWebGLArrayRenderTarget) && (f ? ht = Y.isWebGL3DRenderTarget ? 32879 : 35866 : console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")), t.bindTexture(ht, Ve.__webglTexture), Be(ht, H, Lt), qe(xe.__webglFramebuffer, Y, H, 36064, ht), V(H, Lt) && k(ht), t.unbindTexture();
    }
    Y.depthBuffer && Me(Y);
  }
  function Ze(Y) {
    const H = U(Y) || f, xe = Y.isWebGLMultipleRenderTargets === !0 ? Y.texture : [Y.texture];
    for (let Ve = 0, ke = xe.length; Ve < ke; Ve++) {
      const Qe = xe[Ve];
      if (V(Qe, H)) {
        const Lt = Y.isWebGLCubeRenderTarget ? 34067 : 3553, ht = n.get(Qe).__webglTexture;
        t.bindTexture(Lt, ht), k(Lt), t.unbindTexture();
      }
    }
  }
  function xt(Y) {
    if (f && Y.samples > 0 && mt(Y) === !1) {
      const H = Y.isWebGLMultipleRenderTargets ? Y.texture : [Y.texture], xe = Y.width, Ve = Y.height;
      let ke = 16384;
      const Qe = [], Lt = Y.stencilBuffer ? 33306 : 36096, ht = n.get(Y), Ae = Y.isWebGLMultipleRenderTargets === !0;
      if (Ae)
        for (let se = 0; se < H.length; se++)
          t.bindFramebuffer(36160, ht.__webglMultisampledFramebuffer), u.framebufferRenderbuffer(36160, 36064 + se, 36161, null), t.bindFramebuffer(36160, ht.__webglFramebuffer), u.framebufferTexture2D(36009, 36064 + se, 3553, null, 0);
      t.bindFramebuffer(36008, ht.__webglMultisampledFramebuffer), t.bindFramebuffer(36009, ht.__webglFramebuffer);
      for (let se = 0; se < H.length; se++) {
        Qe.push(36064 + se), Y.depthBuffer && Qe.push(Lt);
        const me = ht.__ignoreDepthValues !== void 0 ? ht.__ignoreDepthValues : !1;
        if (me === !1 && (Y.depthBuffer && (ke |= 256), Y.stencilBuffer && (ke |= 1024)), Ae && u.framebufferRenderbuffer(36008, 36064, 36161, ht.__webglColorRenderbuffer[se]), me === !0 && (u.invalidateFramebuffer(36008, [Lt]), u.invalidateFramebuffer(36009, [Lt])), Ae) {
          const De = n.get(H[se]).__webglTexture;
          u.framebufferTexture2D(36009, 36064, 3553, De, 0);
        }
        u.blitFramebuffer(0, 0, xe, Ve, 0, 0, xe, Ve, ke, 9728), M && u.invalidateFramebuffer(36008, Qe);
      }
      if (t.bindFramebuffer(36008, null), t.bindFramebuffer(36009, null), Ae)
        for (let se = 0; se < H.length; se++) {
          t.bindFramebuffer(36160, ht.__webglMultisampledFramebuffer), u.framebufferRenderbuffer(36160, 36064 + se, 36161, ht.__webglColorRenderbuffer[se]);
          const me = n.get(H[se]).__webglTexture;
          t.bindFramebuffer(36160, ht.__webglFramebuffer), u.framebufferTexture2D(36009, 36064 + se, 3553, me, 0);
        }
      t.bindFramebuffer(36009, ht.__webglMultisampledFramebuffer);
    }
  }
  function Et(Y) {
    return Math.min(_, Y.samples);
  }
  function mt(Y) {
    const H = n.get(Y);
    return f && Y.samples > 0 && e.has("WEBGL_multisampled_render_to_texture") === !0 && H.__useRenderToTexture !== !1;
  }
  function Nt(Y) {
    const H = c.render.frame;
    E.get(Y) !== H && (E.set(Y, H), Y.update());
  }
  function Wt(Y, H) {
    const xe = Y.encoding, Ve = Y.format, ke = Y.type;
    return Y.isCompressedTexture === !0 || Y.isVideoTexture === !0 || Y.format === Ag || xe !== Uo && (xe === Pn ? f === !1 ? e.has("EXT_sRGB") === !0 && Ve === Jr ? (Y.format = Ag, Y.minFilter = ai, Y.generateMipmaps = !1) : H = $x.sRGBToLinear(H) : (Ve !== Jr || ke !== Po) && console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture encoding:", xe)), H;
  }
  this.allocateTextureUnit = W, this.resetTextureUnits = Te, this.setTexture2D = ne, this.setTexture2DArray = Se, this.setTexture3D = ue, this.setTextureCube = pe, this.rebindTextures = Ne, this.setupRenderTarget = nt, this.updateRenderTargetMipmap = Ze, this.updateMultisampleRenderTarget = xt, this.setupDepthRenderbuffer = Me, this.setupFrameBufferTexture = qe, this.useMultisampledRTT = mt;
}
function LT(u, e, t) {
  const n = t.isWebGL2;
  function a(s, c = null) {
    let f;
    if (s === Po)
      return 5121;
    if (s === Kw)
      return 32819;
    if (s === $w)
      return 32820;
    if (s === Zw)
      return 5120;
    if (s === Jw)
      return 5122;
    if (s === Zx)
      return 5123;
    if (s === Qw)
      return 5124;
    if (s === Fl)
      return 5125;
    if (s === Hs)
      return 5126;
    if (s === ac)
      return n ? 5131 : (f = e.get("OES_texture_half_float"), f !== null ? f.HALF_FLOAT_OES : null);
    if (s === eT)
      return 6406;
    if (s === Jr)
      return 6408;
    if (s === tT)
      return 6409;
    if (s === nT)
      return 6410;
    if (s === Hl)
      return 6402;
    if (s === sc)
      return 34041;
    if (s === Ag)
      return f = e.get("EXT_sRGB"), f !== null ? f.SRGB_ALPHA_EXT : null;
    if (s === iT)
      return 6403;
    if (s === rT)
      return 36244;
    if (s === aT)
      return 33319;
    if (s === sT)
      return 33320;
    if (s === oT)
      return 36249;
    if (s === yg || s === _g || s === xg || s === Sg)
      if (c === Pn)
        if (f = e.get("WEBGL_compressed_texture_s3tc_srgb"), f !== null) {
          if (s === yg)
            return f.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (s === _g)
            return f.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (s === xg)
            return f.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (s === Sg)
            return f.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else
          return null;
      else if (f = e.get("WEBGL_compressed_texture_s3tc"), f !== null) {
        if (s === yg)
          return f.COMPRESSED_RGB_S3TC_DXT1_EXT;
        if (s === _g)
          return f.COMPRESSED_RGBA_S3TC_DXT1_EXT;
        if (s === xg)
          return f.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        if (s === Sg)
          return f.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      } else
        return null;
    if (s === lx || s === ux || s === cx || s === fx)
      if (f = e.get("WEBGL_compressed_texture_pvrtc"), f !== null) {
        if (s === lx)
          return f.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (s === ux)
          return f.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (s === cx)
          return f.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (s === fx)
          return f.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else
        return null;
    if (s === lT)
      return f = e.get("WEBGL_compressed_texture_etc1"), f !== null ? f.COMPRESSED_RGB_ETC1_WEBGL : null;
    if (s === dx || s === hx)
      if (f = e.get("WEBGL_compressed_texture_etc"), f !== null) {
        if (s === dx)
          return c === Pn ? f.COMPRESSED_SRGB8_ETC2 : f.COMPRESSED_RGB8_ETC2;
        if (s === hx)
          return c === Pn ? f.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : f.COMPRESSED_RGBA8_ETC2_EAC;
      } else
        return null;
    if (s === px || s === mx || s === vx || s === gx || s === yx || s === _x || s === xx || s === Sx || s === Mx || s === bx || s === Ex || s === wx || s === Tx || s === Cx)
      if (f = e.get("WEBGL_compressed_texture_astc"), f !== null) {
        if (s === px)
          return c === Pn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : f.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (s === mx)
          return c === Pn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : f.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (s === vx)
          return c === Pn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : f.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (s === gx)
          return c === Pn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : f.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (s === yx)
          return c === Pn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : f.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (s === _x)
          return c === Pn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : f.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (s === xx)
          return c === Pn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : f.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (s === Sx)
          return c === Pn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : f.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (s === Mx)
          return c === Pn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : f.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (s === bx)
          return c === Pn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : f.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (s === Ex)
          return c === Pn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : f.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (s === wx)
          return c === Pn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : f.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (s === Tx)
          return c === Pn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : f.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (s === Cx)
          return c === Pn ? f.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : f.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else
        return null;
    if (s === Mg)
      if (f = e.get("EXT_texture_compression_bptc"), f !== null) {
        if (s === Mg)
          return c === Pn ? f.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : f.COMPRESSED_RGBA_BPTC_UNORM_EXT;
      } else
        return null;
    if (s === uT || s === Ax || s === Rx || s === Lx)
      if (f = e.get("EXT_texture_compression_rgtc"), f !== null) {
        if (s === Mg)
          return f.COMPRESSED_RED_RGTC1_EXT;
        if (s === Ax)
          return f.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (s === Rx)
          return f.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (s === Lx)
          return f.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else
        return null;
    return s === tc ? n ? 34042 : (f = e.get("WEBGL_depth_texture"), f !== null ? f.UNSIGNED_INT_24_8_WEBGL : null) : u[s] !== void 0 ? u[s] : null;
  }
  return { convert: a };
}
class DT extends Xi {
  constructor(e = []) {
    super(), this.isArrayCamera = !0, this.cameras = e;
  }
}
class Qf extends Mn {
  constructor() {
    super(), this.isGroup = !0, this.type = "Group";
  }
}
const Cz = { type: "move" };
class P_ {
  constructor() {
    this._targetRay = null, this._grip = null, this._hand = null;
  }
  getHandSpace() {
    return this._hand === null && (this._hand = new Qf(), this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = { pinching: !1 }), this._hand;
  }
  getTargetRaySpace() {
    return this._targetRay === null && (this._targetRay = new Qf(), this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1, this._targetRay.hasLinearVelocity = !1, this._targetRay.linearVelocity = new j(), this._targetRay.hasAngularVelocity = !1, this._targetRay.angularVelocity = new j()), this._targetRay;
  }
  getGripSpace() {
    return this._grip === null && (this._grip = new Qf(), this._grip.matrixAutoUpdate = !1, this._grip.visible = !1, this._grip.hasLinearVelocity = !1, this._grip.linearVelocity = new j(), this._grip.hasAngularVelocity = !1, this._grip.angularVelocity = new j()), this._grip;
  }
  dispatchEvent(e) {
    return this._targetRay !== null && this._targetRay.dispatchEvent(e), this._grip !== null && this._grip.dispatchEvent(e), this._hand !== null && this._hand.dispatchEvent(e), this;
  }
  connect(e) {
    if (e && e.hand) {
      const t = this._hand;
      if (t)
        for (const n of e.hand.values())
          this._getHandJoint(t, n);
    }
    return this.dispatchEvent({ type: "connected", data: e }), this;
  }
  disconnect(e) {
    return this.dispatchEvent({ type: "disconnected", data: e }), this._targetRay !== null && (this._targetRay.visible = !1), this._grip !== null && (this._grip.visible = !1), this._hand !== null && (this._hand.visible = !1), this;
  }
  update(e, t, n) {
    let a = null, s = null, c = null;
    const f = this._targetRay, p = this._grip, h = this._hand;
    if (e && t.session.visibilityState !== "visible-blurred") {
      if (h && e.hand) {
        c = !0;
        for (const A of e.hand.values()) {
          const T = t.getJointPose(A, n), b = this._getHandJoint(h, A);
          T !== null && (b.matrix.fromArray(T.transform.matrix), b.matrix.decompose(b.position, b.rotation, b.scale), b.jointRadius = T.radius), b.visible = T !== null;
        }
        const g = h.joints["index-finger-tip"], _ = h.joints["thumb-tip"], x = g.position.distanceTo(_.position), M = 0.02, E = 5e-3;
        h.inputState.pinching && x > M + E ? (h.inputState.pinching = !1, this.dispatchEvent({
          type: "pinchend",
          handedness: e.handedness,
          target: this
        })) : !h.inputState.pinching && x <= M - E && (h.inputState.pinching = !0, this.dispatchEvent({
          type: "pinchstart",
          handedness: e.handedness,
          target: this
        }));
      } else
        p !== null && e.gripSpace && (s = t.getPose(e.gripSpace, n), s !== null && (p.matrix.fromArray(s.transform.matrix), p.matrix.decompose(p.position, p.rotation, p.scale), s.linearVelocity ? (p.hasLinearVelocity = !0, p.linearVelocity.copy(s.linearVelocity)) : p.hasLinearVelocity = !1, s.angularVelocity ? (p.hasAngularVelocity = !0, p.angularVelocity.copy(s.angularVelocity)) : p.hasAngularVelocity = !1));
      f !== null && (a = t.getPose(e.targetRaySpace, n), a === null && s !== null && (a = s), a !== null && (f.matrix.fromArray(a.transform.matrix), f.matrix.decompose(f.position, f.rotation, f.scale), a.linearVelocity ? (f.hasLinearVelocity = !0, f.linearVelocity.copy(a.linearVelocity)) : f.hasLinearVelocity = !1, a.angularVelocity ? (f.hasAngularVelocity = !0, f.angularVelocity.copy(a.angularVelocity)) : f.hasAngularVelocity = !1, this.dispatchEvent(Cz)));
    }
    return f !== null && (f.visible = a !== null), p !== null && (p.visible = s !== null), h !== null && (h.visible = c !== null), this;
  }
  // private method
  _getHandJoint(e, t) {
    if (e.joints[t.jointName] === void 0) {
      const n = new Qf();
      n.matrixAutoUpdate = !1, n.visible = !1, e.joints[t.jointName] = n, e.add(n);
    }
    return e.joints[t.jointName];
  }
}
class sS extends pi {
  constructor(e, t, n, a, s, c, f, p, h, g) {
    if (g = g !== void 0 ? g : Hl, g !== Hl && g !== sc)
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    n === void 0 && g === Hl && (n = Fl), n === void 0 && g === sc && (n = tc), super(null, a, s, c, f, p, g, n, h), this.isDepthTexture = !0, this.image = { width: e, height: t }, this.magFilter = f !== void 0 ? f : bi, this.minFilter = p !== void 0 ? p : bi, this.flipY = !1, this.generateMipmaps = !1;
  }
}
class Az extends zo {
  constructor(e, t) {
    super();
    const n = this;
    let a = null, s = 1, c = null, f = "local-floor", p = 1, h = null, g = null, _ = null, x = null, M = null, E = null;
    const A = t.getContextAttributes();
    let T = null, b = null;
    const L = [], R = [], U = /* @__PURE__ */ new Set(), F = /* @__PURE__ */ new Map(), V = new Xi();
    V.layers.enable(1), V.viewport = new Un();
    const k = new Xi();
    k.layers.enable(2), k.viewport = new Un();
    const G = [V, k], z = new DT();
    z.layers.enable(1), z.layers.enable(2);
    let I = null, Q = null;
    this.cameraAutoUpdate = !0, this.enabled = !1, this.isPresenting = !1, this.getController = function(pe) {
      let ye = L[pe];
      return ye === void 0 && (ye = new P_(), L[pe] = ye), ye.getTargetRaySpace();
    }, this.getControllerGrip = function(pe) {
      let ye = L[pe];
      return ye === void 0 && (ye = new P_(), L[pe] = ye), ye.getGripSpace();
    }, this.getHand = function(pe) {
      let ye = L[pe];
      return ye === void 0 && (ye = new P_(), L[pe] = ye), ye.getHandSpace();
    };
    function te(pe) {
      const ye = R.indexOf(pe.inputSource);
      if (ye === -1)
        return;
      const je = L[ye];
      je !== void 0 && je.dispatchEvent({ type: pe.type, data: pe.inputSource });
    }
    function $() {
      a.removeEventListener("select", te), a.removeEventListener("selectstart", te), a.removeEventListener("selectend", te), a.removeEventListener("squeeze", te), a.removeEventListener("squeezestart", te), a.removeEventListener("squeezeend", te), a.removeEventListener("end", $), a.removeEventListener("inputsourceschange", ie);
      for (let pe = 0; pe < L.length; pe++) {
        const ye = R[pe];
        ye !== null && (R[pe] = null, L[pe].disconnect(ye));
      }
      I = null, Q = null, e.setRenderTarget(T), M = null, x = null, _ = null, a = null, b = null, ue.stop(), n.isPresenting = !1, n.dispatchEvent({ type: "sessionend" });
    }
    this.setFramebufferScaleFactor = function(pe) {
      s = pe, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
    }, this.setReferenceSpaceType = function(pe) {
      f = pe, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
    }, this.getReferenceSpace = function() {
      return h || c;
    }, this.setReferenceSpace = function(pe) {
      h = pe;
    }, this.getBaseLayer = function() {
      return x !== null ? x : M;
    }, this.getBinding = function() {
      return _;
    }, this.getFrame = function() {
      return E;
    }, this.getSession = function() {
      return a;
    }, this.setSession = async function(pe) {
      if (a = pe, a !== null) {
        if (T = e.getRenderTarget(), a.addEventListener("select", te), a.addEventListener("selectstart", te), a.addEventListener("selectend", te), a.addEventListener("squeeze", te), a.addEventListener("squeezestart", te), a.addEventListener("squeezeend", te), a.addEventListener("end", $), a.addEventListener("inputsourceschange", ie), A.xrCompatible !== !0 && await t.makeXRCompatible(), a.renderState.layers === void 0 || e.capabilities.isWebGL2 === !1) {
          const ye = {
            antialias: a.renderState.layers === void 0 ? A.antialias : !0,
            alpha: A.alpha,
            depth: A.depth,
            stencil: A.stencil,
            framebufferScaleFactor: s
          };
          M = new XRWebGLLayer(a, t, ye), a.updateRenderState({ baseLayer: M }), b = new Ga(
            M.framebufferWidth,
            M.framebufferHeight,
            {
              format: Jr,
              type: Po,
              encoding: e.outputEncoding,
              stencilBuffer: A.stencil
            }
          );
        } else {
          let ye = null, je = null, Be = null;
          A.depth && (Be = A.stencil ? 35056 : 33190, ye = A.stencil ? sc : Hl, je = A.stencil ? tc : Fl);
          const de = {
            colorFormat: 32856,
            depthFormat: Be,
            scaleFactor: s
          };
          _ = new XRWebGLBinding(a, t), x = _.createProjectionLayer(de), a.updateRenderState({ layers: [x] }), b = new Ga(
            x.textureWidth,
            x.textureHeight,
            {
              format: Jr,
              type: Po,
              depthTexture: new sS(x.textureWidth, x.textureHeight, je, void 0, void 0, void 0, void 0, void 0, void 0, ye),
              stencilBuffer: A.stencil,
              encoding: e.outputEncoding,
              samples: A.antialias ? 4 : 0
            }
          );
          const dt = e.properties.get(b);
          dt.__ignoreDepthValues = x.ignoreDepthValues;
        }
        b.isXRRenderTarget = !0, this.setFoveation(p), h = null, c = await a.requestReferenceSpace(f), ue.setContext(a), ue.start(), n.isPresenting = !0, n.dispatchEvent({ type: "sessionstart" });
      }
    };
    function ie(pe) {
      for (let ye = 0; ye < pe.removed.length; ye++) {
        const je = pe.removed[ye], Be = R.indexOf(je);
        Be >= 0 && (R[Be] = null, L[Be].disconnect(je));
      }
      for (let ye = 0; ye < pe.added.length; ye++) {
        const je = pe.added[ye];
        let Be = R.indexOf(je);
        if (Be === -1) {
          for (let dt = 0; dt < L.length; dt++)
            if (dt >= R.length) {
              R.push(je), Be = dt;
              break;
            } else if (R[dt] === null) {
              R[dt] = je, Be = dt;
              break;
            }
          if (Be === -1)
            break;
        }
        const de = L[Be];
        de && de.connect(je);
      }
    }
    const fe = new j(), Ee = new j();
    function Te(pe, ye, je) {
      fe.setFromMatrixPosition(ye.matrixWorld), Ee.setFromMatrixPosition(je.matrixWorld);
      const Be = fe.distanceTo(Ee), de = ye.projectionMatrix.elements, dt = je.projectionMatrix.elements, _t = de[14] / (de[10] - 1), qe = de[14] / (de[10] + 1), ot = (de[9] + 1) / de[5], Ie = (de[9] - 1) / de[5], Me = (de[8] - 1) / de[0], Ne = (dt[8] + 1) / dt[0], nt = _t * Me, Ze = _t * Ne, xt = Be / (-Me + Ne), Et = xt * -Me;
      ye.matrixWorld.decompose(pe.position, pe.quaternion, pe.scale), pe.translateX(Et), pe.translateZ(xt), pe.matrixWorld.compose(pe.position, pe.quaternion, pe.scale), pe.matrixWorldInverse.copy(pe.matrixWorld).invert();
      const mt = _t + xt, Nt = qe + xt, Wt = nt - Et, Y = Ze + (Be - Et), H = ot * qe / Nt * mt, xe = Ie * qe / Nt * mt;
      pe.projectionMatrix.makePerspective(Wt, Y, H, xe, mt, Nt), pe.projectionMatrixInverse.copy(pe.projectionMatrix).invert();
    }
    function W(pe, ye) {
      ye === null ? pe.matrixWorld.copy(pe.matrix) : pe.matrixWorld.multiplyMatrices(ye.matrixWorld, pe.matrix), pe.matrixWorldInverse.copy(pe.matrixWorld).invert();
    }
    this.updateCamera = function(pe) {
      if (a === null)
        return;
      z.near = k.near = V.near = pe.near, z.far = k.far = V.far = pe.far, (I !== z.near || Q !== z.far) && (a.updateRenderState({
        depthNear: z.near,
        depthFar: z.far
      }), I = z.near, Q = z.far);
      const ye = pe.parent, je = z.cameras;
      W(z, ye);
      for (let Be = 0; Be < je.length; Be++)
        W(je[Be], ye);
      je.length === 2 ? Te(z, V, k) : z.projectionMatrix.copy(V.projectionMatrix), ae(pe, z, ye);
    };
    function ae(pe, ye, je) {
      je === null ? pe.matrix.copy(ye.matrixWorld) : (pe.matrix.copy(je.matrixWorld), pe.matrix.invert(), pe.matrix.multiply(ye.matrixWorld)), pe.matrix.decompose(pe.position, pe.quaternion, pe.scale), pe.updateMatrixWorld(!0);
      const Be = pe.children;
      for (let de = 0, dt = Be.length; de < dt; de++)
        Be[de].updateMatrixWorld(!0);
      pe.projectionMatrix.copy(ye.projectionMatrix), pe.projectionMatrixInverse.copy(ye.projectionMatrixInverse), pe.isPerspectiveCamera && (pe.fov = nd * 2 * Math.atan(1 / pe.projectionMatrix.elements[5]), pe.zoom = 1);
    }
    this.getCamera = function() {
      return z;
    }, this.getFoveation = function() {
      if (!(x === null && M === null))
        return p;
    }, this.setFoveation = function(pe) {
      p = pe, x !== null && (x.fixedFoveation = pe), M !== null && M.fixedFoveation !== void 0 && (M.fixedFoveation = pe);
    }, this.getPlanes = function() {
      return U;
    };
    let ne = null;
    function Se(pe, ye) {
      if (g = ye.getViewerPose(h || c), E = ye, g !== null) {
        const je = g.views;
        M !== null && (e.setRenderTargetFramebuffer(b, M.framebuffer), e.setRenderTarget(b));
        let Be = !1;
        je.length !== z.cameras.length && (z.cameras.length = 0, Be = !0);
        for (let de = 0; de < je.length; de++) {
          const dt = je[de];
          let _t = null;
          if (M !== null)
            _t = M.getViewport(dt);
          else {
            const ot = _.getViewSubImage(x, dt);
            _t = ot.viewport, de === 0 && (e.setRenderTargetTextures(
              b,
              ot.colorTexture,
              x.ignoreDepthValues ? void 0 : ot.depthStencilTexture
            ), e.setRenderTarget(b));
          }
          let qe = G[de];
          qe === void 0 && (qe = new Xi(), qe.layers.enable(de), qe.viewport = new Un(), G[de] = qe), qe.matrix.fromArray(dt.transform.matrix), qe.matrix.decompose(qe.position, qe.quaternion, qe.scale), qe.projectionMatrix.fromArray(dt.projectionMatrix), qe.projectionMatrixInverse.copy(qe.projectionMatrix).invert(), qe.viewport.set(_t.x, _t.y, _t.width, _t.height), de === 0 && (z.matrix.copy(qe.matrix), z.matrix.decompose(z.position, z.quaternion, z.scale)), Be === !0 && z.cameras.push(qe);
        }
      }
      for (let je = 0; je < L.length; je++) {
        const Be = R[je], de = L[je];
        Be !== null && de !== void 0 && de.update(Be, ye, h || c);
      }
      if (ne && ne(pe, ye), ye.detectedPlanes) {
        n.dispatchEvent({ type: "planesdetected", data: ye.detectedPlanes });
        let je = null;
        for (const Be of U)
          ye.detectedPlanes.has(Be) || (je === null && (je = []), je.push(Be));
        if (je !== null)
          for (const Be of je)
            U.delete(Be), F.delete(Be), n.dispatchEvent({ type: "planeremoved", data: Be });
        for (const Be of ye.detectedPlanes)
          if (!U.has(Be))
            U.add(Be), F.set(Be, ye.lastChangedTime), n.dispatchEvent({ type: "planeadded", data: Be });
          else {
            const de = F.get(Be);
            Be.lastChangedTime > de && (F.set(Be, Be.lastChangedTime), n.dispatchEvent({ type: "planechanged", data: Be }));
          }
      }
      E = null;
    }
    const ue = new wT();
    ue.setAnimationLoop(Se), this.setAnimationLoop = function(pe) {
      ne = pe;
    }, this.dispose = function() {
    };
  }
}
function Rz(u, e) {
  function t(T, b) {
    T.matrixAutoUpdate === !0 && T.updateMatrix(), b.value.copy(T.matrix);
  }
  function n(T, b) {
    b.color.getRGB(T.fogColor.value, ST(u)), b.isFog ? (T.fogNear.value = b.near, T.fogFar.value = b.far) : b.isFogExp2 && (T.fogDensity.value = b.density);
  }
  function a(T, b, L, R, U) {
    b.isMeshBasicMaterial || b.isMeshLambertMaterial ? s(T, b) : b.isMeshToonMaterial ? (s(T, b), _(T, b)) : b.isMeshPhongMaterial ? (s(T, b), g(T, b)) : b.isMeshStandardMaterial ? (s(T, b), x(T, b), b.isMeshPhysicalMaterial && M(T, b, U)) : b.isMeshMatcapMaterial ? (s(T, b), E(T, b)) : b.isMeshDepthMaterial ? s(T, b) : b.isMeshDistanceMaterial ? (s(T, b), A(T, b)) : b.isMeshNormalMaterial ? s(T, b) : b.isLineBasicMaterial ? (c(T, b), b.isLineDashedMaterial && f(T, b)) : b.isPointsMaterial ? p(T, b, L, R) : b.isSpriteMaterial ? h(T, b) : b.isShadowMaterial ? (T.color.value.copy(b.color), T.opacity.value = b.opacity) : b.isShaderMaterial && (b.uniformsNeedUpdate = !1);
  }
  function s(T, b) {
    T.opacity.value = b.opacity, b.color && T.diffuse.value.copy(b.color), b.emissive && T.emissive.value.copy(b.emissive).multiplyScalar(b.emissiveIntensity), b.map && (T.map.value = b.map, t(b.map, T.mapTransform)), b.alphaMap && (T.alphaMap.value = b.alphaMap, t(b.alphaMap, T.alphaMapTransform)), b.bumpMap && (T.bumpMap.value = b.bumpMap, t(b.bumpMap, T.bumpMapTransform), T.bumpScale.value = b.bumpScale, b.side === Cr && (T.bumpScale.value *= -1)), b.normalMap && (T.normalMap.value = b.normalMap, t(b.normalMap, T.normalMapTransform), T.normalScale.value.copy(b.normalScale), b.side === Cr && T.normalScale.value.negate()), b.displacementMap && (T.displacementMap.value = b.displacementMap, t(b.displacementMap, T.displacementMapTransform), T.displacementScale.value = b.displacementScale, T.displacementBias.value = b.displacementBias), b.emissiveMap && (T.emissiveMap.value = b.emissiveMap, t(b.emissiveMap, T.emissiveMapTransform)), b.specularMap && (T.specularMap.value = b.specularMap, t(b.specularMap, T.specularMapTransform)), b.alphaTest > 0 && (T.alphaTest.value = b.alphaTest);
    const L = e.get(b).envMap;
    if (L && (T.envMap.value = L, T.flipEnvMap.value = L.isCubeTexture && L.isRenderTargetTexture === !1 ? -1 : 1, T.reflectivity.value = b.reflectivity, T.ior.value = b.ior, T.refractionRatio.value = b.refractionRatio), b.lightMap) {
      T.lightMap.value = b.lightMap;
      const R = u.useLegacyLights === !0 ? Math.PI : 1;
      T.lightMapIntensity.value = b.lightMapIntensity * R, t(b.lightMap, T.lightMapTransform);
    }
    b.aoMap && (T.aoMap.value = b.aoMap, T.aoMapIntensity.value = b.aoMapIntensity, t(b.aoMap, T.aoMapTransform));
  }
  function c(T, b) {
    T.diffuse.value.copy(b.color), T.opacity.value = b.opacity, b.map && (T.map.value = b.map, t(b.map, T.mapTransform));
  }
  function f(T, b) {
    T.dashSize.value = b.dashSize, T.totalSize.value = b.dashSize + b.gapSize, T.scale.value = b.scale;
  }
  function p(T, b, L, R) {
    T.diffuse.value.copy(b.color), T.opacity.value = b.opacity, T.size.value = b.size * L, T.scale.value = R * 0.5, b.map && (T.map.value = b.map, t(b.map, T.uvTransform)), b.alphaMap && (T.alphaMap.value = b.alphaMap), b.alphaTest > 0 && (T.alphaTest.value = b.alphaTest);
  }
  function h(T, b) {
    T.diffuse.value.copy(b.color), T.opacity.value = b.opacity, T.rotation.value = b.rotation, b.map && (T.map.value = b.map, t(b.map, T.mapTransform)), b.alphaMap && (T.alphaMap.value = b.alphaMap), b.alphaTest > 0 && (T.alphaTest.value = b.alphaTest);
  }
  function g(T, b) {
    T.specular.value.copy(b.specular), T.shininess.value = Math.max(b.shininess, 1e-4);
  }
  function _(T, b) {
    b.gradientMap && (T.gradientMap.value = b.gradientMap);
  }
  function x(T, b) {
    T.metalness.value = b.metalness, b.metalnessMap && (T.metalnessMap.value = b.metalnessMap, t(b.metalnessMap, T.metalnessMapTransform)), T.roughness.value = b.roughness, b.roughnessMap && (T.roughnessMap.value = b.roughnessMap, t(b.roughnessMap, T.roughnessMapTransform)), e.get(b).envMap && (T.envMapIntensity.value = b.envMapIntensity);
  }
  function M(T, b, L) {
    T.ior.value = b.ior, b.sheen > 0 && (T.sheenColor.value.copy(b.sheenColor).multiplyScalar(b.sheen), T.sheenRoughness.value = b.sheenRoughness, b.sheenColorMap && (T.sheenColorMap.value = b.sheenColorMap, t(b.sheenColorMap, T.sheenColorMapTransform)), b.sheenRoughnessMap && (T.sheenRoughnessMap.value = b.sheenRoughnessMap, t(b.sheenRoughnessMap, T.sheenRoughnessMapTransform))), b.clearcoat > 0 && (T.clearcoat.value = b.clearcoat, T.clearcoatRoughness.value = b.clearcoatRoughness, b.clearcoatMap && (T.clearcoatMap.value = b.clearcoatMap, t(b.clearcoatMap, T.clearcoatMapTransform)), b.clearcoatRoughnessMap && (T.clearcoatRoughnessMap.value = b.clearcoatRoughnessMap, t(b.clearcoatRoughnessMap, T.clearcoatRoughnessMapTransform)), b.clearcoatNormalMap && (T.clearcoatNormalMap.value = b.clearcoatNormalMap, t(b.clearcoatNormalMap, T.clearcoatNormalMapTransform), T.clearcoatNormalScale.value.copy(b.clearcoatNormalScale), b.side === Cr && T.clearcoatNormalScale.value.negate())), b.iridescence > 0 && (T.iridescence.value = b.iridescence, T.iridescenceIOR.value = b.iridescenceIOR, T.iridescenceThicknessMinimum.value = b.iridescenceThicknessRange[0], T.iridescenceThicknessMaximum.value = b.iridescenceThicknessRange[1], b.iridescenceMap && (T.iridescenceMap.value = b.iridescenceMap, t(b.iridescenceMap, T.iridescenceMapTransform)), b.iridescenceThicknessMap && (T.iridescenceThicknessMap.value = b.iridescenceThicknessMap, t(b.iridescenceThicknessMap, T.iridescenceThicknessMapTransform))), b.transmission > 0 && (T.transmission.value = b.transmission, T.transmissionSamplerMap.value = L.texture, T.transmissionSamplerSize.value.set(L.width, L.height), b.transmissionMap && (T.transmissionMap.value = b.transmissionMap, t(b.transmissionMap, T.transmissionMapTransform)), T.thickness.value = b.thickness, b.thicknessMap && (T.thicknessMap.value = b.thicknessMap, t(b.thicknessMap, T.thicknessMapTransform)), T.attenuationDistance.value = b.attenuationDistance, T.attenuationColor.value.copy(b.attenuationColor)), T.specularIntensity.value = b.specularIntensity, T.specularColor.value.copy(b.specularColor), b.specularColorMap && (T.specularColorMap.value = b.specularColorMap, t(b.specularColorMap, T.specularColorMapTransform)), b.specularIntensityMap && (T.specularIntensityMap.value = b.specularIntensityMap, t(b.specularIntensityMap, T.specularIntensityMapTransform));
  }
  function E(T, b) {
    b.matcap && (T.matcap.value = b.matcap);
  }
  function A(T, b) {
    const L = e.get(b).light;
    T.referencePosition.value.setFromMatrixPosition(L.matrixWorld), T.nearDistance.value = L.shadow.camera.near, T.farDistance.value = L.shadow.camera.far;
  }
  return {
    refreshFogUniforms: n,
    refreshMaterialUniforms: a
  };
}
function Lz(u, e, t, n) {
  let a = {}, s = {}, c = [];
  const f = t.isWebGL2 ? u.getParameter(35375) : 0;
  function p(L, R) {
    const U = R.program;
    n.uniformBlockBinding(L, U);
  }
  function h(L, R) {
    let U = a[L.id];
    U === void 0 && (E(L), U = g(L), a[L.id] = U, L.addEventListener("dispose", T));
    const F = R.program;
    n.updateUBOMapping(L, F);
    const V = e.render.frame;
    s[L.id] !== V && (x(L), s[L.id] = V);
  }
  function g(L) {
    const R = _();
    L.__bindingPointIndex = R;
    const U = u.createBuffer(), F = L.__size, V = L.usage;
    return u.bindBuffer(35345, U), u.bufferData(35345, F, V), u.bindBuffer(35345, null), u.bindBufferBase(35345, R, U), U;
  }
  function _() {
    for (let L = 0; L < f; L++)
      if (c.indexOf(L) === -1)
        return c.push(L), L;
    return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0;
  }
  function x(L) {
    const R = a[L.id], U = L.uniforms, F = L.__cache;
    u.bindBuffer(35345, R);
    for (let V = 0, k = U.length; V < k; V++) {
      const G = U[V];
      if (M(G, V, F) === !0) {
        const z = G.__offset, I = Array.isArray(G.value) ? G.value : [G.value];
        let Q = 0;
        for (let te = 0; te < I.length; te++) {
          const $ = I[te], ie = A($);
          typeof $ == "number" ? (G.__data[0] = $, u.bufferSubData(35345, z + Q, G.__data)) : $.isMatrix3 ? (G.__data[0] = $.elements[0], G.__data[1] = $.elements[1], G.__data[2] = $.elements[2], G.__data[3] = $.elements[0], G.__data[4] = $.elements[3], G.__data[5] = $.elements[4], G.__data[6] = $.elements[5], G.__data[7] = $.elements[0], G.__data[8] = $.elements[6], G.__data[9] = $.elements[7], G.__data[10] = $.elements[8], G.__data[11] = $.elements[0]) : ($.toArray(G.__data, Q), Q += ie.storage / Float32Array.BYTES_PER_ELEMENT);
        }
        u.bufferSubData(35345, z, G.__data);
      }
    }
    u.bindBuffer(35345, null);
  }
  function M(L, R, U) {
    const F = L.value;
    if (U[R] === void 0) {
      if (typeof F == "number")
        U[R] = F;
      else {
        const V = Array.isArray(F) ? F : [F], k = [];
        for (let G = 0; G < V.length; G++)
          k.push(V[G].clone());
        U[R] = k;
      }
      return !0;
    } else if (typeof F == "number") {
      if (U[R] !== F)
        return U[R] = F, !0;
    } else {
      const V = Array.isArray(U[R]) ? U[R] : [U[R]], k = Array.isArray(F) ? F : [F];
      for (let G = 0; G < V.length; G++) {
        const z = V[G];
        if (z.equals(k[G]) === !1)
          return z.copy(k[G]), !0;
      }
    }
    return !1;
  }
  function E(L) {
    const R = L.uniforms;
    let U = 0;
    const F = 16;
    let V = 0;
    for (let k = 0, G = R.length; k < G; k++) {
      const z = R[k], I = {
        boundary: 0,
        // bytes
        storage: 0
        // bytes
      }, Q = Array.isArray(z.value) ? z.value : [z.value];
      for (let te = 0, $ = Q.length; te < $; te++) {
        const ie = Q[te], fe = A(ie);
        I.boundary += fe.boundary, I.storage += fe.storage;
      }
      if (z.__data = new Float32Array(I.storage / Float32Array.BYTES_PER_ELEMENT), z.__offset = U, k > 0) {
        V = U % F;
        const te = F - V;
        V !== 0 && te - I.boundary < 0 && (U += F - V, z.__offset = U);
      }
      U += I.storage;
    }
    return V = U % F, V > 0 && (U += F - V), L.__size = U, L.__cache = {}, this;
  }
  function A(L) {
    const R = {
      boundary: 0,
      // bytes
      storage: 0
      // bytes
    };
    return typeof L == "number" ? (R.boundary = 4, R.storage = 4) : L.isVector2 ? (R.boundary = 8, R.storage = 8) : L.isVector3 || L.isColor ? (R.boundary = 16, R.storage = 12) : L.isVector4 ? (R.boundary = 16, R.storage = 16) : L.isMatrix3 ? (R.boundary = 48, R.storage = 48) : L.isMatrix4 ? (R.boundary = 64, R.storage = 64) : L.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", L), R;
  }
  function T(L) {
    const R = L.target;
    R.removeEventListener("dispose", T);
    const U = c.indexOf(R.__bindingPointIndex);
    c.splice(U, 1), u.deleteBuffer(a[R.id]), delete a[R.id], delete s[R.id];
  }
  function b() {
    for (const L in a)
      u.deleteBuffer(a[L]);
    c = [], a = {}, s = {};
  }
  return {
    bind: p,
    update: h,
    dispose: b
  };
}
function Dz() {
  const u = hp("canvas");
  return u.style.display = "block", u;
}
class oS {
  constructor(e = {}) {
    const {
      canvas: t = Dz(),
      context: n = null,
      depth: a = !0,
      stencil: s = !0,
      alpha: c = !1,
      antialias: f = !1,
      premultipliedAlpha: p = !0,
      preserveDrawingBuffer: h = !1,
      powerPreference: g = "default",
      failIfMajorPerformanceCaveat: _ = !1
    } = e;
    this.isWebGLRenderer = !0;
    let x;
    n !== null ? x = n.getContextAttributes().alpha : x = c;
    let M = null, E = null;
    const A = [], T = [];
    this.domElement = t, this.debug = {
      /**
       * Enables error checking and reporting when shader programs are being compiled
       * @type {boolean}
       */
      checkShaderErrors: !0,
      /**
       * Callback for custom error reporting.
       * @type {?Function}
       */
      onShaderError: null
    }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this.outputEncoding = Uo, this.useLegacyLights = !0, this.toneMapping = ds, this.toneMappingExposure = 1;
    const b = this;
    let L = !1, R = 0, U = 0, F = null, V = -1, k = null;
    const G = new Un(), z = new Un();
    let I = null, Q = t.width, te = t.height, $ = 1, ie = null, fe = null;
    const Ee = new Un(0, 0, Q, te), Te = new Un(0, 0, Q, te);
    let W = !1;
    const ae = new Hg();
    let ne = !1, Se = !1, ue = null;
    const pe = new Qt(), ye = new j(), je = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: !0 };
    function Be() {
      return F === null ? $ : 1;
    }
    let de = n;
    function dt(q, O) {
      for (let ee = 0; ee < q.length; ee++) {
        const K = q[ee], ce = t.getContext(K, O);
        if (ce !== null)
          return ce;
      }
      return null;
    }
    try {
      const q = {
        alpha: !0,
        depth: a,
        stencil: s,
        antialias: f,
        premultipliedAlpha: p,
        preserveDrawingBuffer: h,
        powerPreference: g,
        failIfMajorPerformanceCaveat: _
      };
      if ("setAttribute" in t && t.setAttribute("data-engine", `three.js r${zg}`), t.addEventListener("webglcontextlost", Pe, !1), t.addEventListener("webglcontextrestored", wt, !1), t.addEventListener("webglcontextcreationerror", St, !1), de === null) {
        const O = ["webgl2", "webgl", "experimental-webgl"];
        if (b.isWebGL1Renderer === !0 && O.shift(), de = dt(O, q), de === null)
          throw dt(O) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
      }
      de.getShaderPrecisionFormat === void 0 && (de.getShaderPrecisionFormat = function() {
        return { rangeMin: 1, rangeMax: 1, precision: 1 };
      });
    } catch (q) {
      throw console.error("THREE.WebGLRenderer: " + q.message), q;
    }
    let _t, qe, ot, Ie, Me, Ne, nt, Ze, xt, Et, mt, Nt, Wt, Y, H, xe, Ve, ke, Qe, Lt, ht, Ae, se, me;
    function De() {
      _t = new jU(de), qe = new kU(de, _t, e), _t.init(qe), Ae = new LT(de, _t, qe), ot = new wz(de, _t, qe), Ie = new JU(), Me = new hz(), Ne = new Tz(de, _t, ot, Me, qe, Ae, Ie), nt = new GU(b), Ze = new XU(b), xt = new lD(de, qe), se = new BU(de, _t, xt, qe), Et = new YU(de, xt, Ie, se), mt = new eN(de, Et, xt, Ie), Qe = new $U(de, qe, Ne), xe = new VU(Me), Nt = new dz(b, nt, Ze, _t, qe, se, xe), Wt = new Rz(b, Me), Y = new mz(), H = new Sz(_t, qe), ke = new FU(b, nt, Ze, ot, mt, x, p), Ve = new Ez(b, mt, qe), me = new Lz(de, Ie, qe, ot), Lt = new HU(de, _t, Ie, qe), ht = new ZU(de, _t, Ie, qe), Ie.programs = Nt.programs, b.capabilities = qe, b.extensions = _t, b.properties = Me, b.renderLists = Y, b.shadowMap = Ve, b.state = ot, b.info = Ie;
    }
    De();
    const Fe = new Az(b, de);
    this.xr = Fe, this.getContext = function() {
      return de;
    }, this.getContextAttributes = function() {
      return de.getContextAttributes();
    }, this.forceContextLoss = function() {
      const q = _t.get("WEBGL_lose_context");
      q && q.loseContext();
    }, this.forceContextRestore = function() {
      const q = _t.get("WEBGL_lose_context");
      q && q.restoreContext();
    }, this.getPixelRatio = function() {
      return $;
    }, this.setPixelRatio = function(q) {
      q !== void 0 && ($ = q, this.setSize(Q, te, !1));
    }, this.getSize = function(q) {
      return q.set(Q, te);
    }, this.setSize = function(q, O, ee = !0) {
      if (Fe.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      Q = q, te = O, t.width = Math.floor(q * $), t.height = Math.floor(O * $), ee === !0 && (t.style.width = q + "px", t.style.height = O + "px"), this.setViewport(0, 0, q, O);
    }, this.getDrawingBufferSize = function(q) {
      return q.set(Q * $, te * $).floor();
    }, this.setDrawingBufferSize = function(q, O, ee) {
      Q = q, te = O, $ = ee, t.width = Math.floor(q * ee), t.height = Math.floor(O * ee), this.setViewport(0, 0, q, O);
    }, this.getCurrentViewport = function(q) {
      return q.copy(G);
    }, this.getViewport = function(q) {
      return q.copy(Ee);
    }, this.setViewport = function(q, O, ee, K) {
      q.isVector4 ? Ee.set(q.x, q.y, q.z, q.w) : Ee.set(q, O, ee, K), ot.viewport(G.copy(Ee).multiplyScalar($).floor());
    }, this.getScissor = function(q) {
      return q.copy(Te);
    }, this.setScissor = function(q, O, ee, K) {
      q.isVector4 ? Te.set(q.x, q.y, q.z, q.w) : Te.set(q, O, ee, K), ot.scissor(z.copy(Te).multiplyScalar($).floor());
    }, this.getScissorTest = function() {
      return W;
    }, this.setScissorTest = function(q) {
      ot.setScissorTest(W = q);
    }, this.setOpaqueSort = function(q) {
      ie = q;
    }, this.setTransparentSort = function(q) {
      fe = q;
    }, this.getClearColor = function(q) {
      return q.copy(ke.getClearColor());
    }, this.setClearColor = function() {
      ke.setClearColor.apply(ke, arguments);
    }, this.getClearAlpha = function() {
      return ke.getClearAlpha();
    }, this.setClearAlpha = function() {
      ke.setClearAlpha.apply(ke, arguments);
    }, this.clear = function(q = !0, O = !0, ee = !0) {
      let K = 0;
      q && (K |= 16384), O && (K |= 256), ee && (K |= 1024), de.clear(K);
    }, this.clearColor = function() {
      this.clear(!0, !1, !1);
    }, this.clearDepth = function() {
      this.clear(!1, !0, !1);
    }, this.clearStencil = function() {
      this.clear(!1, !1, !0);
    }, this.dispose = function() {
      t.removeEventListener("webglcontextlost", Pe, !1), t.removeEventListener("webglcontextrestored", wt, !1), t.removeEventListener("webglcontextcreationerror", St, !1), Y.dispose(), H.dispose(), Me.dispose(), nt.dispose(), Ze.dispose(), mt.dispose(), se.dispose(), me.dispose(), Nt.dispose(), Fe.dispose(), Fe.removeEventListener("sessionstart", Tt), Fe.removeEventListener("sessionend", tn), ue && (ue.dispose(), ue = null), mn.stop();
    };
    function Pe(q) {
      q.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), L = !0;
    }
    function wt() {
      console.log("THREE.WebGLRenderer: Context Restored."), L = !1;
      const q = Ie.autoReset, O = Ve.enabled, ee = Ve.autoUpdate, K = Ve.needsUpdate, ce = Ve.type;
      De(), Ie.autoReset = q, Ve.enabled = O, Ve.autoUpdate = ee, Ve.needsUpdate = K, Ve.type = ce;
    }
    function St(q) {
      console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", q.statusMessage);
    }
    function rt(q) {
      const O = q.target;
      O.removeEventListener("dispose", rt), X(O);
    }
    function X(q) {
      be(q), Me.remove(q);
    }
    function be(q) {
      const O = Me.get(q).programs;
      O !== void 0 && (O.forEach(function(ee) {
        Nt.releaseProgram(ee);
      }), q.isShaderMaterial && Nt.releaseShaderCache(q));
    }
    this.renderBufferDirect = function(q, O, ee, K, ce, Ke) {
      O === null && (O = je);
      const at = ce.isMesh && ce.matrixWorld.determinant() < 0, $e = Io(q, O, ee, K, ce);
      ot.setMaterial(K, at);
      let it = ee.index, bt = 1;
      K.wireframe === !0 && (it = Et.getWireframeAttribute(ee), bt = 2);
      const Mt = ee.drawRange, Ct = ee.attributes.position;
      let Ht = Mt.start * bt, Cn = (Mt.start + Mt.count) * bt;
      Ke !== null && (Ht = Math.max(Ht, Ke.start * bt), Cn = Math.min(Cn, (Ke.start + Ke.count) * bt)), it !== null ? (Ht = Math.max(Ht, 0), Cn = Math.min(Cn, it.count)) : Ct != null && (Ht = Math.max(Ht, 0), Cn = Math.min(Cn, Ct.count));
      const Yn = Cn - Ht;
      if (Yn < 0 || Yn === 1 / 0)
        return;
      se.setup(ce, K, $e, ee, it);
      let bn, Nn = Lt;
      if (it !== null && (bn = xt.get(it), Nn = ht, Nn.setIndex(bn)), ce.isMesh)
        K.wireframe === !0 ? (ot.setLineWidth(K.wireframeLinewidth * Be()), Nn.setMode(1)) : Nn.setMode(4);
      else if (ce.isLine) {
        let Xt = K.linewidth;
        Xt === void 0 && (Xt = 1), ot.setLineWidth(Xt * Be()), ce.isLineSegments ? Nn.setMode(1) : ce.isLineLoop ? Nn.setMode(2) : Nn.setMode(3);
      } else
        ce.isPoints ? Nn.setMode(0) : ce.isSprite && Nn.setMode(4);
      if (ce.isInstancedMesh)
        Nn.renderInstances(Ht, Yn, ce.count);
      else if (ee.isInstancedBufferGeometry) {
        const Xt = ee._maxInstanceCount !== void 0 ? ee._maxInstanceCount : 1 / 0, Xs = Math.min(ee.instanceCount, Xt);
        Nn.renderInstances(Ht, Yn, Xs);
      } else
        Nn.render(Ht, Yn);
    }, this.compile = function(q, O) {
      function ee(K, ce, Ke) {
        K.transparent === !0 && K.side === fs && K.forceSinglePass === !1 ? (K.side = Cr, K.needsUpdate = !0, Ei(K, ce, Ke), K.side = Do, K.needsUpdate = !0, Ei(K, ce, Ke), K.side = fs) : Ei(K, ce, Ke);
      }
      E = H.get(q), E.init(), T.push(E), q.traverseVisible(function(K) {
        K.isLight && K.layers.test(O.layers) && (E.pushLight(K), K.castShadow && E.pushShadow(K));
      }), E.setupLights(b.useLegacyLights), q.traverse(function(K) {
        const ce = K.material;
        if (ce)
          if (Array.isArray(ce))
            for (let Ke = 0; Ke < ce.length; Ke++) {
              const at = ce[Ke];
              ee(at, q, K);
            }
          else
            ee(ce, q, K);
      }), T.pop(), E = null;
    };
    let Le = null;
    function He(q) {
      Le && Le(q);
    }
    function Tt() {
      mn.stop();
    }
    function tn() {
      mn.start();
    }
    const mn = new wT();
    mn.setAnimationLoop(He), typeof self < "u" && mn.setContext(self), this.setAnimationLoop = function(q) {
      Le = q, Fe.setAnimationLoop(q), q === null ? mn.stop() : mn.start();
    }, Fe.addEventListener("sessionstart", Tt), Fe.addEventListener("sessionend", tn), this.render = function(q, O) {
      if (O !== void 0 && O.isCamera !== !0) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (L === !0)
        return;
      q.matrixWorldAutoUpdate === !0 && q.updateMatrixWorld(), O.parent === null && O.matrixWorldAutoUpdate === !0 && O.updateMatrixWorld(), Fe.enabled === !0 && Fe.isPresenting === !0 && (Fe.cameraAutoUpdate === !0 && Fe.updateCamera(O), O = Fe.getCamera()), q.isScene === !0 && q.onBeforeRender(b, q, O, F), E = H.get(q, T.length), E.init(), T.push(E), pe.multiplyMatrices(O.projectionMatrix, O.matrixWorldInverse), ae.setFromProjectionMatrix(pe), Se = this.localClippingEnabled, ne = xe.init(this.clippingPlanes, Se), M = Y.get(q, A.length), M.init(), A.push(M), Gn(q, O, 0, b.sortObjects), M.finish(), b.sortObjects === !0 && M.sort(ie, fe), ne === !0 && xe.beginShadows();
      const ee = E.state.shadowsArray;
      if (Ve.render(ee, q, O), ne === !0 && xe.endShadows(), this.info.autoReset === !0 && this.info.reset(), ke.render(M, q), E.setupLights(b.useLegacyLights), O.isArrayCamera) {
        const K = O.cameras;
        for (let ce = 0, Ke = K.length; ce < Ke; ce++) {
          const at = K[ce];
          Gt(M, q, at, at.viewport);
        }
      } else
        Gt(M, q, O);
      F !== null && (Ne.updateMultisampleRenderTarget(F), Ne.updateRenderTargetMipmap(F)), q.isScene === !0 && q.onAfterRender(b, q, O), se.resetDefaultState(), V = -1, k = null, T.pop(), T.length > 0 ? E = T[T.length - 1] : E = null, A.pop(), A.length > 0 ? M = A[A.length - 1] : M = null;
    };
    function Gn(q, O, ee, K) {
      if (q.visible === !1)
        return;
      if (q.layers.test(O.layers)) {
        if (q.isGroup)
          ee = q.renderOrder;
        else if (q.isLOD)
          q.autoUpdate === !0 && q.update(O);
        else if (q.isLight)
          E.pushLight(q), q.castShadow && E.pushShadow(q);
        else if (q.isSprite) {
          if (!q.frustumCulled || ae.intersectsSprite(q)) {
            K && ye.setFromMatrixPosition(q.matrixWorld).applyMatrix4(pe);
            const at = mt.update(q), $e = q.material;
            $e.visible && M.push(q, at, $e, ee, ye.z, null);
          }
        } else if ((q.isMesh || q.isLine || q.isPoints) && (q.isSkinnedMesh && q.skeleton.frame !== Ie.render.frame && (q.skeleton.update(), q.skeleton.frame = Ie.render.frame), !q.frustumCulled || ae.intersectsObject(q))) {
          K && ye.setFromMatrixPosition(q.matrixWorld).applyMatrix4(pe);
          const at = mt.update(q), $e = q.material;
          if (Array.isArray($e)) {
            const it = at.groups;
            for (let bt = 0, Mt = it.length; bt < Mt; bt++) {
              const Ct = it[bt], Ht = $e[Ct.materialIndex];
              Ht && Ht.visible && M.push(q, at, Ht, ee, ye.z, Ct);
            }
          } else
            $e.visible && M.push(q, at, $e, ee, ye.z, null);
        }
      }
      const Ke = q.children;
      for (let at = 0, $e = Ke.length; at < $e; at++)
        Gn(Ke[at], O, ee, K);
    }
    function Gt(q, O, ee, K) {
      const ce = q.opaque, Ke = q.transmissive, at = q.transparent;
      E.setupLightsView(ee), ne === !0 && xe.setGlobalState(b.clippingPlanes, ee), Ke.length > 0 && ln(ce, Ke, O, ee), K && ot.viewport(G.copy(K)), ce.length > 0 && kn(ce, O, ee), Ke.length > 0 && kn(Ke, O, ee), at.length > 0 && kn(at, O, ee), ot.buffers.depth.setTest(!0), ot.buffers.depth.setMask(!0), ot.buffers.color.setMask(!0), ot.setPolygonOffset(!1);
    }
    function ln(q, O, ee, K) {
      if (ue === null) {
        const $e = qe.isWebGL2;
        ue = new Ga(1024, 1024, {
          generateMipmaps: !0,
          type: _t.has("EXT_color_buffer_half_float") ? ac : Po,
          minFilter: Gl,
          samples: $e && f === !0 ? 4 : 0
        });
      }
      const ce = b.getRenderTarget();
      b.setRenderTarget(ue), b.clear();
      const Ke = b.toneMapping;
      b.toneMapping = ds, kn(q, ee, K), Ne.updateMultisampleRenderTarget(ue), Ne.updateRenderTargetMipmap(ue);
      let at = !1;
      for (let $e = 0, it = O.length; $e < it; $e++) {
        const bt = O[$e], Mt = bt.object, Ct = bt.geometry, Ht = bt.material, Cn = bt.group;
        if (Ht.side === fs && Mt.layers.test(K.layers)) {
          const Yn = Ht.side;
          Ht.side = Cr, Ht.needsUpdate = !0, oi(Mt, ee, K, Ct, Ht, Cn), Ht.side = Yn, Ht.needsUpdate = !0, at = !0;
        }
      }
      at === !0 && (Ne.updateMultisampleRenderTarget(ue), Ne.updateRenderTargetMipmap(ue)), b.setRenderTarget(ce), b.toneMapping = Ke;
    }
    function kn(q, O, ee) {
      const K = O.isScene === !0 ? O.overrideMaterial : null;
      for (let ce = 0, Ke = q.length; ce < Ke; ce++) {
        const at = q[ce], $e = at.object, it = at.geometry, bt = K === null ? at.material : K, Mt = at.group;
        $e.layers.test(ee.layers) && oi($e, O, ee, it, bt, Mt);
      }
    }
    function oi(q, O, ee, K, ce, Ke) {
      q.onBeforeRender(b, O, ee, K, ce, Ke), q.modelViewMatrix.multiplyMatrices(ee.matrixWorldInverse, q.matrixWorld), q.normalMatrix.getNormalMatrix(q.modelViewMatrix), ce.onBeforeRender(b, O, ee, K, q, Ke), ce.transparent === !0 && ce.side === fs && ce.forceSinglePass === !1 ? (ce.side = Cr, ce.needsUpdate = !0, b.renderBufferDirect(ee, O, K, ce, q, Ke), ce.side = Do, ce.needsUpdate = !0, b.renderBufferDirect(ee, O, K, ce, q, Ke), ce.side = fs) : b.renderBufferDirect(ee, O, K, ce, q, Ke), q.onAfterRender(b, O, ee, K, ce, Ke);
    }
    function Ei(q, O, ee) {
      O.isScene !== !0 && (O = je);
      const K = Me.get(q), ce = E.state.lights, Ke = E.state.shadowsArray, at = ce.state.version, $e = Nt.getParameters(q, ce.state, Ke, O, ee), it = Nt.getProgramCacheKey($e);
      let bt = K.programs;
      K.environment = q.isMeshStandardMaterial ? O.environment : null, K.fog = O.fog, K.envMap = (q.isMeshStandardMaterial ? Ze : nt).get(q.envMap || K.environment), bt === void 0 && (q.addEventListener("dispose", rt), bt = /* @__PURE__ */ new Map(), K.programs = bt);
      let Mt = bt.get(it);
      if (Mt !== void 0) {
        if (K.currentProgram === Mt && K.lightsStateVersion === at)
          return wi(q, $e), Mt;
      } else
        $e.uniforms = Nt.getUniforms(q), q.onBuild(ee, $e, b), q.onBeforeCompile($e, b), Mt = Nt.acquireProgram($e, it), bt.set(it, Mt), K.uniforms = $e.uniforms;
      const Ct = K.uniforms;
      (!q.isShaderMaterial && !q.isRawShaderMaterial || q.clipping === !0) && (Ct.clippingPlanes = xe.uniform), wi(q, $e), K.needsLights = ms(q), K.lightsStateVersion = at, K.needsLights && (Ct.ambientLightColor.value = ce.state.ambient, Ct.lightProbe.value = ce.state.probe, Ct.directionalLights.value = ce.state.directional, Ct.directionalLightShadows.value = ce.state.directionalShadow, Ct.spotLights.value = ce.state.spot, Ct.spotLightShadows.value = ce.state.spotShadow, Ct.rectAreaLights.value = ce.state.rectArea, Ct.ltc_1.value = ce.state.rectAreaLTC1, Ct.ltc_2.value = ce.state.rectAreaLTC2, Ct.pointLights.value = ce.state.point, Ct.pointLightShadows.value = ce.state.pointShadow, Ct.hemisphereLights.value = ce.state.hemi, Ct.directionalShadowMap.value = ce.state.directionalShadowMap, Ct.directionalShadowMatrix.value = ce.state.directionalShadowMatrix, Ct.spotShadowMap.value = ce.state.spotShadowMap, Ct.spotLightMatrix.value = ce.state.spotLightMatrix, Ct.spotLightMap.value = ce.state.spotLightMap, Ct.pointShadowMap.value = ce.state.pointShadowMap, Ct.pointShadowMatrix.value = ce.state.pointShadowMatrix);
      const Ht = Mt.getUniforms(), Cn = wg.seqWithValue(Ht.seq, Ct);
      return K.currentProgram = Mt, K.uniformsList = Cn, Mt;
    }
    function wi(q, O) {
      const ee = Me.get(q);
      ee.outputEncoding = O.outputEncoding, ee.instancing = O.instancing, ee.skinning = O.skinning, ee.morphTargets = O.morphTargets, ee.morphNormals = O.morphNormals, ee.morphColors = O.morphColors, ee.morphTargetsCount = O.morphTargetsCount, ee.numClippingPlanes = O.numClippingPlanes, ee.numIntersection = O.numClipIntersection, ee.vertexAlphas = O.vertexAlphas, ee.vertexTangents = O.vertexTangents, ee.toneMapping = O.toneMapping;
    }
    function Io(q, O, ee, K, ce) {
      O.isScene !== !0 && (O = je), Ne.resetTextureUnits();
      const Ke = O.fog, at = K.isMeshStandardMaterial ? O.environment : null, $e = F === null ? b.outputEncoding : F.isXRRenderTarget === !0 ? F.texture.encoding : Uo, it = (K.isMeshStandardMaterial ? Ze : nt).get(K.envMap || at), bt = K.vertexColors === !0 && !!ee.attributes.color && ee.attributes.color.itemSize === 4, Mt = !!K.normalMap && !!ee.attributes.tangent, Ct = !!ee.morphAttributes.position, Ht = !!ee.morphAttributes.normal, Cn = !!ee.morphAttributes.color, Yn = K.toneMapped ? b.toneMapping : ds, bn = ee.morphAttributes.position || ee.morphAttributes.normal || ee.morphAttributes.color, Nn = bn !== void 0 ? bn.length : 0, Xt = Me.get(K), Xs = E.state.lights;
      if (ne === !0 && (Se === !0 || q !== k)) {
        const Jt = q === k && K.id === V;
        xe.setState(K, q, Jt);
      }
      let li = !1;
      K.version === Xt.__version ? (Xt.needsLights && Xt.lightsStateVersion !== Xs.state.version || Xt.outputEncoding !== $e || ce.isInstancedMesh && Xt.instancing === !1 || !ce.isInstancedMesh && Xt.instancing === !0 || ce.isSkinnedMesh && Xt.skinning === !1 || !ce.isSkinnedMesh && Xt.skinning === !0 || Xt.envMap !== it || K.fog === !0 && Xt.fog !== Ke || Xt.numClippingPlanes !== void 0 && (Xt.numClippingPlanes !== xe.numPlanes || Xt.numIntersection !== xe.numIntersection) || Xt.vertexAlphas !== bt || Xt.vertexTangents !== Mt || Xt.morphTargets !== Ct || Xt.morphNormals !== Ht || Xt.morphColors !== Cn || Xt.toneMapping !== Yn || qe.isWebGL2 === !0 && Xt.morphTargetsCount !== Nn) && (li = !0) : (li = !0, Xt.__version = K.version);
      let Lr = Xt.currentProgram;
      li === !0 && (Lr = Ei(K, O, ce));
      let ya = !1, ki = !1, xn = !1;
      const qt = Lr.getUniforms(), Ri = Xt.uniforms;
      if (ot.useProgram(Lr.program) && (ya = !0, ki = !0, xn = !0), K.id !== V && (V = K.id, ki = !0), ya || k !== q) {
        if (qt.setValue(de, "projectionMatrix", q.projectionMatrix), qe.logarithmicDepthBuffer && qt.setValue(
          de,
          "logDepthBufFC",
          2 / (Math.log(q.far + 1) / Math.LN2)
        ), k !== q && (k = q, ki = !0, xn = !0), K.isShaderMaterial || K.isMeshPhongMaterial || K.isMeshToonMaterial || K.isMeshStandardMaterial || K.envMap) {
          const Jt = qt.map.cameraPosition;
          Jt !== void 0 && Jt.setValue(
            de,
            ye.setFromMatrixPosition(q.matrixWorld)
          );
        }
        (K.isMeshPhongMaterial || K.isMeshToonMaterial || K.isMeshLambertMaterial || K.isMeshBasicMaterial || K.isMeshStandardMaterial || K.isShaderMaterial) && qt.setValue(de, "isOrthographic", q.isOrthographicCamera === !0), (K.isMeshPhongMaterial || K.isMeshToonMaterial || K.isMeshLambertMaterial || K.isMeshBasicMaterial || K.isMeshStandardMaterial || K.isShaderMaterial || K.isShadowMaterial || ce.isSkinnedMesh) && qt.setValue(de, "viewMatrix", q.matrixWorldInverse);
      }
      if (ce.isSkinnedMesh) {
        qt.setOptional(de, ce, "bindMatrix"), qt.setOptional(de, ce, "bindMatrixInverse");
        const Jt = ce.skeleton;
        Jt && (qe.floatVertexTextures ? (Jt.boneTexture === null && Jt.computeBoneTexture(), qt.setValue(de, "boneTexture", Jt.boneTexture, Ne), qt.setValue(de, "boneTextureSize", Jt.boneTextureSize)) : console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."));
      }
      const ui = ee.morphAttributes;
      if ((ui.position !== void 0 || ui.normal !== void 0 || ui.color !== void 0 && qe.isWebGL2 === !0) && Qe.update(ce, ee, Lr), (ki || Xt.receiveShadow !== ce.receiveShadow) && (Xt.receiveShadow = ce.receiveShadow, qt.setValue(de, "receiveShadow", ce.receiveShadow)), K.isMeshGouraudMaterial && K.envMap !== null && (Ri.envMap.value = it, Ri.flipEnvMap.value = it.isCubeTexture && it.isRenderTargetTexture === !1 ? -1 : 1), ki && (qt.setValue(de, "toneMappingExposure", b.toneMappingExposure), Xt.needsLights && Rr(Ri, xn), Ke && K.fog === !0 && Wt.refreshFogUniforms(Ri, Ke), Wt.refreshMaterialUniforms(Ri, K, $, te, ue), wg.upload(de, Xt.uniformsList, Ri, Ne)), K.isShaderMaterial && K.uniformsNeedUpdate === !0 && (wg.upload(de, Xt.uniformsList, Ri, Ne), K.uniformsNeedUpdate = !1), K.isSpriteMaterial && qt.setValue(de, "center", ce.center), qt.setValue(de, "modelViewMatrix", ce.modelViewMatrix), qt.setValue(de, "normalMatrix", ce.normalMatrix), qt.setValue(de, "modelMatrix", ce.matrixWorld), K.isShaderMaterial || K.isRawShaderMaterial) {
        const Jt = K.uniformsGroups;
        for (let vr = 0, vs = Jt.length; vr < vs; vr++)
          if (qe.isWebGL2) {
            const Li = Jt[vr];
            me.update(Li, Lr), me.bind(Li, Lr);
          } else
            console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.");
      }
      return Lr;
    }
    function Rr(q, O) {
      q.ambientLightColor.needsUpdate = O, q.lightProbe.needsUpdate = O, q.directionalLights.needsUpdate = O, q.directionalLightShadows.needsUpdate = O, q.pointLights.needsUpdate = O, q.pointLightShadows.needsUpdate = O, q.spotLights.needsUpdate = O, q.spotLightShadows.needsUpdate = O, q.rectAreaLights.needsUpdate = O, q.hemisphereLights.needsUpdate = O;
    }
    function ms(q) {
      return q.isMeshLambertMaterial || q.isMeshToonMaterial || q.isMeshPhongMaterial || q.isMeshStandardMaterial || q.isShadowMaterial || q.isShaderMaterial && q.lights === !0;
    }
    this.getActiveCubeFace = function() {
      return R;
    }, this.getActiveMipmapLevel = function() {
      return U;
    }, this.getRenderTarget = function() {
      return F;
    }, this.setRenderTargetTextures = function(q, O, ee) {
      Me.get(q.texture).__webglTexture = O, Me.get(q.depthTexture).__webglTexture = ee;
      const K = Me.get(q);
      K.__hasExternalTextures = !0, K.__hasExternalTextures && (K.__autoAllocateDepthBuffer = ee === void 0, K.__autoAllocateDepthBuffer || _t.has("WEBGL_multisampled_render_to_texture") === !0 && (console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"), K.__useRenderToTexture = !1));
    }, this.setRenderTargetFramebuffer = function(q, O) {
      const ee = Me.get(q);
      ee.__webglFramebuffer = O, ee.__useDefaultFramebuffer = O === void 0;
    }, this.setRenderTarget = function(q, O = 0, ee = 0) {
      F = q, R = O, U = ee;
      let K = !0, ce = null, Ke = !1, at = !1;
      if (q) {
        const it = Me.get(q);
        it.__useDefaultFramebuffer !== void 0 ? (ot.bindFramebuffer(36160, null), K = !1) : it.__webglFramebuffer === void 0 ? Ne.setupRenderTarget(q) : it.__hasExternalTextures && Ne.rebindTextures(q, Me.get(q.texture).__webglTexture, Me.get(q.depthTexture).__webglTexture);
        const bt = q.texture;
        (bt.isData3DTexture || bt.isDataArrayTexture || bt.isCompressedArrayTexture) && (at = !0);
        const Mt = Me.get(q).__webglFramebuffer;
        q.isWebGLCubeRenderTarget ? (ce = Mt[O], Ke = !0) : qe.isWebGL2 && q.samples > 0 && Ne.useMultisampledRTT(q) === !1 ? ce = Me.get(q).__webglMultisampledFramebuffer : ce = Mt, G.copy(q.viewport), z.copy(q.scissor), I = q.scissorTest;
      } else
        G.copy(Ee).multiplyScalar($).floor(), z.copy(Te).multiplyScalar($).floor(), I = W;
      if (ot.bindFramebuffer(36160, ce) && qe.drawBuffers && K && ot.drawBuffers(q, ce), ot.viewport(G), ot.scissor(z), ot.setScissorTest(I), Ke) {
        const it = Me.get(q.texture);
        de.framebufferTexture2D(36160, 36064, 34069 + O, it.__webglTexture, ee);
      } else if (at) {
        const it = Me.get(q.texture), bt = O || 0;
        de.framebufferTextureLayer(36160, 36064, it.__webglTexture, ee || 0, bt);
      }
      V = -1;
    }, this.readRenderTargetPixels = function(q, O, ee, K, ce, Ke, at) {
      if (!(q && q.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let $e = Me.get(q).__webglFramebuffer;
      if (q.isWebGLCubeRenderTarget && at !== void 0 && ($e = $e[at]), $e) {
        ot.bindFramebuffer(36160, $e);
        try {
          const it = q.texture, bt = it.format, Mt = it.type;
          if (bt !== Jr && Ae.convert(bt) !== de.getParameter(35739)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          const Ct = Mt === ac && (_t.has("EXT_color_buffer_half_float") || qe.isWebGL2 && _t.has("EXT_color_buffer_float"));
          if (Mt !== Po && Ae.convert(Mt) !== de.getParameter(35738) && // Edge and Chrome Mac < 52 (#9513)
          !(Mt === Hs && (qe.isWebGL2 || _t.has("OES_texture_float") || _t.has("WEBGL_color_buffer_float"))) && // Chrome Mac >= 52 and Firefox
          !Ct) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          O >= 0 && O <= q.width - K && ee >= 0 && ee <= q.height - ce && de.readPixels(O, ee, K, ce, Ae.convert(bt), Ae.convert(Mt), Ke);
        } finally {
          const it = F !== null ? Me.get(F).__webglFramebuffer : null;
          ot.bindFramebuffer(36160, it);
        }
      }
    }, this.copyFramebufferToTexture = function(q, O, ee = 0) {
      const K = Math.pow(2, -ee), ce = Math.floor(O.image.width * K), Ke = Math.floor(O.image.height * K);
      Ne.setTexture2D(O, 0), de.copyTexSubImage2D(3553, ee, 0, 0, q.x, q.y, ce, Ke), ot.unbindTexture();
    }, this.copyTextureToTexture = function(q, O, ee, K = 0) {
      const ce = O.image.width, Ke = O.image.height, at = Ae.convert(ee.format), $e = Ae.convert(ee.type);
      Ne.setTexture2D(ee, 0), de.pixelStorei(37440, ee.flipY), de.pixelStorei(37441, ee.premultiplyAlpha), de.pixelStorei(3317, ee.unpackAlignment), O.isDataTexture ? de.texSubImage2D(3553, K, q.x, q.y, ce, Ke, at, $e, O.image.data) : O.isCompressedTexture ? de.compressedTexSubImage2D(3553, K, q.x, q.y, O.mipmaps[0].width, O.mipmaps[0].height, at, O.mipmaps[0].data) : de.texSubImage2D(3553, K, q.x, q.y, at, $e, O.image), K === 0 && ee.generateMipmaps && de.generateMipmap(3553), ot.unbindTexture();
    }, this.copyTextureToTexture3D = function(q, O, ee, K, ce = 0) {
      if (b.isWebGL1Renderer) {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
        return;
      }
      const Ke = q.max.x - q.min.x + 1, at = q.max.y - q.min.y + 1, $e = q.max.z - q.min.z + 1, it = Ae.convert(K.format), bt = Ae.convert(K.type);
      let Mt;
      if (K.isData3DTexture)
        Ne.setTexture3D(K, 0), Mt = 32879;
      else if (K.isDataArrayTexture)
        Ne.setTexture2DArray(K, 0), Mt = 35866;
      else {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
        return;
      }
      de.pixelStorei(37440, K.flipY), de.pixelStorei(37441, K.premultiplyAlpha), de.pixelStorei(3317, K.unpackAlignment);
      const Ct = de.getParameter(3314), Ht = de.getParameter(32878), Cn = de.getParameter(3316), Yn = de.getParameter(3315), bn = de.getParameter(32877), Nn = ee.isCompressedTexture ? ee.mipmaps[0] : ee.image;
      de.pixelStorei(3314, Nn.width), de.pixelStorei(32878, Nn.height), de.pixelStorei(3316, q.min.x), de.pixelStorei(3315, q.min.y), de.pixelStorei(32877, q.min.z), ee.isDataTexture || ee.isData3DTexture ? de.texSubImage3D(Mt, ce, O.x, O.y, O.z, Ke, at, $e, it, bt, Nn.data) : ee.isCompressedArrayTexture ? (console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."), de.compressedTexSubImage3D(Mt, ce, O.x, O.y, O.z, Ke, at, $e, it, Nn.data)) : de.texSubImage3D(Mt, ce, O.x, O.y, O.z, Ke, at, $e, it, bt, Nn), de.pixelStorei(3314, Ct), de.pixelStorei(32878, Ht), de.pixelStorei(3316, Cn), de.pixelStorei(3315, Yn), de.pixelStorei(32877, bn), ce === 0 && K.generateMipmaps && de.generateMipmap(Mt), ot.unbindTexture();
    }, this.initTexture = function(q) {
      q.isCubeTexture ? Ne.setTextureCube(q, 0) : q.isData3DTexture ? Ne.setTexture3D(q, 0) : q.isDataArrayTexture || q.isCompressedArrayTexture ? Ne.setTexture2DArray(q, 0) : Ne.setTexture2D(q, 0), ot.unbindTexture();
    }, this.resetState = function() {
      R = 0, U = 0, F = null, ot.reset(), se.reset();
    }, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  get physicallyCorrectLights() {
    return console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."), !this.useLegacyLights;
  }
  set physicallyCorrectLights(e) {
    console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."), this.useLegacyLights = !e;
  }
}
class PT extends oS {
}
PT.prototype.isWebGL1Renderer = !0;
class Vg {
  constructor(e, t = 25e-5) {
    this.isFogExp2 = !0, this.name = "", this.color = new yt(e), this.density = t;
  }
  clone() {
    return new Vg(this.color, this.density);
  }
  toJSON() {
    return {
      type: "FogExp2",
      color: this.color.getHex(),
      density: this.density
    };
  }
}
class Gg {
  constructor(e, t = 1, n = 1e3) {
    this.isFog = !0, this.name = "", this.color = new yt(e), this.near = t, this.far = n;
  }
  clone() {
    return new Gg(this.color, this.near, this.far);
  }
  toJSON() {
    return {
      type: "Fog",
      color: this.color.getHex(),
      near: this.near,
      far: this.far
    };
  }
}
class Rg extends Mn {
  constructor() {
    super(), this.isScene = !0, this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.backgroundBlurriness = 0, this.backgroundIntensity = 1, this.overrideMaterial = null, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  copy(e, t) {
    return super.copy(e, t), e.background !== null && (this.background = e.background.clone()), e.environment !== null && (this.environment = e.environment.clone()), e.fog !== null && (this.fog = e.fog.clone()), this.backgroundBlurriness = e.backgroundBlurriness, this.backgroundIntensity = e.backgroundIntensity, e.overrideMaterial !== null && (this.overrideMaterial = e.overrideMaterial.clone()), this.matrixAutoUpdate = e.matrixAutoUpdate, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return this.fog !== null && (t.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (t.object.backgroundBlurriness = this.backgroundBlurriness), this.backgroundIntensity !== 1 && (t.object.backgroundIntensity = this.backgroundIntensity), t;
  }
  get autoUpdate() {
    return console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."), this.matrixWorldAutoUpdate;
  }
  set autoUpdate(e) {
    console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."), this.matrixWorldAutoUpdate = e;
  }
}
class Wg {
  constructor(e, t) {
    this.isInterleavedBuffer = !0, this.array = e, this.stride = t, this.count = e !== void 0 ? e.length / t : 0, this.usage = dp, this.updateRange = { offset: 0, count: -1 }, this.version = 0, this.uuid = va();
  }
  onUploadCallback() {
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  copy(e) {
    return this.array = new e.array.constructor(e.array), this.count = e.count, this.stride = e.stride, this.usage = e.usage, this;
  }
  copyAt(e, t, n) {
    e *= this.stride, n *= t.stride;
    for (let a = 0, s = this.stride; a < s; a++)
      this.array[e + a] = t.array[n + a];
    return this;
  }
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  clone(e) {
    e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = va()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
    const t = new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]), n = new this.constructor(t, this.stride);
    return n.setUsage(this.usage), n;
  }
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  toJSON(e) {
    return e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = va()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer))), {
      uuid: this.uuid,
      buffer: this.array.buffer._uuid,
      type: this.array.constructor.name,
      stride: this.stride
    };
  }
}
const wr = /* @__PURE__ */ new j();
class oc {
  constructor(e, t, n, a = !1) {
    this.isInterleavedBufferAttribute = !0, this.name = "", this.data = e, this.itemSize = t, this.offset = n, this.normalized = a;
  }
  get count() {
    return this.data.count;
  }
  get array() {
    return this.data.array;
  }
  set needsUpdate(e) {
    this.data.needsUpdate = e;
  }
  applyMatrix4(e) {
    for (let t = 0, n = this.data.count; t < n; t++)
      wr.fromBufferAttribute(this, t), wr.applyMatrix4(e), this.setXYZ(t, wr.x, wr.y, wr.z);
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, n = this.count; t < n; t++)
      wr.fromBufferAttribute(this, t), wr.applyNormalMatrix(e), this.setXYZ(t, wr.x, wr.y, wr.z);
    return this;
  }
  transformDirection(e) {
    for (let t = 0, n = this.count; t < n; t++)
      wr.fromBufferAttribute(this, t), wr.transformDirection(e), this.setXYZ(t, wr.x, wr.y, wr.z);
    return this;
  }
  setX(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.data.array[e * this.data.stride + this.offset] = t, this;
  }
  setY(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.data.array[e * this.data.stride + this.offset + 1] = t, this;
  }
  setZ(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.data.array[e * this.data.stride + this.offset + 2] = t, this;
  }
  setW(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.data.array[e * this.data.stride + this.offset + 3] = t, this;
  }
  getX(e) {
    let t = this.data.array[e * this.data.stride + this.offset];
    return this.normalized && (t = ma(t, this.array)), t;
  }
  getY(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 1];
    return this.normalized && (t = ma(t, this.array)), t;
  }
  getZ(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 2];
    return this.normalized && (t = ma(t, this.array)), t;
  }
  getW(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 3];
    return this.normalized && (t = ma(t, this.array)), t;
  }
  setXY(e, t, n) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = rn(t, this.array), n = rn(n, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this;
  }
  setXYZ(e, t, n, a) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = rn(t, this.array), n = rn(n, this.array), a = rn(a, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = a, this;
  }
  setXYZW(e, t, n, a, s) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = rn(t, this.array), n = rn(n, this.array), a = rn(a, this.array), s = rn(s, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = a, this.data.array[e + 3] = s, this;
  }
  clone(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
      const t = [];
      for (let n = 0; n < this.count; n++) {
        const a = n * this.data.stride + this.offset;
        for (let s = 0; s < this.itemSize; s++)
          t.push(this.data.array[a + s]);
      }
      return new Hn(new this.array.constructor(t), this.itemSize, this.normalized);
    } else
      return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.clone(e)), new oc(e.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
  }
  toJSON(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
      const t = [];
      for (let n = 0; n < this.count; n++) {
        const a = n * this.data.stride + this.offset;
        for (let s = 0; s < this.itemSize; s++)
          t.push(this.data.array[a + s]);
      }
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: t,
        normalized: this.normalized
      };
    } else
      return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.toJSON(e)), {
        isInterleavedBufferAttribute: !0,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized
      };
  }
}
class lS extends nr {
  constructor(e) {
    super(), this.isSpriteMaterial = !0, this.type = "SpriteMaterial", this.color = new yt(16777215), this.map = null, this.alphaMap = null, this.rotation = 0, this.sizeAttenuation = !0, this.transparent = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.rotation = e.rotation, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
  }
}
let Hf;
const Hh = /* @__PURE__ */ new j(), kf = /* @__PURE__ */ new j(), Vf = /* @__PURE__ */ new j(), Gf = /* @__PURE__ */ new Ge(), kh = /* @__PURE__ */ new Ge(), UT = /* @__PURE__ */ new Qt(), Zv = /* @__PURE__ */ new j(), Vh = /* @__PURE__ */ new j(), Jv = /* @__PURE__ */ new j(), uE = /* @__PURE__ */ new Ge(), U_ = /* @__PURE__ */ new Ge(), cE = /* @__PURE__ */ new Ge();
class NT extends Mn {
  constructor(e) {
    if (super(), this.isSprite = !0, this.type = "Sprite", Hf === void 0) {
      Hf = new an();
      const t = new Float32Array([
        -0.5,
        -0.5,
        0,
        0,
        0,
        0.5,
        -0.5,
        0,
        1,
        0,
        0.5,
        0.5,
        0,
        1,
        1,
        -0.5,
        0.5,
        0,
        0,
        1
      ]), n = new Wg(t, 5);
      Hf.setIndex([0, 1, 2, 0, 2, 3]), Hf.setAttribute("position", new oc(n, 3, 0, !1)), Hf.setAttribute("uv", new oc(n, 2, 3, !1));
    }
    this.geometry = Hf, this.material = e !== void 0 ? e : new lS(), this.center = new Ge(0.5, 0.5);
  }
  raycast(e, t) {
    e.camera === null && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), kf.setFromMatrixScale(this.matrixWorld), UT.copy(e.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse, this.matrixWorld), Vf.setFromMatrixPosition(this.modelViewMatrix), e.camera.isPerspectiveCamera && this.material.sizeAttenuation === !1 && kf.multiplyScalar(-Vf.z);
    const n = this.material.rotation;
    let a, s;
    n !== 0 && (s = Math.cos(n), a = Math.sin(n));
    const c = this.center;
    Qv(Zv.set(-0.5, -0.5, 0), Vf, c, kf, a, s), Qv(Vh.set(0.5, -0.5, 0), Vf, c, kf, a, s), Qv(Jv.set(0.5, 0.5, 0), Vf, c, kf, a, s), uE.set(0, 0), U_.set(1, 0), cE.set(1, 1);
    let f = e.ray.intersectTriangle(Zv, Vh, Jv, !1, Hh);
    if (f === null && (Qv(Vh.set(-0.5, 0.5, 0), Vf, c, kf, a, s), U_.set(0, 1), f = e.ray.intersectTriangle(Zv, Jv, Vh, !1, Hh), f === null))
      return;
    const p = e.ray.origin.distanceTo(Hh);
    p < e.near || p > e.far || t.push({
      distance: p,
      point: Hh.clone(),
      uv: Zr.getInterpolation(Hh, Zv, Vh, Jv, uE, U_, cE, new Ge()),
      face: null,
      object: this
    });
  }
  copy(e, t) {
    return super.copy(e, t), e.center !== void 0 && this.center.copy(e.center), this.material = e.material, this;
  }
}
function Qv(u, e, t, n, a, s) {
  Gf.subVectors(u, t).addScalar(0.5).multiply(n), a !== void 0 ? (kh.x = s * Gf.x - a * Gf.y, kh.y = a * Gf.x + s * Gf.y) : kh.copy(Gf), u.copy(e), u.x += kh.x, u.y += kh.y, u.applyMatrix4(UT);
}
const Kv = /* @__PURE__ */ new j(), fE = /* @__PURE__ */ new j();
class zT extends Mn {
  constructor() {
    super(), this._currentLevel = 0, this.type = "LOD", Object.defineProperties(this, {
      levels: {
        enumerable: !0,
        value: []
      },
      isLOD: {
        value: !0
      }
    }), this.autoUpdate = !0;
  }
  copy(e) {
    super.copy(e, !1);
    const t = e.levels;
    for (let n = 0, a = t.length; n < a; n++) {
      const s = t[n];
      this.addLevel(s.object.clone(), s.distance, s.hysteresis);
    }
    return this.autoUpdate = e.autoUpdate, this;
  }
  addLevel(e, t = 0, n = 0) {
    t = Math.abs(t);
    const a = this.levels;
    let s;
    for (s = 0; s < a.length && !(t < a[s].distance); s++)
      ;
    return a.splice(s, 0, { distance: t, hysteresis: n, object: e }), this.add(e), this;
  }
  getCurrentLevel() {
    return this._currentLevel;
  }
  getObjectForDistance(e) {
    const t = this.levels;
    if (t.length > 0) {
      let n, a;
      for (n = 1, a = t.length; n < a; n++) {
        let s = t[n].distance;
        if (t[n].object.visible && (s -= s * t[n].hysteresis), e < s)
          break;
      }
      return t[n - 1].object;
    }
    return null;
  }
  raycast(e, t) {
    if (this.levels.length > 0) {
      Kv.setFromMatrixPosition(this.matrixWorld);
      const a = e.ray.origin.distanceTo(Kv);
      this.getObjectForDistance(a).raycast(e, t);
    }
  }
  update(e) {
    const t = this.levels;
    if (t.length > 1) {
      Kv.setFromMatrixPosition(e.matrixWorld), fE.setFromMatrixPosition(this.matrixWorld);
      const n = Kv.distanceTo(fE) / e.zoom;
      t[0].object.visible = !0;
      let a, s;
      for (a = 1, s = t.length; a < s; a++) {
        let c = t[a].distance;
        if (t[a].object.visible && (c -= c * t[a].hysteresis), n >= c)
          t[a - 1].object.visible = !1, t[a].object.visible = !0;
        else
          break;
      }
      for (this._currentLevel = a - 1; a < s; a++)
        t[a].object.visible = !1;
    }
  }
  toJSON(e) {
    const t = super.toJSON(e);
    this.autoUpdate === !1 && (t.object.autoUpdate = !1), t.object.levels = [];
    const n = this.levels;
    for (let a = 0, s = n.length; a < s; a++) {
      const c = n[a];
      t.object.levels.push({
        object: c.object.uuid,
        distance: c.distance,
        hysteresis: c.hysteresis
      });
    }
    return t;
  }
}
const dE = /* @__PURE__ */ new j(), hE = /* @__PURE__ */ new Un(), pE = /* @__PURE__ */ new Un(), Pz = /* @__PURE__ */ new j(), mE = /* @__PURE__ */ new Qt(), Wf = /* @__PURE__ */ new j();
class OT extends tr {
  constructor(e, t) {
    super(e, t), this.isSkinnedMesh = !0, this.type = "SkinnedMesh", this.bindMode = "attached", this.bindMatrix = new Qt(), this.bindMatrixInverse = new Qt(), this.boundingBox = null, this.boundingSphere = null;
  }
  computeBoundingBox() {
    const e = this.geometry;
    this.boundingBox === null && (this.boundingBox = new Gs()), this.boundingBox.makeEmpty();
    const t = e.getAttribute("position");
    for (let n = 0; n < t.count; n++)
      Wf.fromBufferAttribute(t, n), this.applyBoneTransform(n, Wf), this.boundingBox.expandByPoint(Wf);
  }
  computeBoundingSphere() {
    const e = this.geometry;
    this.boundingSphere === null && (this.boundingSphere = new Ws()), this.boundingSphere.makeEmpty();
    const t = e.getAttribute("position");
    for (let n = 0; n < t.count; n++)
      Wf.fromBufferAttribute(t, n), this.applyBoneTransform(n, Wf), this.boundingSphere.expandByPoint(Wf);
  }
  copy(e, t) {
    return super.copy(e, t), this.bindMode = e.bindMode, this.bindMatrix.copy(e.bindMatrix), this.bindMatrixInverse.copy(e.bindMatrixInverse), this.skeleton = e.skeleton, this;
  }
  bind(e, t) {
    this.skeleton = e, t === void 0 && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), t = this.matrixWorld), this.bindMatrix.copy(t), this.bindMatrixInverse.copy(t).invert();
  }
  pose() {
    this.skeleton.pose();
  }
  normalizeSkinWeights() {
    const e = new Un(), t = this.geometry.attributes.skinWeight;
    for (let n = 0, a = t.count; n < a; n++) {
      e.fromBufferAttribute(t, n);
      const s = 1 / e.manhattanLength();
      s !== 1 / 0 ? e.multiplyScalar(s) : e.set(1, 0, 0, 0), t.setXYZW(n, e.x, e.y, e.z, e.w);
    }
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.bindMode === "attached" ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : this.bindMode === "detached" ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
  }
  applyBoneTransform(e, t) {
    const n = this.skeleton, a = this.geometry;
    hE.fromBufferAttribute(a.attributes.skinIndex, e), pE.fromBufferAttribute(a.attributes.skinWeight, e), dE.copy(t).applyMatrix4(this.bindMatrix), t.set(0, 0, 0);
    for (let s = 0; s < 4; s++) {
      const c = pE.getComponent(s);
      if (c !== 0) {
        const f = hE.getComponent(s);
        mE.multiplyMatrices(n.bones[f].matrixWorld, n.boneInverses[f]), t.addScaledVector(Pz.copy(dE).applyMatrix4(mE), c);
      }
    }
    return t.applyMatrix4(this.bindMatrixInverse);
  }
  boneTransform(e, t) {
    return console.warn("THREE.SkinnedMesh: .boneTransform() was renamed to .applyBoneTransform() in r151."), this.applyBoneTransform(e, t);
  }
}
class uS extends Mn {
  constructor() {
    super(), this.isBone = !0, this.type = "Bone";
  }
}
class ed extends pi {
  constructor(e = null, t = 1, n = 1, a, s, c, f, p, h = bi, g = bi, _, x) {
    super(null, c, f, p, h, g, a, s, _, x), this.isDataTexture = !0, this.image = { data: e, width: t, height: n }, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
const vE = /* @__PURE__ */ new Qt(), Uz = /* @__PURE__ */ new Qt();
class qg {
  constructor(e = [], t = []) {
    this.uuid = va(), this.bones = e.slice(0), this.boneInverses = t, this.boneMatrices = null, this.boneTexture = null, this.boneTextureSize = 0, this.frame = -1, this.init();
  }
  init() {
    const e = this.bones, t = this.boneInverses;
    if (this.boneMatrices = new Float32Array(e.length * 16), t.length === 0)
      this.calculateInverses();
    else if (e.length !== t.length) {
      console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = [];
      for (let n = 0, a = this.bones.length; n < a; n++)
        this.boneInverses.push(new Qt());
    }
  }
  calculateInverses() {
    this.boneInverses.length = 0;
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = new Qt();
      this.bones[e] && n.copy(this.bones[e].matrixWorld).invert(), this.boneInverses.push(n);
    }
  }
  pose() {
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = this.bones[e];
      n && n.matrixWorld.copy(this.boneInverses[e]).invert();
    }
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = this.bones[e];
      n && (n.parent && n.parent.isBone ? (n.matrix.copy(n.parent.matrixWorld).invert(), n.matrix.multiply(n.matrixWorld)) : n.matrix.copy(n.matrixWorld), n.matrix.decompose(n.position, n.quaternion, n.scale));
    }
  }
  update() {
    const e = this.bones, t = this.boneInverses, n = this.boneMatrices, a = this.boneTexture;
    for (let s = 0, c = e.length; s < c; s++) {
      const f = e[s] ? e[s].matrixWorld : Uz;
      vE.multiplyMatrices(f, t[s]), vE.toArray(n, s * 16);
    }
    a !== null && (a.needsUpdate = !0);
  }
  clone() {
    return new qg(this.bones, this.boneInverses);
  }
  computeBoneTexture() {
    let e = Math.sqrt(this.bones.length * 4);
    e = gT(e), e = Math.max(e, 4);
    const t = new Float32Array(e * e * 4);
    t.set(this.boneMatrices);
    const n = new ed(t, e, e, Jr, Hs);
    return n.needsUpdate = !0, this.boneMatrices = t, this.boneTexture = n, this.boneTextureSize = e, this;
  }
  getBoneByName(e) {
    for (let t = 0, n = this.bones.length; t < n; t++) {
      const a = this.bones[t];
      if (a.name === e)
        return a;
    }
  }
  dispose() {
    this.boneTexture !== null && (this.boneTexture.dispose(), this.boneTexture = null);
  }
  fromJSON(e, t) {
    this.uuid = e.uuid;
    for (let n = 0, a = e.bones.length; n < a; n++) {
      const s = e.bones[n];
      let c = t[s];
      c === void 0 && (console.warn("THREE.Skeleton: No bone found with UUID:", s), c = new uS()), this.bones.push(c), this.boneInverses.push(new Qt().fromArray(e.boneInverses[n]));
    }
    return this.init(), this;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.5,
        type: "Skeleton",
        generator: "Skeleton.toJSON"
      },
      bones: [],
      boneInverses: []
    };
    e.uuid = this.uuid;
    const t = this.bones, n = this.boneInverses;
    for (let a = 0, s = t.length; a < s; a++) {
      const c = t[a];
      e.bones.push(c.uuid);
      const f = n[a];
      e.boneInverses.push(f.toArray());
    }
    return e;
  }
}
class rd extends Hn {
  constructor(e, t, n, a = 1) {
    super(e, t, n), this.isInstancedBufferAttribute = !0, this.meshPerAttribute = a;
  }
  copy(e) {
    return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.meshPerAttribute = this.meshPerAttribute, e.isInstancedBufferAttribute = !0, e;
  }
}
const qf = /* @__PURE__ */ new Qt(), gE = /* @__PURE__ */ new Qt(), $v = [], yE = /* @__PURE__ */ new Gs(), Nz = /* @__PURE__ */ new Qt(), Gh = /* @__PURE__ */ new tr(), Wh = /* @__PURE__ */ new Ws();
class IT extends tr {
  constructor(e, t, n) {
    super(e, t), this.isInstancedMesh = !0, this.instanceMatrix = new rd(new Float32Array(n * 16), 16), this.instanceColor = null, this.count = n, this.boundingBox = null, this.boundingSphere = null;
    for (let a = 0; a < n; a++)
      this.setMatrixAt(a, Nz);
  }
  computeBoundingBox() {
    const e = this.geometry, t = this.count;
    this.boundingBox === null && (this.boundingBox = new Gs()), e.boundingBox === null && e.computeBoundingBox(), this.boundingBox.makeEmpty();
    for (let n = 0; n < t; n++)
      this.getMatrixAt(n, qf), yE.copy(e.boundingBox).applyMatrix4(qf), this.boundingBox.union(yE);
  }
  computeBoundingSphere() {
    const e = this.geometry, t = this.count;
    this.boundingSphere === null && (this.boundingSphere = new Ws()), e.boundingSphere === null && e.computeBoundingSphere(), this.boundingSphere.makeEmpty();
    for (let n = 0; n < t; n++)
      this.getMatrixAt(n, qf), Wh.copy(e.boundingSphere).applyMatrix4(qf), this.boundingSphere.union(Wh);
  }
  copy(e, t) {
    return super.copy(e, t), this.instanceMatrix.copy(e.instanceMatrix), e.instanceColor !== null && (this.instanceColor = e.instanceColor.clone()), this.count = e.count, this;
  }
  getColorAt(e, t) {
    t.fromArray(this.instanceColor.array, e * 3);
  }
  getMatrixAt(e, t) {
    t.fromArray(this.instanceMatrix.array, e * 16);
  }
  raycast(e, t) {
    const n = this.matrixWorld, a = this.count;
    if (Gh.geometry = this.geometry, Gh.material = this.material, Gh.material !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), Wh.copy(this.boundingSphere), Wh.applyMatrix4(n), e.ray.intersectsSphere(Wh) !== !1))
      for (let s = 0; s < a; s++) {
        this.getMatrixAt(s, qf), gE.multiplyMatrices(n, qf), Gh.matrixWorld = gE, Gh.raycast(e, $v);
        for (let c = 0, f = $v.length; c < f; c++) {
          const p = $v[c];
          p.instanceId = s, p.object = this, t.push(p);
        }
        $v.length = 0;
      }
  }
  setColorAt(e, t) {
    this.instanceColor === null && (this.instanceColor = new rd(new Float32Array(this.instanceMatrix.count * 3), 3)), t.toArray(this.instanceColor.array, e * 3);
  }
  setMatrixAt(e, t) {
    t.toArray(this.instanceMatrix.array, e * 16);
  }
  updateMorphTargets() {
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
class Ar extends nr {
  constructor(e) {
    super(), this.isLineBasicMaterial = !0, this.type = "LineBasicMaterial", this.color = new yt(16777215), this.map = null, this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.linewidth = e.linewidth, this.linecap = e.linecap, this.linejoin = e.linejoin, this.fog = e.fog, this;
  }
}
const _E = /* @__PURE__ */ new j(), xE = /* @__PURE__ */ new j(), SE = /* @__PURE__ */ new Qt(), N_ = /* @__PURE__ */ new Ep(), eg = /* @__PURE__ */ new Ws();
class Wl extends Mn {
  constructor(e = new an(), t = new Ar()) {
    super(), this.isLine = !0, this.type = "Line", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), this.material = e.material, this.geometry = e.geometry, this;
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position, n = [0];
      for (let a = 1, s = t.count; a < s; a++)
        _E.fromBufferAttribute(t, a - 1), xE.fromBufferAttribute(t, a), n[a] = n[a - 1], n[a] += _E.distanceTo(xE);
      e.setAttribute("lineDistance", new Rt(n, 1));
    } else
      console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
  raycast(e, t) {
    const n = this.geometry, a = this.matrixWorld, s = e.params.Line.threshold, c = n.drawRange;
    if (n.boundingSphere === null && n.computeBoundingSphere(), eg.copy(n.boundingSphere), eg.applyMatrix4(a), eg.radius += s, e.ray.intersectsSphere(eg) === !1)
      return;
    SE.copy(a).invert(), N_.copy(e.ray).applyMatrix4(SE);
    const f = s / ((this.scale.x + this.scale.y + this.scale.z) / 3), p = f * f, h = new j(), g = new j(), _ = new j(), x = new j(), M = this.isLineSegments ? 2 : 1, E = n.index, T = n.attributes.position;
    if (E !== null) {
      const b = Math.max(0, c.start), L = Math.min(E.count, c.start + c.count);
      for (let R = b, U = L - 1; R < U; R += M) {
        const F = E.getX(R), V = E.getX(R + 1);
        if (h.fromBufferAttribute(T, F), g.fromBufferAttribute(T, V), N_.distanceSqToSegment(h, g, x, _) > p)
          continue;
        x.applyMatrix4(this.matrixWorld);
        const G = e.ray.origin.distanceTo(x);
        G < e.near || G > e.far || t.push({
          distance: G,
          // What do we want? intersection point on the ray or on the segment??
          // point: raycaster.ray.at( distance ),
          point: _.clone().applyMatrix4(this.matrixWorld),
          index: R,
          face: null,
          faceIndex: null,
          object: this
        });
      }
    } else {
      const b = Math.max(0, c.start), L = Math.min(T.count, c.start + c.count);
      for (let R = b, U = L - 1; R < U; R += M) {
        if (h.fromBufferAttribute(T, R), g.fromBufferAttribute(T, R + 1), N_.distanceSqToSegment(h, g, x, _) > p)
          continue;
        x.applyMatrix4(this.matrixWorld);
        const V = e.ray.origin.distanceTo(x);
        V < e.near || V > e.far || t.push({
          distance: V,
          // What do we want? intersection point on the ray or on the segment??
          // point: raycaster.ray.at( distance ),
          point: _.clone().applyMatrix4(this.matrixWorld),
          index: R,
          face: null,
          faceIndex: null,
          object: this
        });
      }
    }
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const a = t[n[0]];
      if (a !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let s = 0, c = a.length; s < c; s++) {
          const f = a[s].name || String(s);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[f] = s;
        }
      }
    }
  }
}
const ME = /* @__PURE__ */ new j(), bE = /* @__PURE__ */ new j();
class qs extends Wl {
  constructor(e, t) {
    super(e, t), this.isLineSegments = !0, this.type = "LineSegments";
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position, n = [];
      for (let a = 0, s = t.count; a < s; a += 2)
        ME.fromBufferAttribute(t, a), bE.fromBufferAttribute(t, a + 1), n[a] = a === 0 ? 0 : n[a - 1], n[a + 1] = n[a] + ME.distanceTo(bE);
      e.setAttribute("lineDistance", new Rt(n, 1));
    } else
      console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
}
class FT extends Wl {
  constructor(e, t) {
    super(e, t), this.isLineLoop = !0, this.type = "LineLoop";
  }
}
class cS extends nr {
  constructor(e) {
    super(), this.isPointsMaterial = !0, this.type = "PointsMaterial", this.color = new yt(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.size = e.size, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
  }
}
const EE = /* @__PURE__ */ new Qt(), zx = /* @__PURE__ */ new Ep(), tg = /* @__PURE__ */ new Ws(), ng = /* @__PURE__ */ new j();
class BT extends Mn {
  constructor(e = new an(), t = new cS()) {
    super(), this.isPoints = !0, this.type = "Points", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), this.material = e.material, this.geometry = e.geometry, this;
  }
  raycast(e, t) {
    const n = this.geometry, a = this.matrixWorld, s = e.params.Points.threshold, c = n.drawRange;
    if (n.boundingSphere === null && n.computeBoundingSphere(), tg.copy(n.boundingSphere), tg.applyMatrix4(a), tg.radius += s, e.ray.intersectsSphere(tg) === !1)
      return;
    EE.copy(a).invert(), zx.copy(e.ray).applyMatrix4(EE);
    const f = s / ((this.scale.x + this.scale.y + this.scale.z) / 3), p = f * f, h = n.index, _ = n.attributes.position;
    if (h !== null) {
      const x = Math.max(0, c.start), M = Math.min(h.count, c.start + c.count);
      for (let E = x, A = M; E < A; E++) {
        const T = h.getX(E);
        ng.fromBufferAttribute(_, T), wE(ng, T, p, a, e, t, this);
      }
    } else {
      const x = Math.max(0, c.start), M = Math.min(_.count, c.start + c.count);
      for (let E = x, A = M; E < A; E++)
        ng.fromBufferAttribute(_, E), wE(ng, E, p, a, e, t, this);
    }
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const a = t[n[0]];
      if (a !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let s = 0, c = a.length; s < c; s++) {
          const f = a[s].name || String(s);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[f] = s;
        }
      }
    }
  }
}
function wE(u, e, t, n, a, s, c) {
  const f = zx.distanceSqToPoint(u);
  if (f < t) {
    const p = new j();
    zx.closestPointToPoint(u, p), p.applyMatrix4(n);
    const h = a.ray.origin.distanceTo(p);
    if (h < a.near || h > a.far)
      return;
    s.push({
      distance: h,
      distanceToRay: Math.sqrt(f),
      point: p,
      index: e,
      face: null,
      object: c
    });
  }
}
class zz extends pi {
  constructor(e, t, n, a, s, c, f, p, h) {
    super(e, t, n, a, s, c, f, p, h), this.isVideoTexture = !0, this.minFilter = c !== void 0 ? c : ai, this.magFilter = s !== void 0 ? s : ai, this.generateMipmaps = !1;
    const g = this;
    function _() {
      g.needsUpdate = !0, e.requestVideoFrameCallback(_);
    }
    "requestVideoFrameCallback" in e && e.requestVideoFrameCallback(_);
  }
  clone() {
    return new this.constructor(this.image).copy(this);
  }
  update() {
    const e = this.image;
    "requestVideoFrameCallback" in e === !1 && e.readyState >= e.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
  }
}
class Oz extends pi {
  constructor(e, t, n) {
    super({ width: e, height: t }), this.isFramebufferTexture = !0, this.format = n, this.magFilter = bi, this.minFilter = bi, this.generateMipmaps = !1, this.needsUpdate = !0;
  }
}
class fS extends pi {
  constructor(e, t, n, a, s, c, f, p, h, g, _, x) {
    super(null, c, f, p, h, g, a, s, _, x), this.isCompressedTexture = !0, this.image = { width: t, height: n }, this.mipmaps = e, this.flipY = !1, this.generateMipmaps = !1;
  }
}
class Iz extends fS {
  constructor(e, t, n, a, s, c) {
    super(e, t, n, s, c), this.isCompressedArrayTexture = !0, this.image.depth = a, this.wrapR = mr;
  }
}
class Fz extends pi {
  constructor(e, t, n, a, s, c, f, p, h) {
    super(e, t, n, a, s, c, f, p, h), this.isCanvasTexture = !0, this.needsUpdate = !0;
  }
}
class hs {
  constructor() {
    this.type = "Curve", this.arcLengthDivisions = 200;
  }
  // Virtual base class method to overwrite and implement in subclasses
  //	- t [0 .. 1]
  getPoint() {
    return console.warn("THREE.Curve: .getPoint() not implemented."), null;
  }
  // Get point at relative position in curve according to arc length
  // - u [0 .. 1]
  getPointAt(e, t) {
    const n = this.getUtoTmapping(e);
    return this.getPoint(n, t);
  }
  // Get sequence of points using getPoint( t )
  getPoints(e = 5) {
    const t = [];
    for (let n = 0; n <= e; n++)
      t.push(this.getPoint(n / e));
    return t;
  }
  // Get sequence of points using getPointAt( u )
  getSpacedPoints(e = 5) {
    const t = [];
    for (let n = 0; n <= e; n++)
      t.push(this.getPointAt(n / e));
    return t;
  }
  // Get total curve arc length
  getLength() {
    const e = this.getLengths();
    return e[e.length - 1];
  }
  // Get list of cumulative segment lengths
  getLengths(e = this.arcLengthDivisions) {
    if (this.cacheArcLengths && this.cacheArcLengths.length === e + 1 && !this.needsUpdate)
      return this.cacheArcLengths;
    this.needsUpdate = !1;
    const t = [];
    let n, a = this.getPoint(0), s = 0;
    t.push(0);
    for (let c = 1; c <= e; c++)
      n = this.getPoint(c / e), s += n.distanceTo(a), t.push(s), a = n;
    return this.cacheArcLengths = t, t;
  }
  updateArcLengths() {
    this.needsUpdate = !0, this.getLengths();
  }
  // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
  getUtoTmapping(e, t) {
    const n = this.getLengths();
    let a = 0;
    const s = n.length;
    let c;
    t ? c = t : c = e * n[s - 1];
    let f = 0, p = s - 1, h;
    for (; f <= p; )
      if (a = Math.floor(f + (p - f) / 2), h = n[a] - c, h < 0)
        f = a + 1;
      else if (h > 0)
        p = a - 1;
      else {
        p = a;
        break;
      }
    if (a = p, n[a] === c)
      return a / (s - 1);
    const g = n[a], x = n[a + 1] - g, M = (c - g) / x;
    return (a + M) / (s - 1);
  }
  // Returns a unit vector tangent at t
  // In case any sub curve does not implement its tangent derivation,
  // 2 points a small delta apart will be used to find its gradient
  // which seems to give a reasonable approximation
  getTangent(e, t) {
    let a = e - 1e-4, s = e + 1e-4;
    a < 0 && (a = 0), s > 1 && (s = 1);
    const c = this.getPoint(a), f = this.getPoint(s), p = t || (c.isVector2 ? new Ge() : new j());
    return p.copy(f).sub(c).normalize(), p;
  }
  getTangentAt(e, t) {
    const n = this.getUtoTmapping(e);
    return this.getTangent(n, t);
  }
  computeFrenetFrames(e, t) {
    const n = new j(), a = [], s = [], c = [], f = new j(), p = new Qt();
    for (let M = 0; M <= e; M++) {
      const E = M / e;
      a[M] = this.getTangentAt(E, new j());
    }
    s[0] = new j(), c[0] = new j();
    let h = Number.MAX_VALUE;
    const g = Math.abs(a[0].x), _ = Math.abs(a[0].y), x = Math.abs(a[0].z);
    g <= h && (h = g, n.set(1, 0, 0)), _ <= h && (h = _, n.set(0, 1, 0)), x <= h && n.set(0, 0, 1), f.crossVectors(a[0], n).normalize(), s[0].crossVectors(a[0], f), c[0].crossVectors(a[0], s[0]);
    for (let M = 1; M <= e; M++) {
      if (s[M] = s[M - 1].clone(), c[M] = c[M - 1].clone(), f.crossVectors(a[M - 1], a[M]), f.length() > Number.EPSILON) {
        f.normalize();
        const E = Math.acos(hi(a[M - 1].dot(a[M]), -1, 1));
        s[M].applyMatrix4(p.makeRotationAxis(f, E));
      }
      c[M].crossVectors(a[M], s[M]);
    }
    if (t === !0) {
      let M = Math.acos(hi(s[0].dot(s[e]), -1, 1));
      M /= e, a[0].dot(f.crossVectors(s[0], s[e])) > 0 && (M = -M);
      for (let E = 1; E <= e; E++)
        s[E].applyMatrix4(p.makeRotationAxis(a[E], M * E)), c[E].crossVectors(a[E], s[E]);
    }
    return {
      tangents: a,
      normals: s,
      binormals: c
    };
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.arcLengthDivisions = e.arcLengthDivisions, this;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.5,
        type: "Curve",
        generator: "Curve.toJSON"
      }
    };
    return e.arcLengthDivisions = this.arcLengthDivisions, e.type = this.type, e;
  }
  fromJSON(e) {
    return this.arcLengthDivisions = e.arcLengthDivisions, this;
  }
}
class Xg extends hs {
  constructor(e = 0, t = 0, n = 1, a = 1, s = 0, c = Math.PI * 2, f = !1, p = 0) {
    super(), this.isEllipseCurve = !0, this.type = "EllipseCurve", this.aX = e, this.aY = t, this.xRadius = n, this.yRadius = a, this.aStartAngle = s, this.aEndAngle = c, this.aClockwise = f, this.aRotation = p;
  }
  getPoint(e, t) {
    const n = t || new Ge(), a = Math.PI * 2;
    let s = this.aEndAngle - this.aStartAngle;
    const c = Math.abs(s) < Number.EPSILON;
    for (; s < 0; )
      s += a;
    for (; s > a; )
      s -= a;
    s < Number.EPSILON && (c ? s = 0 : s = a), this.aClockwise === !0 && !c && (s === a ? s = -a : s = s - a);
    const f = this.aStartAngle + e * s;
    let p = this.aX + this.xRadius * Math.cos(f), h = this.aY + this.yRadius * Math.sin(f);
    if (this.aRotation !== 0) {
      const g = Math.cos(this.aRotation), _ = Math.sin(this.aRotation), x = p - this.aX, M = h - this.aY;
      p = x * g - M * _ + this.aX, h = x * _ + M * g + this.aY;
    }
    return n.set(p, h);
  }
  copy(e) {
    return super.copy(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.aX = this.aX, e.aY = this.aY, e.xRadius = this.xRadius, e.yRadius = this.yRadius, e.aStartAngle = this.aStartAngle, e.aEndAngle = this.aEndAngle, e.aClockwise = this.aClockwise, e.aRotation = this.aRotation, e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
  }
}
class HT extends Xg {
  constructor(e, t, n, a, s, c) {
    super(e, t, n, n, a, s, c), this.isArcCurve = !0, this.type = "ArcCurve";
  }
}
function dS() {
  let u = 0, e = 0, t = 0, n = 0;
  function a(s, c, f, p) {
    u = s, e = f, t = -3 * s + 3 * c - 2 * f - p, n = 2 * s - 2 * c + f + p;
  }
  return {
    initCatmullRom: function(s, c, f, p, h) {
      a(c, f, h * (f - s), h * (p - c));
    },
    initNonuniformCatmullRom: function(s, c, f, p, h, g, _) {
      let x = (c - s) / h - (f - s) / (h + g) + (f - c) / g, M = (f - c) / g - (p - c) / (g + _) + (p - f) / _;
      x *= g, M *= g, a(c, f, x, M);
    },
    calc: function(s) {
      const c = s * s, f = c * s;
      return u + e * s + t * c + n * f;
    }
  };
}
const ig = /* @__PURE__ */ new j(), z_ = /* @__PURE__ */ new dS(), O_ = /* @__PURE__ */ new dS(), I_ = /* @__PURE__ */ new dS();
class kT extends hs {
  constructor(e = [], t = !1, n = "centripetal", a = 0.5) {
    super(), this.isCatmullRomCurve3 = !0, this.type = "CatmullRomCurve3", this.points = e, this.closed = t, this.curveType = n, this.tension = a;
  }
  getPoint(e, t = new j()) {
    const n = t, a = this.points, s = a.length, c = (s - (this.closed ? 0 : 1)) * e;
    let f = Math.floor(c), p = c - f;
    this.closed ? f += f > 0 ? 0 : (Math.floor(Math.abs(f) / s) + 1) * s : p === 0 && f === s - 1 && (f = s - 2, p = 1);
    let h, g;
    this.closed || f > 0 ? h = a[(f - 1) % s] : (ig.subVectors(a[0], a[1]).add(a[0]), h = ig);
    const _ = a[f % s], x = a[(f + 1) % s];
    if (this.closed || f + 2 < s ? g = a[(f + 2) % s] : (ig.subVectors(a[s - 1], a[s - 2]).add(a[s - 1]), g = ig), this.curveType === "centripetal" || this.curveType === "chordal") {
      const M = this.curveType === "chordal" ? 0.5 : 0.25;
      let E = Math.pow(h.distanceToSquared(_), M), A = Math.pow(_.distanceToSquared(x), M), T = Math.pow(x.distanceToSquared(g), M);
      A < 1e-4 && (A = 1), E < 1e-4 && (E = A), T < 1e-4 && (T = A), z_.initNonuniformCatmullRom(h.x, _.x, x.x, g.x, E, A, T), O_.initNonuniformCatmullRom(h.y, _.y, x.y, g.y, E, A, T), I_.initNonuniformCatmullRom(h.z, _.z, x.z, g.z, E, A, T);
    } else
      this.curveType === "catmullrom" && (z_.initCatmullRom(h.x, _.x, x.x, g.x, this.tension), O_.initCatmullRom(h.y, _.y, x.y, g.y, this.tension), I_.initCatmullRom(h.z, _.z, x.z, g.z, this.tension));
    return n.set(
      z_.calc(p),
      O_.calc(p),
      I_.calc(p)
    ), n;
  }
  copy(e) {
    super.copy(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const a = e.points[t];
      this.points.push(a.clone());
    }
    return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, n = this.points.length; t < n; t++) {
      const a = this.points[t];
      e.points.push(a.toArray());
    }
    return e.closed = this.closed, e.curveType = this.curveType, e.tension = this.tension, e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const a = e.points[t];
      this.points.push(new j().fromArray(a));
    }
    return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
  }
}
function TE(u, e, t, n, a) {
  const s = (n - e) * 0.5, c = (a - t) * 0.5, f = u * u, p = u * f;
  return (2 * t - 2 * n + s + c) * p + (-3 * t + 3 * n - 2 * s - c) * f + s * u + t;
}
function Bz(u, e) {
  const t = 1 - u;
  return t * t * e;
}
function Hz(u, e) {
  return 2 * (1 - u) * u * e;
}
function kz(u, e) {
  return u * u * e;
}
function tp(u, e, t, n) {
  return Bz(u, e) + Hz(u, t) + kz(u, n);
}
function Vz(u, e) {
  const t = 1 - u;
  return t * t * t * e;
}
function Gz(u, e) {
  const t = 1 - u;
  return 3 * t * t * u * e;
}
function Wz(u, e) {
  return 3 * (1 - u) * u * u * e;
}
function qz(u, e) {
  return u * u * u * e;
}
function np(u, e, t, n, a) {
  return Vz(u, e) + Gz(u, t) + Wz(u, n) + qz(u, a);
}
class hS extends hs {
  constructor(e = new Ge(), t = new Ge(), n = new Ge(), a = new Ge()) {
    super(), this.isCubicBezierCurve = !0, this.type = "CubicBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = a;
  }
  getPoint(e, t = new Ge()) {
    const n = t, a = this.v0, s = this.v1, c = this.v2, f = this.v3;
    return n.set(
      np(e, a.x, s.x, c.x, f.x),
      np(e, a.y, s.y, c.y, f.y)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
  }
}
class VT extends hs {
  constructor(e = new j(), t = new j(), n = new j(), a = new j()) {
    super(), this.isCubicBezierCurve3 = !0, this.type = "CubicBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = a;
  }
  getPoint(e, t = new j()) {
    const n = t, a = this.v0, s = this.v1, c = this.v2, f = this.v3;
    return n.set(
      np(e, a.x, s.x, c.x, f.x),
      np(e, a.y, s.y, c.y, f.y),
      np(e, a.z, s.z, c.z, f.z)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
  }
}
class jg extends hs {
  constructor(e = new Ge(), t = new Ge()) {
    super(), this.isLineCurve = !0, this.type = "LineCurve", this.v1 = e, this.v2 = t;
  }
  getPoint(e, t = new Ge()) {
    const n = t;
    return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new Ge()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class GT extends hs {
  constructor(e = new j(), t = new j()) {
    super(), this.isLineCurve3 = !0, this.type = "LineCurve3", this.v1 = e, this.v2 = t;
  }
  getPoint(e, t = new j()) {
    const n = t;
    return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new j()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class pS extends hs {
  constructor(e = new Ge(), t = new Ge(), n = new Ge()) {
    super(), this.isQuadraticBezierCurve = !0, this.type = "QuadraticBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n;
  }
  getPoint(e, t = new Ge()) {
    const n = t, a = this.v0, s = this.v1, c = this.v2;
    return n.set(
      tp(e, a.x, s.x, c.x),
      tp(e, a.y, s.y, c.y)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class mS extends hs {
  constructor(e = new j(), t = new j(), n = new j()) {
    super(), this.isQuadraticBezierCurve3 = !0, this.type = "QuadraticBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n;
  }
  getPoint(e, t = new j()) {
    const n = t, a = this.v0, s = this.v1, c = this.v2;
    return n.set(
      tp(e, a.x, s.x, c.x),
      tp(e, a.y, s.y, c.y),
      tp(e, a.z, s.z, c.z)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class vS extends hs {
  constructor(e = []) {
    super(), this.isSplineCurve = !0, this.type = "SplineCurve", this.points = e;
  }
  getPoint(e, t = new Ge()) {
    const n = t, a = this.points, s = (a.length - 1) * e, c = Math.floor(s), f = s - c, p = a[c === 0 ? c : c - 1], h = a[c], g = a[c > a.length - 2 ? a.length - 1 : c + 1], _ = a[c > a.length - 3 ? a.length - 1 : c + 2];
    return n.set(
      TE(f, p.x, h.x, g.x, _.x),
      TE(f, p.y, h.y, g.y, _.y)
    ), n;
  }
  copy(e) {
    super.copy(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const a = e.points[t];
      this.points.push(a.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, n = this.points.length; t < n; t++) {
      const a = this.points[t];
      e.points.push(a.toArray());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const a = e.points[t];
      this.points.push(new Ge().fromArray(a));
    }
    return this;
  }
}
var gS = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ArcCurve: HT,
  CatmullRomCurve3: kT,
  CubicBezierCurve: hS,
  CubicBezierCurve3: VT,
  EllipseCurve: Xg,
  LineCurve: jg,
  LineCurve3: GT,
  QuadraticBezierCurve: pS,
  QuadraticBezierCurve3: mS,
  SplineCurve: vS
});
class WT extends hs {
  constructor() {
    super(), this.type = "CurvePath", this.curves = [], this.autoClose = !1;
  }
  add(e) {
    this.curves.push(e);
  }
  closePath() {
    const e = this.curves[0].getPoint(0), t = this.curves[this.curves.length - 1].getPoint(1);
    e.equals(t) || this.curves.push(new jg(t, e));
  }
  // To get accurate point with reference to
  // entire path distance at time t,
  // following has to be done:
  // 1. Length of each sub path have to be known
  // 2. Locate and identify type of curve
  // 3. Get t for the curve
  // 4. Return curve.getPointAt(t')
  getPoint(e, t) {
    const n = e * this.getLength(), a = this.getCurveLengths();
    let s = 0;
    for (; s < a.length; ) {
      if (a[s] >= n) {
        const c = a[s] - n, f = this.curves[s], p = f.getLength(), h = p === 0 ? 0 : 1 - c / p;
        return f.getPointAt(h, t);
      }
      s++;
    }
    return null;
  }
  // We cannot use the default THREE.Curve getPoint() with getLength() because in
  // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
  // getPoint() depends on getLength
  getLength() {
    const e = this.getCurveLengths();
    return e[e.length - 1];
  }
  // cacheLengths must be recalculated.
  updateArcLengths() {
    this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths();
  }
  // Compute lengths and cache them
  // We cannot overwrite getLengths() because UtoT mapping uses it.
  getCurveLengths() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
      return this.cacheLengths;
    const e = [];
    let t = 0;
    for (let n = 0, a = this.curves.length; n < a; n++)
      t += this.curves[n].getLength(), e.push(t);
    return this.cacheLengths = e, e;
  }
  getSpacedPoints(e = 40) {
    const t = [];
    for (let n = 0; n <= e; n++)
      t.push(this.getPoint(n / e));
    return this.autoClose && t.push(t[0]), t;
  }
  getPoints(e = 12) {
    const t = [];
    let n;
    for (let a = 0, s = this.curves; a < s.length; a++) {
      const c = s[a], f = c.isEllipseCurve ? e * 2 : c.isLineCurve || c.isLineCurve3 ? 1 : c.isSplineCurve ? e * c.points.length : e, p = c.getPoints(f);
      for (let h = 0; h < p.length; h++) {
        const g = p[h];
        n && n.equals(g) || (t.push(g), n = g);
      }
    }
    return this.autoClose && t.length > 1 && !t[t.length - 1].equals(t[0]) && t.push(t[0]), t;
  }
  copy(e) {
    super.copy(e), this.curves = [];
    for (let t = 0, n = e.curves.length; t < n; t++) {
      const a = e.curves[t];
      this.curves.push(a.clone());
    }
    return this.autoClose = e.autoClose, this;
  }
  toJSON() {
    const e = super.toJSON();
    e.autoClose = this.autoClose, e.curves = [];
    for (let t = 0, n = this.curves.length; t < n; t++) {
      const a = this.curves[t];
      e.curves.push(a.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.autoClose = e.autoClose, this.curves = [];
    for (let t = 0, n = e.curves.length; t < n; t++) {
      const a = e.curves[t];
      this.curves.push(new gS[a.type]().fromJSON(a));
    }
    return this;
  }
}
class pp extends WT {
  constructor(e) {
    super(), this.type = "Path", this.currentPoint = new Ge(), e && this.setFromPoints(e);
  }
  setFromPoints(e) {
    this.moveTo(e[0].x, e[0].y);
    for (let t = 1, n = e.length; t < n; t++)
      this.lineTo(e[t].x, e[t].y);
    return this;
  }
  moveTo(e, t) {
    return this.currentPoint.set(e, t), this;
  }
  lineTo(e, t) {
    const n = new jg(this.currentPoint.clone(), new Ge(e, t));
    return this.curves.push(n), this.currentPoint.set(e, t), this;
  }
  quadraticCurveTo(e, t, n, a) {
    const s = new pS(
      this.currentPoint.clone(),
      new Ge(e, t),
      new Ge(n, a)
    );
    return this.curves.push(s), this.currentPoint.set(n, a), this;
  }
  bezierCurveTo(e, t, n, a, s, c) {
    const f = new hS(
      this.currentPoint.clone(),
      new Ge(e, t),
      new Ge(n, a),
      new Ge(s, c)
    );
    return this.curves.push(f), this.currentPoint.set(s, c), this;
  }
  splineThru(e) {
    const t = [this.currentPoint.clone()].concat(e), n = new vS(t);
    return this.curves.push(n), this.currentPoint.copy(e[e.length - 1]), this;
  }
  arc(e, t, n, a, s, c) {
    const f = this.currentPoint.x, p = this.currentPoint.y;
    return this.absarc(
      e + f,
      t + p,
      n,
      a,
      s,
      c
    ), this;
  }
  absarc(e, t, n, a, s, c) {
    return this.absellipse(e, t, n, n, a, s, c), this;
  }
  ellipse(e, t, n, a, s, c, f, p) {
    const h = this.currentPoint.x, g = this.currentPoint.y;
    return this.absellipse(e + h, t + g, n, a, s, c, f, p), this;
  }
  absellipse(e, t, n, a, s, c, f, p) {
    const h = new Xg(e, t, n, a, s, c, f, p);
    if (this.curves.length > 0) {
      const _ = h.getPoint(0);
      _.equals(this.currentPoint) || this.lineTo(_.x, _.y);
    }
    this.curves.push(h);
    const g = h.getPoint(1);
    return this.currentPoint.copy(g), this;
  }
  copy(e) {
    return super.copy(e), this.currentPoint.copy(e.currentPoint), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.currentPoint = this.currentPoint.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.currentPoint.fromArray(e.currentPoint), this;
  }
}
class ud extends an {
  constructor(e = [new Ge(0, -0.5), new Ge(0.5, 0), new Ge(0, 0.5)], t = 12, n = 0, a = Math.PI * 2) {
    super(), this.type = "LatheGeometry", this.parameters = {
      points: e,
      segments: t,
      phiStart: n,
      phiLength: a
    }, t = Math.floor(t), a = hi(a, 0, Math.PI * 2);
    const s = [], c = [], f = [], p = [], h = [], g = 1 / t, _ = new j(), x = new Ge(), M = new j(), E = new j(), A = new j();
    let T = 0, b = 0;
    for (let L = 0; L <= e.length - 1; L++)
      switch (L) {
        case 0:
          T = e[L + 1].x - e[L].x, b = e[L + 1].y - e[L].y, M.x = b * 1, M.y = -T, M.z = b * 0, A.copy(M), M.normalize(), p.push(M.x, M.y, M.z);
          break;
        case e.length - 1:
          p.push(A.x, A.y, A.z);
          break;
        default:
          T = e[L + 1].x - e[L].x, b = e[L + 1].y - e[L].y, M.x = b * 1, M.y = -T, M.z = b * 0, E.copy(M), M.x += A.x, M.y += A.y, M.z += A.z, M.normalize(), p.push(M.x, M.y, M.z), A.copy(E);
      }
    for (let L = 0; L <= t; L++) {
      const R = n + L * g * a, U = Math.sin(R), F = Math.cos(R);
      for (let V = 0; V <= e.length - 1; V++) {
        _.x = e[V].x * U, _.y = e[V].y, _.z = e[V].x * F, c.push(_.x, _.y, _.z), x.x = L / t, x.y = V / (e.length - 1), f.push(x.x, x.y);
        const k = p[3 * V + 0] * U, G = p[3 * V + 1], z = p[3 * V + 0] * F;
        h.push(k, G, z);
      }
    }
    for (let L = 0; L < t; L++)
      for (let R = 0; R < e.length - 1; R++) {
        const U = R + L * e.length, F = U, V = U + e.length, k = U + e.length + 1, G = U + 1;
        s.push(F, V, G), s.push(k, G, V);
      }
    this.setIndex(s), this.setAttribute("position", new Rt(c, 3)), this.setAttribute("uv", new Rt(f, 2)), this.setAttribute("normal", new Rt(h, 3));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new ud(e.points, e.segments, e.phiStart, e.phiLength);
  }
}
class Rp extends ud {
  constructor(e = 1, t = 1, n = 4, a = 8) {
    const s = new pp();
    s.absarc(0, -t / 2, e, Math.PI * 1.5, 0), s.absarc(0, t / 2, e, 0, Math.PI * 0.5), super(s.getPoints(n), a), this.type = "CapsuleGeometry", this.parameters = {
      radius: e,
      height: t,
      capSegments: n,
      radialSegments: a
    };
  }
  static fromJSON(e) {
    return new Rp(e.radius, e.length, e.capSegments, e.radialSegments);
  }
}
class Lp extends an {
  constructor(e = 1, t = 32, n = 0, a = Math.PI * 2) {
    super(), this.type = "CircleGeometry", this.parameters = {
      radius: e,
      segments: t,
      thetaStart: n,
      thetaLength: a
    }, t = Math.max(3, t);
    const s = [], c = [], f = [], p = [], h = new j(), g = new Ge();
    c.push(0, 0, 0), f.push(0, 0, 1), p.push(0.5, 0.5);
    for (let _ = 0, x = 3; _ <= t; _++, x += 3) {
      const M = n + _ / t * a;
      h.x = e * Math.cos(M), h.y = e * Math.sin(M), c.push(h.x, h.y, h.z), f.push(0, 0, 1), g.x = (c[x] / e + 1) / 2, g.y = (c[x + 1] / e + 1) / 2, p.push(g.x, g.y);
    }
    for (let _ = 1; _ <= t; _++)
      s.push(_, _ + 1, 0);
    this.setIndex(s), this.setAttribute("position", new Rt(c, 3)), this.setAttribute("normal", new Rt(f, 3)), this.setAttribute("uv", new Rt(p, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Lp(e.radius, e.segments, e.thetaStart, e.thetaLength);
  }
}
class cc extends an {
  constructor(e = 1, t = 1, n = 1, a = 32, s = 1, c = !1, f = 0, p = Math.PI * 2) {
    super(), this.type = "CylinderGeometry", this.parameters = {
      radiusTop: e,
      radiusBottom: t,
      height: n,
      radialSegments: a,
      heightSegments: s,
      openEnded: c,
      thetaStart: f,
      thetaLength: p
    };
    const h = this;
    a = Math.floor(a), s = Math.floor(s);
    const g = [], _ = [], x = [], M = [];
    let E = 0;
    const A = [], T = n / 2;
    let b = 0;
    L(), c === !1 && (e > 0 && R(!0), t > 0 && R(!1)), this.setIndex(g), this.setAttribute("position", new Rt(_, 3)), this.setAttribute("normal", new Rt(x, 3)), this.setAttribute("uv", new Rt(M, 2));
    function L() {
      const U = new j(), F = new j();
      let V = 0;
      const k = (t - e) / n;
      for (let G = 0; G <= s; G++) {
        const z = [], I = G / s, Q = I * (t - e) + e;
        for (let te = 0; te <= a; te++) {
          const $ = te / a, ie = $ * p + f, fe = Math.sin(ie), Ee = Math.cos(ie);
          F.x = Q * fe, F.y = -I * n + T, F.z = Q * Ee, _.push(F.x, F.y, F.z), U.set(fe, k, Ee).normalize(), x.push(U.x, U.y, U.z), M.push($, 1 - I), z.push(E++);
        }
        A.push(z);
      }
      for (let G = 0; G < a; G++)
        for (let z = 0; z < s; z++) {
          const I = A[z][G], Q = A[z + 1][G], te = A[z + 1][G + 1], $ = A[z][G + 1];
          g.push(I, Q, $), g.push(Q, te, $), V += 6;
        }
      h.addGroup(b, V, 0), b += V;
    }
    function R(U) {
      const F = E, V = new Ge(), k = new j();
      let G = 0;
      const z = U === !0 ? e : t, I = U === !0 ? 1 : -1;
      for (let te = 1; te <= a; te++)
        _.push(0, T * I, 0), x.push(0, I, 0), M.push(0.5, 0.5), E++;
      const Q = E;
      for (let te = 0; te <= a; te++) {
        const ie = te / a * p + f, fe = Math.cos(ie), Ee = Math.sin(ie);
        k.x = z * Ee, k.y = T * I, k.z = z * fe, _.push(k.x, k.y, k.z), x.push(0, I, 0), V.x = fe * 0.5 + 0.5, V.y = Ee * 0.5 * I + 0.5, M.push(V.x, V.y), E++;
      }
      for (let te = 0; te < a; te++) {
        const $ = F + te, ie = Q + te;
        U === !0 ? g.push(ie, ie + 1, $) : g.push(ie + 1, ie, $), G += 3;
      }
      h.addGroup(b, G, U === !0 ? 1 : 2), b += G;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new cc(e.radiusTop, e.radiusBottom, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class Dp extends cc {
  constructor(e = 1, t = 1, n = 32, a = 1, s = !1, c = 0, f = Math.PI * 2) {
    super(0, e, t, n, a, s, c, f), this.type = "ConeGeometry", this.parameters = {
      radius: e,
      height: t,
      radialSegments: n,
      heightSegments: a,
      openEnded: s,
      thetaStart: c,
      thetaLength: f
    };
  }
  static fromJSON(e) {
    return new Dp(e.radius, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class Oo extends an {
  constructor(e = [], t = [], n = 1, a = 0) {
    super(), this.type = "PolyhedronGeometry", this.parameters = {
      vertices: e,
      indices: t,
      radius: n,
      detail: a
    };
    const s = [], c = [];
    f(a), h(n), g(), this.setAttribute("position", new Rt(s, 3)), this.setAttribute("normal", new Rt(s.slice(), 3)), this.setAttribute("uv", new Rt(c, 2)), a === 0 ? this.computeVertexNormals() : this.normalizeNormals();
    function f(L) {
      const R = new j(), U = new j(), F = new j();
      for (let V = 0; V < t.length; V += 3)
        M(t[V + 0], R), M(t[V + 1], U), M(t[V + 2], F), p(R, U, F, L);
    }
    function p(L, R, U, F) {
      const V = F + 1, k = [];
      for (let G = 0; G <= V; G++) {
        k[G] = [];
        const z = L.clone().lerp(U, G / V), I = R.clone().lerp(U, G / V), Q = V - G;
        for (let te = 0; te <= Q; te++)
          te === 0 && G === V ? k[G][te] = z : k[G][te] = z.clone().lerp(I, te / Q);
      }
      for (let G = 0; G < V; G++)
        for (let z = 0; z < 2 * (V - G) - 1; z++) {
          const I = Math.floor(z / 2);
          z % 2 === 0 ? (x(k[G][I + 1]), x(k[G + 1][I]), x(k[G][I])) : (x(k[G][I + 1]), x(k[G + 1][I + 1]), x(k[G + 1][I]));
        }
    }
    function h(L) {
      const R = new j();
      for (let U = 0; U < s.length; U += 3)
        R.x = s[U + 0], R.y = s[U + 1], R.z = s[U + 2], R.normalize().multiplyScalar(L), s[U + 0] = R.x, s[U + 1] = R.y, s[U + 2] = R.z;
    }
    function g() {
      const L = new j();
      for (let R = 0; R < s.length; R += 3) {
        L.x = s[R + 0], L.y = s[R + 1], L.z = s[R + 2];
        const U = T(L) / 2 / Math.PI + 0.5, F = b(L) / Math.PI + 0.5;
        c.push(U, 1 - F);
      }
      E(), _();
    }
    function _() {
      for (let L = 0; L < c.length; L += 6) {
        const R = c[L + 0], U = c[L + 2], F = c[L + 4], V = Math.max(R, U, F), k = Math.min(R, U, F);
        V > 0.9 && k < 0.1 && (R < 0.2 && (c[L + 0] += 1), U < 0.2 && (c[L + 2] += 1), F < 0.2 && (c[L + 4] += 1));
      }
    }
    function x(L) {
      s.push(L.x, L.y, L.z);
    }
    function M(L, R) {
      const U = L * 3;
      R.x = e[U + 0], R.y = e[U + 1], R.z = e[U + 2];
    }
    function E() {
      const L = new j(), R = new j(), U = new j(), F = new j(), V = new Ge(), k = new Ge(), G = new Ge();
      for (let z = 0, I = 0; z < s.length; z += 9, I += 6) {
        L.set(s[z + 0], s[z + 1], s[z + 2]), R.set(s[z + 3], s[z + 4], s[z + 5]), U.set(s[z + 6], s[z + 7], s[z + 8]), V.set(c[I + 0], c[I + 1]), k.set(c[I + 2], c[I + 3]), G.set(c[I + 4], c[I + 5]), F.copy(L).add(R).add(U).divideScalar(3);
        const Q = T(F);
        A(V, I + 0, L, Q), A(k, I + 2, R, Q), A(G, I + 4, U, Q);
      }
    }
    function A(L, R, U, F) {
      F < 0 && L.x === 1 && (c[R] = L.x - 1), U.x === 0 && U.z === 0 && (c[R] = F / 2 / Math.PI + 0.5);
    }
    function T(L) {
      return Math.atan2(L.z, -L.x);
    }
    function b(L) {
      return Math.atan2(-L.y, Math.sqrt(L.x * L.x + L.z * L.z));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Oo(e.vertices, e.indices, e.radius, e.details);
  }
}
class Pp extends Oo {
  constructor(e = 1, t = 0) {
    const n = (1 + Math.sqrt(5)) / 2, a = 1 / n, s = [
      // (±1, ±1, ±1)
      -1,
      -1,
      -1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      -1,
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      1,
      1,
      -1,
      1,
      1,
      1,
      // (0, ±1/φ, ±φ)
      0,
      -a,
      -n,
      0,
      -a,
      n,
      0,
      a,
      -n,
      0,
      a,
      n,
      // (±1/φ, ±φ, 0)
      -a,
      -n,
      0,
      -a,
      n,
      0,
      a,
      -n,
      0,
      a,
      n,
      0,
      // (±φ, 0, ±1/φ)
      -n,
      0,
      -a,
      n,
      0,
      -a,
      -n,
      0,
      a,
      n,
      0,
      a
    ], c = [
      3,
      11,
      7,
      3,
      7,
      15,
      3,
      15,
      13,
      7,
      19,
      17,
      7,
      17,
      6,
      7,
      6,
      15,
      17,
      4,
      8,
      17,
      8,
      10,
      17,
      10,
      6,
      8,
      0,
      16,
      8,
      16,
      2,
      8,
      2,
      10,
      0,
      12,
      1,
      0,
      1,
      18,
      0,
      18,
      16,
      6,
      10,
      2,
      6,
      2,
      13,
      6,
      13,
      15,
      2,
      16,
      18,
      2,
      18,
      3,
      2,
      3,
      13,
      18,
      1,
      9,
      18,
      9,
      11,
      18,
      11,
      3,
      4,
      14,
      12,
      4,
      12,
      0,
      4,
      0,
      8,
      11,
      9,
      5,
      11,
      5,
      19,
      11,
      19,
      7,
      19,
      5,
      14,
      19,
      14,
      4,
      19,
      4,
      17,
      1,
      12,
      14,
      1,
      14,
      5,
      1,
      5,
      9
    ];
    super(s, c, e, t), this.type = "DodecahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new Pp(e.radius, e.detail);
  }
}
const rg = /* @__PURE__ */ new j(), ag = /* @__PURE__ */ new j(), F_ = /* @__PURE__ */ new j(), sg = /* @__PURE__ */ new Zr();
class qT extends an {
  constructor(e = null, t = 1) {
    if (super(), this.type = "EdgesGeometry", this.parameters = {
      geometry: e,
      thresholdAngle: t
    }, e !== null) {
      const a = Math.pow(10, 4), s = Math.cos(nc * t), c = e.getIndex(), f = e.getAttribute("position"), p = c ? c.count : f.count, h = [0, 0, 0], g = ["a", "b", "c"], _ = new Array(3), x = {}, M = [];
      for (let E = 0; E < p; E += 3) {
        c ? (h[0] = c.getX(E), h[1] = c.getX(E + 1), h[2] = c.getX(E + 2)) : (h[0] = E, h[1] = E + 1, h[2] = E + 2);
        const { a: A, b: T, c: b } = sg;
        if (A.fromBufferAttribute(f, h[0]), T.fromBufferAttribute(f, h[1]), b.fromBufferAttribute(f, h[2]), sg.getNormal(F_), _[0] = `${Math.round(A.x * a)},${Math.round(A.y * a)},${Math.round(A.z * a)}`, _[1] = `${Math.round(T.x * a)},${Math.round(T.y * a)},${Math.round(T.z * a)}`, _[2] = `${Math.round(b.x * a)},${Math.round(b.y * a)},${Math.round(b.z * a)}`, !(_[0] === _[1] || _[1] === _[2] || _[2] === _[0]))
          for (let L = 0; L < 3; L++) {
            const R = (L + 1) % 3, U = _[L], F = _[R], V = sg[g[L]], k = sg[g[R]], G = `${U}_${F}`, z = `${F}_${U}`;
            z in x && x[z] ? (F_.dot(x[z].normal) <= s && (M.push(V.x, V.y, V.z), M.push(k.x, k.y, k.z)), x[z] = null) : G in x || (x[G] = {
              index0: h[L],
              index1: h[R],
              normal: F_.clone()
            });
          }
      }
      for (const E in x)
        if (x[E]) {
          const { index0: A, index1: T } = x[E];
          rg.fromBufferAttribute(f, A), ag.fromBufferAttribute(f, T), M.push(rg.x, rg.y, rg.z), M.push(ag.x, ag.y, ag.z);
        }
      this.setAttribute("position", new Rt(M, 3));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
}
class rc extends pp {
  constructor(e) {
    super(e), this.uuid = va(), this.type = "Shape", this.holes = [];
  }
  getPointsHoles(e) {
    const t = [];
    for (let n = 0, a = this.holes.length; n < a; n++)
      t[n] = this.holes[n].getPoints(e);
    return t;
  }
  // get points of shape and holes (keypoints based on segments parameter)
  extractPoints(e) {
    return {
      shape: this.getPoints(e),
      holes: this.getPointsHoles(e)
    };
  }
  copy(e) {
    super.copy(e), this.holes = [];
    for (let t = 0, n = e.holes.length; t < n; t++) {
      const a = e.holes[t];
      this.holes.push(a.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.uuid = this.uuid, e.holes = [];
    for (let t = 0, n = this.holes.length; t < n; t++) {
      const a = this.holes[t];
      e.holes.push(a.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.uuid = e.uuid, this.holes = [];
    for (let t = 0, n = e.holes.length; t < n; t++) {
      const a = e.holes[t];
      this.holes.push(new pp().fromJSON(a));
    }
    return this;
  }
}
const Xz = {
  triangulate: function(u, e, t = 2) {
    const n = e && e.length, a = n ? e[0] * t : u.length;
    let s = XT(u, 0, a, t, !0);
    const c = [];
    if (!s || s.next === s.prev)
      return c;
    let f, p, h, g, _, x, M;
    if (n && (s = Qz(u, e, s, t)), u.length > 80 * t) {
      f = h = u[0], p = g = u[1];
      for (let E = t; E < a; E += t)
        _ = u[E], x = u[E + 1], _ < f && (f = _), x < p && (p = x), _ > h && (h = _), x > g && (g = x);
      M = Math.max(h - f, g - p), M = M !== 0 ? 32767 / M : 0;
    }
    return mp(s, c, t, f, p, M, 0), c;
  }
};
function XT(u, e, t, n, a) {
  let s, c;
  if (a === lO(u, e, t, n) > 0)
    for (s = e; s < t; s += n)
      c = CE(s, u[s], u[s + 1], c);
  else
    for (s = t - n; s >= e; s -= n)
      c = CE(s, u[s], u[s + 1], c);
  return c && Yg(c, c.next) && (gp(c), c = c.next), c;
}
function lc(u, e) {
  if (!u)
    return u;
  e || (e = u);
  let t = u, n;
  do
    if (n = !1, !t.steiner && (Yg(t, t.next) || si(t.prev, t, t.next) === 0)) {
      if (gp(t), t = e = t.prev, t === t.next)
        break;
      n = !0;
    } else
      t = t.next;
  while (n || t !== e);
  return e;
}
function mp(u, e, t, n, a, s, c) {
  if (!u)
    return;
  !c && s && nO(u, n, a, s);
  let f = u, p, h;
  for (; u.prev !== u.next; ) {
    if (p = u.prev, h = u.next, s ? Yz(u, n, a, s) : jz(u)) {
      e.push(p.i / t | 0), e.push(u.i / t | 0), e.push(h.i / t | 0), gp(u), u = h.next, f = h.next;
      continue;
    }
    if (u = h, u === f) {
      c ? c === 1 ? (u = Zz(lc(u), e, t), mp(u, e, t, n, a, s, 2)) : c === 2 && Jz(u, e, t, n, a, s) : mp(lc(u), e, t, n, a, s, 1);
      break;
    }
  }
}
function jz(u) {
  const e = u.prev, t = u, n = u.next;
  if (si(e, t, n) >= 0)
    return !1;
  const a = e.x, s = t.x, c = n.x, f = e.y, p = t.y, h = n.y, g = a < s ? a < c ? a : c : s < c ? s : c, _ = f < p ? f < h ? f : h : p < h ? p : h, x = a > s ? a > c ? a : c : s > c ? s : c, M = f > p ? f > h ? f : h : p > h ? p : h;
  let E = n.next;
  for (; E !== e; ) {
    if (E.x >= g && E.x <= x && E.y >= _ && E.y <= M && Kf(a, f, s, p, c, h, E.x, E.y) && si(E.prev, E, E.next) >= 0)
      return !1;
    E = E.next;
  }
  return !0;
}
function Yz(u, e, t, n) {
  const a = u.prev, s = u, c = u.next;
  if (si(a, s, c) >= 0)
    return !1;
  const f = a.x, p = s.x, h = c.x, g = a.y, _ = s.y, x = c.y, M = f < p ? f < h ? f : h : p < h ? p : h, E = g < _ ? g < x ? g : x : _ < x ? _ : x, A = f > p ? f > h ? f : h : p > h ? p : h, T = g > _ ? g > x ? g : x : _ > x ? _ : x, b = Ox(M, E, e, t, n), L = Ox(A, T, e, t, n);
  let R = u.prevZ, U = u.nextZ;
  for (; R && R.z >= b && U && U.z <= L; ) {
    if (R.x >= M && R.x <= A && R.y >= E && R.y <= T && R !== a && R !== c && Kf(f, g, p, _, h, x, R.x, R.y) && si(R.prev, R, R.next) >= 0 || (R = R.prevZ, U.x >= M && U.x <= A && U.y >= E && U.y <= T && U !== a && U !== c && Kf(f, g, p, _, h, x, U.x, U.y) && si(U.prev, U, U.next) >= 0))
      return !1;
    U = U.nextZ;
  }
  for (; R && R.z >= b; ) {
    if (R.x >= M && R.x <= A && R.y >= E && R.y <= T && R !== a && R !== c && Kf(f, g, p, _, h, x, R.x, R.y) && si(R.prev, R, R.next) >= 0)
      return !1;
    R = R.prevZ;
  }
  for (; U && U.z <= L; ) {
    if (U.x >= M && U.x <= A && U.y >= E && U.y <= T && U !== a && U !== c && Kf(f, g, p, _, h, x, U.x, U.y) && si(U.prev, U, U.next) >= 0)
      return !1;
    U = U.nextZ;
  }
  return !0;
}
function Zz(u, e, t) {
  let n = u;
  do {
    const a = n.prev, s = n.next.next;
    !Yg(a, s) && jT(a, n, n.next, s) && vp(a, s) && vp(s, a) && (e.push(a.i / t | 0), e.push(n.i / t | 0), e.push(s.i / t | 0), gp(n), gp(n.next), n = u = s), n = n.next;
  } while (n !== u);
  return lc(n);
}
function Jz(u, e, t, n, a, s) {
  let c = u;
  do {
    let f = c.next.next;
    for (; f !== c.prev; ) {
      if (c.i !== f.i && aO(c, f)) {
        let p = YT(c, f);
        c = lc(c, c.next), p = lc(p, p.next), mp(c, e, t, n, a, s, 0), mp(p, e, t, n, a, s, 0);
        return;
      }
      f = f.next;
    }
    c = c.next;
  } while (c !== u);
}
function Qz(u, e, t, n) {
  const a = [];
  let s, c, f, p, h;
  for (s = 0, c = e.length; s < c; s++)
    f = e[s] * n, p = s < c - 1 ? e[s + 1] * n : u.length, h = XT(u, f, p, n, !1), h === h.next && (h.steiner = !0), a.push(rO(h));
  for (a.sort(Kz), s = 0; s < a.length; s++)
    t = $z(a[s], t);
  return t;
}
function Kz(u, e) {
  return u.x - e.x;
}
function $z(u, e) {
  const t = eO(u, e);
  if (!t)
    return e;
  const n = YT(t, u);
  return lc(n, n.next), lc(t, t.next);
}
function eO(u, e) {
  let t = e, n = -1 / 0, a;
  const s = u.x, c = u.y;
  do {
    if (c <= t.y && c >= t.next.y && t.next.y !== t.y) {
      const x = t.x + (c - t.y) * (t.next.x - t.x) / (t.next.y - t.y);
      if (x <= s && x > n && (n = x, a = t.x < t.next.x ? t : t.next, x === s))
        return a;
    }
    t = t.next;
  } while (t !== e);
  if (!a)
    return null;
  const f = a, p = a.x, h = a.y;
  let g = 1 / 0, _;
  t = a;
  do
    s >= t.x && t.x >= p && s !== t.x && Kf(c < h ? s : n, c, p, h, c < h ? n : s, c, t.x, t.y) && (_ = Math.abs(c - t.y) / (s - t.x), vp(t, u) && (_ < g || _ === g && (t.x > a.x || t.x === a.x && tO(a, t))) && (a = t, g = _)), t = t.next;
  while (t !== f);
  return a;
}
function tO(u, e) {
  return si(u.prev, u, e.prev) < 0 && si(e.next, u, u.next) < 0;
}
function nO(u, e, t, n) {
  let a = u;
  do
    a.z === 0 && (a.z = Ox(a.x, a.y, e, t, n)), a.prevZ = a.prev, a.nextZ = a.next, a = a.next;
  while (a !== u);
  a.prevZ.nextZ = null, a.prevZ = null, iO(a);
}
function iO(u) {
  let e, t, n, a, s, c, f, p, h = 1;
  do {
    for (t = u, u = null, s = null, c = 0; t; ) {
      for (c++, n = t, f = 0, e = 0; e < h && (f++, n = n.nextZ, !!n); e++)
        ;
      for (p = h; f > 0 || p > 0 && n; )
        f !== 0 && (p === 0 || !n || t.z <= n.z) ? (a = t, t = t.nextZ, f--) : (a = n, n = n.nextZ, p--), s ? s.nextZ = a : u = a, a.prevZ = s, s = a;
      t = n;
    }
    s.nextZ = null, h *= 2;
  } while (c > 1);
  return u;
}
function Ox(u, e, t, n, a) {
  return u = (u - t) * a | 0, e = (e - n) * a | 0, u = (u | u << 8) & 16711935, u = (u | u << 4) & 252645135, u = (u | u << 2) & 858993459, u = (u | u << 1) & 1431655765, e = (e | e << 8) & 16711935, e = (e | e << 4) & 252645135, e = (e | e << 2) & 858993459, e = (e | e << 1) & 1431655765, u | e << 1;
}
function rO(u) {
  let e = u, t = u;
  do
    (e.x < t.x || e.x === t.x && e.y < t.y) && (t = e), e = e.next;
  while (e !== u);
  return t;
}
function Kf(u, e, t, n, a, s, c, f) {
  return (a - c) * (e - f) >= (u - c) * (s - f) && (u - c) * (n - f) >= (t - c) * (e - f) && (t - c) * (s - f) >= (a - c) * (n - f);
}
function aO(u, e) {
  return u.next.i !== e.i && u.prev.i !== e.i && !sO(u, e) && // dones't intersect other edges
  (vp(u, e) && vp(e, u) && oO(u, e) && // locally visible
  (si(u.prev, u, e.prev) || si(u, e.prev, e)) || // does not create opposite-facing sectors
  Yg(u, e) && si(u.prev, u, u.next) > 0 && si(e.prev, e, e.next) > 0);
}
function si(u, e, t) {
  return (e.y - u.y) * (t.x - e.x) - (e.x - u.x) * (t.y - e.y);
}
function Yg(u, e) {
  return u.x === e.x && u.y === e.y;
}
function jT(u, e, t, n) {
  const a = lg(si(u, e, t)), s = lg(si(u, e, n)), c = lg(si(t, n, u)), f = lg(si(t, n, e));
  return !!(a !== s && c !== f || a === 0 && og(u, t, e) || s === 0 && og(u, n, e) || c === 0 && og(t, u, n) || f === 0 && og(t, e, n));
}
function og(u, e, t) {
  return e.x <= Math.max(u.x, t.x) && e.x >= Math.min(u.x, t.x) && e.y <= Math.max(u.y, t.y) && e.y >= Math.min(u.y, t.y);
}
function lg(u) {
  return u > 0 ? 1 : u < 0 ? -1 : 0;
}
function sO(u, e) {
  let t = u;
  do {
    if (t.i !== u.i && t.next.i !== u.i && t.i !== e.i && t.next.i !== e.i && jT(t, t.next, u, e))
      return !0;
    t = t.next;
  } while (t !== u);
  return !1;
}
function vp(u, e) {
  return si(u.prev, u, u.next) < 0 ? si(u, e, u.next) >= 0 && si(u, u.prev, e) >= 0 : si(u, e, u.prev) < 0 || si(u, u.next, e) < 0;
}
function oO(u, e) {
  let t = u, n = !1;
  const a = (u.x + e.x) / 2, s = (u.y + e.y) / 2;
  do
    t.y > s != t.next.y > s && t.next.y !== t.y && a < (t.next.x - t.x) * (s - t.y) / (t.next.y - t.y) + t.x && (n = !n), t = t.next;
  while (t !== u);
  return n;
}
function YT(u, e) {
  const t = new Ix(u.i, u.x, u.y), n = new Ix(e.i, e.x, e.y), a = u.next, s = e.prev;
  return u.next = e, e.prev = u, t.next = a, a.prev = t, n.next = t, t.prev = n, s.next = n, n.prev = s, n;
}
function CE(u, e, t, n) {
  const a = new Ix(u, e, t);
  return n ? (a.next = n.next, a.prev = n, n.next.prev = a, n.next = a) : (a.prev = a, a.next = a), a;
}
function gp(u) {
  u.next.prev = u.prev, u.prev.next = u.next, u.prevZ && (u.prevZ.nextZ = u.nextZ), u.nextZ && (u.nextZ.prevZ = u.prevZ);
}
function Ix(u, e, t) {
  this.i = u, this.x = e, this.y = t, this.prev = null, this.next = null, this.z = 0, this.prevZ = null, this.nextZ = null, this.steiner = !1;
}
function lO(u, e, t, n) {
  let a = 0;
  for (let s = e, c = t - n; s < t; s += n)
    a += (u[c] - u[s]) * (u[s + 1] + u[c + 1]), c = s;
  return a;
}
class ks {
  // calculate area of the contour polygon
  static area(e) {
    const t = e.length;
    let n = 0;
    for (let a = t - 1, s = 0; s < t; a = s++)
      n += e[a].x * e[s].y - e[s].x * e[a].y;
    return n * 0.5;
  }
  static isClockWise(e) {
    return ks.area(e) < 0;
  }
  static triangulateShape(e, t) {
    const n = [], a = [], s = [];
    AE(e), RE(n, e);
    let c = e.length;
    t.forEach(AE);
    for (let p = 0; p < t.length; p++)
      a.push(c), c += t[p].length, RE(n, t[p]);
    const f = Xz.triangulate(n, a);
    for (let p = 0; p < f.length; p += 3)
      s.push(f.slice(p, p + 3));
    return s;
  }
}
function AE(u) {
  const e = u.length;
  e > 2 && u[e - 1].equals(u[0]) && u.pop();
}
function RE(u, e) {
  for (let t = 0; t < e.length; t++)
    u.push(e[t].x), u.push(e[t].y);
}
class Up extends an {
  constructor(e = new rc([new Ge(0.5, 0.5), new Ge(-0.5, 0.5), new Ge(-0.5, -0.5), new Ge(0.5, -0.5)]), t = {}) {
    super(), this.type = "ExtrudeGeometry", this.parameters = {
      shapes: e,
      options: t
    }, e = Array.isArray(e) ? e : [e];
    const n = this, a = [], s = [];
    for (let f = 0, p = e.length; f < p; f++) {
      const h = e[f];
      c(h);
    }
    this.setAttribute("position", new Rt(a, 3)), this.setAttribute("uv", new Rt(s, 2)), this.computeVertexNormals();
    function c(f) {
      const p = [], h = t.curveSegments !== void 0 ? t.curveSegments : 12, g = t.steps !== void 0 ? t.steps : 1, _ = t.depth !== void 0 ? t.depth : 1;
      let x = t.bevelEnabled !== void 0 ? t.bevelEnabled : !0, M = t.bevelThickness !== void 0 ? t.bevelThickness : 0.2, E = t.bevelSize !== void 0 ? t.bevelSize : M - 0.1, A = t.bevelOffset !== void 0 ? t.bevelOffset : 0, T = t.bevelSegments !== void 0 ? t.bevelSegments : 3;
      const b = t.extrudePath, L = t.UVGenerator !== void 0 ? t.UVGenerator : uO;
      let R, U = !1, F, V, k, G;
      b && (R = b.getSpacedPoints(g), U = !0, x = !1, F = b.computeFrenetFrames(g, !1), V = new j(), k = new j(), G = new j()), x || (T = 0, M = 0, E = 0, A = 0);
      const z = f.extractPoints(h);
      let I = z.shape;
      const Q = z.holes;
      if (!ks.isClockWise(I)) {
        I = I.reverse();
        for (let Ie = 0, Me = Q.length; Ie < Me; Ie++) {
          const Ne = Q[Ie];
          ks.isClockWise(Ne) && (Q[Ie] = Ne.reverse());
        }
      }
      const $ = ks.triangulateShape(I, Q), ie = I;
      for (let Ie = 0, Me = Q.length; Ie < Me; Ie++) {
        const Ne = Q[Ie];
        I = I.concat(Ne);
      }
      function fe(Ie, Me, Ne) {
        return Me || console.error("THREE.ExtrudeGeometry: vec does not exist"), Ie.clone().addScaledVector(Me, Ne);
      }
      const Ee = I.length, Te = $.length;
      function W(Ie, Me, Ne) {
        let nt, Ze, xt;
        const Et = Ie.x - Me.x, mt = Ie.y - Me.y, Nt = Ne.x - Ie.x, Wt = Ne.y - Ie.y, Y = Et * Et + mt * mt, H = Et * Wt - mt * Nt;
        if (Math.abs(H) > Number.EPSILON) {
          const xe = Math.sqrt(Y), Ve = Math.sqrt(Nt * Nt + Wt * Wt), ke = Me.x - mt / xe, Qe = Me.y + Et / xe, Lt = Ne.x - Wt / Ve, ht = Ne.y + Nt / Ve, Ae = ((Lt - ke) * Wt - (ht - Qe) * Nt) / (Et * Wt - mt * Nt);
          nt = ke + Et * Ae - Ie.x, Ze = Qe + mt * Ae - Ie.y;
          const se = nt * nt + Ze * Ze;
          if (se <= 2)
            return new Ge(nt, Ze);
          xt = Math.sqrt(se / 2);
        } else {
          let xe = !1;
          Et > Number.EPSILON ? Nt > Number.EPSILON && (xe = !0) : Et < -Number.EPSILON ? Nt < -Number.EPSILON && (xe = !0) : Math.sign(mt) === Math.sign(Wt) && (xe = !0), xe ? (nt = -mt, Ze = Et, xt = Math.sqrt(Y)) : (nt = Et, Ze = mt, xt = Math.sqrt(Y / 2));
        }
        return new Ge(nt / xt, Ze / xt);
      }
      const ae = [];
      for (let Ie = 0, Me = ie.length, Ne = Me - 1, nt = Ie + 1; Ie < Me; Ie++, Ne++, nt++)
        Ne === Me && (Ne = 0), nt === Me && (nt = 0), ae[Ie] = W(ie[Ie], ie[Ne], ie[nt]);
      const ne = [];
      let Se, ue = ae.concat();
      for (let Ie = 0, Me = Q.length; Ie < Me; Ie++) {
        const Ne = Q[Ie];
        Se = [];
        for (let nt = 0, Ze = Ne.length, xt = Ze - 1, Et = nt + 1; nt < Ze; nt++, xt++, Et++)
          xt === Ze && (xt = 0), Et === Ze && (Et = 0), Se[nt] = W(Ne[nt], Ne[xt], Ne[Et]);
        ne.push(Se), ue = ue.concat(Se);
      }
      for (let Ie = 0; Ie < T; Ie++) {
        const Me = Ie / T, Ne = M * Math.cos(Me * Math.PI / 2), nt = E * Math.sin(Me * Math.PI / 2) + A;
        for (let Ze = 0, xt = ie.length; Ze < xt; Ze++) {
          const Et = fe(ie[Ze], ae[Ze], nt);
          de(Et.x, Et.y, -Ne);
        }
        for (let Ze = 0, xt = Q.length; Ze < xt; Ze++) {
          const Et = Q[Ze];
          Se = ne[Ze];
          for (let mt = 0, Nt = Et.length; mt < Nt; mt++) {
            const Wt = fe(Et[mt], Se[mt], nt);
            de(Wt.x, Wt.y, -Ne);
          }
        }
      }
      const pe = E + A;
      for (let Ie = 0; Ie < Ee; Ie++) {
        const Me = x ? fe(I[Ie], ue[Ie], pe) : I[Ie];
        U ? (k.copy(F.normals[0]).multiplyScalar(Me.x), V.copy(F.binormals[0]).multiplyScalar(Me.y), G.copy(R[0]).add(k).add(V), de(G.x, G.y, G.z)) : de(Me.x, Me.y, 0);
      }
      for (let Ie = 1; Ie <= g; Ie++)
        for (let Me = 0; Me < Ee; Me++) {
          const Ne = x ? fe(I[Me], ue[Me], pe) : I[Me];
          U ? (k.copy(F.normals[Ie]).multiplyScalar(Ne.x), V.copy(F.binormals[Ie]).multiplyScalar(Ne.y), G.copy(R[Ie]).add(k).add(V), de(G.x, G.y, G.z)) : de(Ne.x, Ne.y, _ / g * Ie);
        }
      for (let Ie = T - 1; Ie >= 0; Ie--) {
        const Me = Ie / T, Ne = M * Math.cos(Me * Math.PI / 2), nt = E * Math.sin(Me * Math.PI / 2) + A;
        for (let Ze = 0, xt = ie.length; Ze < xt; Ze++) {
          const Et = fe(ie[Ze], ae[Ze], nt);
          de(Et.x, Et.y, _ + Ne);
        }
        for (let Ze = 0, xt = Q.length; Ze < xt; Ze++) {
          const Et = Q[Ze];
          Se = ne[Ze];
          for (let mt = 0, Nt = Et.length; mt < Nt; mt++) {
            const Wt = fe(Et[mt], Se[mt], nt);
            U ? de(Wt.x, Wt.y + R[g - 1].y, R[g - 1].x + Ne) : de(Wt.x, Wt.y, _ + Ne);
          }
        }
      }
      ye(), je();
      function ye() {
        const Ie = a.length / 3;
        if (x) {
          let Me = 0, Ne = Ee * Me;
          for (let nt = 0; nt < Te; nt++) {
            const Ze = $[nt];
            dt(Ze[2] + Ne, Ze[1] + Ne, Ze[0] + Ne);
          }
          Me = g + T * 2, Ne = Ee * Me;
          for (let nt = 0; nt < Te; nt++) {
            const Ze = $[nt];
            dt(Ze[0] + Ne, Ze[1] + Ne, Ze[2] + Ne);
          }
        } else {
          for (let Me = 0; Me < Te; Me++) {
            const Ne = $[Me];
            dt(Ne[2], Ne[1], Ne[0]);
          }
          for (let Me = 0; Me < Te; Me++) {
            const Ne = $[Me];
            dt(Ne[0] + Ee * g, Ne[1] + Ee * g, Ne[2] + Ee * g);
          }
        }
        n.addGroup(Ie, a.length / 3 - Ie, 0);
      }
      function je() {
        const Ie = a.length / 3;
        let Me = 0;
        Be(ie, Me), Me += ie.length;
        for (let Ne = 0, nt = Q.length; Ne < nt; Ne++) {
          const Ze = Q[Ne];
          Be(Ze, Me), Me += Ze.length;
        }
        n.addGroup(Ie, a.length / 3 - Ie, 1);
      }
      function Be(Ie, Me) {
        let Ne = Ie.length;
        for (; --Ne >= 0; ) {
          const nt = Ne;
          let Ze = Ne - 1;
          Ze < 0 && (Ze = Ie.length - 1);
          for (let xt = 0, Et = g + T * 2; xt < Et; xt++) {
            const mt = Ee * xt, Nt = Ee * (xt + 1), Wt = Me + nt + mt, Y = Me + Ze + mt, H = Me + Ze + Nt, xe = Me + nt + Nt;
            _t(Wt, Y, H, xe);
          }
        }
      }
      function de(Ie, Me, Ne) {
        p.push(Ie), p.push(Me), p.push(Ne);
      }
      function dt(Ie, Me, Ne) {
        qe(Ie), qe(Me), qe(Ne);
        const nt = a.length / 3, Ze = L.generateTopUV(n, a, nt - 3, nt - 2, nt - 1);
        ot(Ze[0]), ot(Ze[1]), ot(Ze[2]);
      }
      function _t(Ie, Me, Ne, nt) {
        qe(Ie), qe(Me), qe(nt), qe(Me), qe(Ne), qe(nt);
        const Ze = a.length / 3, xt = L.generateSideWallUV(n, a, Ze - 6, Ze - 3, Ze - 2, Ze - 1);
        ot(xt[0]), ot(xt[1]), ot(xt[3]), ot(xt[1]), ot(xt[2]), ot(xt[3]);
      }
      function qe(Ie) {
        a.push(p[Ie * 3 + 0]), a.push(p[Ie * 3 + 1]), a.push(p[Ie * 3 + 2]);
      }
      function ot(Ie) {
        s.push(Ie.x), s.push(Ie.y);
      }
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON(), t = this.parameters.shapes, n = this.parameters.options;
    return cO(t, n, e);
  }
  static fromJSON(e, t) {
    const n = [];
    for (let s = 0, c = e.shapes.length; s < c; s++) {
      const f = t[e.shapes[s]];
      n.push(f);
    }
    const a = e.options.extrudePath;
    return a !== void 0 && (e.options.extrudePath = new gS[a.type]().fromJSON(a)), new Up(n, e.options);
  }
}
const uO = {
  generateTopUV: function(u, e, t, n, a) {
    const s = e[t * 3], c = e[t * 3 + 1], f = e[n * 3], p = e[n * 3 + 1], h = e[a * 3], g = e[a * 3 + 1];
    return [
      new Ge(s, c),
      new Ge(f, p),
      new Ge(h, g)
    ];
  },
  generateSideWallUV: function(u, e, t, n, a, s) {
    const c = e[t * 3], f = e[t * 3 + 1], p = e[t * 3 + 2], h = e[n * 3], g = e[n * 3 + 1], _ = e[n * 3 + 2], x = e[a * 3], M = e[a * 3 + 1], E = e[a * 3 + 2], A = e[s * 3], T = e[s * 3 + 1], b = e[s * 3 + 2];
    return Math.abs(f - g) < Math.abs(c - h) ? [
      new Ge(c, 1 - p),
      new Ge(h, 1 - _),
      new Ge(x, 1 - E),
      new Ge(A, 1 - b)
    ] : [
      new Ge(f, 1 - p),
      new Ge(g, 1 - _),
      new Ge(M, 1 - E),
      new Ge(T, 1 - b)
    ];
  }
};
function cO(u, e, t) {
  if (t.shapes = [], Array.isArray(u))
    for (let n = 0, a = u.length; n < a; n++) {
      const s = u[n];
      t.shapes.push(s.uuid);
    }
  else
    t.shapes.push(u.uuid);
  return t.options = Object.assign({}, e), e.extrudePath !== void 0 && (t.options.extrudePath = e.extrudePath.toJSON()), t;
}
class Np extends Oo {
  constructor(e = 1, t = 0) {
    const n = (1 + Math.sqrt(5)) / 2, a = [
      -1,
      n,
      0,
      1,
      n,
      0,
      -1,
      -n,
      0,
      1,
      -n,
      0,
      0,
      -1,
      n,
      0,
      1,
      n,
      0,
      -1,
      -n,
      0,
      1,
      -n,
      n,
      0,
      -1,
      n,
      0,
      1,
      -n,
      0,
      -1,
      -n,
      0,
      1
    ], s = [
      0,
      11,
      5,
      0,
      5,
      1,
      0,
      1,
      7,
      0,
      7,
      10,
      0,
      10,
      11,
      1,
      5,
      9,
      5,
      11,
      4,
      11,
      10,
      2,
      10,
      7,
      6,
      7,
      1,
      8,
      3,
      9,
      4,
      3,
      4,
      2,
      3,
      2,
      6,
      3,
      6,
      8,
      3,
      8,
      9,
      4,
      9,
      5,
      2,
      4,
      11,
      6,
      2,
      10,
      8,
      6,
      7,
      9,
      8,
      1
    ];
    super(a, s, e, t), this.type = "IcosahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new Np(e.radius, e.detail);
  }
}
class cd extends Oo {
  constructor(e = 1, t = 0) {
    const n = [
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1
    ], a = [
      0,
      2,
      4,
      0,
      4,
      3,
      0,
      3,
      5,
      0,
      5,
      2,
      1,
      2,
      5,
      1,
      5,
      3,
      1,
      3,
      4,
      1,
      4,
      2
    ];
    super(n, a, e, t), this.type = "OctahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new cd(e.radius, e.detail);
  }
}
class zp extends an {
  constructor(e = 0.5, t = 1, n = 32, a = 1, s = 0, c = Math.PI * 2) {
    super(), this.type = "RingGeometry", this.parameters = {
      innerRadius: e,
      outerRadius: t,
      thetaSegments: n,
      phiSegments: a,
      thetaStart: s,
      thetaLength: c
    }, n = Math.max(3, n), a = Math.max(1, a);
    const f = [], p = [], h = [], g = [];
    let _ = e;
    const x = (t - e) / a, M = new j(), E = new Ge();
    for (let A = 0; A <= a; A++) {
      for (let T = 0; T <= n; T++) {
        const b = s + T / n * c;
        M.x = _ * Math.cos(b), M.y = _ * Math.sin(b), p.push(M.x, M.y, M.z), h.push(0, 0, 1), E.x = (M.x / t + 1) / 2, E.y = (M.y / t + 1) / 2, g.push(E.x, E.y);
      }
      _ += x;
    }
    for (let A = 0; A < a; A++) {
      const T = A * (n + 1);
      for (let b = 0; b < n; b++) {
        const L = b + T, R = L, U = L + n + 1, F = L + n + 2, V = L + 1;
        f.push(R, U, V), f.push(U, F, V);
      }
    }
    this.setIndex(f), this.setAttribute("position", new Rt(p, 3)), this.setAttribute("normal", new Rt(h, 3)), this.setAttribute("uv", new Rt(g, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new zp(e.innerRadius, e.outerRadius, e.thetaSegments, e.phiSegments, e.thetaStart, e.thetaLength);
  }
}
class Op extends an {
  constructor(e = new rc([new Ge(0, 0.5), new Ge(-0.5, -0.5), new Ge(0.5, -0.5)]), t = 12) {
    super(), this.type = "ShapeGeometry", this.parameters = {
      shapes: e,
      curveSegments: t
    };
    const n = [], a = [], s = [], c = [];
    let f = 0, p = 0;
    if (Array.isArray(e) === !1)
      h(e);
    else
      for (let g = 0; g < e.length; g++)
        h(e[g]), this.addGroup(f, p, g), f += p, p = 0;
    this.setIndex(n), this.setAttribute("position", new Rt(a, 3)), this.setAttribute("normal", new Rt(s, 3)), this.setAttribute("uv", new Rt(c, 2));
    function h(g) {
      const _ = a.length / 3, x = g.extractPoints(t);
      let M = x.shape;
      const E = x.holes;
      ks.isClockWise(M) === !1 && (M = M.reverse());
      for (let T = 0, b = E.length; T < b; T++) {
        const L = E[T];
        ks.isClockWise(L) === !0 && (E[T] = L.reverse());
      }
      const A = ks.triangulateShape(M, E);
      for (let T = 0, b = E.length; T < b; T++) {
        const L = E[T];
        M = M.concat(L);
      }
      for (let T = 0, b = M.length; T < b; T++) {
        const L = M[T];
        a.push(L.x, L.y, 0), s.push(0, 0, 1), c.push(L.x, L.y);
      }
      for (let T = 0, b = A.length; T < b; T++) {
        const L = A[T], R = L[0] + _, U = L[1] + _, F = L[2] + _;
        n.push(R, U, F), p += 3;
      }
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON(), t = this.parameters.shapes;
    return fO(t, e);
  }
  static fromJSON(e, t) {
    const n = [];
    for (let a = 0, s = e.shapes.length; a < s; a++) {
      const c = t[e.shapes[a]];
      n.push(c);
    }
    return new Op(n, e.curveSegments);
  }
}
function fO(u, e) {
  if (e.shapes = [], Array.isArray(u))
    for (let t = 0, n = u.length; t < n; t++) {
      const a = u[t];
      e.shapes.push(a.uuid);
    }
  else
    e.shapes.push(u.uuid);
  return e;
}
class fd extends an {
  constructor(e = 1, t = 32, n = 16, a = 0, s = Math.PI * 2, c = 0, f = Math.PI) {
    super(), this.type = "SphereGeometry", this.parameters = {
      radius: e,
      widthSegments: t,
      heightSegments: n,
      phiStart: a,
      phiLength: s,
      thetaStart: c,
      thetaLength: f
    }, t = Math.max(3, Math.floor(t)), n = Math.max(2, Math.floor(n));
    const p = Math.min(c + f, Math.PI);
    let h = 0;
    const g = [], _ = new j(), x = new j(), M = [], E = [], A = [], T = [];
    for (let b = 0; b <= n; b++) {
      const L = [], R = b / n;
      let U = 0;
      b === 0 && c === 0 ? U = 0.5 / t : b === n && p === Math.PI && (U = -0.5 / t);
      for (let F = 0; F <= t; F++) {
        const V = F / t;
        _.x = -e * Math.cos(a + V * s) * Math.sin(c + R * f), _.y = e * Math.cos(c + R * f), _.z = e * Math.sin(a + V * s) * Math.sin(c + R * f), E.push(_.x, _.y, _.z), x.copy(_).normalize(), A.push(x.x, x.y, x.z), T.push(V + U, 1 - R), L.push(h++);
      }
      g.push(L);
    }
    for (let b = 0; b < n; b++)
      for (let L = 0; L < t; L++) {
        const R = g[b][L + 1], U = g[b][L], F = g[b + 1][L], V = g[b + 1][L + 1];
        (b !== 0 || c > 0) && M.push(R, U, V), (b !== n - 1 || p < Math.PI) && M.push(U, F, V);
      }
    this.setIndex(M), this.setAttribute("position", new Rt(E, 3)), this.setAttribute("normal", new Rt(A, 3)), this.setAttribute("uv", new Rt(T, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new fd(e.radius, e.widthSegments, e.heightSegments, e.phiStart, e.phiLength, e.thetaStart, e.thetaLength);
  }
}
class Ip extends Oo {
  constructor(e = 1, t = 0) {
    const n = [
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      1,
      -1,
      -1
    ], a = [
      2,
      1,
      0,
      0,
      3,
      2,
      1,
      3,
      0,
      2,
      3,
      1
    ];
    super(n, a, e, t), this.type = "TetrahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new Ip(e.radius, e.detail);
  }
}
class Fp extends an {
  constructor(e = 1, t = 0.4, n = 12, a = 48, s = Math.PI * 2) {
    super(), this.type = "TorusGeometry", this.parameters = {
      radius: e,
      tube: t,
      radialSegments: n,
      tubularSegments: a,
      arc: s
    }, n = Math.floor(n), a = Math.floor(a);
    const c = [], f = [], p = [], h = [], g = new j(), _ = new j(), x = new j();
    for (let M = 0; M <= n; M++)
      for (let E = 0; E <= a; E++) {
        const A = E / a * s, T = M / n * Math.PI * 2;
        _.x = (e + t * Math.cos(T)) * Math.cos(A), _.y = (e + t * Math.cos(T)) * Math.sin(A), _.z = t * Math.sin(T), f.push(_.x, _.y, _.z), g.x = e * Math.cos(A), g.y = e * Math.sin(A), x.subVectors(_, g).normalize(), p.push(x.x, x.y, x.z), h.push(E / a), h.push(M / n);
      }
    for (let M = 1; M <= n; M++)
      for (let E = 1; E <= a; E++) {
        const A = (a + 1) * M + E - 1, T = (a + 1) * (M - 1) + E - 1, b = (a + 1) * (M - 1) + E, L = (a + 1) * M + E;
        c.push(A, T, L), c.push(T, b, L);
      }
    this.setIndex(c), this.setAttribute("position", new Rt(f, 3)), this.setAttribute("normal", new Rt(p, 3)), this.setAttribute("uv", new Rt(h, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Fp(e.radius, e.tube, e.radialSegments, e.tubularSegments, e.arc);
  }
}
class Bp extends an {
  constructor(e = 1, t = 0.4, n = 64, a = 8, s = 2, c = 3) {
    super(), this.type = "TorusKnotGeometry", this.parameters = {
      radius: e,
      tube: t,
      tubularSegments: n,
      radialSegments: a,
      p: s,
      q: c
    }, n = Math.floor(n), a = Math.floor(a);
    const f = [], p = [], h = [], g = [], _ = new j(), x = new j(), M = new j(), E = new j(), A = new j(), T = new j(), b = new j();
    for (let R = 0; R <= n; ++R) {
      const U = R / n * s * Math.PI * 2;
      L(U, s, c, e, M), L(U + 0.01, s, c, e, E), T.subVectors(E, M), b.addVectors(E, M), A.crossVectors(T, b), b.crossVectors(A, T), A.normalize(), b.normalize();
      for (let F = 0; F <= a; ++F) {
        const V = F / a * Math.PI * 2, k = -t * Math.cos(V), G = t * Math.sin(V);
        _.x = M.x + (k * b.x + G * A.x), _.y = M.y + (k * b.y + G * A.y), _.z = M.z + (k * b.z + G * A.z), p.push(_.x, _.y, _.z), x.subVectors(_, M).normalize(), h.push(x.x, x.y, x.z), g.push(R / n), g.push(F / a);
      }
    }
    for (let R = 1; R <= n; R++)
      for (let U = 1; U <= a; U++) {
        const F = (a + 1) * (R - 1) + (U - 1), V = (a + 1) * R + (U - 1), k = (a + 1) * R + U, G = (a + 1) * (R - 1) + U;
        f.push(F, V, G), f.push(V, k, G);
      }
    this.setIndex(f), this.setAttribute("position", new Rt(p, 3)), this.setAttribute("normal", new Rt(h, 3)), this.setAttribute("uv", new Rt(g, 2));
    function L(R, U, F, V, k) {
      const G = Math.cos(R), z = Math.sin(R), I = F / U * R, Q = Math.cos(I);
      k.x = V * (2 + Q) * 0.5 * G, k.y = V * (2 + Q) * z * 0.5, k.z = V * Math.sin(I) * 0.5;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Bp(e.radius, e.tube, e.tubularSegments, e.radialSegments, e.p, e.q);
  }
}
class Hp extends an {
  constructor(e = new mS(new j(-1, -1, 0), new j(-1, 1, 0), new j(1, 1, 0)), t = 64, n = 1, a = 8, s = !1) {
    super(), this.type = "TubeGeometry", this.parameters = {
      path: e,
      tubularSegments: t,
      radius: n,
      radialSegments: a,
      closed: s
    };
    const c = e.computeFrenetFrames(t, s);
    this.tangents = c.tangents, this.normals = c.normals, this.binormals = c.binormals;
    const f = new j(), p = new j(), h = new Ge();
    let g = new j();
    const _ = [], x = [], M = [], E = [];
    A(), this.setIndex(E), this.setAttribute("position", new Rt(_, 3)), this.setAttribute("normal", new Rt(x, 3)), this.setAttribute("uv", new Rt(M, 2));
    function A() {
      for (let R = 0; R < t; R++)
        T(R);
      T(s === !1 ? t : 0), L(), b();
    }
    function T(R) {
      g = e.getPointAt(R / t, g);
      const U = c.normals[R], F = c.binormals[R];
      for (let V = 0; V <= a; V++) {
        const k = V / a * Math.PI * 2, G = Math.sin(k), z = -Math.cos(k);
        p.x = z * U.x + G * F.x, p.y = z * U.y + G * F.y, p.z = z * U.z + G * F.z, p.normalize(), x.push(p.x, p.y, p.z), f.x = g.x + n * p.x, f.y = g.y + n * p.y, f.z = g.z + n * p.z, _.push(f.x, f.y, f.z);
      }
    }
    function b() {
      for (let R = 1; R <= t; R++)
        for (let U = 1; U <= a; U++) {
          const F = (a + 1) * (R - 1) + (U - 1), V = (a + 1) * R + (U - 1), k = (a + 1) * R + U, G = (a + 1) * (R - 1) + U;
          E.push(F, V, G), E.push(V, k, G);
        }
    }
    function L() {
      for (let R = 0; R <= t; R++)
        for (let U = 0; U <= a; U++)
          h.x = R / t, h.y = U / a, M.push(h.x, h.y);
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.path = this.parameters.path.toJSON(), e;
  }
  static fromJSON(e) {
    return new Hp(
      new gS[e.path.type]().fromJSON(e.path),
      e.tubularSegments,
      e.radius,
      e.radialSegments,
      e.closed
    );
  }
}
class ZT extends an {
  constructor(e = null) {
    if (super(), this.type = "WireframeGeometry", this.parameters = {
      geometry: e
    }, e !== null) {
      const t = [], n = /* @__PURE__ */ new Set(), a = new j(), s = new j();
      if (e.index !== null) {
        const c = e.attributes.position, f = e.index;
        let p = e.groups;
        p.length === 0 && (p = [{ start: 0, count: f.count, materialIndex: 0 }]);
        for (let h = 0, g = p.length; h < g; ++h) {
          const _ = p[h], x = _.start, M = _.count;
          for (let E = x, A = x + M; E < A; E += 3)
            for (let T = 0; T < 3; T++) {
              const b = f.getX(E + T), L = f.getX(E + (T + 1) % 3);
              a.fromBufferAttribute(c, b), s.fromBufferAttribute(c, L), LE(a, s, n) === !0 && (t.push(a.x, a.y, a.z), t.push(s.x, s.y, s.z));
            }
        }
      } else {
        const c = e.attributes.position;
        for (let f = 0, p = c.count / 3; f < p; f++)
          for (let h = 0; h < 3; h++) {
            const g = 3 * f + h, _ = 3 * f + (h + 1) % 3;
            a.fromBufferAttribute(c, g), s.fromBufferAttribute(c, _), LE(a, s, n) === !0 && (t.push(a.x, a.y, a.z), t.push(s.x, s.y, s.z));
          }
      }
      this.setAttribute("position", new Rt(t, 3));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
}
function LE(u, e, t) {
  const n = `${u.x},${u.y},${u.z}-${e.x},${e.y},${e.z}`, a = `${e.x},${e.y},${e.z}-${u.x},${u.y},${u.z}`;
  return t.has(n) === !0 || t.has(a) === !0 ? !1 : (t.add(n), t.add(a), !0);
}
var DE = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  BoxGeometry: jl,
  CapsuleGeometry: Rp,
  CircleGeometry: Lp,
  ConeGeometry: Dp,
  CylinderGeometry: cc,
  DodecahedronGeometry: Pp,
  EdgesGeometry: qT,
  ExtrudeGeometry: Up,
  IcosahedronGeometry: Np,
  LatheGeometry: ud,
  OctahedronGeometry: cd,
  PlaneGeometry: od,
  PolyhedronGeometry: Oo,
  RingGeometry: zp,
  ShapeGeometry: Op,
  SphereGeometry: fd,
  TetrahedronGeometry: Ip,
  TorusGeometry: Fp,
  TorusKnotGeometry: Bp,
  TubeGeometry: Hp,
  WireframeGeometry: ZT
});
class JT extends nr {
  constructor(e) {
    super(), this.isShadowMaterial = !0, this.type = "ShadowMaterial", this.color = new yt(0), this.transparent = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.fog = e.fog, this;
  }
}
class QT extends Vs {
  constructor(e) {
    super(e), this.isRawShaderMaterial = !0, this.type = "RawShaderMaterial";
  }
}
class yS extends nr {
  constructor(e) {
    super(), this.isMeshStandardMaterial = !0, this.defines = { STANDARD: "" }, this.type = "MeshStandardMaterial", this.color = new yt(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new yt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = ql, this.normalScale = new Ge(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapIntensity = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { STANDARD: "" }, this.color.copy(e.color), this.roughness = e.roughness, this.metalness = e.metalness, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.roughnessMap = e.roughnessMap, this.metalnessMap = e.metalnessMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapIntensity = e.envMapIntensity, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class KT extends yS {
  constructor(e) {
    super(), this.isMeshPhysicalMaterial = !0, this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.type = "MeshPhysicalMaterial", this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new Ge(1, 1), this.clearcoatNormalMap = null, this.ior = 1.5, Object.defineProperty(this, "reflectivity", {
      get: function() {
        return hi(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
      },
      set: function(t) {
        this.ior = (1 + 0.4 * t) / (1 - 0.4 * t);
      }
    }), this.iridescenceMap = null, this.iridescenceIOR = 1.3, this.iridescenceThicknessRange = [100, 400], this.iridescenceThicknessMap = null, this.sheenColor = new yt(0), this.sheenColorMap = null, this.sheenRoughness = 1, this.sheenRoughnessMap = null, this.transmissionMap = null, this.thickness = 0, this.thicknessMap = null, this.attenuationDistance = 1 / 0, this.attenuationColor = new yt(1, 1, 1), this.specularIntensity = 1, this.specularIntensityMap = null, this.specularColor = new yt(1, 1, 1), this.specularColorMap = null, this._sheen = 0, this._clearcoat = 0, this._iridescence = 0, this._transmission = 0, this.setValues(e);
  }
  get sheen() {
    return this._sheen;
  }
  set sheen(e) {
    this._sheen > 0 != e > 0 && this.version++, this._sheen = e;
  }
  get clearcoat() {
    return this._clearcoat;
  }
  set clearcoat(e) {
    this._clearcoat > 0 != e > 0 && this.version++, this._clearcoat = e;
  }
  get iridescence() {
    return this._iridescence;
  }
  set iridescence(e) {
    this._iridescence > 0 != e > 0 && this.version++, this._iridescence = e;
  }
  get transmission() {
    return this._transmission;
  }
  set transmission(e) {
    this._transmission > 0 != e > 0 && this.version++, this._transmission = e;
  }
  copy(e) {
    return super.copy(e), this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.clearcoat = e.clearcoat, this.clearcoatMap = e.clearcoatMap, this.clearcoatRoughness = e.clearcoatRoughness, this.clearcoatRoughnessMap = e.clearcoatRoughnessMap, this.clearcoatNormalMap = e.clearcoatNormalMap, this.clearcoatNormalScale.copy(e.clearcoatNormalScale), this.ior = e.ior, this.iridescence = e.iridescence, this.iridescenceMap = e.iridescenceMap, this.iridescenceIOR = e.iridescenceIOR, this.iridescenceThicknessRange = [...e.iridescenceThicknessRange], this.iridescenceThicknessMap = e.iridescenceThicknessMap, this.sheen = e.sheen, this.sheenColor.copy(e.sheenColor), this.sheenColorMap = e.sheenColorMap, this.sheenRoughness = e.sheenRoughness, this.sheenRoughnessMap = e.sheenRoughnessMap, this.transmission = e.transmission, this.transmissionMap = e.transmissionMap, this.thickness = e.thickness, this.thicknessMap = e.thicknessMap, this.attenuationDistance = e.attenuationDistance, this.attenuationColor.copy(e.attenuationColor), this.specularIntensity = e.specularIntensity, this.specularIntensityMap = e.specularIntensityMap, this.specularColor.copy(e.specularColor), this.specularColorMap = e.specularColorMap, this;
  }
}
class $T extends nr {
  constructor(e) {
    super(), this.isMeshPhongMaterial = !0, this.type = "MeshPhongMaterial", this.color = new yt(16777215), this.specular = new yt(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new yt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = ql, this.normalScale = new Ge(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = bp, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.specular.copy(e.specular), this.shininess = e.shininess, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class eC extends nr {
  constructor(e) {
    super(), this.isMeshToonMaterial = !0, this.defines = { TOON: "" }, this.type = "MeshToonMaterial", this.color = new yt(16777215), this.map = null, this.gradientMap = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new yt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = ql, this.normalScale = new Ge(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.gradientMap = e.gradientMap, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
class tC extends nr {
  constructor(e) {
    super(), this.isMeshNormalMaterial = !0, this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = ql, this.normalScale = new Ge(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.flatShading = !1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.flatShading = e.flatShading, this;
  }
}
class nC extends nr {
  constructor(e) {
    super(), this.isMeshLambertMaterial = !0, this.type = "MeshLambertMaterial", this.color = new yt(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new yt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = ql, this.normalScale = new Ge(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = bp, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class iC extends nr {
  constructor(e) {
    super(), this.isMeshMatcapMaterial = !0, this.defines = { MATCAP: "" }, this.type = "MeshMatcapMaterial", this.color = new yt(16777215), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = ql, this.normalScale = new Ge(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { MATCAP: "" }, this.color.copy(e.color), this.matcap = e.matcap, this.map = e.map, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class rC extends Ar {
  constructor(e) {
    super(), this.isLineDashedMaterial = !0, this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.scale = e.scale, this.dashSize = e.dashSize, this.gapSize = e.gapSize, this;
  }
}
function Va(u, e, t) {
  return _S(u) ? new u.constructor(u.subarray(e, t !== void 0 ? t : u.length)) : u.slice(e, t);
}
function Ku(u, e, t) {
  return !u || // let 'undefined' and 'null' pass
  !t && u.constructor === e ? u : typeof e.BYTES_PER_ELEMENT == "number" ? new e(u) : Array.prototype.slice.call(u);
}
function _S(u) {
  return ArrayBuffer.isView(u) && !(u instanceof DataView);
}
function aC(u) {
  function e(a, s) {
    return u[a] - u[s];
  }
  const t = u.length, n = new Array(t);
  for (let a = 0; a !== t; ++a)
    n[a] = a;
  return n.sort(e), n;
}
function Fx(u, e, t) {
  const n = u.length, a = new u.constructor(n);
  for (let s = 0, c = 0; c !== n; ++s) {
    const f = t[s] * e;
    for (let p = 0; p !== e; ++p)
      a[c++] = u[f + p];
  }
  return a;
}
function xS(u, e, t, n) {
  let a = 1, s = u[0];
  for (; s !== void 0 && s[n] === void 0; )
    s = u[a++];
  if (s === void 0)
    return;
  let c = s[n];
  if (c !== void 0)
    if (Array.isArray(c))
      do
        c = s[n], c !== void 0 && (e.push(s.time), t.push.apply(t, c)), s = u[a++];
      while (s !== void 0);
    else if (c.toArray !== void 0)
      do
        c = s[n], c !== void 0 && (e.push(s.time), c.toArray(t, t.length)), s = u[a++];
      while (s !== void 0);
    else
      do
        c = s[n], c !== void 0 && (e.push(s.time), t.push(c)), s = u[a++];
      while (s !== void 0);
}
function dO(u, e, t, n, a = 30) {
  const s = u.clone();
  s.name = e;
  const c = [];
  for (let p = 0; p < s.tracks.length; ++p) {
    const h = s.tracks[p], g = h.getValueSize(), _ = [], x = [];
    for (let M = 0; M < h.times.length; ++M) {
      const E = h.times[M] * a;
      if (!(E < t || E >= n)) {
        _.push(h.times[M]);
        for (let A = 0; A < g; ++A)
          x.push(h.values[M * g + A]);
      }
    }
    _.length !== 0 && (h.times = Ku(_, h.times.constructor), h.values = Ku(x, h.values.constructor), c.push(h));
  }
  s.tracks = c;
  let f = 1 / 0;
  for (let p = 0; p < s.tracks.length; ++p)
    f > s.tracks[p].times[0] && (f = s.tracks[p].times[0]);
  for (let p = 0; p < s.tracks.length; ++p)
    s.tracks[p].shift(-1 * f);
  return s.resetDuration(), s;
}
function hO(u, e = 0, t = u, n = 30) {
  n <= 0 && (n = 30);
  const a = t.tracks.length, s = e / n;
  for (let c = 0; c < a; ++c) {
    const f = t.tracks[c], p = f.ValueTypeName;
    if (p === "bool" || p === "string")
      continue;
    const h = u.tracks.find(function(b) {
      return b.name === f.name && b.ValueTypeName === p;
    });
    if (h === void 0)
      continue;
    let g = 0;
    const _ = f.getValueSize();
    f.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (g = _ / 3);
    let x = 0;
    const M = h.getValueSize();
    h.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (x = M / 3);
    const E = f.times.length - 1;
    let A;
    if (s <= f.times[0]) {
      const b = g, L = _ - g;
      A = Va(f.values, b, L);
    } else if (s >= f.times[E]) {
      const b = E * _ + g, L = b + _ - g;
      A = Va(f.values, b, L);
    } else {
      const b = f.createInterpolant(), L = g, R = _ - g;
      b.evaluate(s), A = Va(b.resultBuffer, L, R);
    }
    p === "quaternion" && new Qr().fromArray(A).normalize().conjugate().toArray(A);
    const T = h.times.length;
    for (let b = 0; b < T; ++b) {
      const L = b * M + x;
      if (p === "quaternion")
        Qr.multiplyQuaternionsFlat(
          h.values,
          L,
          A,
          0,
          h.values,
          L
        );
      else {
        const R = M - x * 2;
        for (let U = 0; U < R; ++U)
          h.values[L + U] -= A[U];
      }
    }
  }
  return u.blendMode = Jx, u;
}
const pO = {
  arraySlice: Va,
  convertArray: Ku,
  isTypedArray: _S,
  getKeyframeOrder: aC,
  sortedArray: Fx,
  flattenJSON: xS,
  subclip: dO,
  makeClipAdditive: hO
};
class kp {
  constructor(e, t, n, a) {
    this.parameterPositions = e, this._cachedIndex = 0, this.resultBuffer = a !== void 0 ? a : new t.constructor(n), this.sampleValues = t, this.valueSize = n, this.settings = null, this.DefaultSettings_ = {};
  }
  evaluate(e) {
    const t = this.parameterPositions;
    let n = this._cachedIndex, a = t[n], s = t[n - 1];
    e: {
      t: {
        let c;
        n: {
          i:
            if (!(e < a)) {
              for (let f = n + 2; ; ) {
                if (a === void 0) {
                  if (e < s)
                    break i;
                  return n = t.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
                }
                if (n === f)
                  break;
                if (s = a, a = t[++n], e < a)
                  break t;
              }
              c = t.length;
              break n;
            }
          if (!(e >= s)) {
            const f = t[1];
            e < f && (n = 2, s = f);
            for (let p = n - 2; ; ) {
              if (s === void 0)
                return this._cachedIndex = 0, this.copySampleValue_(0);
              if (n === p)
                break;
              if (a = s, s = t[--n - 1], e >= s)
                break t;
            }
            c = n, n = 0;
            break n;
          }
          break e;
        }
        for (; n < c; ) {
          const f = n + c >>> 1;
          e < t[f] ? c = f : n = f + 1;
        }
        if (a = t[n], s = t[n - 1], s === void 0)
          return this._cachedIndex = 0, this.copySampleValue_(0);
        if (a === void 0)
          return n = t.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
      }
      this._cachedIndex = n, this.intervalChanged_(n, s, a);
    }
    return this.interpolate_(n, s, e, a);
  }
  getSettings_() {
    return this.settings || this.DefaultSettings_;
  }
  copySampleValue_(e) {
    const t = this.resultBuffer, n = this.sampleValues, a = this.valueSize, s = e * a;
    for (let c = 0; c !== a; ++c)
      t[c] = n[s + c];
    return t;
  }
  // Template methods for derived classes:
  interpolate_() {
    throw new Error("call to abstract method");
  }
  intervalChanged_() {
  }
}
class sC extends kp {
  constructor(e, t, n, a) {
    super(e, t, n, a), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0, this.DefaultSettings_ = {
      endingStart: Zu,
      endingEnd: Zu
    };
  }
  intervalChanged_(e, t, n) {
    const a = this.parameterPositions;
    let s = e - 2, c = e + 1, f = a[s], p = a[c];
    if (f === void 0)
      switch (this.getSettings_().endingStart) {
        case Ju:
          s = e, f = 2 * t - n;
          break;
        case fp:
          s = a.length - 2, f = t + a[s] - a[s + 1];
          break;
        default:
          s = e, f = n;
      }
    if (p === void 0)
      switch (this.getSettings_().endingEnd) {
        case Ju:
          c = e, p = 2 * n - t;
          break;
        case fp:
          c = 1, p = n + a[1] - a[0];
          break;
        default:
          c = e - 1, p = t;
      }
    const h = (n - t) * 0.5, g = this.valueSize;
    this._weightPrev = h / (t - f), this._weightNext = h / (p - n), this._offsetPrev = s * g, this._offsetNext = c * g;
  }
  interpolate_(e, t, n, a) {
    const s = this.resultBuffer, c = this.sampleValues, f = this.valueSize, p = e * f, h = p - f, g = this._offsetPrev, _ = this._offsetNext, x = this._weightPrev, M = this._weightNext, E = (n - t) / (a - t), A = E * E, T = A * E, b = -x * T + 2 * x * A - x * E, L = (1 + x) * T + (-1.5 - 2 * x) * A + (-0.5 + x) * E + 1, R = (-1 - M) * T + (1.5 + M) * A + 0.5 * E, U = M * T - M * A;
    for (let F = 0; F !== f; ++F)
      s[F] = b * c[g + F] + L * c[h + F] + R * c[p + F] + U * c[_ + F];
    return s;
  }
}
class SS extends kp {
  constructor(e, t, n, a) {
    super(e, t, n, a);
  }
  interpolate_(e, t, n, a) {
    const s = this.resultBuffer, c = this.sampleValues, f = this.valueSize, p = e * f, h = p - f, g = (n - t) / (a - t), _ = 1 - g;
    for (let x = 0; x !== f; ++x)
      s[x] = c[h + x] * _ + c[p + x] * g;
    return s;
  }
}
class oC extends kp {
  constructor(e, t, n, a) {
    super(e, t, n, a);
  }
  interpolate_(e) {
    return this.copySampleValue_(e - 1);
  }
}
class ps {
  constructor(e, t, n, a) {
    if (e === void 0)
      throw new Error("THREE.KeyframeTrack: track name is undefined");
    if (t === void 0 || t.length === 0)
      throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e);
    this.name = e, this.times = Ku(t, this.TimeBufferType), this.values = Ku(n, this.ValueBufferType), this.setInterpolation(a || this.DefaultInterpolation);
  }
  // Serialization (in static context, because of constructor invocation
  // and automatic invocation of .toJSON):
  static toJSON(e) {
    const t = e.constructor;
    let n;
    if (t.toJSON !== this.toJSON)
      n = t.toJSON(e);
    else {
      n = {
        name: e.name,
        times: Ku(e.times, Array),
        values: Ku(e.values, Array)
      };
      const a = e.getInterpolation();
      a !== e.DefaultInterpolation && (n.interpolation = a);
    }
    return n.type = e.ValueTypeName, n;
  }
  InterpolantFactoryMethodDiscrete(e) {
    return new oC(this.times, this.values, this.getValueSize(), e);
  }
  InterpolantFactoryMethodLinear(e) {
    return new SS(this.times, this.values, this.getValueSize(), e);
  }
  InterpolantFactoryMethodSmooth(e) {
    return new sC(this.times, this.values, this.getValueSize(), e);
  }
  setInterpolation(e) {
    let t;
    switch (e) {
      case up:
        t = this.InterpolantFactoryMethodDiscrete;
        break;
      case cp:
        t = this.InterpolantFactoryMethodLinear;
        break;
      case bg:
        t = this.InterpolantFactoryMethodSmooth;
        break;
    }
    if (t === void 0) {
      const n = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (this.createInterpolant === void 0)
        if (e !== this.DefaultInterpolation)
          this.setInterpolation(this.DefaultInterpolation);
        else
          throw new Error(n);
      return console.warn("THREE.KeyframeTrack:", n), this;
    }
    return this.createInterpolant = t, this;
  }
  getInterpolation() {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return up;
      case this.InterpolantFactoryMethodLinear:
        return cp;
      case this.InterpolantFactoryMethodSmooth:
        return bg;
    }
  }
  getValueSize() {
    return this.values.length / this.times.length;
  }
  // move all keyframes either forwards or backwards in time
  shift(e) {
    if (e !== 0) {
      const t = this.times;
      for (let n = 0, a = t.length; n !== a; ++n)
        t[n] += e;
    }
    return this;
  }
  // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
  scale(e) {
    if (e !== 1) {
      const t = this.times;
      for (let n = 0, a = t.length; n !== a; ++n)
        t[n] *= e;
    }
    return this;
  }
  // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
  // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
  trim(e, t) {
    const n = this.times, a = n.length;
    let s = 0, c = a - 1;
    for (; s !== a && n[s] < e; )
      ++s;
    for (; c !== -1 && n[c] > t; )
      --c;
    if (++c, s !== 0 || c !== a) {
      s >= c && (c = Math.max(c, 1), s = c - 1);
      const f = this.getValueSize();
      this.times = Va(n, s, c), this.values = Va(this.values, s * f, c * f);
    }
    return this;
  }
  // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
  validate() {
    let e = !0;
    const t = this.getValueSize();
    t - Math.floor(t) !== 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), e = !1);
    const n = this.times, a = this.values, s = n.length;
    s === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), e = !1);
    let c = null;
    for (let f = 0; f !== s; f++) {
      const p = n[f];
      if (typeof p == "number" && isNaN(p)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, f, p), e = !1;
        break;
      }
      if (c !== null && c > p) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, f, p, c), e = !1;
        break;
      }
      c = p;
    }
    if (a !== void 0 && _S(a))
      for (let f = 0, p = a.length; f !== p; ++f) {
        const h = a[f];
        if (isNaN(h)) {
          console.error("THREE.KeyframeTrack: Value is not a valid number.", this, f, h), e = !1;
          break;
        }
      }
    return e;
  }
  // removes equivalent sequential keys as common in morph target sequences
  // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
  optimize() {
    const e = Va(this.times), t = Va(this.values), n = this.getValueSize(), a = this.getInterpolation() === bg, s = e.length - 1;
    let c = 1;
    for (let f = 1; f < s; ++f) {
      let p = !1;
      const h = e[f], g = e[f + 1];
      if (h !== g && (f !== 1 || h !== e[0]))
        if (a)
          p = !0;
        else {
          const _ = f * n, x = _ - n, M = _ + n;
          for (let E = 0; E !== n; ++E) {
            const A = t[_ + E];
            if (A !== t[x + E] || A !== t[M + E]) {
              p = !0;
              break;
            }
          }
        }
      if (p) {
        if (f !== c) {
          e[c] = e[f];
          const _ = f * n, x = c * n;
          for (let M = 0; M !== n; ++M)
            t[x + M] = t[_ + M];
        }
        ++c;
      }
    }
    if (s > 0) {
      e[c] = e[s];
      for (let f = s * n, p = c * n, h = 0; h !== n; ++h)
        t[p + h] = t[f + h];
      ++c;
    }
    return c !== e.length ? (this.times = Va(e, 0, c), this.values = Va(t, 0, c * n)) : (this.times = e, this.values = t), this;
  }
  clone() {
    const e = Va(this.times, 0), t = Va(this.values, 0), n = this.constructor, a = new n(this.name, e, t);
    return a.createInterpolant = this.createInterpolant, a;
  }
}
ps.prototype.TimeBufferType = Float32Array;
ps.prototype.ValueBufferType = Float32Array;
ps.prototype.DefaultInterpolation = cp;
class fc extends ps {
}
fc.prototype.ValueTypeName = "bool";
fc.prototype.ValueBufferType = Array;
fc.prototype.DefaultInterpolation = up;
fc.prototype.InterpolantFactoryMethodLinear = void 0;
fc.prototype.InterpolantFactoryMethodSmooth = void 0;
class MS extends ps {
}
MS.prototype.ValueTypeName = "color";
class yp extends ps {
}
yp.prototype.ValueTypeName = "number";
class lC extends kp {
  constructor(e, t, n, a) {
    super(e, t, n, a);
  }
  interpolate_(e, t, n, a) {
    const s = this.resultBuffer, c = this.sampleValues, f = this.valueSize, p = (n - t) / (a - t);
    let h = e * f;
    for (let g = h + f; h !== g; h += 4)
      Qr.slerpFlat(s, 0, c, h - f, c, h, p);
    return s;
  }
}
class dd extends ps {
  InterpolantFactoryMethodLinear(e) {
    return new lC(this.times, this.values, this.getValueSize(), e);
  }
}
dd.prototype.ValueTypeName = "quaternion";
dd.prototype.DefaultInterpolation = cp;
dd.prototype.InterpolantFactoryMethodSmooth = void 0;
class dc extends ps {
}
dc.prototype.ValueTypeName = "string";
dc.prototype.ValueBufferType = Array;
dc.prototype.DefaultInterpolation = up;
dc.prototype.InterpolantFactoryMethodLinear = void 0;
dc.prototype.InterpolantFactoryMethodSmooth = void 0;
class _p extends ps {
}
_p.prototype.ValueTypeName = "vector";
class xp {
  constructor(e, t = -1, n, a = Fg) {
    this.name = e, this.tracks = n, this.duration = t, this.blendMode = a, this.uuid = va(), this.duration < 0 && this.resetDuration();
  }
  static parse(e) {
    const t = [], n = e.tracks, a = 1 / (e.fps || 1);
    for (let c = 0, f = n.length; c !== f; ++c)
      t.push(vO(n[c]).scale(a));
    const s = new this(e.name, e.duration, t, e.blendMode);
    return s.uuid = e.uuid, s;
  }
  static toJSON(e) {
    const t = [], n = e.tracks, a = {
      name: e.name,
      duration: e.duration,
      tracks: t,
      uuid: e.uuid,
      blendMode: e.blendMode
    };
    for (let s = 0, c = n.length; s !== c; ++s)
      t.push(ps.toJSON(n[s]));
    return a;
  }
  static CreateFromMorphTargetSequence(e, t, n, a) {
    const s = t.length, c = [];
    for (let f = 0; f < s; f++) {
      let p = [], h = [];
      p.push(
        (f + s - 1) % s,
        f,
        (f + 1) % s
      ), h.push(0, 1, 0);
      const g = aC(p);
      p = Fx(p, 1, g), h = Fx(h, 1, g), !a && p[0] === 0 && (p.push(s), h.push(h[0])), c.push(
        new yp(
          ".morphTargetInfluences[" + t[f].name + "]",
          p,
          h
        ).scale(1 / n)
      );
    }
    return new this(e, -1, c);
  }
  static findByName(e, t) {
    let n = e;
    if (!Array.isArray(e)) {
      const a = e;
      n = a.geometry && a.geometry.animations || a.animations;
    }
    for (let a = 0; a < n.length; a++)
      if (n[a].name === t)
        return n[a];
    return null;
  }
  static CreateClipsFromMorphTargetSequences(e, t, n) {
    const a = {}, s = /^([\w-]*?)([\d]+)$/;
    for (let f = 0, p = e.length; f < p; f++) {
      const h = e[f], g = h.name.match(s);
      if (g && g.length > 1) {
        const _ = g[1];
        let x = a[_];
        x || (a[_] = x = []), x.push(h);
      }
    }
    const c = [];
    for (const f in a)
      c.push(this.CreateFromMorphTargetSequence(f, a[f], t, n));
    return c;
  }
  // parse the animation.hierarchy format
  static parseAnimation(e, t) {
    if (!e)
      return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
    const n = function(_, x, M, E, A) {
      if (M.length !== 0) {
        const T = [], b = [];
        xS(M, T, b, E), T.length !== 0 && A.push(new _(x, T, b));
      }
    }, a = [], s = e.name || "default", c = e.fps || 30, f = e.blendMode;
    let p = e.length || -1;
    const h = e.hierarchy || [];
    for (let _ = 0; _ < h.length; _++) {
      const x = h[_].keys;
      if (!(!x || x.length === 0))
        if (x[0].morphTargets) {
          const M = {};
          let E;
          for (E = 0; E < x.length; E++)
            if (x[E].morphTargets)
              for (let A = 0; A < x[E].morphTargets.length; A++)
                M[x[E].morphTargets[A]] = -1;
          for (const A in M) {
            const T = [], b = [];
            for (let L = 0; L !== x[E].morphTargets.length; ++L) {
              const R = x[E];
              T.push(R.time), b.push(R.morphTarget === A ? 1 : 0);
            }
            a.push(new yp(".morphTargetInfluence[" + A + "]", T, b));
          }
          p = M.length * c;
        } else {
          const M = ".bones[" + t[_].name + "]";
          n(
            _p,
            M + ".position",
            x,
            "pos",
            a
          ), n(
            dd,
            M + ".quaternion",
            x,
            "rot",
            a
          ), n(
            _p,
            M + ".scale",
            x,
            "scl",
            a
          );
        }
    }
    return a.length === 0 ? null : new this(s, p, a, f);
  }
  resetDuration() {
    const e = this.tracks;
    let t = 0;
    for (let n = 0, a = e.length; n !== a; ++n) {
      const s = this.tracks[n];
      t = Math.max(t, s.times[s.times.length - 1]);
    }
    return this.duration = t, this;
  }
  trim() {
    for (let e = 0; e < this.tracks.length; e++)
      this.tracks[e].trim(0, this.duration);
    return this;
  }
  validate() {
    let e = !0;
    for (let t = 0; t < this.tracks.length; t++)
      e = e && this.tracks[t].validate();
    return e;
  }
  optimize() {
    for (let e = 0; e < this.tracks.length; e++)
      this.tracks[e].optimize();
    return this;
  }
  clone() {
    const e = [];
    for (let t = 0; t < this.tracks.length; t++)
      e.push(this.tracks[t].clone());
    return new this.constructor(this.name, this.duration, e, this.blendMode);
  }
  toJSON() {
    return this.constructor.toJSON(this);
  }
}
function mO(u) {
  switch (u.toLowerCase()) {
    case "scalar":
    case "double":
    case "float":
    case "number":
    case "integer":
      return yp;
    case "vector":
    case "vector2":
    case "vector3":
    case "vector4":
      return _p;
    case "color":
      return MS;
    case "quaternion":
      return dd;
    case "bool":
    case "boolean":
      return fc;
    case "string":
      return dc;
  }
  throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + u);
}
function vO(u) {
  if (u.type === void 0)
    throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
  const e = mO(u.type);
  if (u.times === void 0) {
    const t = [], n = [];
    xS(u.keys, t, n, "value"), u.times = t, u.values = n;
  }
  return e.parse !== void 0 ? e.parse(u) : new e(u.name, u.times, u.values, u.interpolation);
}
const uc = {
  enabled: !1,
  files: {},
  add: function(u, e) {
    this.enabled !== !1 && (this.files[u] = e);
  },
  get: function(u) {
    if (this.enabled !== !1)
      return this.files[u];
  },
  remove: function(u) {
    delete this.files[u];
  },
  clear: function() {
    this.files = {};
  }
};
class bS {
  constructor(e, t, n) {
    const a = this;
    let s = !1, c = 0, f = 0, p;
    const h = [];
    this.onStart = void 0, this.onLoad = e, this.onProgress = t, this.onError = n, this.itemStart = function(g) {
      f++, s === !1 && a.onStart !== void 0 && a.onStart(g, c, f), s = !0;
    }, this.itemEnd = function(g) {
      c++, a.onProgress !== void 0 && a.onProgress(g, c, f), c === f && (s = !1, a.onLoad !== void 0 && a.onLoad());
    }, this.itemError = function(g) {
      a.onError !== void 0 && a.onError(g);
    }, this.resolveURL = function(g) {
      return p ? p(g) : g;
    }, this.setURLModifier = function(g) {
      return p = g, this;
    }, this.addHandler = function(g, _) {
      return h.push(g, _), this;
    }, this.removeHandler = function(g) {
      const _ = h.indexOf(g);
      return _ !== -1 && h.splice(_, 2), this;
    }, this.getHandler = function(g) {
      for (let _ = 0, x = h.length; _ < x; _ += 2) {
        const M = h[_], E = h[_ + 1];
        if (M.global && (M.lastIndex = 0), M.test(g))
          return E;
      }
      return null;
    };
  }
}
const uC = /* @__PURE__ */ new bS();
class ga {
  constructor(e) {
    this.manager = e !== void 0 ? e : uC, this.crossOrigin = "anonymous", this.withCredentials = !1, this.path = "", this.resourcePath = "", this.requestHeader = {};
  }
  load() {
  }
  loadAsync(e, t) {
    const n = this;
    return new Promise(function(a, s) {
      n.load(e, a, t, s);
    });
  }
  parse() {
  }
  setCrossOrigin(e) {
    return this.crossOrigin = e, this;
  }
  setWithCredentials(e) {
    return this.withCredentials = e, this;
  }
  setPath(e) {
    return this.path = e, this;
  }
  setResourcePath(e) {
    return this.resourcePath = e, this;
  }
  setRequestHeader(e) {
    return this.requestHeader = e, this;
  }
}
const Ao = {};
class gO extends Error {
  constructor(e, t) {
    super(e), this.response = t;
  }
}
class No extends ga {
  constructor(e) {
    super(e);
  }
  load(e, t, n, a) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const s = uc.get(e);
    if (s !== void 0)
      return this.manager.itemStart(e), setTimeout(() => {
        t && t(s), this.manager.itemEnd(e);
      }, 0), s;
    if (Ao[e] !== void 0) {
      Ao[e].push({
        onLoad: t,
        onProgress: n,
        onError: a
      });
      return;
    }
    Ao[e] = [], Ao[e].push({
      onLoad: t,
      onProgress: n,
      onError: a
    });
    const c = new Request(e, {
      headers: new Headers(this.requestHeader),
      credentials: this.withCredentials ? "include" : "same-origin"
      // An abort controller could be added within a future PR
    }), f = this.mimeType, p = this.responseType;
    fetch(c).then((h) => {
      if (h.status === 200 || h.status === 0) {
        if (h.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), typeof ReadableStream > "u" || h.body === void 0 || h.body.getReader === void 0)
          return h;
        const g = Ao[e], _ = h.body.getReader(), x = h.headers.get("Content-Length") || h.headers.get("X-File-Size"), M = x ? parseInt(x) : 0, E = M !== 0;
        let A = 0;
        const T = new ReadableStream({
          start(b) {
            L();
            function L() {
              _.read().then(({ done: R, value: U }) => {
                if (R)
                  b.close();
                else {
                  A += U.byteLength;
                  const F = new ProgressEvent("progress", { lengthComputable: E, loaded: A, total: M });
                  for (let V = 0, k = g.length; V < k; V++) {
                    const G = g[V];
                    G.onProgress && G.onProgress(F);
                  }
                  b.enqueue(U), L();
                }
              });
            }
          }
        });
        return new Response(T);
      } else
        throw new gO(`fetch for "${h.url}" responded with ${h.status}: ${h.statusText}`, h);
    }).then((h) => {
      switch (p) {
        case "arraybuffer":
          return h.arrayBuffer();
        case "blob":
          return h.blob();
        case "document":
          return h.text().then((g) => new DOMParser().parseFromString(g, f));
        case "json":
          return h.json();
        default:
          if (f === void 0)
            return h.text();
          {
            const _ = /charset="?([^;"\s]*)"?/i.exec(f), x = _ && _[1] ? _[1].toLowerCase() : void 0, M = new TextDecoder(x);
            return h.arrayBuffer().then((E) => M.decode(E));
          }
      }
    }).then((h) => {
      uc.add(e, h);
      const g = Ao[e];
      delete Ao[e];
      for (let _ = 0, x = g.length; _ < x; _++) {
        const M = g[_];
        M.onLoad && M.onLoad(h);
      }
    }).catch((h) => {
      const g = Ao[e];
      if (g === void 0)
        throw this.manager.itemError(e), h;
      delete Ao[e];
      for (let _ = 0, x = g.length; _ < x; _++) {
        const M = g[_];
        M.onError && M.onError(h);
      }
      this.manager.itemError(e);
    }).finally(() => {
      this.manager.itemEnd(e);
    }), this.manager.itemStart(e);
  }
  setResponseType(e) {
    return this.responseType = e, this;
  }
  setMimeType(e) {
    return this.mimeType = e, this;
  }
}
class yO extends ga {
  constructor(e) {
    super(e);
  }
  load(e, t, n, a) {
    const s = this, c = new No(this.manager);
    c.setPath(this.path), c.setRequestHeader(this.requestHeader), c.setWithCredentials(this.withCredentials), c.load(e, function(f) {
      try {
        t(s.parse(JSON.parse(f)));
      } catch (p) {
        a ? a(p) : console.error(p), s.manager.itemError(e);
      }
    }, n, a);
  }
  parse(e) {
    const t = [];
    for (let n = 0; n < e.length; n++) {
      const a = xp.parse(e[n]);
      t.push(a);
    }
    return t;
  }
}
class _O extends ga {
  constructor(e) {
    super(e);
  }
  load(e, t, n, a) {
    const s = this, c = [], f = new fS(), p = new No(this.manager);
    p.setPath(this.path), p.setResponseType("arraybuffer"), p.setRequestHeader(this.requestHeader), p.setWithCredentials(s.withCredentials);
    let h = 0;
    function g(_) {
      p.load(e[_], function(x) {
        const M = s.parse(x, !0);
        c[_] = {
          width: M.width,
          height: M.height,
          format: M.format,
          mipmaps: M.mipmaps
        }, h += 1, h === 6 && (M.mipmapCount === 1 && (f.minFilter = ai), f.image = c, f.format = M.format, f.needsUpdate = !0, t && t(f));
      }, n, a);
    }
    if (Array.isArray(e))
      for (let _ = 0, x = e.length; _ < x; ++_)
        g(_);
    else
      p.load(e, function(_) {
        const x = s.parse(_, !0);
        if (x.isCubemap) {
          const M = x.mipmaps.length / x.mipmapCount;
          for (let E = 0; E < M; E++) {
            c[E] = { mipmaps: [] };
            for (let A = 0; A < x.mipmapCount; A++)
              c[E].mipmaps.push(x.mipmaps[E * x.mipmapCount + A]), c[E].format = x.format, c[E].width = x.width, c[E].height = x.height;
          }
          f.image = c;
        } else
          f.image.width = x.width, f.image.height = x.height, f.mipmaps = x.mipmaps;
        x.mipmapCount === 1 && (f.minFilter = ai), f.format = x.format, f.needsUpdate = !0, t && t(f);
      }, n, a);
    return f;
  }
}
class Sp extends ga {
  constructor(e) {
    super(e);
  }
  load(e, t, n, a) {
    this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const s = this, c = uc.get(e);
    if (c !== void 0)
      return s.manager.itemStart(e), setTimeout(function() {
        t && t(c), s.manager.itemEnd(e);
      }, 0), c;
    const f = hp("img");
    function p() {
      g(), uc.add(e, this), t && t(this), s.manager.itemEnd(e);
    }
    function h(_) {
      g(), a && a(_), s.manager.itemError(e), s.manager.itemEnd(e);
    }
    function g() {
      f.removeEventListener("load", p, !1), f.removeEventListener("error", h, !1);
    }
    return f.addEventListener("load", p, !1), f.addEventListener("error", h, !1), e.slice(0, 5) !== "data:" && this.crossOrigin !== void 0 && (f.crossOrigin = this.crossOrigin), s.manager.itemStart(e), f.src = e, f;
  }
}
class xO extends ga {
  constructor(e) {
    super(e);
  }
  load(e, t, n, a) {
    const s = new Cp(), c = new Sp(this.manager);
    c.setCrossOrigin(this.crossOrigin), c.setPath(this.path);
    let f = 0;
    function p(h) {
      c.load(e[h], function(g) {
        s.images[h] = g, f++, f === 6 && (s.needsUpdate = !0, t && t(s));
      }, void 0, a);
    }
    for (let h = 0; h < e.length; ++h)
      p(h);
    return s;
  }
}
class SO extends ga {
  constructor(e) {
    super(e);
  }
  load(e, t, n, a) {
    const s = this, c = new ed(), f = new No(this.manager);
    return f.setResponseType("arraybuffer"), f.setRequestHeader(this.requestHeader), f.setPath(this.path), f.setWithCredentials(s.withCredentials), f.load(e, function(p) {
      const h = s.parse(p);
      h && (h.image !== void 0 ? c.image = h.image : h.data !== void 0 && (c.image.width = h.width, c.image.height = h.height, c.image.data = h.data), c.wrapS = h.wrapS !== void 0 ? h.wrapS : mr, c.wrapT = h.wrapT !== void 0 ? h.wrapT : mr, c.magFilter = h.magFilter !== void 0 ? h.magFilter : ai, c.minFilter = h.minFilter !== void 0 ? h.minFilter : ai, c.anisotropy = h.anisotropy !== void 0 ? h.anisotropy : 1, h.encoding !== void 0 && (c.encoding = h.encoding), h.flipY !== void 0 && (c.flipY = h.flipY), h.format !== void 0 && (c.format = h.format), h.type !== void 0 && (c.type = h.type), h.mipmaps !== void 0 && (c.mipmaps = h.mipmaps, c.minFilter = Gl), h.mipmapCount === 1 && (c.minFilter = ai), h.generateMipmaps !== void 0 && (c.generateMipmaps = h.generateMipmaps), c.needsUpdate = !0, t && t(c, h));
    }, n, a), c;
  }
}
class MO extends ga {
  constructor(e) {
    super(e);
  }
  load(e, t, n, a) {
    const s = new pi(), c = new Sp(this.manager);
    return c.setCrossOrigin(this.crossOrigin), c.setPath(this.path), c.load(e, function(f) {
      s.image = f, s.needsUpdate = !0, t !== void 0 && t(s);
    }, n, a), s;
  }
}
class Yl extends Mn {
  constructor(e, t = 1) {
    super(), this.isLight = !0, this.type = "Light", this.color = new yt(e), this.intensity = t;
  }
  dispose() {
  }
  copy(e, t) {
    return super.copy(e, t), this.color.copy(e.color), this.intensity = e.intensity, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.color = this.color.getHex(), t.object.intensity = this.intensity, this.groundColor !== void 0 && (t.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (t.object.distance = this.distance), this.angle !== void 0 && (t.object.angle = this.angle), this.decay !== void 0 && (t.object.decay = this.decay), this.penumbra !== void 0 && (t.object.penumbra = this.penumbra), this.shadow !== void 0 && (t.object.shadow = this.shadow.toJSON()), t;
  }
}
class cC extends Yl {
  constructor(e, t, n) {
    super(e, n), this.isHemisphereLight = !0, this.type = "HemisphereLight", this.position.copy(Mn.DEFAULT_UP), this.updateMatrix(), this.groundColor = new yt(t);
  }
  copy(e, t) {
    return super.copy(e, t), this.groundColor.copy(e.groundColor), this;
  }
}
const B_ = /* @__PURE__ */ new Qt(), PE = /* @__PURE__ */ new j(), UE = /* @__PURE__ */ new j();
class ES {
  constructor(e) {
    this.camera = e, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new Ge(512, 512), this.map = null, this.mapPass = null, this.matrix = new Qt(), this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new Hg(), this._frameExtents = new Ge(1, 1), this._viewportCount = 1, this._viewports = [
      new Un(0, 0, 1, 1)
    ];
  }
  getViewportCount() {
    return this._viewportCount;
  }
  getFrustum() {
    return this._frustum;
  }
  updateMatrices(e) {
    const t = this.camera, n = this.matrix;
    PE.setFromMatrixPosition(e.matrixWorld), t.position.copy(PE), UE.setFromMatrixPosition(e.target.matrixWorld), t.lookAt(UE), t.updateMatrixWorld(), B_.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse), this._frustum.setFromProjectionMatrix(B_), n.set(
      0.5,
      0,
      0,
      0.5,
      0,
      0.5,
      0,
      0.5,
      0,
      0,
      0.5,
      0.5,
      0,
      0,
      0,
      1
    ), n.multiply(B_);
  }
  getViewport(e) {
    return this._viewports[e];
  }
  getFrameExtents() {
    return this._frameExtents;
  }
  dispose() {
    this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
  }
  copy(e) {
    return this.camera = e.camera.clone(), this.bias = e.bias, this.radius = e.radius, this.mapSize.copy(e.mapSize), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  toJSON() {
    const e = {};
    return this.bias !== 0 && (e.bias = this.bias), this.normalBias !== 0 && (e.normalBias = this.normalBias), this.radius !== 1 && (e.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (e.mapSize = this.mapSize.toArray()), e.camera = this.camera.toJSON(!1).object, delete e.camera.matrix, e;
  }
}
class bO extends ES {
  constructor() {
    super(new Xi(50, 1, 0.5, 500)), this.isSpotLightShadow = !0, this.focus = 1;
  }
  updateMatrices(e) {
    const t = this.camera, n = nd * 2 * e.angle * this.focus, a = this.mapSize.width / this.mapSize.height, s = e.distance || t.far;
    (n !== t.fov || a !== t.aspect || s !== t.far) && (t.fov = n, t.aspect = a, t.far = s, t.updateProjectionMatrix()), super.updateMatrices(e);
  }
  copy(e) {
    return super.copy(e), this.focus = e.focus, this;
  }
}
class fC extends Yl {
  constructor(e, t, n = 0, a = Math.PI / 3, s = 0, c = 2) {
    super(e, t), this.isSpotLight = !0, this.type = "SpotLight", this.position.copy(Mn.DEFAULT_UP), this.updateMatrix(), this.target = new Mn(), this.distance = n, this.angle = a, this.penumbra = s, this.decay = c, this.map = null, this.shadow = new bO();
  }
  get power() {
    return this.intensity * Math.PI;
  }
  set power(e) {
    this.intensity = e / Math.PI;
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return super.copy(e, t), this.distance = e.distance, this.angle = e.angle, this.penumbra = e.penumbra, this.decay = e.decay, this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
const NE = /* @__PURE__ */ new Qt(), qh = /* @__PURE__ */ new j(), H_ = /* @__PURE__ */ new j();
class EO extends ES {
  constructor() {
    super(new Xi(90, 1, 0.5, 500)), this.isPointLightShadow = !0, this._frameExtents = new Ge(4, 2), this._viewportCount = 6, this._viewports = [
      // These viewports map a cube-map onto a 2D texture with the
      // following orientation:
      //
      //  xzXZ
      //   y Y
      //
      // X - Positive x direction
      // x - Negative x direction
      // Y - Positive y direction
      // y - Negative y direction
      // Z - Positive z direction
      // z - Negative z direction
      // positive X
      new Un(2, 1, 1, 1),
      // negative X
      new Un(0, 1, 1, 1),
      // positive Z
      new Un(3, 1, 1, 1),
      // negative Z
      new Un(1, 1, 1, 1),
      // positive Y
      new Un(3, 0, 1, 1),
      // negative Y
      new Un(1, 0, 1, 1)
    ], this._cubeDirections = [
      new j(1, 0, 0),
      new j(-1, 0, 0),
      new j(0, 0, 1),
      new j(0, 0, -1),
      new j(0, 1, 0),
      new j(0, -1, 0)
    ], this._cubeUps = [
      new j(0, 1, 0),
      new j(0, 1, 0),
      new j(0, 1, 0),
      new j(0, 1, 0),
      new j(0, 0, 1),
      new j(0, 0, -1)
    ];
  }
  updateMatrices(e, t = 0) {
    const n = this.camera, a = this.matrix, s = e.distance || n.far;
    s !== n.far && (n.far = s, n.updateProjectionMatrix()), qh.setFromMatrixPosition(e.matrixWorld), n.position.copy(qh), H_.copy(n.position), H_.add(this._cubeDirections[t]), n.up.copy(this._cubeUps[t]), n.lookAt(H_), n.updateMatrixWorld(), a.makeTranslation(-qh.x, -qh.y, -qh.z), NE.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse), this._frustum.setFromProjectionMatrix(NE);
  }
}
class dC extends Yl {
  constructor(e, t, n = 0, a = 2) {
    super(e, t), this.isPointLight = !0, this.type = "PointLight", this.distance = n, this.decay = a, this.shadow = new EO();
  }
  get power() {
    return this.intensity * 4 * Math.PI;
  }
  set power(e) {
    this.intensity = e / (4 * Math.PI);
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return super.copy(e, t), this.distance = e.distance, this.decay = e.decay, this.shadow = e.shadow.clone(), this;
  }
}
class wO extends ES {
  constructor() {
    super(new Ap(-5, 5, 5, -5, 0.5, 500)), this.isDirectionalLightShadow = !0;
  }
}
class hC extends Yl {
  constructor(e, t) {
    super(e, t), this.isDirectionalLight = !0, this.type = "DirectionalLight", this.position.copy(Mn.DEFAULT_UP), this.updateMatrix(), this.target = new Mn(), this.shadow = new wO();
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e) {
    return super.copy(e), this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
class pC extends Yl {
  constructor(e, t) {
    super(e, t), this.isAmbientLight = !0, this.type = "AmbientLight";
  }
}
class mC extends Yl {
  constructor(e, t, n = 10, a = 10) {
    super(e, t), this.isRectAreaLight = !0, this.type = "RectAreaLight", this.width = n, this.height = a;
  }
  get power() {
    return this.intensity * this.width * this.height * Math.PI;
  }
  set power(e) {
    this.intensity = e / (this.width * this.height * Math.PI);
  }
  copy(e) {
    return super.copy(e), this.width = e.width, this.height = e.height, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.width = this.width, t.object.height = this.height, t;
  }
}
class vC {
  constructor() {
    this.isSphericalHarmonics3 = !0, this.coefficients = [];
    for (let e = 0; e < 9; e++)
      this.coefficients.push(new j());
  }
  set(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].copy(e[t]);
    return this;
  }
  zero() {
    for (let e = 0; e < 9; e++)
      this.coefficients[e].set(0, 0, 0);
    return this;
  }
  // get the radiance in the direction of the normal
  // target is a Vector3
  getAt(e, t) {
    const n = e.x, a = e.y, s = e.z, c = this.coefficients;
    return t.copy(c[0]).multiplyScalar(0.282095), t.addScaledVector(c[1], 0.488603 * a), t.addScaledVector(c[2], 0.488603 * s), t.addScaledVector(c[3], 0.488603 * n), t.addScaledVector(c[4], 1.092548 * (n * a)), t.addScaledVector(c[5], 1.092548 * (a * s)), t.addScaledVector(c[6], 0.315392 * (3 * s * s - 1)), t.addScaledVector(c[7], 1.092548 * (n * s)), t.addScaledVector(c[8], 0.546274 * (n * n - a * a)), t;
  }
  // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
  // target is a Vector3
  // https://graphics.stanford.edu/papers/envmap/envmap.pdf
  getIrradianceAt(e, t) {
    const n = e.x, a = e.y, s = e.z, c = this.coefficients;
    return t.copy(c[0]).multiplyScalar(0.886227), t.addScaledVector(c[1], 2 * 0.511664 * a), t.addScaledVector(c[2], 2 * 0.511664 * s), t.addScaledVector(c[3], 2 * 0.511664 * n), t.addScaledVector(c[4], 2 * 0.429043 * n * a), t.addScaledVector(c[5], 2 * 0.429043 * a * s), t.addScaledVector(c[6], 0.743125 * s * s - 0.247708), t.addScaledVector(c[7], 2 * 0.429043 * n * s), t.addScaledVector(c[8], 0.429043 * (n * n - a * a)), t;
  }
  add(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].add(e.coefficients[t]);
    return this;
  }
  addScaledSH(e, t) {
    for (let n = 0; n < 9; n++)
      this.coefficients[n].addScaledVector(e.coefficients[n], t);
    return this;
  }
  scale(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].multiplyScalar(e);
    return this;
  }
  lerp(e, t) {
    for (let n = 0; n < 9; n++)
      this.coefficients[n].lerp(e.coefficients[n], t);
    return this;
  }
  equals(e) {
    for (let t = 0; t < 9; t++)
      if (!this.coefficients[t].equals(e.coefficients[t]))
        return !1;
    return !0;
  }
  copy(e) {
    return this.set(e.coefficients);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  fromArray(e, t = 0) {
    const n = this.coefficients;
    for (let a = 0; a < 9; a++)
      n[a].fromArray(e, t + a * 3);
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.coefficients;
    for (let a = 0; a < 9; a++)
      n[a].toArray(e, t + a * 3);
    return e;
  }
  // evaluate the basis functions
  // shBasis is an Array[ 9 ]
  static getBasisAt(e, t) {
    const n = e.x, a = e.y, s = e.z;
    t[0] = 0.282095, t[1] = 0.488603 * a, t[2] = 0.488603 * s, t[3] = 0.488603 * n, t[4] = 1.092548 * n * a, t[5] = 1.092548 * a * s, t[6] = 0.315392 * (3 * s * s - 1), t[7] = 1.092548 * n * s, t[8] = 0.546274 * (n * n - a * a);
  }
}
class Zg extends Yl {
  constructor(e = new vC(), t = 1) {
    super(void 0, t), this.isLightProbe = !0, this.sh = e;
  }
  copy(e) {
    return super.copy(e), this.sh.copy(e.sh), this;
  }
  fromJSON(e) {
    return this.intensity = e.intensity, this.sh.fromArray(e.sh), this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.sh = this.sh.toArray(), t;
  }
}
class Jg extends ga {
  constructor(e) {
    super(e), this.textures = {};
  }
  load(e, t, n, a) {
    const s = this, c = new No(s.manager);
    c.setPath(s.path), c.setRequestHeader(s.requestHeader), c.setWithCredentials(s.withCredentials), c.load(e, function(f) {
      try {
        t(s.parse(JSON.parse(f)));
      } catch (p) {
        a ? a(p) : console.error(p), s.manager.itemError(e);
      }
    }, n, a);
  }
  parse(e) {
    const t = this.textures;
    function n(s) {
      return t[s] === void 0 && console.warn("THREE.MaterialLoader: Undefined texture", s), t[s];
    }
    const a = Jg.createMaterialFromType(e.type);
    if (e.uuid !== void 0 && (a.uuid = e.uuid), e.name !== void 0 && (a.name = e.name), e.color !== void 0 && a.color !== void 0 && a.color.setHex(e.color), e.roughness !== void 0 && (a.roughness = e.roughness), e.metalness !== void 0 && (a.metalness = e.metalness), e.sheen !== void 0 && (a.sheen = e.sheen), e.sheenColor !== void 0 && (a.sheenColor = new yt().setHex(e.sheenColor)), e.sheenRoughness !== void 0 && (a.sheenRoughness = e.sheenRoughness), e.emissive !== void 0 && a.emissive !== void 0 && a.emissive.setHex(e.emissive), e.specular !== void 0 && a.specular !== void 0 && a.specular.setHex(e.specular), e.specularIntensity !== void 0 && (a.specularIntensity = e.specularIntensity), e.specularColor !== void 0 && a.specularColor !== void 0 && a.specularColor.setHex(e.specularColor), e.shininess !== void 0 && (a.shininess = e.shininess), e.clearcoat !== void 0 && (a.clearcoat = e.clearcoat), e.clearcoatRoughness !== void 0 && (a.clearcoatRoughness = e.clearcoatRoughness), e.iridescence !== void 0 && (a.iridescence = e.iridescence), e.iridescenceIOR !== void 0 && (a.iridescenceIOR = e.iridescenceIOR), e.iridescenceThicknessRange !== void 0 && (a.iridescenceThicknessRange = e.iridescenceThicknessRange), e.transmission !== void 0 && (a.transmission = e.transmission), e.thickness !== void 0 && (a.thickness = e.thickness), e.attenuationDistance !== void 0 && (a.attenuationDistance = e.attenuationDistance), e.attenuationColor !== void 0 && a.attenuationColor !== void 0 && a.attenuationColor.setHex(e.attenuationColor), e.fog !== void 0 && (a.fog = e.fog), e.flatShading !== void 0 && (a.flatShading = e.flatShading), e.blending !== void 0 && (a.blending = e.blending), e.combine !== void 0 && (a.combine = e.combine), e.side !== void 0 && (a.side = e.side), e.shadowSide !== void 0 && (a.shadowSide = e.shadowSide), e.opacity !== void 0 && (a.opacity = e.opacity), e.transparent !== void 0 && (a.transparent = e.transparent), e.alphaTest !== void 0 && (a.alphaTest = e.alphaTest), e.depthTest !== void 0 && (a.depthTest = e.depthTest), e.depthWrite !== void 0 && (a.depthWrite = e.depthWrite), e.colorWrite !== void 0 && (a.colorWrite = e.colorWrite), e.stencilWrite !== void 0 && (a.stencilWrite = e.stencilWrite), e.stencilWriteMask !== void 0 && (a.stencilWriteMask = e.stencilWriteMask), e.stencilFunc !== void 0 && (a.stencilFunc = e.stencilFunc), e.stencilRef !== void 0 && (a.stencilRef = e.stencilRef), e.stencilFuncMask !== void 0 && (a.stencilFuncMask = e.stencilFuncMask), e.stencilFail !== void 0 && (a.stencilFail = e.stencilFail), e.stencilZFail !== void 0 && (a.stencilZFail = e.stencilZFail), e.stencilZPass !== void 0 && (a.stencilZPass = e.stencilZPass), e.wireframe !== void 0 && (a.wireframe = e.wireframe), e.wireframeLinewidth !== void 0 && (a.wireframeLinewidth = e.wireframeLinewidth), e.wireframeLinecap !== void 0 && (a.wireframeLinecap = e.wireframeLinecap), e.wireframeLinejoin !== void 0 && (a.wireframeLinejoin = e.wireframeLinejoin), e.rotation !== void 0 && (a.rotation = e.rotation), e.linewidth !== 1 && (a.linewidth = e.linewidth), e.dashSize !== void 0 && (a.dashSize = e.dashSize), e.gapSize !== void 0 && (a.gapSize = e.gapSize), e.scale !== void 0 && (a.scale = e.scale), e.polygonOffset !== void 0 && (a.polygonOffset = e.polygonOffset), e.polygonOffsetFactor !== void 0 && (a.polygonOffsetFactor = e.polygonOffsetFactor), e.polygonOffsetUnits !== void 0 && (a.polygonOffsetUnits = e.polygonOffsetUnits), e.dithering !== void 0 && (a.dithering = e.dithering), e.alphaToCoverage !== void 0 && (a.alphaToCoverage = e.alphaToCoverage), e.premultipliedAlpha !== void 0 && (a.premultipliedAlpha = e.premultipliedAlpha), e.forceSinglePass !== void 0 && (a.forceSinglePass = e.forceSinglePass), e.visible !== void 0 && (a.visible = e.visible), e.toneMapped !== void 0 && (a.toneMapped = e.toneMapped), e.userData !== void 0 && (a.userData = e.userData), e.vertexColors !== void 0 && (typeof e.vertexColors == "number" ? a.vertexColors = e.vertexColors > 0 : a.vertexColors = e.vertexColors), e.uniforms !== void 0)
      for (const s in e.uniforms) {
        const c = e.uniforms[s];
        switch (a.uniforms[s] = {}, c.type) {
          case "t":
            a.uniforms[s].value = n(c.value);
            break;
          case "c":
            a.uniforms[s].value = new yt().setHex(c.value);
            break;
          case "v2":
            a.uniforms[s].value = new Ge().fromArray(c.value);
            break;
          case "v3":
            a.uniforms[s].value = new j().fromArray(c.value);
            break;
          case "v4":
            a.uniforms[s].value = new Un().fromArray(c.value);
            break;
          case "m3":
            a.uniforms[s].value = new cn().fromArray(c.value);
            break;
          case "m4":
            a.uniforms[s].value = new Qt().fromArray(c.value);
            break;
          default:
            a.uniforms[s].value = c.value;
        }
      }
    if (e.defines !== void 0 && (a.defines = e.defines), e.vertexShader !== void 0 && (a.vertexShader = e.vertexShader), e.fragmentShader !== void 0 && (a.fragmentShader = e.fragmentShader), e.glslVersion !== void 0 && (a.glslVersion = e.glslVersion), e.extensions !== void 0)
      for (const s in e.extensions)
        a.extensions[s] = e.extensions[s];
    if (e.size !== void 0 && (a.size = e.size), e.sizeAttenuation !== void 0 && (a.sizeAttenuation = e.sizeAttenuation), e.map !== void 0 && (a.map = n(e.map)), e.matcap !== void 0 && (a.matcap = n(e.matcap)), e.alphaMap !== void 0 && (a.alphaMap = n(e.alphaMap)), e.bumpMap !== void 0 && (a.bumpMap = n(e.bumpMap)), e.bumpScale !== void 0 && (a.bumpScale = e.bumpScale), e.normalMap !== void 0 && (a.normalMap = n(e.normalMap)), e.normalMapType !== void 0 && (a.normalMapType = e.normalMapType), e.normalScale !== void 0) {
      let s = e.normalScale;
      Array.isArray(s) === !1 && (s = [s, s]), a.normalScale = new Ge().fromArray(s);
    }
    return e.displacementMap !== void 0 && (a.displacementMap = n(e.displacementMap)), e.displacementScale !== void 0 && (a.displacementScale = e.displacementScale), e.displacementBias !== void 0 && (a.displacementBias = e.displacementBias), e.roughnessMap !== void 0 && (a.roughnessMap = n(e.roughnessMap)), e.metalnessMap !== void 0 && (a.metalnessMap = n(e.metalnessMap)), e.emissiveMap !== void 0 && (a.emissiveMap = n(e.emissiveMap)), e.emissiveIntensity !== void 0 && (a.emissiveIntensity = e.emissiveIntensity), e.specularMap !== void 0 && (a.specularMap = n(e.specularMap)), e.specularIntensityMap !== void 0 && (a.specularIntensityMap = n(e.specularIntensityMap)), e.specularColorMap !== void 0 && (a.specularColorMap = n(e.specularColorMap)), e.envMap !== void 0 && (a.envMap = n(e.envMap)), e.envMapIntensity !== void 0 && (a.envMapIntensity = e.envMapIntensity), e.reflectivity !== void 0 && (a.reflectivity = e.reflectivity), e.refractionRatio !== void 0 && (a.refractionRatio = e.refractionRatio), e.lightMap !== void 0 && (a.lightMap = n(e.lightMap)), e.lightMapIntensity !== void 0 && (a.lightMapIntensity = e.lightMapIntensity), e.aoMap !== void 0 && (a.aoMap = n(e.aoMap)), e.aoMapIntensity !== void 0 && (a.aoMapIntensity = e.aoMapIntensity), e.gradientMap !== void 0 && (a.gradientMap = n(e.gradientMap)), e.clearcoatMap !== void 0 && (a.clearcoatMap = n(e.clearcoatMap)), e.clearcoatRoughnessMap !== void 0 && (a.clearcoatRoughnessMap = n(e.clearcoatRoughnessMap)), e.clearcoatNormalMap !== void 0 && (a.clearcoatNormalMap = n(e.clearcoatNormalMap)), e.clearcoatNormalScale !== void 0 && (a.clearcoatNormalScale = new Ge().fromArray(e.clearcoatNormalScale)), e.iridescenceMap !== void 0 && (a.iridescenceMap = n(e.iridescenceMap)), e.iridescenceThicknessMap !== void 0 && (a.iridescenceThicknessMap = n(e.iridescenceThicknessMap)), e.transmissionMap !== void 0 && (a.transmissionMap = n(e.transmissionMap)), e.thicknessMap !== void 0 && (a.thicknessMap = n(e.thicknessMap)), e.sheenColorMap !== void 0 && (a.sheenColorMap = n(e.sheenColorMap)), e.sheenRoughnessMap !== void 0 && (a.sheenRoughnessMap = n(e.sheenRoughnessMap)), a;
  }
  setTextures(e) {
    return this.textures = e, this;
  }
  static createMaterialFromType(e) {
    const t = {
      ShadowMaterial: JT,
      SpriteMaterial: lS,
      RawShaderMaterial: QT,
      ShaderMaterial: Vs,
      PointsMaterial: cS,
      MeshPhysicalMaterial: KT,
      MeshStandardMaterial: yS,
      MeshPhongMaterial: $T,
      MeshToonMaterial: eC,
      MeshNormalMaterial: tC,
      MeshLambertMaterial: nC,
      MeshDepthMaterial: rS,
      MeshDistanceMaterial: aS,
      MeshBasicMaterial: Xl,
      MeshMatcapMaterial: iC,
      LineDashedMaterial: rC,
      LineBasicMaterial: Ar,
      Material: nr
    };
    return new t[e]();
  }
}
class Bx {
  static decodeText(e) {
    if (typeof TextDecoder < "u")
      return new TextDecoder().decode(e);
    let t = "";
    for (let n = 0, a = e.length; n < a; n++)
      t += String.fromCharCode(e[n]);
    try {
      return decodeURIComponent(escape(t));
    } catch {
      return t;
    }
  }
  static extractUrlBase(e) {
    const t = e.lastIndexOf("/");
    return t === -1 ? "./" : e.slice(0, t + 1);
  }
  static resolveURL(e, t) {
    return typeof e != "string" || e === "" ? "" : (/^https?:\/\//i.test(t) && /^\//.test(e) && (t = t.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(e) || /^data:.*,.*$/i.test(e) || /^blob:.*$/i.test(e) ? e : t + e);
  }
}
class gC extends an {
  constructor() {
    super(), this.isInstancedBufferGeometry = !0, this.type = "InstancedBufferGeometry", this.instanceCount = 1 / 0;
  }
  copy(e) {
    return super.copy(e), this.instanceCount = e.instanceCount, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.instanceCount = this.instanceCount, e.isInstancedBufferGeometry = !0, e;
  }
}
class yC extends ga {
  constructor(e) {
    super(e);
  }
  load(e, t, n, a) {
    const s = this, c = new No(s.manager);
    c.setPath(s.path), c.setRequestHeader(s.requestHeader), c.setWithCredentials(s.withCredentials), c.load(e, function(f) {
      try {
        t(s.parse(JSON.parse(f)));
      } catch (p) {
        a ? a(p) : console.error(p), s.manager.itemError(e);
      }
    }, n, a);
  }
  parse(e) {
    const t = {}, n = {};
    function a(M, E) {
      if (t[E] !== void 0)
        return t[E];
      const T = M.interleavedBuffers[E], b = s(M, T.buffer), L = Zf(T.type, b), R = new Wg(L, T.stride);
      return R.uuid = T.uuid, t[E] = R, R;
    }
    function s(M, E) {
      if (n[E] !== void 0)
        return n[E];
      const T = M.arrayBuffers[E], b = new Uint32Array(T).buffer;
      return n[E] = b, b;
    }
    const c = e.isInstancedBufferGeometry ? new gC() : new an(), f = e.data.index;
    if (f !== void 0) {
      const M = Zf(f.type, f.array);
      c.setIndex(new Hn(M, 1));
    }
    const p = e.data.attributes;
    for (const M in p) {
      const E = p[M];
      let A;
      if (E.isInterleavedBufferAttribute) {
        const T = a(e.data, E.data);
        A = new oc(T, E.itemSize, E.offset, E.normalized);
      } else {
        const T = Zf(E.type, E.array), b = E.isInstancedBufferAttribute ? rd : Hn;
        A = new b(T, E.itemSize, E.normalized);
      }
      E.name !== void 0 && (A.name = E.name), E.usage !== void 0 && A.setUsage(E.usage), E.updateRange !== void 0 && (A.updateRange.offset = E.updateRange.offset, A.updateRange.count = E.updateRange.count), c.setAttribute(M, A);
    }
    const h = e.data.morphAttributes;
    if (h)
      for (const M in h) {
        const E = h[M], A = [];
        for (let T = 0, b = E.length; T < b; T++) {
          const L = E[T];
          let R;
          if (L.isInterleavedBufferAttribute) {
            const U = a(e.data, L.data);
            R = new oc(U, L.itemSize, L.offset, L.normalized);
          } else {
            const U = Zf(L.type, L.array);
            R = new Hn(U, L.itemSize, L.normalized);
          }
          L.name !== void 0 && (R.name = L.name), A.push(R);
        }
        c.morphAttributes[M] = A;
      }
    e.data.morphTargetsRelative && (c.morphTargetsRelative = !0);
    const _ = e.data.groups || e.data.drawcalls || e.data.offsets;
    if (_ !== void 0)
      for (let M = 0, E = _.length; M !== E; ++M) {
        const A = _[M];
        c.addGroup(A.start, A.count, A.materialIndex);
      }
    const x = e.data.boundingSphere;
    if (x !== void 0) {
      const M = new j();
      x.center !== void 0 && M.fromArray(x.center), c.boundingSphere = new Ws(M, x.radius);
    }
    return e.name && (c.name = e.name), e.userData && (c.userData = e.userData), c;
  }
}
class TO extends ga {
  constructor(e) {
    super(e);
  }
  load(e, t, n, a) {
    const s = this, c = this.path === "" ? Bx.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || c;
    const f = new No(this.manager);
    f.setPath(this.path), f.setRequestHeader(this.requestHeader), f.setWithCredentials(this.withCredentials), f.load(e, function(p) {
      let h = null;
      try {
        h = JSON.parse(p);
      } catch (_) {
        a !== void 0 && a(_), console.error("THREE:ObjectLoader: Can't parse " + e + ".", _.message);
        return;
      }
      const g = h.metadata;
      if (g === void 0 || g.type === void 0 || g.type.toLowerCase() === "geometry") {
        a !== void 0 && a(new Error("THREE.ObjectLoader: Can't load " + e)), console.error("THREE.ObjectLoader: Can't load " + e);
        return;
      }
      s.parse(h, t);
    }, n, a);
  }
  async loadAsync(e, t) {
    const n = this, a = this.path === "" ? Bx.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || a;
    const s = new No(this.manager);
    s.setPath(this.path), s.setRequestHeader(this.requestHeader), s.setWithCredentials(this.withCredentials);
    const c = await s.loadAsync(e, t), f = JSON.parse(c), p = f.metadata;
    if (p === void 0 || p.type === void 0 || p.type.toLowerCase() === "geometry")
      throw new Error("THREE.ObjectLoader: Can't load " + e);
    return await n.parseAsync(f);
  }
  parse(e, t) {
    const n = this.parseAnimations(e.animations), a = this.parseShapes(e.shapes), s = this.parseGeometries(e.geometries, a), c = this.parseImages(e.images, function() {
      t !== void 0 && t(h);
    }), f = this.parseTextures(e.textures, c), p = this.parseMaterials(e.materials, f), h = this.parseObject(e.object, s, p, f, n), g = this.parseSkeletons(e.skeletons, h);
    if (this.bindSkeletons(h, g), t !== void 0) {
      let _ = !1;
      for (const x in c)
        if (c[x].data instanceof HTMLImageElement) {
          _ = !0;
          break;
        }
      _ === !1 && t(h);
    }
    return h;
  }
  async parseAsync(e) {
    const t = this.parseAnimations(e.animations), n = this.parseShapes(e.shapes), a = this.parseGeometries(e.geometries, n), s = await this.parseImagesAsync(e.images), c = this.parseTextures(e.textures, s), f = this.parseMaterials(e.materials, c), p = this.parseObject(e.object, a, f, c, t), h = this.parseSkeletons(e.skeletons, p);
    return this.bindSkeletons(p, h), p;
  }
  parseShapes(e) {
    const t = {};
    if (e !== void 0)
      for (let n = 0, a = e.length; n < a; n++) {
        const s = new rc().fromJSON(e[n]);
        t[s.uuid] = s;
      }
    return t;
  }
  parseSkeletons(e, t) {
    const n = {}, a = {};
    if (t.traverse(function(s) {
      s.isBone && (a[s.uuid] = s);
    }), e !== void 0)
      for (let s = 0, c = e.length; s < c; s++) {
        const f = new qg().fromJSON(e[s], a);
        n[f.uuid] = f;
      }
    return n;
  }
  parseGeometries(e, t) {
    const n = {};
    if (e !== void 0) {
      const a = new yC();
      for (let s = 0, c = e.length; s < c; s++) {
        let f;
        const p = e[s];
        switch (p.type) {
          case "BufferGeometry":
          case "InstancedBufferGeometry":
            f = a.parse(p);
            break;
          default:
            p.type in DE ? f = DE[p.type].fromJSON(p, t) : console.warn(`THREE.ObjectLoader: Unsupported geometry type "${p.type}"`);
        }
        f.uuid = p.uuid, p.name !== void 0 && (f.name = p.name), p.userData !== void 0 && (f.userData = p.userData), n[p.uuid] = f;
      }
    }
    return n;
  }
  parseMaterials(e, t) {
    const n = {}, a = {};
    if (e !== void 0) {
      const s = new Jg();
      s.setTextures(t);
      for (let c = 0, f = e.length; c < f; c++) {
        const p = e[c];
        n[p.uuid] === void 0 && (n[p.uuid] = s.parse(p)), a[p.uuid] = n[p.uuid];
      }
    }
    return a;
  }
  parseAnimations(e) {
    const t = {};
    if (e !== void 0)
      for (let n = 0; n < e.length; n++) {
        const a = e[n], s = xp.parse(a);
        t[s.uuid] = s;
      }
    return t;
  }
  parseImages(e, t) {
    const n = this, a = {};
    let s;
    function c(p) {
      return n.manager.itemStart(p), s.load(p, function() {
        n.manager.itemEnd(p);
      }, void 0, function() {
        n.manager.itemError(p), n.manager.itemEnd(p);
      });
    }
    function f(p) {
      if (typeof p == "string") {
        const h = p, g = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(h) ? h : n.resourcePath + h;
        return c(g);
      } else
        return p.data ? {
          data: Zf(p.type, p.data),
          width: p.width,
          height: p.height
        } : null;
    }
    if (e !== void 0 && e.length > 0) {
      const p = new bS(t);
      s = new Sp(p), s.setCrossOrigin(this.crossOrigin);
      for (let h = 0, g = e.length; h < g; h++) {
        const _ = e[h], x = _.url;
        if (Array.isArray(x)) {
          const M = [];
          for (let E = 0, A = x.length; E < A; E++) {
            const T = x[E], b = f(T);
            b !== null && (b instanceof HTMLImageElement ? M.push(b) : M.push(new ed(b.data, b.width, b.height)));
          }
          a[_.uuid] = new Qu(M);
        } else {
          const M = f(_.url);
          a[_.uuid] = new Qu(M);
        }
      }
    }
    return a;
  }
  async parseImagesAsync(e) {
    const t = this, n = {};
    let a;
    async function s(c) {
      if (typeof c == "string") {
        const f = c, p = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(f) ? f : t.resourcePath + f;
        return await a.loadAsync(p);
      } else
        return c.data ? {
          data: Zf(c.type, c.data),
          width: c.width,
          height: c.height
        } : null;
    }
    if (e !== void 0 && e.length > 0) {
      a = new Sp(this.manager), a.setCrossOrigin(this.crossOrigin);
      for (let c = 0, f = e.length; c < f; c++) {
        const p = e[c], h = p.url;
        if (Array.isArray(h)) {
          const g = [];
          for (let _ = 0, x = h.length; _ < x; _++) {
            const M = h[_], E = await s(M);
            E !== null && (E instanceof HTMLImageElement ? g.push(E) : g.push(new ed(E.data, E.width, E.height)));
          }
          n[p.uuid] = new Qu(g);
        } else {
          const g = await s(p.url);
          n[p.uuid] = new Qu(g);
        }
      }
    }
    return n;
  }
  parseTextures(e, t) {
    function n(s, c) {
      return typeof s == "number" ? s : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", s), c[s]);
    }
    const a = {};
    if (e !== void 0)
      for (let s = 0, c = e.length; s < c; s++) {
        const f = e[s];
        f.image === void 0 && console.warn('THREE.ObjectLoader: No "image" specified for', f.uuid), t[f.image] === void 0 && console.warn("THREE.ObjectLoader: Undefined image", f.image);
        const p = t[f.image], h = p.data;
        let g;
        Array.isArray(h) ? (g = new Cp(), h.length === 6 && (g.needsUpdate = !0)) : (h && h.data ? g = new ed() : g = new pi(), h && (g.needsUpdate = !0)), g.source = p, g.uuid = f.uuid, f.name !== void 0 && (g.name = f.name), f.mapping !== void 0 && (g.mapping = n(f.mapping, CO)), f.channel !== void 0 && (g.channel = f.channel), f.offset !== void 0 && g.offset.fromArray(f.offset), f.repeat !== void 0 && g.repeat.fromArray(f.repeat), f.center !== void 0 && g.center.fromArray(f.center), f.rotation !== void 0 && (g.rotation = f.rotation), f.wrap !== void 0 && (g.wrapS = n(f.wrap[0], zE), g.wrapT = n(f.wrap[1], zE)), f.format !== void 0 && (g.format = f.format), f.internalFormat !== void 0 && (g.internalFormat = f.internalFormat), f.type !== void 0 && (g.type = f.type), f.encoding !== void 0 && (g.encoding = f.encoding), f.minFilter !== void 0 && (g.minFilter = n(f.minFilter, OE)), f.magFilter !== void 0 && (g.magFilter = n(f.magFilter, OE)), f.anisotropy !== void 0 && (g.anisotropy = f.anisotropy), f.flipY !== void 0 && (g.flipY = f.flipY), f.generateMipmaps !== void 0 && (g.generateMipmaps = f.generateMipmaps), f.premultiplyAlpha !== void 0 && (g.premultiplyAlpha = f.premultiplyAlpha), f.unpackAlignment !== void 0 && (g.unpackAlignment = f.unpackAlignment), f.userData !== void 0 && (g.userData = f.userData), a[f.uuid] = g;
      }
    return a;
  }
  parseObject(e, t, n, a, s) {
    let c;
    function f(x) {
      return t[x] === void 0 && console.warn("THREE.ObjectLoader: Undefined geometry", x), t[x];
    }
    function p(x) {
      if (x !== void 0) {
        if (Array.isArray(x)) {
          const M = [];
          for (let E = 0, A = x.length; E < A; E++) {
            const T = x[E];
            n[T] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", T), M.push(n[T]);
          }
          return M;
        }
        return n[x] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", x), n[x];
      }
    }
    function h(x) {
      return a[x] === void 0 && console.warn("THREE.ObjectLoader: Undefined texture", x), a[x];
    }
    let g, _;
    switch (e.type) {
      case "Scene":
        c = new Rg(), e.background !== void 0 && (Number.isInteger(e.background) ? c.background = new yt(e.background) : c.background = h(e.background)), e.environment !== void 0 && (c.environment = h(e.environment)), e.fog !== void 0 && (e.fog.type === "Fog" ? c.fog = new Gg(e.fog.color, e.fog.near, e.fog.far) : e.fog.type === "FogExp2" && (c.fog = new Vg(e.fog.color, e.fog.density))), e.backgroundBlurriness !== void 0 && (c.backgroundBlurriness = e.backgroundBlurriness), e.backgroundIntensity !== void 0 && (c.backgroundIntensity = e.backgroundIntensity);
        break;
      case "PerspectiveCamera":
        c = new Xi(e.fov, e.aspect, e.near, e.far), e.focus !== void 0 && (c.focus = e.focus), e.zoom !== void 0 && (c.zoom = e.zoom), e.filmGauge !== void 0 && (c.filmGauge = e.filmGauge), e.filmOffset !== void 0 && (c.filmOffset = e.filmOffset), e.view !== void 0 && (c.view = Object.assign({}, e.view));
        break;
      case "OrthographicCamera":
        c = new Ap(e.left, e.right, e.top, e.bottom, e.near, e.far), e.zoom !== void 0 && (c.zoom = e.zoom), e.view !== void 0 && (c.view = Object.assign({}, e.view));
        break;
      case "AmbientLight":
        c = new pC(e.color, e.intensity);
        break;
      case "DirectionalLight":
        c = new hC(e.color, e.intensity);
        break;
      case "PointLight":
        c = new dC(e.color, e.intensity, e.distance, e.decay);
        break;
      case "RectAreaLight":
        c = new mC(e.color, e.intensity, e.width, e.height);
        break;
      case "SpotLight":
        c = new fC(e.color, e.intensity, e.distance, e.angle, e.penumbra, e.decay);
        break;
      case "HemisphereLight":
        c = new cC(e.color, e.groundColor, e.intensity);
        break;
      case "LightProbe":
        c = new Zg().fromJSON(e);
        break;
      case "SkinnedMesh":
        g = f(e.geometry), _ = p(e.material), c = new OT(g, _), e.bindMode !== void 0 && (c.bindMode = e.bindMode), e.bindMatrix !== void 0 && c.bindMatrix.fromArray(e.bindMatrix), e.skeleton !== void 0 && (c.skeleton = e.skeleton);
        break;
      case "Mesh":
        g = f(e.geometry), _ = p(e.material), c = new tr(g, _);
        break;
      case "InstancedMesh":
        g = f(e.geometry), _ = p(e.material);
        const x = e.count, M = e.instanceMatrix, E = e.instanceColor;
        c = new IT(g, _, x), c.instanceMatrix = new rd(new Float32Array(M.array), 16), E !== void 0 && (c.instanceColor = new rd(new Float32Array(E.array), E.itemSize));
        break;
      case "LOD":
        c = new zT();
        break;
      case "Line":
        c = new Wl(f(e.geometry), p(e.material));
        break;
      case "LineLoop":
        c = new FT(f(e.geometry), p(e.material));
        break;
      case "LineSegments":
        c = new qs(f(e.geometry), p(e.material));
        break;
      case "PointCloud":
      case "Points":
        c = new BT(f(e.geometry), p(e.material));
        break;
      case "Sprite":
        c = new NT(p(e.material));
        break;
      case "Group":
        c = new Qf();
        break;
      case "Bone":
        c = new uS();
        break;
      default:
        c = new Mn();
    }
    if (c.uuid = e.uuid, e.name !== void 0 && (c.name = e.name), e.matrix !== void 0 ? (c.matrix.fromArray(e.matrix), e.matrixAutoUpdate !== void 0 && (c.matrixAutoUpdate = e.matrixAutoUpdate), c.matrixAutoUpdate && c.matrix.decompose(c.position, c.quaternion, c.scale)) : (e.position !== void 0 && c.position.fromArray(e.position), e.rotation !== void 0 && c.rotation.fromArray(e.rotation), e.quaternion !== void 0 && c.quaternion.fromArray(e.quaternion), e.scale !== void 0 && c.scale.fromArray(e.scale)), e.up !== void 0 && c.up.fromArray(e.up), e.castShadow !== void 0 && (c.castShadow = e.castShadow), e.receiveShadow !== void 0 && (c.receiveShadow = e.receiveShadow), e.shadow && (e.shadow.bias !== void 0 && (c.shadow.bias = e.shadow.bias), e.shadow.normalBias !== void 0 && (c.shadow.normalBias = e.shadow.normalBias), e.shadow.radius !== void 0 && (c.shadow.radius = e.shadow.radius), e.shadow.mapSize !== void 0 && c.shadow.mapSize.fromArray(e.shadow.mapSize), e.shadow.camera !== void 0 && (c.shadow.camera = this.parseObject(e.shadow.camera))), e.visible !== void 0 && (c.visible = e.visible), e.frustumCulled !== void 0 && (c.frustumCulled = e.frustumCulled), e.renderOrder !== void 0 && (c.renderOrder = e.renderOrder), e.userData !== void 0 && (c.userData = e.userData), e.layers !== void 0 && (c.layers.mask = e.layers), e.children !== void 0) {
      const x = e.children;
      for (let M = 0; M < x.length; M++)
        c.add(this.parseObject(x[M], t, n, a, s));
    }
    if (e.animations !== void 0) {
      const x = e.animations;
      for (let M = 0; M < x.length; M++) {
        const E = x[M];
        c.animations.push(s[E]);
      }
    }
    if (e.type === "LOD") {
      e.autoUpdate !== void 0 && (c.autoUpdate = e.autoUpdate);
      const x = e.levels;
      for (let M = 0; M < x.length; M++) {
        const E = x[M], A = c.getObjectByProperty("uuid", E.object);
        A !== void 0 && c.addLevel(A, E.distance, E.hysteresis);
      }
    }
    return c;
  }
  bindSkeletons(e, t) {
    Object.keys(t).length !== 0 && e.traverse(function(n) {
      if (n.isSkinnedMesh === !0 && n.skeleton !== void 0) {
        const a = t[n.skeleton];
        a === void 0 ? console.warn("THREE.ObjectLoader: No skeleton found with UUID:", n.skeleton) : n.bind(a, n.bindMatrix);
      }
    });
  }
}
const CO = {
  UVMapping: Ig,
  CubeReflectionMapping: kl,
  CubeRefractionMapping: Vl,
  EquirectangularReflectionMapping: ap,
  EquirectangularRefractionMapping: sp,
  CubeUVReflectionMapping: sd
}, zE = {
  RepeatWrapping: op,
  ClampToEdgeWrapping: mr,
  MirroredRepeatWrapping: lp
}, OE = {
  NearestFilter: bi,
  NearestMipmapNearestFilter: Cg,
  NearestMipmapLinearFilter: $h,
  LinearFilter: ai,
  LinearMipmapNearestFilter: Yx,
  LinearMipmapLinearFilter: Gl
};
class AO extends ga {
  constructor(e) {
    super(e), this.isImageBitmapLoader = !0, typeof createImageBitmap > "u" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch > "u" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.options = { premultiplyAlpha: "none" };
  }
  setOptions(e) {
    return this.options = e, this;
  }
  load(e, t, n, a) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const s = this, c = uc.get(e);
    if (c !== void 0)
      return s.manager.itemStart(e), setTimeout(function() {
        t && t(c), s.manager.itemEnd(e);
      }, 0), c;
    const f = {};
    f.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include", f.headers = this.requestHeader, fetch(e, f).then(function(p) {
      return p.blob();
    }).then(function(p) {
      return createImageBitmap(p, Object.assign(s.options, { colorSpaceConversion: "none" }));
    }).then(function(p) {
      uc.add(e, p), t && t(p), s.manager.itemEnd(e);
    }).catch(function(p) {
      a && a(p), s.manager.itemError(e), s.manager.itemEnd(e);
    }), s.manager.itemStart(e);
  }
}
let ug;
class wS {
  static getContext() {
    return ug === void 0 && (ug = new (window.AudioContext || window.webkitAudioContext)()), ug;
  }
  static setContext(e) {
    ug = e;
  }
}
class RO extends ga {
  constructor(e) {
    super(e);
  }
  load(e, t, n, a) {
    const s = this, c = new No(this.manager);
    c.setResponseType("arraybuffer"), c.setPath(this.path), c.setRequestHeader(this.requestHeader), c.setWithCredentials(this.withCredentials), c.load(e, function(f) {
      try {
        const p = f.slice(0);
        wS.getContext().decodeAudioData(p, function(g) {
          t(g);
        });
      } catch (p) {
        a ? a(p) : console.error(p), s.manager.itemError(e);
      }
    }, n, a);
  }
}
class LO extends Zg {
  constructor(e, t, n = 1) {
    super(void 0, n), this.isHemisphereLightProbe = !0;
    const a = new yt().set(e), s = new yt().set(t), c = new j(a.r, a.g, a.b), f = new j(s.r, s.g, s.b), p = Math.sqrt(Math.PI), h = p * Math.sqrt(0.75);
    this.sh.coefficients[0].copy(c).add(f).multiplyScalar(p), this.sh.coefficients[1].copy(c).sub(f).multiplyScalar(h);
  }
}
class DO extends Zg {
  constructor(e, t = 1) {
    super(void 0, t), this.isAmbientLightProbe = !0;
    const n = new yt().set(e);
    this.sh.coefficients[0].set(n.r, n.g, n.b).multiplyScalar(2 * Math.sqrt(Math.PI));
  }
}
const IE = /* @__PURE__ */ new Qt(), FE = /* @__PURE__ */ new Qt(), Hu = /* @__PURE__ */ new Qt();
class PO {
  constructor() {
    this.type = "StereoCamera", this.aspect = 1, this.eyeSep = 0.064, this.cameraL = new Xi(), this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new Xi(), this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1, this._cache = {
      focus: null,
      fov: null,
      aspect: null,
      near: null,
      far: null,
      zoom: null,
      eyeSep: null
    };
  }
  update(e) {
    const t = this._cache;
    if (t.focus !== e.focus || t.fov !== e.fov || t.aspect !== e.aspect * this.aspect || t.near !== e.near || t.far !== e.far || t.zoom !== e.zoom || t.eyeSep !== this.eyeSep) {
      t.focus = e.focus, t.fov = e.fov, t.aspect = e.aspect * this.aspect, t.near = e.near, t.far = e.far, t.zoom = e.zoom, t.eyeSep = this.eyeSep, Hu.copy(e.projectionMatrix);
      const a = t.eyeSep / 2, s = a * t.near / t.focus, c = t.near * Math.tan(nc * t.fov * 0.5) / t.zoom;
      let f, p;
      FE.elements[12] = -a, IE.elements[12] = a, f = -c * t.aspect + s, p = c * t.aspect + s, Hu.elements[0] = 2 * t.near / (p - f), Hu.elements[8] = (p + f) / (p - f), this.cameraL.projectionMatrix.copy(Hu), f = -c * t.aspect - s, p = c * t.aspect - s, Hu.elements[0] = 2 * t.near / (p - f), Hu.elements[8] = (p + f) / (p - f), this.cameraR.projectionMatrix.copy(Hu);
    }
    this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(FE), this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(IE);
  }
}
class TS {
  constructor(e = !0) {
    this.autoStart = e, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1;
  }
  start() {
    this.startTime = BE(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0;
  }
  stop() {
    this.getElapsedTime(), this.running = !1, this.autoStart = !1;
  }
  getElapsedTime() {
    return this.getDelta(), this.elapsedTime;
  }
  getDelta() {
    let e = 0;
    if (this.autoStart && !this.running)
      return this.start(), 0;
    if (this.running) {
      const t = BE();
      e = (t - this.oldTime) / 1e3, this.oldTime = t, this.elapsedTime += e;
    }
    return e;
  }
}
function BE() {
  return (typeof performance > "u" ? Date : performance).now();
}
const ku = /* @__PURE__ */ new j(), HE = /* @__PURE__ */ new Qr(), UO = /* @__PURE__ */ new j(), Vu = /* @__PURE__ */ new j();
class NO extends Mn {
  constructor() {
    super(), this.type = "AudioListener", this.context = wS.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null, this.timeDelta = 0, this._clock = new TS();
  }
  getInput() {
    return this.gain;
  }
  removeFilter() {
    return this.filter !== null && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this;
  }
  getFilter() {
    return this.filter;
  }
  setFilter(e) {
    return this.filter !== null ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = e, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this;
  }
  getMasterVolume() {
    return this.gain.gain.value;
  }
  setMasterVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e);
    const t = this.context.listener, n = this.up;
    if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(ku, HE, UO), Vu.set(0, 0, -1).applyQuaternion(HE), t.positionX) {
      const a = this.context.currentTime + this.timeDelta;
      t.positionX.linearRampToValueAtTime(ku.x, a), t.positionY.linearRampToValueAtTime(ku.y, a), t.positionZ.linearRampToValueAtTime(ku.z, a), t.forwardX.linearRampToValueAtTime(Vu.x, a), t.forwardY.linearRampToValueAtTime(Vu.y, a), t.forwardZ.linearRampToValueAtTime(Vu.z, a), t.upX.linearRampToValueAtTime(n.x, a), t.upY.linearRampToValueAtTime(n.y, a), t.upZ.linearRampToValueAtTime(n.z, a);
    } else
      t.setPosition(ku.x, ku.y, ku.z), t.setOrientation(Vu.x, Vu.y, Vu.z, n.x, n.y, n.z);
  }
}
class _C extends Mn {
  constructor(e) {
    super(), this.type = "Audio", this.listener = e, this.context = e.context, this.gain = this.context.createGain(), this.gain.connect(e.getInput()), this.autoplay = !1, this.buffer = null, this.detune = 0, this.loop = !1, this.loopStart = 0, this.loopEnd = 0, this.offset = 0, this.duration = void 0, this.playbackRate = 1, this.isPlaying = !1, this.hasPlaybackControl = !0, this.source = null, this.sourceType = "empty", this._startedAt = 0, this._progress = 0, this._connected = !1, this.filters = [];
  }
  getOutput() {
    return this.gain;
  }
  setNodeSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = e, this.connect(), this;
  }
  setMediaElementSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(e), this.connect(), this;
  }
  setMediaStreamSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(e), this.connect(), this;
  }
  setBuffer(e) {
    return this.buffer = e, this.sourceType = "buffer", this.autoplay && this.play(), this;
  }
  play(e = 0) {
    if (this.isPlaying === !0) {
      console.warn("THREE.Audio: Audio is already playing.");
      return;
    }
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this._startedAt = this.context.currentTime + e;
    const t = this.context.createBufferSource();
    return t.buffer = this.buffer, t.loop = this.loop, t.loopStart = this.loopStart, t.loopEnd = this.loopEnd, t.onended = this.onEnded.bind(this), t.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = t, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
  }
  pause() {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.isPlaying === !0 && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, this.loop === !0 && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
  }
  stop() {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this._progress = 0, this.source !== null && (this.source.stop(), this.source.onended = null), this.isPlaying = !1, this;
  }
  connect() {
    if (this.filters.length > 0) {
      this.source.connect(this.filters[0]);
      for (let e = 1, t = this.filters.length; e < t; e++)
        this.filters[e - 1].connect(this.filters[e]);
      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else
      this.source.connect(this.getOutput());
    return this._connected = !0, this;
  }
  disconnect() {
    if (this.filters.length > 0) {
      this.source.disconnect(this.filters[0]);
      for (let e = 1, t = this.filters.length; e < t; e++)
        this.filters[e - 1].disconnect(this.filters[e]);
      this.filters[this.filters.length - 1].disconnect(this.getOutput());
    } else
      this.source.disconnect(this.getOutput());
    return this._connected = !1, this;
  }
  getFilters() {
    return this.filters;
  }
  setFilters(e) {
    return e || (e = []), this._connected === !0 ? (this.disconnect(), this.filters = e.slice(), this.connect()) : this.filters = e.slice(), this;
  }
  setDetune(e) {
    if (this.detune = e, this.source.detune !== void 0)
      return this.isPlaying === !0 && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01), this;
  }
  getDetune() {
    return this.detune;
  }
  getFilter() {
    return this.getFilters()[0];
  }
  setFilter(e) {
    return this.setFilters(e ? [e] : []);
  }
  setPlaybackRate(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.playbackRate = e, this.isPlaying === !0 && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01), this;
  }
  getPlaybackRate() {
    return this.playbackRate;
  }
  onEnded() {
    this.isPlaying = !1;
  }
  getLoop() {
    return this.hasPlaybackControl === !1 ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
  }
  setLoop(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.loop = e, this.isPlaying === !0 && (this.source.loop = this.loop), this;
  }
  setLoopStart(e) {
    return this.loopStart = e, this;
  }
  setLoopEnd(e) {
    return this.loopEnd = e, this;
  }
  getVolume() {
    return this.gain.gain.value;
  }
  setVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
}
const Gu = /* @__PURE__ */ new j(), kE = /* @__PURE__ */ new Qr(), zO = /* @__PURE__ */ new j(), Wu = /* @__PURE__ */ new j();
class OO extends _C {
  constructor(e) {
    super(e), this.panner = this.context.createPanner(), this.panner.panningModel = "HRTF", this.panner.connect(this.gain);
  }
  disconnect() {
    super.disconnect(), this.panner.disconnect(this.gain);
  }
  getOutput() {
    return this.panner;
  }
  getRefDistance() {
    return this.panner.refDistance;
  }
  setRefDistance(e) {
    return this.panner.refDistance = e, this;
  }
  getRolloffFactor() {
    return this.panner.rolloffFactor;
  }
  setRolloffFactor(e) {
    return this.panner.rolloffFactor = e, this;
  }
  getDistanceModel() {
    return this.panner.distanceModel;
  }
  setDistanceModel(e) {
    return this.panner.distanceModel = e, this;
  }
  getMaxDistance() {
    return this.panner.maxDistance;
  }
  setMaxDistance(e) {
    return this.panner.maxDistance = e, this;
  }
  setDirectionalCone(e, t, n) {
    return this.panner.coneInnerAngle = e, this.panner.coneOuterAngle = t, this.panner.coneOuterGain = n, this;
  }
  updateMatrixWorld(e) {
    if (super.updateMatrixWorld(e), this.hasPlaybackControl === !0 && this.isPlaying === !1)
      return;
    this.matrixWorld.decompose(Gu, kE, zO), Wu.set(0, 0, 1).applyQuaternion(kE);
    const t = this.panner;
    if (t.positionX) {
      const n = this.context.currentTime + this.listener.timeDelta;
      t.positionX.linearRampToValueAtTime(Gu.x, n), t.positionY.linearRampToValueAtTime(Gu.y, n), t.positionZ.linearRampToValueAtTime(Gu.z, n), t.orientationX.linearRampToValueAtTime(Wu.x, n), t.orientationY.linearRampToValueAtTime(Wu.y, n), t.orientationZ.linearRampToValueAtTime(Wu.z, n);
    } else
      t.setPosition(Gu.x, Gu.y, Gu.z), t.setOrientation(Wu.x, Wu.y, Wu.z);
  }
}
class IO {
  constructor(e, t = 2048) {
    this.analyser = e.context.createAnalyser(), this.analyser.fftSize = t, this.data = new Uint8Array(this.analyser.frequencyBinCount), e.getOutput().connect(this.analyser);
  }
  getFrequencyData() {
    return this.analyser.getByteFrequencyData(this.data), this.data;
  }
  getAverageFrequency() {
    let e = 0;
    const t = this.getFrequencyData();
    for (let n = 0; n < t.length; n++)
      e += t[n];
    return e / t.length;
  }
}
class xC {
  constructor(e, t, n) {
    this.binding = e, this.valueSize = n;
    let a, s, c;
    switch (t) {
      case "quaternion":
        a = this._slerp, s = this._slerpAdditive, c = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(n * 6), this._workIndex = 5;
        break;
      case "string":
      case "bool":
        a = this._select, s = this._select, c = this._setAdditiveIdentityOther, this.buffer = new Array(n * 5);
        break;
      default:
        a = this._lerp, s = this._lerpAdditive, c = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(n * 5);
    }
    this._mixBufferRegion = a, this._mixBufferRegionAdditive = s, this._setIdentity = c, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0;
  }
  // accumulate data in the 'incoming' region into 'accu<i>'
  accumulate(e, t) {
    const n = this.buffer, a = this.valueSize, s = e * a + a;
    let c = this.cumulativeWeight;
    if (c === 0) {
      for (let f = 0; f !== a; ++f)
        n[s + f] = n[f];
      c = t;
    } else {
      c += t;
      const f = t / c;
      this._mixBufferRegion(n, s, 0, f, a);
    }
    this.cumulativeWeight = c;
  }
  // accumulate data in the 'incoming' region into 'add'
  accumulateAdditive(e) {
    const t = this.buffer, n = this.valueSize, a = n * this._addIndex;
    this.cumulativeWeightAdditive === 0 && this._setIdentity(), this._mixBufferRegionAdditive(t, a, 0, e, n), this.cumulativeWeightAdditive += e;
  }
  // apply the state of 'accu<i>' to the binding when accus differ
  apply(e) {
    const t = this.valueSize, n = this.buffer, a = e * t + t, s = this.cumulativeWeight, c = this.cumulativeWeightAdditive, f = this.binding;
    if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, s < 1) {
      const p = t * this._origIndex;
      this._mixBufferRegion(
        n,
        a,
        p,
        1 - s,
        t
      );
    }
    c > 0 && this._mixBufferRegionAdditive(n, a, this._addIndex * t, 1, t);
    for (let p = t, h = t + t; p !== h; ++p)
      if (n[p] !== n[p + t]) {
        f.setValue(n, a);
        break;
      }
  }
  // remember the state of the bound property and copy it to both accus
  saveOriginalState() {
    const e = this.binding, t = this.buffer, n = this.valueSize, a = n * this._origIndex;
    e.getValue(t, a);
    for (let s = n, c = a; s !== c; ++s)
      t[s] = t[a + s % n];
    this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0;
  }
  // apply the state previously taken via 'saveOriginalState' to the binding
  restoreOriginalState() {
    const e = this.valueSize * 3;
    this.binding.setValue(this.buffer, e);
  }
  _setAdditiveIdentityNumeric() {
    const e = this._addIndex * this.valueSize, t = e + this.valueSize;
    for (let n = e; n < t; n++)
      this.buffer[n] = 0;
  }
  _setAdditiveIdentityQuaternion() {
    this._setAdditiveIdentityNumeric(), this.buffer[this._addIndex * this.valueSize + 3] = 1;
  }
  _setAdditiveIdentityOther() {
    const e = this._origIndex * this.valueSize, t = this._addIndex * this.valueSize;
    for (let n = 0; n < this.valueSize; n++)
      this.buffer[t + n] = this.buffer[e + n];
  }
  // mix functions
  _select(e, t, n, a, s) {
    if (a >= 0.5)
      for (let c = 0; c !== s; ++c)
        e[t + c] = e[n + c];
  }
  _slerp(e, t, n, a) {
    Qr.slerpFlat(e, t, e, t, e, n, a);
  }
  _slerpAdditive(e, t, n, a, s) {
    const c = this._workIndex * s;
    Qr.multiplyQuaternionsFlat(e, c, e, t, e, n), Qr.slerpFlat(e, t, e, t, e, c, a);
  }
  _lerp(e, t, n, a, s) {
    const c = 1 - a;
    for (let f = 0; f !== s; ++f) {
      const p = t + f;
      e[p] = e[p] * c + e[n + f] * a;
    }
  }
  _lerpAdditive(e, t, n, a, s) {
    for (let c = 0; c !== s; ++c) {
      const f = t + c;
      e[f] = e[f] + e[n + c] * a;
    }
  }
}
const CS = "\\[\\]\\.:\\/", FO = new RegExp("[" + CS + "]", "g"), AS = "[^" + CS + "]", BO = "[^" + CS.replace("\\.", "") + "]", HO = /* @__PURE__ */ /((?:WC+[\/:])*)/.source.replace("WC", AS), kO = /* @__PURE__ */ /(WCOD+)?/.source.replace("WCOD", BO), VO = /* @__PURE__ */ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", AS), GO = /* @__PURE__ */ /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", AS), WO = new RegExp(
  "^" + HO + kO + VO + GO + "$"
), qO = ["material", "materials", "bones", "map"];
class XO {
  constructor(e, t, n) {
    const a = n || _n.parseTrackName(t);
    this._targetGroup = e, this._bindings = e.subscribe_(t, a);
  }
  getValue(e, t) {
    this.bind();
    const n = this._targetGroup.nCachedObjects_, a = this._bindings[n];
    a !== void 0 && a.getValue(e, t);
  }
  setValue(e, t) {
    const n = this._bindings;
    for (let a = this._targetGroup.nCachedObjects_, s = n.length; a !== s; ++a)
      n[a].setValue(e, t);
  }
  bind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)
      e[t].bind();
  }
  unbind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)
      e[t].unbind();
  }
}
class _n {
  constructor(e, t, n) {
    this.path = t, this.parsedPath = n || _n.parseTrackName(t), this.node = _n.findNode(e, this.parsedPath.nodeName), this.rootNode = e, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
  static create(e, t, n) {
    return e && e.isAnimationObjectGroup ? new _n.Composite(e, t, n) : new _n(e, t, n);
  }
  /**
   * Replaces spaces with underscores and removes unsupported characters from
   * node names, to ensure compatibility with parseTrackName().
   *
   * @param {string} name Node name to be sanitized.
   * @return {string}
   */
  static sanitizeNodeName(e) {
    return e.replace(/\s/g, "_").replace(FO, "");
  }
  static parseTrackName(e) {
    const t = WO.exec(e);
    if (t === null)
      throw new Error("PropertyBinding: Cannot parse trackName: " + e);
    const n = {
      // directoryName: matches[ 1 ], // (tschw) currently unused
      nodeName: t[2],
      objectName: t[3],
      objectIndex: t[4],
      propertyName: t[5],
      // required
      propertyIndex: t[6]
    }, a = n.nodeName && n.nodeName.lastIndexOf(".");
    if (a !== void 0 && a !== -1) {
      const s = n.nodeName.substring(a + 1);
      qO.indexOf(s) !== -1 && (n.nodeName = n.nodeName.substring(0, a), n.objectName = s);
    }
    if (n.propertyName === null || n.propertyName.length === 0)
      throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e);
    return n;
  }
  static findNode(e, t) {
    if (t === void 0 || t === "" || t === "." || t === -1 || t === e.name || t === e.uuid)
      return e;
    if (e.skeleton) {
      const n = e.skeleton.getBoneByName(t);
      if (n !== void 0)
        return n;
    }
    if (e.children) {
      const n = function(s) {
        for (let c = 0; c < s.length; c++) {
          const f = s[c];
          if (f.name === t || f.uuid === t)
            return f;
          const p = n(f.children);
          if (p)
            return p;
        }
        return null;
      }, a = n(e.children);
      if (a)
        return a;
    }
    return null;
  }
  // these are used to "bind" a nonexistent property
  _getValue_unavailable() {
  }
  _setValue_unavailable() {
  }
  // Getters
  _getValue_direct(e, t) {
    e[t] = this.targetObject[this.propertyName];
  }
  _getValue_array(e, t) {
    const n = this.resolvedProperty;
    for (let a = 0, s = n.length; a !== s; ++a)
      e[t++] = n[a];
  }
  _getValue_arrayElement(e, t) {
    e[t] = this.resolvedProperty[this.propertyIndex];
  }
  _getValue_toArray(e, t) {
    this.resolvedProperty.toArray(e, t);
  }
  // Direct
  _setValue_direct(e, t) {
    this.targetObject[this.propertyName] = e[t];
  }
  _setValue_direct_setNeedsUpdate(e, t) {
    this.targetObject[this.propertyName] = e[t], this.targetObject.needsUpdate = !0;
  }
  _setValue_direct_setMatrixWorldNeedsUpdate(e, t) {
    this.targetObject[this.propertyName] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // EntireArray
  _setValue_array(e, t) {
    const n = this.resolvedProperty;
    for (let a = 0, s = n.length; a !== s; ++a)
      n[a] = e[t++];
  }
  _setValue_array_setNeedsUpdate(e, t) {
    const n = this.resolvedProperty;
    for (let a = 0, s = n.length; a !== s; ++a)
      n[a] = e[t++];
    this.targetObject.needsUpdate = !0;
  }
  _setValue_array_setMatrixWorldNeedsUpdate(e, t) {
    const n = this.resolvedProperty;
    for (let a = 0, s = n.length; a !== s; ++a)
      n[a] = e[t++];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // ArrayElement
  _setValue_arrayElement(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t];
  }
  _setValue_arrayElement_setNeedsUpdate(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.needsUpdate = !0;
  }
  _setValue_arrayElement_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // HasToFromArray
  _setValue_fromArray(e, t) {
    this.resolvedProperty.fromArray(e, t);
  }
  _setValue_fromArray_setNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t), this.targetObject.needsUpdate = !0;
  }
  _setValue_fromArray_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t), this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  _getValue_unbound(e, t) {
    this.bind(), this.getValue(e, t);
  }
  _setValue_unbound(e, t) {
    this.bind(), this.setValue(e, t);
  }
  // create getter / setter pair for a property in the scene graph
  bind() {
    let e = this.node;
    const t = this.parsedPath, n = t.objectName, a = t.propertyName;
    let s = t.propertyIndex;
    if (e || (e = _n.findNode(this.rootNode, t.nodeName), this.node = e), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !e) {
      console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
      return;
    }
    if (n) {
      let h = t.objectIndex;
      switch (n) {
        case "materials":
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.materials) {
            console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
            return;
          }
          e = e.material.materials;
          break;
        case "bones":
          if (!e.skeleton) {
            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
            return;
          }
          e = e.skeleton.bones;
          for (let g = 0; g < e.length; g++)
            if (e[g].name === h) {
              h = g;
              break;
            }
          break;
        case "map":
          if ("map" in e) {
            e = e.map;
            break;
          }
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.map) {
            console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
            return;
          }
          e = e.material.map;
          break;
        default:
          if (e[n] === void 0) {
            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
            return;
          }
          e = e[n];
      }
      if (h !== void 0) {
        if (e[h] === void 0) {
          console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, e);
          return;
        }
        e = e[h];
      }
    }
    const c = e[a];
    if (c === void 0) {
      const h = t.nodeName;
      console.error("THREE.PropertyBinding: Trying to update property for track: " + h + "." + a + " but it wasn't found.", e);
      return;
    }
    let f = this.Versioning.None;
    this.targetObject = e, e.needsUpdate !== void 0 ? f = this.Versioning.NeedsUpdate : e.matrixWorldNeedsUpdate !== void 0 && (f = this.Versioning.MatrixWorldNeedsUpdate);
    let p = this.BindingType.Direct;
    if (s !== void 0) {
      if (a === "morphTargetInfluences") {
        if (!e.geometry) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
          return;
        }
        if (!e.geometry.morphAttributes) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
          return;
        }
        e.morphTargetDictionary[s] !== void 0 && (s = e.morphTargetDictionary[s]);
      }
      p = this.BindingType.ArrayElement, this.resolvedProperty = c, this.propertyIndex = s;
    } else
      c.fromArray !== void 0 && c.toArray !== void 0 ? (p = this.BindingType.HasFromToArray, this.resolvedProperty = c) : Array.isArray(c) ? (p = this.BindingType.EntireArray, this.resolvedProperty = c) : this.propertyName = a;
    this.getValue = this.GetterByBindingType[p], this.setValue = this.SetterByBindingTypeAndVersioning[p][f];
  }
  unbind() {
    this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
}
_n.Composite = XO;
_n.prototype.BindingType = {
  Direct: 0,
  EntireArray: 1,
  ArrayElement: 2,
  HasFromToArray: 3
};
_n.prototype.Versioning = {
  None: 0,
  NeedsUpdate: 1,
  MatrixWorldNeedsUpdate: 2
};
_n.prototype.GetterByBindingType = [
  _n.prototype._getValue_direct,
  _n.prototype._getValue_array,
  _n.prototype._getValue_arrayElement,
  _n.prototype._getValue_toArray
];
_n.prototype.SetterByBindingTypeAndVersioning = [
  [
    // Direct
    _n.prototype._setValue_direct,
    _n.prototype._setValue_direct_setNeedsUpdate,
    _n.prototype._setValue_direct_setMatrixWorldNeedsUpdate
  ],
  [
    // EntireArray
    _n.prototype._setValue_array,
    _n.prototype._setValue_array_setNeedsUpdate,
    _n.prototype._setValue_array_setMatrixWorldNeedsUpdate
  ],
  [
    // ArrayElement
    _n.prototype._setValue_arrayElement,
    _n.prototype._setValue_arrayElement_setNeedsUpdate,
    _n.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
  ],
  [
    // HasToFromArray
    _n.prototype._setValue_fromArray,
    _n.prototype._setValue_fromArray_setNeedsUpdate,
    _n.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
  ]
];
class jO {
  constructor() {
    this.isAnimationObjectGroup = !0, this.uuid = va(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
    const e = {};
    this._indicesByUUID = e;
    for (let n = 0, a = arguments.length; n !== a; ++n)
      e[arguments[n].uuid] = n;
    this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
    const t = this;
    this.stats = {
      objects: {
        get total() {
          return t._objects.length;
        },
        get inUse() {
          return this.total - t.nCachedObjects_;
        }
      },
      get bindingsPerObject() {
        return t._bindings.length;
      }
    };
  }
  add() {
    const e = this._objects, t = this._indicesByUUID, n = this._paths, a = this._parsedPaths, s = this._bindings, c = s.length;
    let f, p = e.length, h = this.nCachedObjects_;
    for (let g = 0, _ = arguments.length; g !== _; ++g) {
      const x = arguments[g], M = x.uuid;
      let E = t[M];
      if (E === void 0) {
        E = p++, t[M] = E, e.push(x);
        for (let A = 0, T = c; A !== T; ++A)
          s[A].push(new _n(x, n[A], a[A]));
      } else if (E < h) {
        f = e[E];
        const A = --h, T = e[A];
        t[T.uuid] = E, e[E] = T, t[M] = A, e[A] = x;
        for (let b = 0, L = c; b !== L; ++b) {
          const R = s[b], U = R[A];
          let F = R[E];
          R[E] = U, F === void 0 && (F = new _n(x, n[b], a[b])), R[A] = F;
        }
      } else
        e[E] !== f && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
    }
    this.nCachedObjects_ = h;
  }
  remove() {
    const e = this._objects, t = this._indicesByUUID, n = this._bindings, a = n.length;
    let s = this.nCachedObjects_;
    for (let c = 0, f = arguments.length; c !== f; ++c) {
      const p = arguments[c], h = p.uuid, g = t[h];
      if (g !== void 0 && g >= s) {
        const _ = s++, x = e[_];
        t[x.uuid] = g, e[g] = x, t[h] = _, e[_] = p;
        for (let M = 0, E = a; M !== E; ++M) {
          const A = n[M], T = A[_], b = A[g];
          A[g] = T, A[_] = b;
        }
      }
    }
    this.nCachedObjects_ = s;
  }
  // remove & forget
  uncache() {
    const e = this._objects, t = this._indicesByUUID, n = this._bindings, a = n.length;
    let s = this.nCachedObjects_, c = e.length;
    for (let f = 0, p = arguments.length; f !== p; ++f) {
      const h = arguments[f], g = h.uuid, _ = t[g];
      if (_ !== void 0)
        if (delete t[g], _ < s) {
          const x = --s, M = e[x], E = --c, A = e[E];
          t[M.uuid] = _, e[_] = M, t[A.uuid] = x, e[x] = A, e.pop();
          for (let T = 0, b = a; T !== b; ++T) {
            const L = n[T], R = L[x], U = L[E];
            L[_] = R, L[x] = U, L.pop();
          }
        } else {
          const x = --c, M = e[x];
          x > 0 && (t[M.uuid] = _), e[_] = M, e.pop();
          for (let E = 0, A = a; E !== A; ++E) {
            const T = n[E];
            T[_] = T[x], T.pop();
          }
        }
    }
    this.nCachedObjects_ = s;
  }
  // Internal interface used by befriended PropertyBinding.Composite:
  subscribe_(e, t) {
    const n = this._bindingsIndicesByPath;
    let a = n[e];
    const s = this._bindings;
    if (a !== void 0)
      return s[a];
    const c = this._paths, f = this._parsedPaths, p = this._objects, h = p.length, g = this.nCachedObjects_, _ = new Array(h);
    a = s.length, n[e] = a, c.push(e), f.push(t), s.push(_);
    for (let x = g, M = p.length; x !== M; ++x) {
      const E = p[x];
      _[x] = new _n(E, e, t);
    }
    return _;
  }
  unsubscribe_(e) {
    const t = this._bindingsIndicesByPath, n = t[e];
    if (n !== void 0) {
      const a = this._paths, s = this._parsedPaths, c = this._bindings, f = c.length - 1, p = c[f], h = e[f];
      t[h] = n, c[n] = p, c.pop(), s[n] = s[f], s.pop(), a[n] = a[f], a.pop();
    }
  }
}
class SC {
  constructor(e, t, n = null, a = t.blendMode) {
    this._mixer = e, this._clip = t, this._localRoot = n, this.blendMode = a;
    const s = t.tracks, c = s.length, f = new Array(c), p = {
      endingStart: Zu,
      endingEnd: Zu
    };
    for (let h = 0; h !== c; ++h) {
      const g = s[h].createInterpolant(null);
      f[h] = g, g.settings = p;
    }
    this._interpolantSettings = p, this._interpolants = f, this._propertyBindings = new Array(c), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = fT, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0;
  }
  // State & Scheduling
  play() {
    return this._mixer._activateAction(this), this;
  }
  stop() {
    return this._mixer._deactivateAction(this), this.reset();
  }
  reset() {
    return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
  }
  isRunning() {
    return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
  }
  // return true when play has been called
  isScheduled() {
    return this._mixer._isActiveAction(this);
  }
  startAt(e) {
    return this._startTime = e, this;
  }
  setLoop(e, t) {
    return this.loop = e, this.repetitions = t, this;
  }
  // Weight
  // set the weight stopping any scheduled fading
  // although .enabled = false yields an effective weight of zero, this
  // method does *not* change .enabled, because it would be confusing
  setEffectiveWeight(e) {
    return this.weight = e, this._effectiveWeight = this.enabled ? e : 0, this.stopFading();
  }
  // return the weight considering fading and .enabled
  getEffectiveWeight() {
    return this._effectiveWeight;
  }
  fadeIn(e) {
    return this._scheduleFading(e, 0, 1);
  }
  fadeOut(e) {
    return this._scheduleFading(e, 1, 0);
  }
  crossFadeFrom(e, t, n) {
    if (e.fadeOut(t), this.fadeIn(t), n) {
      const a = this._clip.duration, s = e._clip.duration, c = s / a, f = a / s;
      e.warp(1, c, t), this.warp(f, 1, t);
    }
    return this;
  }
  crossFadeTo(e, t, n) {
    return e.crossFadeFrom(this, t, n);
  }
  stopFading() {
    const e = this._weightInterpolant;
    return e !== null && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
  }
  // Time Scale Control
  // set the time scale stopping any scheduled warping
  // although .paused = true yields an effective time scale of zero, this
  // method does *not* change .paused, because it would be confusing
  setEffectiveTimeScale(e) {
    return this.timeScale = e, this._effectiveTimeScale = this.paused ? 0 : e, this.stopWarping();
  }
  // return the time scale considering warping and .paused
  getEffectiveTimeScale() {
    return this._effectiveTimeScale;
  }
  setDuration(e) {
    return this.timeScale = this._clip.duration / e, this.stopWarping();
  }
  syncWith(e) {
    return this.time = e.time, this.timeScale = e.timeScale, this.stopWarping();
  }
  halt(e) {
    return this.warp(this._effectiveTimeScale, 0, e);
  }
  warp(e, t, n) {
    const a = this._mixer, s = a.time, c = this.timeScale;
    let f = this._timeScaleInterpolant;
    f === null && (f = a._lendControlInterpolant(), this._timeScaleInterpolant = f);
    const p = f.parameterPositions, h = f.sampleValues;
    return p[0] = s, p[1] = s + n, h[0] = e / c, h[1] = t / c, this;
  }
  stopWarping() {
    const e = this._timeScaleInterpolant;
    return e !== null && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
  }
  // Object Accessors
  getMixer() {
    return this._mixer;
  }
  getClip() {
    return this._clip;
  }
  getRoot() {
    return this._localRoot || this._mixer._root;
  }
  // Interna
  _update(e, t, n, a) {
    if (!this.enabled) {
      this._updateWeight(e);
      return;
    }
    const s = this._startTime;
    if (s !== null) {
      const p = (e - s) * n;
      p < 0 || n === 0 ? t = 0 : (this._startTime = null, t = n * p);
    }
    t *= this._updateTimeScale(e);
    const c = this._updateTime(t), f = this._updateWeight(e);
    if (f > 0) {
      const p = this._interpolants, h = this._propertyBindings;
      switch (this.blendMode) {
        case Jx:
          for (let g = 0, _ = p.length; g !== _; ++g)
            p[g].evaluate(c), h[g].accumulateAdditive(f);
          break;
        case Fg:
        default:
          for (let g = 0, _ = p.length; g !== _; ++g)
            p[g].evaluate(c), h[g].accumulate(a, f);
      }
    }
  }
  _updateWeight(e) {
    let t = 0;
    if (this.enabled) {
      t = this.weight;
      const n = this._weightInterpolant;
      if (n !== null) {
        const a = n.evaluate(e)[0];
        t *= a, e > n.parameterPositions[1] && (this.stopFading(), a === 0 && (this.enabled = !1));
      }
    }
    return this._effectiveWeight = t, t;
  }
  _updateTimeScale(e) {
    let t = 0;
    if (!this.paused) {
      t = this.timeScale;
      const n = this._timeScaleInterpolant;
      if (n !== null) {
        const a = n.evaluate(e)[0];
        t *= a, e > n.parameterPositions[1] && (this.stopWarping(), t === 0 ? this.paused = !0 : this.timeScale = t);
      }
    }
    return this._effectiveTimeScale = t, t;
  }
  _updateTime(e) {
    const t = this._clip.duration, n = this.loop;
    let a = this.time + e, s = this._loopCount;
    const c = n === dT;
    if (e === 0)
      return s === -1 ? a : c && (s & 1) === 1 ? t - a : a;
    if (n === cT) {
      s === -1 && (this._loopCount = 0, this._setEndings(!0, !0, !1));
      e: {
        if (a >= t)
          a = t;
        else if (a < 0)
          a = 0;
        else {
          this.time = a;
          break e;
        }
        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = a, this._mixer.dispatchEvent({
          type: "finished",
          action: this,
          direction: e < 0 ? -1 : 1
        });
      }
    } else {
      if (s === -1 && (e >= 0 ? (s = 0, this._setEndings(!0, this.repetitions === 0, c)) : this._setEndings(this.repetitions === 0, !0, c)), a >= t || a < 0) {
        const f = Math.floor(a / t);
        a -= t * f, s += Math.abs(f);
        const p = this.repetitions - s;
        if (p <= 0)
          this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, a = e > 0 ? t : 0, this.time = a, this._mixer.dispatchEvent({
            type: "finished",
            action: this,
            direction: e > 0 ? 1 : -1
          });
        else {
          if (p === 1) {
            const h = e < 0;
            this._setEndings(h, !h, c);
          } else
            this._setEndings(!1, !1, c);
          this._loopCount = s, this.time = a, this._mixer.dispatchEvent({
            type: "loop",
            action: this,
            loopDelta: f
          });
        }
      } else
        this.time = a;
      if (c && (s & 1) === 1)
        return t - a;
    }
    return a;
  }
  _setEndings(e, t, n) {
    const a = this._interpolantSettings;
    n ? (a.endingStart = Ju, a.endingEnd = Ju) : (e ? a.endingStart = this.zeroSlopeAtStart ? Ju : Zu : a.endingStart = fp, t ? a.endingEnd = this.zeroSlopeAtEnd ? Ju : Zu : a.endingEnd = fp);
  }
  _scheduleFading(e, t, n) {
    const a = this._mixer, s = a.time;
    let c = this._weightInterpolant;
    c === null && (c = a._lendControlInterpolant(), this._weightInterpolant = c);
    const f = c.parameterPositions, p = c.sampleValues;
    return f[0] = s, p[0] = t, f[1] = s + e, p[1] = n, this;
  }
}
const YO = new Float32Array(1);
class ZO extends zo {
  constructor(e) {
    super(), this._root = e, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1;
  }
  _bindAction(e, t) {
    const n = e._localRoot || this._root, a = e._clip.tracks, s = a.length, c = e._propertyBindings, f = e._interpolants, p = n.uuid, h = this._bindingsByRootAndName;
    let g = h[p];
    g === void 0 && (g = {}, h[p] = g);
    for (let _ = 0; _ !== s; ++_) {
      const x = a[_], M = x.name;
      let E = g[M];
      if (E !== void 0)
        ++E.referenceCount, c[_] = E;
      else {
        if (E = c[_], E !== void 0) {
          E._cacheIndex === null && (++E.referenceCount, this._addInactiveBinding(E, p, M));
          continue;
        }
        const A = t && t._propertyBindings[_].binding.parsedPath;
        E = new xC(
          _n.create(n, M, A),
          x.ValueTypeName,
          x.getValueSize()
        ), ++E.referenceCount, this._addInactiveBinding(E, p, M), c[_] = E;
      }
      f[_].resultBuffer = E.buffer;
    }
  }
  _activateAction(e) {
    if (!this._isActiveAction(e)) {
      if (e._cacheIndex === null) {
        const n = (e._localRoot || this._root).uuid, a = e._clip.uuid, s = this._actionsByClip[a];
        this._bindAction(
          e,
          s && s.knownActions[0]
        ), this._addInactiveAction(e, a, n);
      }
      const t = e._propertyBindings;
      for (let n = 0, a = t.length; n !== a; ++n) {
        const s = t[n];
        s.useCount++ === 0 && (this._lendBinding(s), s.saveOriginalState());
      }
      this._lendAction(e);
    }
  }
  _deactivateAction(e) {
    if (this._isActiveAction(e)) {
      const t = e._propertyBindings;
      for (let n = 0, a = t.length; n !== a; ++n) {
        const s = t[n];
        --s.useCount === 0 && (s.restoreOriginalState(), this._takeBackBinding(s));
      }
      this._takeBackAction(e);
    }
  }
  // Memory manager
  _initMemoryManager() {
    this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
    const e = this;
    this.stats = {
      actions: {
        get total() {
          return e._actions.length;
        },
        get inUse() {
          return e._nActiveActions;
        }
      },
      bindings: {
        get total() {
          return e._bindings.length;
        },
        get inUse() {
          return e._nActiveBindings;
        }
      },
      controlInterpolants: {
        get total() {
          return e._controlInterpolants.length;
        },
        get inUse() {
          return e._nActiveControlInterpolants;
        }
      }
    };
  }
  // Memory management for AnimationAction objects
  _isActiveAction(e) {
    const t = e._cacheIndex;
    return t !== null && t < this._nActiveActions;
  }
  _addInactiveAction(e, t, n) {
    const a = this._actions, s = this._actionsByClip;
    let c = s[t];
    if (c === void 0)
      c = {
        knownActions: [e],
        actionByRoot: {}
      }, e._byClipCacheIndex = 0, s[t] = c;
    else {
      const f = c.knownActions;
      e._byClipCacheIndex = f.length, f.push(e);
    }
    e._cacheIndex = a.length, a.push(e), c.actionByRoot[n] = e;
  }
  _removeInactiveAction(e) {
    const t = this._actions, n = t[t.length - 1], a = e._cacheIndex;
    n._cacheIndex = a, t[a] = n, t.pop(), e._cacheIndex = null;
    const s = e._clip.uuid, c = this._actionsByClip, f = c[s], p = f.knownActions, h = p[p.length - 1], g = e._byClipCacheIndex;
    h._byClipCacheIndex = g, p[g] = h, p.pop(), e._byClipCacheIndex = null;
    const _ = f.actionByRoot, x = (e._localRoot || this._root).uuid;
    delete _[x], p.length === 0 && delete c[s], this._removeInactiveBindingsForAction(e);
  }
  _removeInactiveBindingsForAction(e) {
    const t = e._propertyBindings;
    for (let n = 0, a = t.length; n !== a; ++n) {
      const s = t[n];
      --s.referenceCount === 0 && this._removeInactiveBinding(s);
    }
  }
  _lendAction(e) {
    const t = this._actions, n = e._cacheIndex, a = this._nActiveActions++, s = t[a];
    e._cacheIndex = a, t[a] = e, s._cacheIndex = n, t[n] = s;
  }
  _takeBackAction(e) {
    const t = this._actions, n = e._cacheIndex, a = --this._nActiveActions, s = t[a];
    e._cacheIndex = a, t[a] = e, s._cacheIndex = n, t[n] = s;
  }
  // Memory management for PropertyMixer objects
  _addInactiveBinding(e, t, n) {
    const a = this._bindingsByRootAndName, s = this._bindings;
    let c = a[t];
    c === void 0 && (c = {}, a[t] = c), c[n] = e, e._cacheIndex = s.length, s.push(e);
  }
  _removeInactiveBinding(e) {
    const t = this._bindings, n = e.binding, a = n.rootNode.uuid, s = n.path, c = this._bindingsByRootAndName, f = c[a], p = t[t.length - 1], h = e._cacheIndex;
    p._cacheIndex = h, t[h] = p, t.pop(), delete f[s], Object.keys(f).length === 0 && delete c[a];
  }
  _lendBinding(e) {
    const t = this._bindings, n = e._cacheIndex, a = this._nActiveBindings++, s = t[a];
    e._cacheIndex = a, t[a] = e, s._cacheIndex = n, t[n] = s;
  }
  _takeBackBinding(e) {
    const t = this._bindings, n = e._cacheIndex, a = --this._nActiveBindings, s = t[a];
    e._cacheIndex = a, t[a] = e, s._cacheIndex = n, t[n] = s;
  }
  // Memory management of Interpolants for weight and time scale
  _lendControlInterpolant() {
    const e = this._controlInterpolants, t = this._nActiveControlInterpolants++;
    let n = e[t];
    return n === void 0 && (n = new SS(
      new Float32Array(2),
      new Float32Array(2),
      1,
      YO
    ), n.__cacheIndex = t, e[t] = n), n;
  }
  _takeBackControlInterpolant(e) {
    const t = this._controlInterpolants, n = e.__cacheIndex, a = --this._nActiveControlInterpolants, s = t[a];
    e.__cacheIndex = a, t[a] = e, s.__cacheIndex = n, t[n] = s;
  }
  // return an action for a clip optionally using a custom root target
  // object (this method allocates a lot of dynamic memory in case a
  // previously unknown clip/root combination is specified)
  clipAction(e, t, n) {
    const a = t || this._root, s = a.uuid;
    let c = typeof e == "string" ? xp.findByName(a, e) : e;
    const f = c !== null ? c.uuid : e, p = this._actionsByClip[f];
    let h = null;
    if (n === void 0 && (c !== null ? n = c.blendMode : n = Fg), p !== void 0) {
      const _ = p.actionByRoot[s];
      if (_ !== void 0 && _.blendMode === n)
        return _;
      h = p.knownActions[0], c === null && (c = h._clip);
    }
    if (c === null)
      return null;
    const g = new SC(this, c, t, n);
    return this._bindAction(g, h), this._addInactiveAction(g, f, s), g;
  }
  // get an existing action
  existingAction(e, t) {
    const n = t || this._root, a = n.uuid, s = typeof e == "string" ? xp.findByName(n, e) : e, c = s ? s.uuid : e, f = this._actionsByClip[c];
    return f !== void 0 && f.actionByRoot[a] || null;
  }
  // deactivates all previously scheduled actions
  stopAllAction() {
    const e = this._actions, t = this._nActiveActions;
    for (let n = t - 1; n >= 0; --n)
      e[n].stop();
    return this;
  }
  // advance the time and update apply the animation
  update(e) {
    e *= this.timeScale;
    const t = this._actions, n = this._nActiveActions, a = this.time += e, s = Math.sign(e), c = this._accuIndex ^= 1;
    for (let h = 0; h !== n; ++h)
      t[h]._update(a, e, s, c);
    const f = this._bindings, p = this._nActiveBindings;
    for (let h = 0; h !== p; ++h)
      f[h].apply(c);
    return this;
  }
  // Allows you to seek to a specific time in an animation.
  setTime(e) {
    this.time = 0;
    for (let t = 0; t < this._actions.length; t++)
      this._actions[t].time = 0;
    return this.update(e);
  }
  // return this mixer's root target object
  getRoot() {
    return this._root;
  }
  // free all resources specific to a particular clip
  uncacheClip(e) {
    const t = this._actions, n = e.uuid, a = this._actionsByClip, s = a[n];
    if (s !== void 0) {
      const c = s.knownActions;
      for (let f = 0, p = c.length; f !== p; ++f) {
        const h = c[f];
        this._deactivateAction(h);
        const g = h._cacheIndex, _ = t[t.length - 1];
        h._cacheIndex = null, h._byClipCacheIndex = null, _._cacheIndex = g, t[g] = _, t.pop(), this._removeInactiveBindingsForAction(h);
      }
      delete a[n];
    }
  }
  // free all resources specific to a particular root target object
  uncacheRoot(e) {
    const t = e.uuid, n = this._actionsByClip;
    for (const c in n) {
      const f = n[c].actionByRoot, p = f[t];
      p !== void 0 && (this._deactivateAction(p), this._removeInactiveAction(p));
    }
    const a = this._bindingsByRootAndName, s = a[t];
    if (s !== void 0)
      for (const c in s) {
        const f = s[c];
        f.restoreOriginalState(), this._removeInactiveBinding(f);
      }
  }
  // remove a targeted clip from the cache
  uncacheAction(e, t) {
    const n = this.existingAction(e, t);
    n !== null && (this._deactivateAction(n), this._removeInactiveAction(n));
  }
}
class RS {
  constructor(e) {
    this.value = e;
  }
  clone() {
    return new RS(this.value.clone === void 0 ? this.value : this.value.clone());
  }
}
let JO = 0;
class QO extends zo {
  constructor() {
    super(), this.isUniformsGroup = !0, Object.defineProperty(this, "id", { value: JO++ }), this.name = "", this.usage = dp, this.uniforms = [];
  }
  add(e) {
    return this.uniforms.push(e), this;
  }
  remove(e) {
    const t = this.uniforms.indexOf(e);
    return t !== -1 && this.uniforms.splice(t, 1), this;
  }
  setName(e) {
    return this.name = e, this;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  dispose() {
    return this.dispatchEvent({ type: "dispose" }), this;
  }
  copy(e) {
    this.name = e.name, this.usage = e.usage;
    const t = e.uniforms;
    this.uniforms.length = 0;
    for (let n = 0, a = t.length; n < a; n++)
      this.uniforms.push(t[n].clone());
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class KO extends Wg {
  constructor(e, t, n = 1) {
    super(e, t), this.isInstancedInterleavedBuffer = !0, this.meshPerAttribute = n;
  }
  copy(e) {
    return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
  }
  clone(e) {
    const t = super.clone(e);
    return t.meshPerAttribute = this.meshPerAttribute, t;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.isInstancedInterleavedBuffer = !0, t.meshPerAttribute = this.meshPerAttribute, t;
  }
}
class $O {
  constructor(e, t, n, a, s) {
    this.isGLBufferAttribute = !0, this.name = "", this.buffer = e, this.type = t, this.itemSize = n, this.elementSize = a, this.count = s, this.version = 0;
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setBuffer(e) {
    return this.buffer = e, this;
  }
  setType(e, t) {
    return this.type = e, this.elementSize = t, this;
  }
  setItemSize(e) {
    return this.itemSize = e, this;
  }
  setCount(e) {
    return this.count = e, this;
  }
}
class MC {
  constructor(e, t, n = 0, a = 1 / 0) {
    this.ray = new Ep(e, t), this.near = n, this.far = a, this.camera = null, this.layers = new ic(), this.params = {
      Mesh: {},
      Line: { threshold: 1 },
      LOD: {},
      Points: { threshold: 1 },
      Sprite: {}
    };
  }
  set(e, t) {
    this.ray.set(e, t);
  }
  setFromCamera(e, t) {
    t.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(t.matrixWorld), this.ray.direction.set(e.x, e.y, 0.5).unproject(t).sub(this.ray.origin).normalize(), this.camera = t) : t.isOrthographicCamera ? (this.ray.origin.set(e.x, e.y, (t.near + t.far) / (t.near - t.far)).unproject(t), this.ray.direction.set(0, 0, -1).transformDirection(t.matrixWorld), this.camera = t) : console.error("THREE.Raycaster: Unsupported camera type: " + t.type);
  }
  intersectObject(e, t = !0, n = []) {
    return Hx(e, this, n, t), n.sort(VE), n;
  }
  intersectObjects(e, t = !0, n = []) {
    for (let a = 0, s = e.length; a < s; a++)
      Hx(e[a], this, n, t);
    return n.sort(VE), n;
  }
}
function VE(u, e) {
  return u.distance - e.distance;
}
function Hx(u, e, t, n) {
  if (u.layers.test(e.layers) && u.raycast(e, t), n === !0) {
    const a = u.children;
    for (let s = 0, c = a.length; s < c; s++)
      Hx(a[s], e, t, !0);
  }
}
class eI {
  constructor(e = 1, t = 0, n = 0) {
    return this.radius = e, this.phi = t, this.theta = n, this;
  }
  set(e, t, n) {
    return this.radius = e, this.phi = t, this.theta = n, this;
  }
  copy(e) {
    return this.radius = e.radius, this.phi = e.phi, this.theta = e.theta, this;
  }
  // restrict phi to be between EPS and PI-EPS
  makeSafe() {
    return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)), this;
  }
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  setFromCartesianCoords(e, t, n) {
    return this.radius = Math.sqrt(e * e + t * t + n * n), this.radius === 0 ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(e, n), this.phi = Math.acos(hi(t / this.radius, -1, 1))), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class tI {
  constructor(e = 1, t = 0, n = 0) {
    return this.radius = e, this.theta = t, this.y = n, this;
  }
  set(e, t, n) {
    return this.radius = e, this.theta = t, this.y = n, this;
  }
  copy(e) {
    return this.radius = e.radius, this.theta = e.theta, this.y = e.y, this;
  }
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  setFromCartesianCoords(e, t, n) {
    return this.radius = Math.sqrt(e * e + n * n), this.theta = Math.atan2(e, n), this.y = t, this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const GE = /* @__PURE__ */ new Ge();
class nI {
  constructor(e = new Ge(1 / 0, 1 / 0), t = new Ge(-1 / 0, -1 / 0)) {
    this.isBox2 = !0, this.min = e, this.max = t;
  }
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t++)
      this.expandByPoint(e[t]);
    return this;
  }
  setFromCenterAndSize(e, t) {
    const n = GE.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  makeEmpty() {
    return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  containsPoint(e) {
    return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y);
  }
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y;
  }
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y)
    );
  }
  intersectsBox(e) {
    return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y);
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, GE).distanceTo(e);
  }
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const WE = /* @__PURE__ */ new j(), cg = /* @__PURE__ */ new j();
class iI {
  constructor(e = new j(), t = new j()) {
    this.start = e, this.end = t;
  }
  set(e, t) {
    return this.start.copy(e), this.end.copy(t), this;
  }
  copy(e) {
    return this.start.copy(e.start), this.end.copy(e.end), this;
  }
  getCenter(e) {
    return e.addVectors(this.start, this.end).multiplyScalar(0.5);
  }
  delta(e) {
    return e.subVectors(this.end, this.start);
  }
  distanceSq() {
    return this.start.distanceToSquared(this.end);
  }
  distance() {
    return this.start.distanceTo(this.end);
  }
  at(e, t) {
    return this.delta(t).multiplyScalar(e).add(this.start);
  }
  closestPointToPointParameter(e, t) {
    WE.subVectors(e, this.start), cg.subVectors(this.end, this.start);
    const n = cg.dot(cg);
    let s = cg.dot(WE) / n;
    return t && (s = hi(s, 0, 1)), s;
  }
  closestPointToPoint(e, t, n) {
    const a = this.closestPointToPointParameter(e, t);
    return this.delta(n).multiplyScalar(a).add(this.start);
  }
  applyMatrix4(e) {
    return this.start.applyMatrix4(e), this.end.applyMatrix4(e), this;
  }
  equals(e) {
    return e.start.equals(this.start) && e.end.equals(this.end);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const qE = /* @__PURE__ */ new j();
class rI extends Mn {
  constructor(e, t) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = t, this.type = "SpotLightHelper";
    const n = new an(), a = [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      -1,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      0,
      0,
      0,
      -1,
      1
    ];
    for (let c = 0, f = 1, p = 32; c < p; c++, f++) {
      const h = c / p * Math.PI * 2, g = f / p * Math.PI * 2;
      a.push(
        Math.cos(h),
        Math.sin(h),
        1,
        Math.cos(g),
        Math.sin(g),
        1
      );
    }
    n.setAttribute("position", new Rt(a, 3));
    const s = new Ar({ fog: !1, toneMapped: !1 });
    this.cone = new qs(n, s), this.add(this.cone), this.update();
  }
  dispose() {
    this.cone.geometry.dispose(), this.cone.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1);
    const e = this.light.distance ? this.light.distance : 1e3, t = e * Math.tan(this.light.angle);
    this.cone.scale.set(t, t, e), qE.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(qE), this.color !== void 0 ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
  }
}
const Nl = /* @__PURE__ */ new j(), fg = /* @__PURE__ */ new Qt(), k_ = /* @__PURE__ */ new Qt();
class aI extends qs {
  constructor(e) {
    const t = bC(e), n = new an(), a = [], s = [], c = new yt(0, 0, 1), f = new yt(0, 1, 0);
    for (let h = 0; h < t.length; h++) {
      const g = t[h];
      g.parent && g.parent.isBone && (a.push(0, 0, 0), a.push(0, 0, 0), s.push(c.r, c.g, c.b), s.push(f.r, f.g, f.b));
    }
    n.setAttribute("position", new Rt(a, 3)), n.setAttribute("color", new Rt(s, 3));
    const p = new Ar({ vertexColors: !0, depthTest: !1, depthWrite: !1, toneMapped: !1, transparent: !0 });
    super(n, p), this.isSkeletonHelper = !0, this.type = "SkeletonHelper", this.root = e, this.bones = t, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1;
  }
  updateMatrixWorld(e) {
    const t = this.bones, n = this.geometry, a = n.getAttribute("position");
    k_.copy(this.root.matrixWorld).invert();
    for (let s = 0, c = 0; s < t.length; s++) {
      const f = t[s];
      f.parent && f.parent.isBone && (fg.multiplyMatrices(k_, f.matrixWorld), Nl.setFromMatrixPosition(fg), a.setXYZ(c, Nl.x, Nl.y, Nl.z), fg.multiplyMatrices(k_, f.parent.matrixWorld), Nl.setFromMatrixPosition(fg), a.setXYZ(c + 1, Nl.x, Nl.y, Nl.z), c += 2);
    }
    n.getAttribute("position").needsUpdate = !0, super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function bC(u) {
  const e = [];
  u.isBone === !0 && e.push(u);
  for (let t = 0; t < u.children.length; t++)
    e.push.apply(e, bC(u.children[t]));
  return e;
}
class sI extends tr {
  constructor(e, t, n) {
    const a = new fd(t, 4, 2), s = new Xl({ wireframe: !0, fog: !1, toneMapped: !1 });
    super(a, s), this.light = e, this.color = n, this.type = "PointLightHelper", this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = !1, this.update();
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.color !== void 0 ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
  }
}
const oI = /* @__PURE__ */ new j(), XE = /* @__PURE__ */ new yt(), jE = /* @__PURE__ */ new yt();
class lI extends Mn {
  constructor(e, t, n) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, this.type = "HemisphereLightHelper";
    const a = new cd(t);
    a.rotateY(Math.PI * 0.5), this.material = new Xl({ wireframe: !0, fog: !1, toneMapped: !1 }), this.color === void 0 && (this.material.vertexColors = !0);
    const s = a.getAttribute("position"), c = new Float32Array(s.count * 3);
    a.setAttribute("color", new Hn(c, 3)), this.add(new tr(a, this.material)), this.update();
  }
  dispose() {
    this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
  update() {
    const e = this.children[0];
    if (this.color !== void 0)
      this.material.color.set(this.color);
    else {
      const t = e.geometry.getAttribute("color");
      XE.copy(this.light.color), jE.copy(this.light.groundColor);
      for (let n = 0, a = t.count; n < a; n++) {
        const s = n < a / 2 ? XE : jE;
        t.setXYZ(n, s.r, s.g, s.b);
      }
      t.needsUpdate = !0;
    }
    this.light.updateWorldMatrix(!0, !1), e.lookAt(oI.setFromMatrixPosition(this.light.matrixWorld).negate());
  }
}
class uI extends qs {
  constructor(e = 10, t = 10, n = 4473924, a = 8947848) {
    n = new yt(n), a = new yt(a);
    const s = t / 2, c = e / t, f = e / 2, p = [], h = [];
    for (let x = 0, M = 0, E = -f; x <= t; x++, E += c) {
      p.push(-f, 0, E, f, 0, E), p.push(E, 0, -f, E, 0, f);
      const A = x === s ? n : a;
      A.toArray(h, M), M += 3, A.toArray(h, M), M += 3, A.toArray(h, M), M += 3, A.toArray(h, M), M += 3;
    }
    const g = new an();
    g.setAttribute("position", new Rt(p, 3)), g.setAttribute("color", new Rt(h, 3));
    const _ = new Ar({ vertexColors: !0, toneMapped: !1 });
    super(g, _), this.type = "GridHelper";
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class cI extends qs {
  constructor(e = 10, t = 16, n = 8, a = 64, s = 4473924, c = 8947848) {
    s = new yt(s), c = new yt(c);
    const f = [], p = [];
    if (t > 1)
      for (let _ = 0; _ < t; _++) {
        const x = _ / t * (Math.PI * 2), M = Math.sin(x) * e, E = Math.cos(x) * e;
        f.push(0, 0, 0), f.push(M, 0, E);
        const A = _ & 1 ? s : c;
        p.push(A.r, A.g, A.b), p.push(A.r, A.g, A.b);
      }
    for (let _ = 0; _ < n; _++) {
      const x = _ & 1 ? s : c, M = e - e / n * _;
      for (let E = 0; E < a; E++) {
        let A = E / a * (Math.PI * 2), T = Math.sin(A) * M, b = Math.cos(A) * M;
        f.push(T, 0, b), p.push(x.r, x.g, x.b), A = (E + 1) / a * (Math.PI * 2), T = Math.sin(A) * M, b = Math.cos(A) * M, f.push(T, 0, b), p.push(x.r, x.g, x.b);
      }
    }
    const h = new an();
    h.setAttribute("position", new Rt(f, 3)), h.setAttribute("color", new Rt(p, 3));
    const g = new Ar({ vertexColors: !0, toneMapped: !1 });
    super(h, g), this.type = "PolarGridHelper";
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
const YE = /* @__PURE__ */ new j(), dg = /* @__PURE__ */ new j(), ZE = /* @__PURE__ */ new j();
class fI extends Mn {
  constructor(e, t, n) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, this.type = "DirectionalLightHelper", t === void 0 && (t = 1);
    let a = new an();
    a.setAttribute("position", new Rt([
      -t,
      t,
      0,
      t,
      t,
      0,
      t,
      -t,
      0,
      -t,
      -t,
      0,
      -t,
      t,
      0
    ], 3));
    const s = new Ar({ fog: !1, toneMapped: !1 });
    this.lightPlane = new Wl(a, s), this.add(this.lightPlane), a = new an(), a.setAttribute("position", new Rt([0, 0, 0, 0, 0, 1], 3)), this.targetLine = new Wl(a, s), this.add(this.targetLine), this.update();
  }
  dispose() {
    this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), YE.setFromMatrixPosition(this.light.matrixWorld), dg.setFromMatrixPosition(this.light.target.matrixWorld), ZE.subVectors(dg, YE), this.lightPlane.lookAt(dg), this.color !== void 0 ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(dg), this.targetLine.scale.z = ZE.length();
  }
}
const hg = /* @__PURE__ */ new j(), di = /* @__PURE__ */ new Tp();
class dI extends qs {
  constructor(e) {
    const t = new an(), n = new Ar({ color: 16777215, vertexColors: !0, toneMapped: !1 }), a = [], s = [], c = {};
    f("n1", "n2"), f("n2", "n4"), f("n4", "n3"), f("n3", "n1"), f("f1", "f2"), f("f2", "f4"), f("f4", "f3"), f("f3", "f1"), f("n1", "f1"), f("n2", "f2"), f("n3", "f3"), f("n4", "f4"), f("p", "n1"), f("p", "n2"), f("p", "n3"), f("p", "n4"), f("u1", "u2"), f("u2", "u3"), f("u3", "u1"), f("c", "t"), f("p", "c"), f("cn1", "cn2"), f("cn3", "cn4"), f("cf1", "cf2"), f("cf3", "cf4");
    function f(E, A) {
      p(E), p(A);
    }
    function p(E) {
      a.push(0, 0, 0), s.push(0, 0, 0), c[E] === void 0 && (c[E] = []), c[E].push(a.length / 3 - 1);
    }
    t.setAttribute("position", new Rt(a, 3)), t.setAttribute("color", new Rt(s, 3)), super(t, n), this.type = "CameraHelper", this.camera = e, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.pointMap = c, this.update();
    const h = new yt(16755200), g = new yt(16711680), _ = new yt(43775), x = new yt(16777215), M = new yt(3355443);
    this.setColors(h, g, _, x, M);
  }
  setColors(e, t, n, a, s) {
    const f = this.geometry.getAttribute("color");
    f.setXYZ(0, e.r, e.g, e.b), f.setXYZ(1, e.r, e.g, e.b), f.setXYZ(2, e.r, e.g, e.b), f.setXYZ(3, e.r, e.g, e.b), f.setXYZ(4, e.r, e.g, e.b), f.setXYZ(5, e.r, e.g, e.b), f.setXYZ(6, e.r, e.g, e.b), f.setXYZ(7, e.r, e.g, e.b), f.setXYZ(8, e.r, e.g, e.b), f.setXYZ(9, e.r, e.g, e.b), f.setXYZ(10, e.r, e.g, e.b), f.setXYZ(11, e.r, e.g, e.b), f.setXYZ(12, e.r, e.g, e.b), f.setXYZ(13, e.r, e.g, e.b), f.setXYZ(14, e.r, e.g, e.b), f.setXYZ(15, e.r, e.g, e.b), f.setXYZ(16, e.r, e.g, e.b), f.setXYZ(17, e.r, e.g, e.b), f.setXYZ(18, e.r, e.g, e.b), f.setXYZ(19, e.r, e.g, e.b), f.setXYZ(20, e.r, e.g, e.b), f.setXYZ(21, e.r, e.g, e.b), f.setXYZ(22, e.r, e.g, e.b), f.setXYZ(23, e.r, e.g, e.b), f.setXYZ(24, t.r, t.g, t.b), f.setXYZ(25, t.r, t.g, t.b), f.setXYZ(26, t.r, t.g, t.b), f.setXYZ(27, t.r, t.g, t.b), f.setXYZ(28, t.r, t.g, t.b), f.setXYZ(29, t.r, t.g, t.b), f.setXYZ(30, t.r, t.g, t.b), f.setXYZ(31, t.r, t.g, t.b), f.setXYZ(32, n.r, n.g, n.b), f.setXYZ(33, n.r, n.g, n.b), f.setXYZ(34, n.r, n.g, n.b), f.setXYZ(35, n.r, n.g, n.b), f.setXYZ(36, n.r, n.g, n.b), f.setXYZ(37, n.r, n.g, n.b), f.setXYZ(38, a.r, a.g, a.b), f.setXYZ(39, a.r, a.g, a.b), f.setXYZ(40, s.r, s.g, s.b), f.setXYZ(41, s.r, s.g, s.b), f.setXYZ(42, s.r, s.g, s.b), f.setXYZ(43, s.r, s.g, s.b), f.setXYZ(44, s.r, s.g, s.b), f.setXYZ(45, s.r, s.g, s.b), f.setXYZ(46, s.r, s.g, s.b), f.setXYZ(47, s.r, s.g, s.b), f.setXYZ(48, s.r, s.g, s.b), f.setXYZ(49, s.r, s.g, s.b), f.needsUpdate = !0;
  }
  update() {
    const e = this.geometry, t = this.pointMap, n = 1, a = 1;
    di.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse), Mi("c", t, e, di, 0, 0, -1), Mi("t", t, e, di, 0, 0, 1), Mi("n1", t, e, di, -n, -a, -1), Mi("n2", t, e, di, n, -a, -1), Mi("n3", t, e, di, -n, a, -1), Mi("n4", t, e, di, n, a, -1), Mi("f1", t, e, di, -n, -a, 1), Mi("f2", t, e, di, n, -a, 1), Mi("f3", t, e, di, -n, a, 1), Mi("f4", t, e, di, n, a, 1), Mi("u1", t, e, di, n * 0.7, a * 1.1, -1), Mi("u2", t, e, di, -n * 0.7, a * 1.1, -1), Mi("u3", t, e, di, 0, a * 2, -1), Mi("cf1", t, e, di, -n, 0, 1), Mi("cf2", t, e, di, n, 0, 1), Mi("cf3", t, e, di, 0, -a, 1), Mi("cf4", t, e, di, 0, a, 1), Mi("cn1", t, e, di, -n, 0, -1), Mi("cn2", t, e, di, n, 0, -1), Mi("cn3", t, e, di, 0, -a, -1), Mi("cn4", t, e, di, 0, a, -1), e.getAttribute("position").needsUpdate = !0;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function Mi(u, e, t, n, a, s, c) {
  hg.set(a, s, c).unproject(n);
  const f = e[u];
  if (f !== void 0) {
    const p = t.getAttribute("position");
    for (let h = 0, g = f.length; h < g; h++)
      p.setXYZ(f[h], hg.x, hg.y, hg.z);
  }
}
const pg = /* @__PURE__ */ new Gs();
class hI extends qs {
  constructor(e, t = 16776960) {
    const n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), a = new Float32Array(8 * 3), s = new an();
    s.setIndex(new Hn(n, 1)), s.setAttribute("position", new Hn(a, 3)), super(s, new Ar({ color: t, toneMapped: !1 })), this.object = e, this.type = "BoxHelper", this.matrixAutoUpdate = !1, this.update();
  }
  update(e) {
    if (e !== void 0 && console.warn("THREE.BoxHelper: .update() has no longer arguments."), this.object !== void 0 && pg.setFromObject(this.object), pg.isEmpty())
      return;
    const t = pg.min, n = pg.max, a = this.geometry.attributes.position, s = a.array;
    s[0] = n.x, s[1] = n.y, s[2] = n.z, s[3] = t.x, s[4] = n.y, s[5] = n.z, s[6] = t.x, s[7] = t.y, s[8] = n.z, s[9] = n.x, s[10] = t.y, s[11] = n.z, s[12] = n.x, s[13] = n.y, s[14] = t.z, s[15] = t.x, s[16] = n.y, s[17] = t.z, s[18] = t.x, s[19] = t.y, s[20] = t.z, s[21] = n.x, s[22] = t.y, s[23] = t.z, a.needsUpdate = !0, this.geometry.computeBoundingSphere();
  }
  setFromObject(e) {
    return this.object = e, this.update(), this;
  }
  copy(e, t) {
    return super.copy(e, t), this.object = e.object, this;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class pI extends qs {
  constructor(e, t = 16776960) {
    const n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), a = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], s = new an();
    s.setIndex(new Hn(n, 1)), s.setAttribute("position", new Rt(a, 3)), super(s, new Ar({ color: t, toneMapped: !1 })), this.box = e, this.type = "Box3Helper", this.geometry.computeBoundingSphere();
  }
  updateMatrixWorld(e) {
    const t = this.box;
    t.isEmpty() || (t.getCenter(this.position), t.getSize(this.scale), this.scale.multiplyScalar(0.5), super.updateMatrixWorld(e));
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class mI extends Wl {
  constructor(e, t = 1, n = 16776960) {
    const a = n, s = [1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0], c = new an();
    c.setAttribute("position", new Rt(s, 3)), c.computeBoundingSphere(), super(c, new Ar({ color: a, toneMapped: !1 })), this.type = "PlaneHelper", this.plane = e, this.size = t;
    const f = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0], p = new an();
    p.setAttribute("position", new Rt(f, 3)), p.computeBoundingSphere(), this.add(new tr(p, new Xl({ color: a, opacity: 0.2, transparent: !0, depthWrite: !1, toneMapped: !1 })));
  }
  updateMatrixWorld(e) {
    this.position.set(0, 0, 0), this.scale.set(0.5 * this.size, 0.5 * this.size, 1), this.lookAt(this.plane.normal), this.translateZ(-this.plane.constant), super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose(), this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
}
const JE = /* @__PURE__ */ new j();
let mg, V_;
class vI extends Mn {
  // dir is assumed to be normalized
  constructor(e = new j(0, 0, 1), t = new j(0, 0, 0), n = 1, a = 16776960, s = n * 0.2, c = s * 0.2) {
    super(), this.type = "ArrowHelper", mg === void 0 && (mg = new an(), mg.setAttribute("position", new Rt([0, 0, 0, 0, 1, 0], 3)), V_ = new cc(0, 0.5, 1, 5, 1), V_.translate(0, -0.5, 0)), this.position.copy(t), this.line = new Wl(mg, new Ar({ color: a, toneMapped: !1 })), this.line.matrixAutoUpdate = !1, this.add(this.line), this.cone = new tr(V_, new Xl({ color: a, toneMapped: !1 })), this.cone.matrixAutoUpdate = !1, this.add(this.cone), this.setDirection(e), this.setLength(n, s, c);
  }
  setDirection(e) {
    if (e.y > 0.99999)
      this.quaternion.set(0, 0, 0, 1);
    else if (e.y < -0.99999)
      this.quaternion.set(1, 0, 0, 0);
    else {
      JE.set(e.z, 0, -e.x).normalize();
      const t = Math.acos(e.y);
      this.quaternion.setFromAxisAngle(JE, t);
    }
  }
  setLength(e, t = e * 0.2, n = t * 0.2) {
    this.line.scale.set(1, Math.max(1e-4, e - t), 1), this.line.updateMatrix(), this.cone.scale.set(n, t, n), this.cone.position.y = e, this.cone.updateMatrix();
  }
  setColor(e) {
    this.line.material.color.set(e), this.cone.material.color.set(e);
  }
  copy(e) {
    return super.copy(e, !1), this.line.copy(e.line), this.cone.copy(e.cone), this;
  }
  dispose() {
    this.line.geometry.dispose(), this.line.material.dispose(), this.cone.geometry.dispose(), this.cone.material.dispose();
  }
}
class gI extends qs {
  constructor(e = 1) {
    const t = [
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e
    ], n = [
      1,
      0,
      0,
      1,
      0.6,
      0,
      0,
      1,
      0,
      0.6,
      1,
      0,
      0,
      0,
      1,
      0,
      0.6,
      1
    ], a = new an();
    a.setAttribute("position", new Rt(t, 3)), a.setAttribute("color", new Rt(n, 3));
    const s = new Ar({ vertexColors: !0, toneMapped: !1 });
    super(a, s), this.type = "AxesHelper";
  }
  setColors(e, t, n) {
    const a = new yt(), s = this.geometry.attributes.color.array;
    return a.set(e), a.toArray(s, 0), a.toArray(s, 3), a.set(t), a.toArray(s, 6), a.toArray(s, 9), a.set(n), a.toArray(s, 12), a.toArray(s, 15), this.geometry.attributes.color.needsUpdate = !0, this;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class yI {
  constructor() {
    this.type = "ShapePath", this.color = new yt(), this.subPaths = [], this.currentPath = null;
  }
  moveTo(e, t) {
    return this.currentPath = new pp(), this.subPaths.push(this.currentPath), this.currentPath.moveTo(e, t), this;
  }
  lineTo(e, t) {
    return this.currentPath.lineTo(e, t), this;
  }
  quadraticCurveTo(e, t, n, a) {
    return this.currentPath.quadraticCurveTo(e, t, n, a), this;
  }
  bezierCurveTo(e, t, n, a, s, c) {
    return this.currentPath.bezierCurveTo(e, t, n, a, s, c), this;
  }
  splineThru(e) {
    return this.currentPath.splineThru(e), this;
  }
  toShapes(e) {
    function t(b) {
      const L = [];
      for (let R = 0, U = b.length; R < U; R++) {
        const F = b[R], V = new rc();
        V.curves = F.curves, L.push(V);
      }
      return L;
    }
    function n(b, L) {
      const R = L.length;
      let U = !1;
      for (let F = R - 1, V = 0; V < R; F = V++) {
        let k = L[F], G = L[V], z = G.x - k.x, I = G.y - k.y;
        if (Math.abs(I) > Number.EPSILON) {
          if (I < 0 && (k = L[V], z = -z, G = L[F], I = -I), b.y < k.y || b.y > G.y)
            continue;
          if (b.y === k.y) {
            if (b.x === k.x)
              return !0;
          } else {
            const Q = I * (b.x - k.x) - z * (b.y - k.y);
            if (Q === 0)
              return !0;
            if (Q < 0)
              continue;
            U = !U;
          }
        } else {
          if (b.y !== k.y)
            continue;
          if (G.x <= b.x && b.x <= k.x || k.x <= b.x && b.x <= G.x)
            return !0;
        }
      }
      return U;
    }
    const a = ks.isClockWise, s = this.subPaths;
    if (s.length === 0)
      return [];
    let c, f, p;
    const h = [];
    if (s.length === 1)
      return f = s[0], p = new rc(), p.curves = f.curves, h.push(p), h;
    let g = !a(s[0].getPoints());
    g = e ? !g : g;
    const _ = [], x = [];
    let M = [], E = 0, A;
    x[E] = void 0, M[E] = [];
    for (let b = 0, L = s.length; b < L; b++)
      f = s[b], A = f.getPoints(), c = a(A), c = e ? !c : c, c ? (!g && x[E] && E++, x[E] = { s: new rc(), p: A }, x[E].s.curves = f.curves, g && E++, M[E] = []) : M[E].push({ h: f, p: A[0] });
    if (!x[0])
      return t(s);
    if (x.length > 1) {
      let b = !1, L = 0;
      for (let R = 0, U = x.length; R < U; R++)
        _[R] = [];
      for (let R = 0, U = x.length; R < U; R++) {
        const F = M[R];
        for (let V = 0; V < F.length; V++) {
          const k = F[V];
          let G = !0;
          for (let z = 0; z < x.length; z++)
            n(k.p, x[z].p) && (R !== z && L++, G ? (G = !1, _[z].push(k)) : b = !0);
          G && _[R].push(k);
        }
      }
      L > 0 && b === !1 && (M = _);
    }
    let T;
    for (let b = 0, L = x.length; b < L; b++) {
      p = x[b].s, h.push(p), T = M[b];
      for (let R = 0, U = T.length; R < U; R++)
        p.holes.push(T[R].h);
    }
    return h;
  }
}
class _I extends jl {
  // @deprecated, r144
  constructor(e, t, n, a, s, c) {
    console.warn("THREE.BoxBufferGeometry has been renamed to THREE.BoxGeometry."), super(e, t, n, a, s, c);
  }
}
class xI extends Rp {
  // @deprecated, r144
  constructor(e, t, n, a) {
    console.warn("THREE.CapsuleBufferGeometry has been renamed to THREE.CapsuleGeometry."), super(e, t, n, a);
  }
}
class SI extends Lp {
  // @deprecated, r144
  constructor(e, t, n, a) {
    console.warn("THREE.CircleBufferGeometry has been renamed to THREE.CircleGeometry."), super(e, t, n, a);
  }
}
class MI extends Dp {
  // @deprecated, r144
  constructor(e, t, n, a, s, c, f) {
    console.warn("THREE.ConeBufferGeometry has been renamed to THREE.ConeGeometry."), super(e, t, n, a, s, c, f);
  }
}
class bI extends cc {
  // @deprecated, r144
  constructor(e, t, n, a, s, c, f, p) {
    console.warn("THREE.CylinderBufferGeometry has been renamed to THREE.CylinderGeometry."), super(e, t, n, a, s, c, f, p);
  }
}
class EI extends Pp {
  // @deprecated, r144
  constructor(e, t) {
    console.warn("THREE.DodecahedronBufferGeometry has been renamed to THREE.DodecahedronGeometry."), super(e, t);
  }
}
class wI extends Up {
  // @deprecated, r144
  constructor(e, t) {
    console.warn("THREE.ExtrudeBufferGeometry has been renamed to THREE.ExtrudeGeometry."), super(e, t);
  }
}
class TI extends Np {
  // @deprecated, r144
  constructor(e, t) {
    console.warn("THREE.IcosahedronBufferGeometry has been renamed to THREE.IcosahedronGeometry."), super(e, t);
  }
}
class CI extends ud {
  // @deprecated, r144
  constructor(e, t, n, a) {
    console.warn("THREE.LatheBufferGeometry has been renamed to THREE.LatheGeometry."), super(e, t, n, a);
  }
}
class AI extends cd {
  // @deprecated, r144
  constructor(e, t) {
    console.warn("THREE.OctahedronBufferGeometry has been renamed to THREE.OctahedronGeometry."), super(e, t);
  }
}
class RI extends od {
  // @deprecated, r144
  constructor(e, t, n, a) {
    console.warn("THREE.PlaneBufferGeometry has been renamed to THREE.PlaneGeometry."), super(e, t, n, a);
  }
}
class LI extends Oo {
  // @deprecated, r144
  constructor(e, t, n, a) {
    console.warn("THREE.PolyhedronBufferGeometry has been renamed to THREE.PolyhedronGeometry."), super(e, t, n, a);
  }
}
class DI extends zp {
  // @deprecated, r144
  constructor(e, t, n, a, s, c) {
    console.warn("THREE.RingBufferGeometry has been renamed to THREE.RingGeometry."), super(e, t, n, a, s, c);
  }
}
class PI extends Op {
  // @deprecated, r144
  constructor(e, t) {
    console.warn("THREE.ShapeBufferGeometry has been renamed to THREE.ShapeGeometry."), super(e, t);
  }
}
class UI extends fd {
  // @deprecated, r144
  constructor(e, t, n, a, s, c, f) {
    console.warn("THREE.SphereBufferGeometry has been renamed to THREE.SphereGeometry."), super(e, t, n, a, s, c, f);
  }
}
class NI extends Ip {
  // @deprecated, r144
  constructor(e, t) {
    console.warn("THREE.TetrahedronBufferGeometry has been renamed to THREE.TetrahedronGeometry."), super(e, t);
  }
}
class zI extends Fp {
  // @deprecated, r144
  constructor(e, t, n, a, s) {
    console.warn("THREE.TorusBufferGeometry has been renamed to THREE.TorusGeometry."), super(e, t, n, a, s);
  }
}
class OI extends Bp {
  // @deprecated, r144
  constructor(e, t, n, a, s, c) {
    console.warn("THREE.TorusKnotBufferGeometry has been renamed to THREE.TorusKnotGeometry."), super(e, t, n, a, s, c);
  }
}
class II extends Hp {
  // @deprecated, r144
  constructor(e, t, n, a, s) {
    console.warn("THREE.TubeBufferGeometry has been renamed to THREE.TubeGeometry."), super(e, t, n, a, s);
  }
}
typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
  revision: zg
} }));
typeof window < "u" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = zg);
const FI = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ACESFilmicToneMapping: jx,
  AddEquation: Xu,
  AddOperation: Ww,
  AdditiveAnimationBlendMode: Jx,
  AdditiveBlending: ix,
  AlphaFormat: eT,
  AlwaysDepth: Iw,
  AlwaysStencilFunc: vT,
  AmbientLight: pC,
  AmbientLightProbe: DO,
  AnimationAction: SC,
  AnimationClip: xp,
  AnimationLoader: yO,
  AnimationMixer: ZO,
  AnimationObjectGroup: jO,
  AnimationUtils: pO,
  ArcCurve: HT,
  ArrayCamera: DT,
  ArrowHelper: vI,
  Audio: _C,
  AudioAnalyser: IO,
  AudioContext: wS,
  AudioListener: NO,
  AudioLoader: RO,
  AxesHelper: gI,
  BackSide: Cr,
  BasicDepthPacking: hT,
  BasicShadowMap: bw,
  Bone: uS,
  BooleanKeyframeTrack: fc,
  Box2: nI,
  Box3: Gs,
  Box3Helper: pI,
  BoxBufferGeometry: _I,
  BoxGeometry: jl,
  BoxHelper: hI,
  BufferAttribute: Hn,
  BufferGeometry: an,
  BufferGeometryLoader: yC,
  ByteType: Zw,
  Cache: uc,
  Camera: Tp,
  CameraHelper: dI,
  CanvasTexture: Fz,
  CapsuleBufferGeometry: xI,
  CapsuleGeometry: Rp,
  CatmullRomCurve3: kT,
  CineonToneMapping: jw,
  CircleBufferGeometry: SI,
  CircleGeometry: Lp,
  ClampToEdgeWrapping: mr,
  Clock: TS,
  Color: yt,
  ColorKeyframeTrack: MS,
  ColorManagement: jr,
  CompressedArrayTexture: Iz,
  CompressedTexture: fS,
  CompressedTextureLoader: _O,
  ConeBufferGeometry: MI,
  ConeGeometry: Dp,
  CubeCamera: bT,
  CubeReflectionMapping: kl,
  CubeRefractionMapping: Vl,
  CubeTexture: Cp,
  CubeTextureLoader: xO,
  CubeUVReflectionMapping: sd,
  CubicBezierCurve: hS,
  CubicBezierCurve3: VT,
  CubicInterpolant: sC,
  CullFaceBack: nx,
  CullFaceFront: Mw,
  CullFaceFrontBack: N2,
  CullFaceNone: Sw,
  Curve: hs,
  CurvePath: WT,
  CustomBlending: Ew,
  CustomToneMapping: Yw,
  CylinderBufferGeometry: bI,
  CylinderGeometry: cc,
  Cylindrical: tI,
  Data3DTexture: eS,
  DataArrayTexture: Bg,
  DataTexture: ed,
  DataTextureLoader: SO,
  DataUtils: jL,
  DecrementStencilOp: j2,
  DecrementWrapStencilOp: Z2,
  DefaultLoadingManager: uC,
  DepthFormat: Hl,
  DepthStencilFormat: sc,
  DepthTexture: sS,
  DirectionalLight: hC,
  DirectionalLightHelper: fI,
  DiscreteInterpolant: oC,
  DisplayP3ColorSpace: Qx,
  DodecahedronBufferGeometry: EI,
  DodecahedronGeometry: Pp,
  DoubleSide: fs,
  DstAlphaFactor: Dw,
  DstColorFactor: Uw,
  DynamicCopyUsage: cL,
  DynamicDrawUsage: rL,
  DynamicReadUsage: oL,
  EdgesGeometry: qT,
  EllipseCurve: Xg,
  EqualDepth: Bw,
  EqualStencilFunc: $2,
  EquirectangularReflectionMapping: ap,
  EquirectangularRefractionMapping: sp,
  Euler: wp,
  EventDispatcher: zo,
  ExtrudeBufferGeometry: wI,
  ExtrudeGeometry: Up,
  FileLoader: No,
  Float16BufferAttribute: $L,
  Float32BufferAttribute: Rt,
  Float64BufferAttribute: eD,
  FloatType: Hs,
  Fog: Gg,
  FogExp2: Vg,
  FramebufferTexture: Oz,
  FrontSide: Do,
  Frustum: Hg,
  GLBufferAttribute: $O,
  GLSL1: dL,
  GLSL3: Dx,
  GreaterDepth: kw,
  GreaterEqualDepth: Hw,
  GreaterEqualStencilFunc: iL,
  GreaterStencilFunc: tL,
  GridHelper: uI,
  Group: Qf,
  HalfFloatType: ac,
  HemisphereLight: cC,
  HemisphereLightHelper: lI,
  HemisphereLightProbe: LO,
  IcosahedronBufferGeometry: TI,
  IcosahedronGeometry: Np,
  ImageBitmapLoader: AO,
  ImageLoader: Sp,
  ImageUtils: $x,
  IncrementStencilOp: X2,
  IncrementWrapStencilOp: Y2,
  InstancedBufferAttribute: rd,
  InstancedBufferGeometry: gC,
  InstancedInterleavedBuffer: KO,
  InstancedMesh: IT,
  Int16BufferAttribute: QL,
  Int32BufferAttribute: KL,
  Int8BufferAttribute: YL,
  IntType: Qw,
  InterleavedBuffer: Wg,
  InterleavedBufferAttribute: oc,
  Interpolant: kp,
  InterpolateDiscrete: up,
  InterpolateLinear: cp,
  InterpolateSmooth: bg,
  InvertStencilOp: J2,
  KeepStencilOp: Eg,
  KeyframeTrack: ps,
  LOD: zT,
  LatheBufferGeometry: CI,
  LatheGeometry: ud,
  Layers: ic,
  LessDepth: Fw,
  LessEqualDepth: Tg,
  LessEqualStencilFunc: eL,
  LessStencilFunc: K2,
  Light: Yl,
  LightProbe: Zg,
  Line: Wl,
  Line3: iI,
  LineBasicMaterial: Ar,
  LineCurve: jg,
  LineCurve3: GT,
  LineDashedMaterial: rC,
  LineLoop: FT,
  LineSegments: qs,
  LinearEncoding: Uo,
  LinearFilter: ai,
  LinearInterpolant: SS,
  LinearMipMapLinearFilter: B2,
  LinearMipMapNearestFilter: F2,
  LinearMipmapLinearFilter: Gl,
  LinearMipmapNearestFilter: Yx,
  LinearSRGBColorSpace: td,
  LinearToneMapping: qw,
  Loader: ga,
  LoaderUtils: Bx,
  LoadingManager: bS,
  LoopOnce: cT,
  LoopPingPong: dT,
  LoopRepeat: fT,
  LuminanceAlphaFormat: nT,
  LuminanceFormat: tT,
  MOUSE: P2,
  Material: nr,
  MaterialLoader: Jg,
  MathUtils: TL,
  Matrix3: cn,
  Matrix4: Qt,
  MaxEquation: ox,
  Mesh: tr,
  MeshBasicMaterial: Xl,
  MeshDepthMaterial: rS,
  MeshDistanceMaterial: aS,
  MeshLambertMaterial: nC,
  MeshMatcapMaterial: iC,
  MeshNormalMaterial: tC,
  MeshPhongMaterial: $T,
  MeshPhysicalMaterial: KT,
  MeshStandardMaterial: yS,
  MeshToonMaterial: eC,
  MinEquation: sx,
  MirroredRepeatWrapping: lp,
  MixOperation: Gw,
  MultiplyBlending: ax,
  MultiplyOperation: bp,
  NearestFilter: bi,
  NearestMipMapLinearFilter: I2,
  NearestMipMapNearestFilter: O2,
  NearestMipmapLinearFilter: $h,
  NearestMipmapNearestFilter: Cg,
  NeverDepth: Ow,
  NeverStencilFunc: Q2,
  NoBlending: Lo,
  NoColorSpace: G2,
  NoToneMapping: ds,
  NormalAnimationBlendMode: Fg,
  NormalBlending: ec,
  NotEqualDepth: Vw,
  NotEqualStencilFunc: nL,
  NumberKeyframeTrack: yp,
  Object3D: Mn,
  ObjectLoader: TO,
  ObjectSpaceNormalMap: mT,
  OctahedronBufferGeometry: AI,
  OctahedronGeometry: cd,
  OneFactor: Aw,
  OneMinusDstAlphaFactor: Pw,
  OneMinusDstColorFactor: Nw,
  OneMinusSrcAlphaFactor: Xx,
  OneMinusSrcColorFactor: Lw,
  OrthographicCamera: Ap,
  PCFShadowMap: Og,
  PCFSoftShadowMap: Kh,
  PMREMGenerator: Ux,
  Path: pp,
  PerspectiveCamera: Xi,
  Plane: Il,
  PlaneBufferGeometry: RI,
  PlaneGeometry: od,
  PlaneHelper: mI,
  PointLight: dC,
  PointLightHelper: sI,
  Points: BT,
  PointsMaterial: cS,
  PolarGridHelper: cI,
  PolyhedronBufferGeometry: LI,
  PolyhedronGeometry: Oo,
  PositionalAudio: OO,
  PropertyBinding: _n,
  PropertyMixer: xC,
  QuadraticBezierCurve: pS,
  QuadraticBezierCurve3: mS,
  Quaternion: Qr,
  QuaternionKeyframeTrack: dd,
  QuaternionLinearInterpolant: lC,
  RED_GREEN_RGTC2_Format: Rx,
  RED_RGTC1_Format: uT,
  REVISION: zg,
  RGBADepthPacking: pT,
  RGBAFormat: Jr,
  RGBAIntegerFormat: oT,
  RGBA_ASTC_10x10_Format: wx,
  RGBA_ASTC_10x5_Format: Mx,
  RGBA_ASTC_10x6_Format: bx,
  RGBA_ASTC_10x8_Format: Ex,
  RGBA_ASTC_12x10_Format: Tx,
  RGBA_ASTC_12x12_Format: Cx,
  RGBA_ASTC_4x4_Format: px,
  RGBA_ASTC_5x4_Format: mx,
  RGBA_ASTC_5x5_Format: vx,
  RGBA_ASTC_6x5_Format: gx,
  RGBA_ASTC_6x6_Format: yx,
  RGBA_ASTC_8x5_Format: _x,
  RGBA_ASTC_8x6_Format: xx,
  RGBA_ASTC_8x8_Format: Sx,
  RGBA_BPTC_Format: Mg,
  RGBA_ETC2_EAC_Format: hx,
  RGBA_PVRTC_2BPPV1_Format: fx,
  RGBA_PVRTC_4BPPV1_Format: cx,
  RGBA_S3TC_DXT1_Format: _g,
  RGBA_S3TC_DXT3_Format: xg,
  RGBA_S3TC_DXT5_Format: Sg,
  RGB_ETC1_Format: lT,
  RGB_ETC2_Format: dx,
  RGB_PVRTC_2BPPV1_Format: ux,
  RGB_PVRTC_4BPPV1_Format: lx,
  RGB_S3TC_DXT1_Format: yg,
  RGFormat: aT,
  RGIntegerFormat: sT,
  RawShaderMaterial: QT,
  Ray: Ep,
  Raycaster: MC,
  RectAreaLight: mC,
  RedFormat: iT,
  RedIntegerFormat: rT,
  ReinhardToneMapping: Xw,
  RepeatWrapping: op,
  ReplaceStencilOp: q2,
  ReverseSubtractEquation: Tw,
  RingBufferGeometry: DI,
  RingGeometry: zp,
  SIGNED_RED_GREEN_RGTC2_Format: Lx,
  SIGNED_RED_RGTC1_Format: Ax,
  SRGBColorSpace: us,
  Scene: Rg,
  ShaderChunk: nn,
  ShaderLib: cs,
  ShaderMaterial: Vs,
  ShadowMaterial: JT,
  Shape: rc,
  ShapeBufferGeometry: PI,
  ShapeGeometry: Op,
  ShapePath: yI,
  ShapeUtils: ks,
  ShortType: Jw,
  Skeleton: qg,
  SkeletonHelper: aI,
  SkinnedMesh: OT,
  Source: Qu,
  Sphere: Ws,
  SphereBufferGeometry: UI,
  SphereGeometry: fd,
  Spherical: eI,
  SphericalHarmonics3: vC,
  SplineCurve: vS,
  SpotLight: fC,
  SpotLightHelper: rI,
  Sprite: NT,
  SpriteMaterial: lS,
  SrcAlphaFactor: qx,
  SrcAlphaSaturateFactor: zw,
  SrcColorFactor: Rw,
  StaticCopyUsage: uL,
  StaticDrawUsage: dp,
  StaticReadUsage: sL,
  StereoCamera: PO,
  StreamCopyUsage: fL,
  StreamDrawUsage: aL,
  StreamReadUsage: lL,
  StringKeyframeTrack: dc,
  SubtractEquation: ww,
  SubtractiveBlending: rx,
  TOUCH: U2,
  TangentSpaceNormalMap: ql,
  TetrahedronBufferGeometry: NI,
  TetrahedronGeometry: Ip,
  Texture: pi,
  TextureLoader: MO,
  TorusBufferGeometry: zI,
  TorusGeometry: Fp,
  TorusKnotBufferGeometry: OI,
  TorusKnotGeometry: Bp,
  Triangle: Zr,
  TriangleFanDrawMode: V2,
  TriangleStripDrawMode: k2,
  TrianglesDrawMode: H2,
  TubeBufferGeometry: II,
  TubeGeometry: Hp,
  TwoPassDoubleSide: z2,
  UVMapping: Ig,
  Uint16BufferAttribute: tS,
  Uint32BufferAttribute: nS,
  Uint8BufferAttribute: ZL,
  Uint8ClampedBufferAttribute: JL,
  Uniform: RS,
  UniformsGroup: QO,
  UniformsLib: lt,
  UniformsUtils: MT,
  UnsignedByteType: Po,
  UnsignedInt248Type: tc,
  UnsignedIntType: Fl,
  UnsignedShort4444Type: Kw,
  UnsignedShort5551Type: $w,
  UnsignedShortType: Zx,
  VSMShadowMap: Yu,
  Vector2: Ge,
  Vector3: j,
  Vector4: Un,
  VectorKeyframeTrack: _p,
  VideoTexture: zz,
  WebGL1Renderer: PT,
  WebGL3DRenderTarget: OL,
  WebGLArrayRenderTarget: zL,
  WebGLCubeRenderTarget: ET,
  WebGLMultipleRenderTargets: IL,
  WebGLRenderTarget: Ga,
  WebGLRenderer: oS,
  WebGLUtils: LT,
  WireframeGeometry: ZT,
  WrapAroundEnding: fp,
  ZeroCurvatureEnding: Zu,
  ZeroFactor: Cw,
  ZeroSlopeEnding: Ju,
  ZeroStencilOp: W2,
  _SRGBAFormat: Ag,
  sRGBEncoding: Pn
}, Symbol.toStringTag, { value: "Module" }));
var Bl = {}, BI = {
  get exports() {
    return Bl;
  },
  set exports(u) {
    Bl = u;
  }
}, zl = {};
/**
 * @license React
 * react-reconciler-constants.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var QE;
function HI() {
  return QE || (QE = 1, zl.ConcurrentRoot = 1, zl.ContinuousEventPriority = 4, zl.DefaultEventPriority = 16, zl.DiscreteEventPriority = 1, zl.IdleEventPriority = 536870912, zl.LegacyRoot = 0), zl;
}
var Ol = {};
/**
 * @license React
 * react-reconciler-constants.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var KE;
function kI() {
  return KE || (KE = 1, process.env.NODE_ENV !== "production" && function() {
    var u = (
      /*                        */
      1
    ), e = (
      /*            */
      4
    ), t = (
      /*                    */
      16
    ), n = (
      /*                       */
      536870912
    ), a = u, s = e, c = t, f = n, p = 0, h = 1;
    Ol.ConcurrentRoot = h, Ol.ContinuousEventPriority = s, Ol.DefaultEventPriority = c, Ol.DiscreteEventPriority = a, Ol.IdleEventPriority = f, Ol.LegacyRoot = p;
  }()), Ol;
}
(function(u) {
  process.env.NODE_ENV === "production" ? u.exports = HI() : u.exports = kI();
})(BI);
function VI(u) {
  let e;
  const t = /* @__PURE__ */ new Set(), n = (h, g) => {
    const _ = typeof h == "function" ? h(e) : h;
    if (_ !== e) {
      const x = e;
      e = g ? _ : Object.assign({}, e, _), t.forEach((M) => M(e, x));
    }
  }, a = () => e, s = (h, g = a, _ = Object.is) => {
    console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");
    let x = g(e);
    function M() {
      const E = g(e);
      if (!_(x, E)) {
        const A = x;
        h(x = E, A);
      }
    }
    return t.add(M), () => t.delete(M);
  }, p = { setState: n, getState: a, subscribe: (h, g, _) => g || _ ? s(h, g, _) : (t.add(h), () => t.delete(h)), destroy: () => t.clear() };
  return e = u(n, a, p), p;
}
const GI = typeof window > "u" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent), $E = GI ? $u : w2;
function WI(u) {
  const e = typeof u == "function" ? VI(u) : u, t = (n = e.getState, a = Object.is) => {
    const [, s] = b2((T) => T + 1, 0), c = e.getState(), f = Bs(c), p = Bs(n), h = Bs(a), g = Bs(!1), _ = Bs();
    _.current === void 0 && (_.current = n(c));
    let x, M = !1;
    (f.current !== c || p.current !== n || h.current !== a || g.current) && (x = n(c), M = !a(_.current, x)), $E(() => {
      M && (_.current = x), f.current = c, p.current = n, h.current = a, g.current = !1;
    });
    const E = Bs(c);
    $E(() => {
      const T = () => {
        try {
          const L = e.getState(), R = p.current(L);
          h.current(_.current, R) || (f.current = L, _.current = R, s());
        } catch {
          g.current = !0, s();
        }
      }, b = e.subscribe(T);
      return e.getState() !== E.current && T(), b;
    }, []);
    const A = M ? x : _.current;
    return E2(A), A;
  };
  return Object.assign(t, e), t[Symbol.iterator] = function() {
    console.warn("[useStore, api] = create() is deprecated and will be removed in v4");
    const n = [t, e];
    return {
      next() {
        const a = n.length <= 0;
        return { value: n.shift(), done: a };
      }
    };
  }, t;
}
var kx = {}, qI = {
  get exports() {
    return kx;
  },
  set exports(u) {
    kx = u;
  }
}, Lg = {}, XI = {
  get exports() {
    return Lg;
  },
  set exports(u) {
    Lg = u;
  }
}, G_ = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var ew;
function jI() {
  return ew || (ew = 1, function(u) {
    function e(W, ae) {
      var ne = W.length;
      W.push(ae);
      e:
        for (; 0 < ne; ) {
          var Se = ne - 1 >>> 1, ue = W[Se];
          if (0 < a(ue, ae))
            W[Se] = ae, W[ne] = ue, ne = Se;
          else
            break e;
        }
    }
    function t(W) {
      return W.length === 0 ? null : W[0];
    }
    function n(W) {
      if (W.length === 0)
        return null;
      var ae = W[0], ne = W.pop();
      if (ne !== ae) {
        W[0] = ne;
        e:
          for (var Se = 0, ue = W.length, pe = ue >>> 1; Se < pe; ) {
            var ye = 2 * (Se + 1) - 1, je = W[ye], Be = ye + 1, de = W[Be];
            if (0 > a(je, ne))
              Be < ue && 0 > a(de, je) ? (W[Se] = de, W[Be] = ne, Se = Be) : (W[Se] = je, W[ye] = ne, Se = ye);
            else if (Be < ue && 0 > a(de, ne))
              W[Se] = de, W[Be] = ne, Se = Be;
            else
              break e;
          }
      }
      return ae;
    }
    function a(W, ae) {
      var ne = W.sortIndex - ae.sortIndex;
      return ne !== 0 ? ne : W.id - ae.id;
    }
    if (typeof performance == "object" && typeof performance.now == "function") {
      var s = performance;
      u.unstable_now = function() {
        return s.now();
      };
    } else {
      var c = Date, f = c.now();
      u.unstable_now = function() {
        return c.now() - f;
      };
    }
    var p = [], h = [], g = 1, _ = null, x = 3, M = !1, E = !1, A = !1, T = typeof setTimeout == "function" ? setTimeout : null, b = typeof clearTimeout == "function" ? clearTimeout : null, L = typeof setImmediate < "u" ? setImmediate : null;
    typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
    function R(W) {
      for (var ae = t(h); ae !== null; ) {
        if (ae.callback === null)
          n(h);
        else if (ae.startTime <= W)
          n(h), ae.sortIndex = ae.expirationTime, e(p, ae);
        else
          break;
        ae = t(h);
      }
    }
    function U(W) {
      if (A = !1, R(W), !E)
        if (t(p) !== null)
          E = !0, Ee(F);
        else {
          var ae = t(h);
          ae !== null && Te(U, ae.startTime - W);
        }
    }
    function F(W, ae) {
      E = !1, A && (A = !1, b(G), G = -1), M = !0;
      var ne = x;
      try {
        for (R(ae), _ = t(p); _ !== null && (!(_.expirationTime > ae) || W && !Q()); ) {
          var Se = _.callback;
          if (typeof Se == "function") {
            _.callback = null, x = _.priorityLevel;
            var ue = Se(_.expirationTime <= ae);
            ae = u.unstable_now(), typeof ue == "function" ? _.callback = ue : _ === t(p) && n(p), R(ae);
          } else
            n(p);
          _ = t(p);
        }
        if (_ !== null)
          var pe = !0;
        else {
          var ye = t(h);
          ye !== null && Te(U, ye.startTime - ae), pe = !1;
        }
        return pe;
      } finally {
        _ = null, x = ne, M = !1;
      }
    }
    var V = !1, k = null, G = -1, z = 5, I = -1;
    function Q() {
      return !(u.unstable_now() - I < z);
    }
    function te() {
      if (k !== null) {
        var W = u.unstable_now();
        I = W;
        var ae = !0;
        try {
          ae = k(!0, W);
        } finally {
          ae ? $() : (V = !1, k = null);
        }
      } else
        V = !1;
    }
    var $;
    if (typeof L == "function")
      $ = function() {
        L(te);
      };
    else if (typeof MessageChannel < "u") {
      var ie = new MessageChannel(), fe = ie.port2;
      ie.port1.onmessage = te, $ = function() {
        fe.postMessage(null);
      };
    } else
      $ = function() {
        T(te, 0);
      };
    function Ee(W) {
      k = W, V || (V = !0, $());
    }
    function Te(W, ae) {
      G = T(function() {
        W(u.unstable_now());
      }, ae);
    }
    u.unstable_IdlePriority = 5, u.unstable_ImmediatePriority = 1, u.unstable_LowPriority = 4, u.unstable_NormalPriority = 3, u.unstable_Profiling = null, u.unstable_UserBlockingPriority = 2, u.unstable_cancelCallback = function(W) {
      W.callback = null;
    }, u.unstable_continueExecution = function() {
      E || M || (E = !0, Ee(F));
    }, u.unstable_forceFrameRate = function(W) {
      0 > W || 125 < W ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : z = 0 < W ? Math.floor(1e3 / W) : 5;
    }, u.unstable_getCurrentPriorityLevel = function() {
      return x;
    }, u.unstable_getFirstCallbackNode = function() {
      return t(p);
    }, u.unstable_next = function(W) {
      switch (x) {
        case 1:
        case 2:
        case 3:
          var ae = 3;
          break;
        default:
          ae = x;
      }
      var ne = x;
      x = ae;
      try {
        return W();
      } finally {
        x = ne;
      }
    }, u.unstable_pauseExecution = function() {
    }, u.unstable_requestPaint = function() {
    }, u.unstable_runWithPriority = function(W, ae) {
      switch (W) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          W = 3;
      }
      var ne = x;
      x = W;
      try {
        return ae();
      } finally {
        x = ne;
      }
    }, u.unstable_scheduleCallback = function(W, ae, ne) {
      var Se = u.unstable_now();
      switch (typeof ne == "object" && ne !== null ? (ne = ne.delay, ne = typeof ne == "number" && 0 < ne ? Se + ne : Se) : ne = Se, W) {
        case 1:
          var ue = -1;
          break;
        case 2:
          ue = 250;
          break;
        case 5:
          ue = 1073741823;
          break;
        case 4:
          ue = 1e4;
          break;
        default:
          ue = 5e3;
      }
      return ue = ne + ue, W = { id: g++, callback: ae, priorityLevel: W, startTime: ne, expirationTime: ue, sortIndex: -1 }, ne > Se ? (W.sortIndex = ne, e(h, W), t(p) === null && W === t(h) && (A ? (b(G), G = -1) : A = !0, Te(U, ne - Se))) : (W.sortIndex = ue, e(p, W), E || M || (E = !0, Ee(F))), W;
    }, u.unstable_shouldYield = Q, u.unstable_wrapCallback = function(W) {
      var ae = x;
      return function() {
        var ne = x;
        x = ae;
        try {
          return W.apply(this, arguments);
        } finally {
          x = ne;
        }
      };
    };
  }(G_)), G_;
}
var W_ = {};
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var tw;
function YI() {
  return tw || (tw = 1, function(u) {
    process.env.NODE_ENV !== "production" && function() {
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var e = !1, t = !1, n = 5;
      function a(se, me) {
        var De = se.length;
        se.push(me), f(se, me, De);
      }
      function s(se) {
        return se.length === 0 ? null : se[0];
      }
      function c(se) {
        if (se.length === 0)
          return null;
        var me = se[0], De = se.pop();
        return De !== me && (se[0] = De, p(se, De, 0)), me;
      }
      function f(se, me, De) {
        for (var Fe = De; Fe > 0; ) {
          var Pe = Fe - 1 >>> 1, wt = se[Pe];
          if (h(wt, me) > 0)
            se[Pe] = me, se[Fe] = wt, Fe = Pe;
          else
            return;
        }
      }
      function p(se, me, De) {
        for (var Fe = De, Pe = se.length, wt = Pe >>> 1; Fe < wt; ) {
          var St = (Fe + 1) * 2 - 1, rt = se[St], X = St + 1, be = se[X];
          if (h(rt, me) < 0)
            X < Pe && h(be, rt) < 0 ? (se[Fe] = be, se[X] = me, Fe = X) : (se[Fe] = rt, se[St] = me, Fe = St);
          else if (X < Pe && h(be, me) < 0)
            se[Fe] = be, se[X] = me, Fe = X;
          else
            return;
        }
      }
      function h(se, me) {
        var De = se.sortIndex - me.sortIndex;
        return De !== 0 ? De : se.id - me.id;
      }
      var g = 1, _ = 2, x = 3, M = 4, E = 5;
      function A(se, me) {
      }
      var T = typeof performance == "object" && typeof performance.now == "function";
      if (T) {
        var b = performance;
        u.unstable_now = function() {
          return b.now();
        };
      } else {
        var L = Date, R = L.now();
        u.unstable_now = function() {
          return L.now() - R;
        };
      }
      var U = 1073741823, F = -1, V = 250, k = 5e3, G = 1e4, z = U, I = [], Q = [], te = 1, $ = null, ie = x, fe = !1, Ee = !1, Te = !1, W = typeof setTimeout == "function" ? setTimeout : null, ae = typeof clearTimeout == "function" ? clearTimeout : null, ne = typeof setImmediate < "u" ? setImmediate : null;
      typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
      function Se(se) {
        for (var me = s(Q); me !== null; ) {
          if (me.callback === null)
            c(Q);
          else if (me.startTime <= se)
            c(Q), me.sortIndex = me.expirationTime, a(I, me);
          else
            return;
          me = s(Q);
        }
      }
      function ue(se) {
        if (Te = !1, Se(se), !Ee)
          if (s(I) !== null)
            Ee = !0, ke(pe);
          else {
            var me = s(Q);
            me !== null && Qe(ue, me.startTime - se);
          }
      }
      function pe(se, me) {
        Ee = !1, Te && (Te = !1, Lt()), fe = !0;
        var De = ie;
        try {
          var Fe;
          if (!t)
            return ye(se, me);
        } finally {
          $ = null, ie = De, fe = !1;
        }
      }
      function ye(se, me) {
        var De = me;
        for (Se(De), $ = s(I); $ !== null && !e && !($.expirationTime > De && (!se || mt())); ) {
          var Fe = $.callback;
          if (typeof Fe == "function") {
            $.callback = null, ie = $.priorityLevel;
            var Pe = $.expirationTime <= De, wt = Fe(Pe);
            De = u.unstable_now(), typeof wt == "function" ? $.callback = wt : $ === s(I) && c(I), Se(De);
          } else
            c(I);
          $ = s(I);
        }
        if ($ !== null)
          return !0;
        var St = s(Q);
        return St !== null && Qe(ue, St.startTime - De), !1;
      }
      function je(se, me) {
        switch (se) {
          case g:
          case _:
          case x:
          case M:
          case E:
            break;
          default:
            se = x;
        }
        var De = ie;
        ie = se;
        try {
          return me();
        } finally {
          ie = De;
        }
      }
      function Be(se) {
        var me;
        switch (ie) {
          case g:
          case _:
          case x:
            me = x;
            break;
          default:
            me = ie;
            break;
        }
        var De = ie;
        ie = me;
        try {
          return se();
        } finally {
          ie = De;
        }
      }
      function de(se) {
        var me = ie;
        return function() {
          var De = ie;
          ie = me;
          try {
            return se.apply(this, arguments);
          } finally {
            ie = De;
          }
        };
      }
      function dt(se, me, De) {
        var Fe = u.unstable_now(), Pe;
        if (typeof De == "object" && De !== null) {
          var wt = De.delay;
          typeof wt == "number" && wt > 0 ? Pe = Fe + wt : Pe = Fe;
        } else
          Pe = Fe;
        var St;
        switch (se) {
          case g:
            St = F;
            break;
          case _:
            St = V;
            break;
          case E:
            St = z;
            break;
          case M:
            St = G;
            break;
          case x:
          default:
            St = k;
            break;
        }
        var rt = Pe + St, X = {
          id: te++,
          callback: me,
          priorityLevel: se,
          startTime: Pe,
          expirationTime: rt,
          sortIndex: -1
        };
        return Pe > Fe ? (X.sortIndex = Pe, a(Q, X), s(I) === null && X === s(Q) && (Te ? Lt() : Te = !0, Qe(ue, Pe - Fe))) : (X.sortIndex = rt, a(I, X), !Ee && !fe && (Ee = !0, ke(pe))), X;
      }
      function _t() {
      }
      function qe() {
        !Ee && !fe && (Ee = !0, ke(pe));
      }
      function ot() {
        return s(I);
      }
      function Ie(se) {
        se.callback = null;
      }
      function Me() {
        return ie;
      }
      var Ne = !1, nt = null, Ze = -1, xt = n, Et = -1;
      function mt() {
        var se = u.unstable_now() - Et;
        return !(se < xt);
      }
      function Nt() {
      }
      function Wt(se) {
        if (se < 0 || se > 125) {
          console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        se > 0 ? xt = Math.floor(1e3 / se) : xt = n;
      }
      var Y = function() {
        if (nt !== null) {
          var se = u.unstable_now();
          Et = se;
          var me = !0, De = !0;
          try {
            De = nt(me, se);
          } finally {
            De ? H() : (Ne = !1, nt = null);
          }
        } else
          Ne = !1;
      }, H;
      if (typeof ne == "function")
        H = function() {
          ne(Y);
        };
      else if (typeof MessageChannel < "u") {
        var xe = new MessageChannel(), Ve = xe.port2;
        xe.port1.onmessage = Y, H = function() {
          Ve.postMessage(null);
        };
      } else
        H = function() {
          W(Y, 0);
        };
      function ke(se) {
        nt = se, Ne || (Ne = !0, H());
      }
      function Qe(se, me) {
        Ze = W(function() {
          se(u.unstable_now());
        }, me);
      }
      function Lt() {
        ae(Ze), Ze = -1;
      }
      var ht = Nt, Ae = null;
      u.unstable_IdlePriority = E, u.unstable_ImmediatePriority = g, u.unstable_LowPriority = M, u.unstable_NormalPriority = x, u.unstable_Profiling = Ae, u.unstable_UserBlockingPriority = _, u.unstable_cancelCallback = Ie, u.unstable_continueExecution = qe, u.unstable_forceFrameRate = Wt, u.unstable_getCurrentPriorityLevel = Me, u.unstable_getFirstCallbackNode = ot, u.unstable_next = Be, u.unstable_pauseExecution = _t, u.unstable_requestPaint = ht, u.unstable_runWithPriority = je, u.unstable_scheduleCallback = dt, u.unstable_shouldYield = mt, u.unstable_wrapCallback = de, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    }();
  }(W_)), W_;
}
var nw;
function EC() {
  return nw || (nw = 1, function(u) {
    process.env.NODE_ENV === "production" ? u.exports = jI() : u.exports = YI();
  }(XI)), Lg;
}
/**
 * @license React
 * react-reconciler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var q_, iw;
function ZI() {
  return iw || (iw = 1, q_ = function(e) {
    var t = {}, n = Ng, a = EC(), s = Object.assign;
    function c(o) {
      for (var l = "https://reactjs.org/docs/error-decoder.html?invariant=" + o, v = 1; v < arguments.length; v++)
        l += "&args[]=" + encodeURIComponent(arguments[v]);
      return "Minified React error #" + o + "; visit " + l + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var f = n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, p = Symbol.for("react.element"), h = Symbol.for("react.portal"), g = Symbol.for("react.fragment"), _ = Symbol.for("react.strict_mode"), x = Symbol.for("react.profiler"), M = Symbol.for("react.provider"), E = Symbol.for("react.context"), A = Symbol.for("react.forward_ref"), T = Symbol.for("react.suspense"), b = Symbol.for("react.suspense_list"), L = Symbol.for("react.memo"), R = Symbol.for("react.lazy"), U = Symbol.for("react.offscreen"), F = Symbol.iterator;
    function V(o) {
      return o === null || typeof o != "object" ? null : (o = F && o[F] || o["@@iterator"], typeof o == "function" ? o : null);
    }
    function k(o) {
      if (o == null)
        return null;
      if (typeof o == "function")
        return o.displayName || o.name || null;
      if (typeof o == "string")
        return o;
      switch (o) {
        case g:
          return "Fragment";
        case h:
          return "Portal";
        case x:
          return "Profiler";
        case _:
          return "StrictMode";
        case T:
          return "Suspense";
        case b:
          return "SuspenseList";
      }
      if (typeof o == "object")
        switch (o.$$typeof) {
          case E:
            return (o.displayName || "Context") + ".Consumer";
          case M:
            return (o._context.displayName || "Context") + ".Provider";
          case A:
            var l = o.render;
            return o = o.displayName, o || (o = l.displayName || l.name || "", o = o !== "" ? "ForwardRef(" + o + ")" : "ForwardRef"), o;
          case L:
            return l = o.displayName || null, l !== null ? l : k(o.type) || "Memo";
          case R:
            l = o._payload, o = o._init;
            try {
              return k(o(l));
            } catch {
            }
        }
      return null;
    }
    function G(o) {
      var l = o.type;
      switch (o.tag) {
        case 24:
          return "Cache";
        case 9:
          return (l.displayName || "Context") + ".Consumer";
        case 10:
          return (l._context.displayName || "Context") + ".Provider";
        case 18:
          return "DehydratedFragment";
        case 11:
          return o = l.render, o = o.displayName || o.name || "", l.displayName || (o !== "" ? "ForwardRef(" + o + ")" : "ForwardRef");
        case 7:
          return "Fragment";
        case 5:
          return l;
        case 4:
          return "Portal";
        case 3:
          return "Root";
        case 6:
          return "Text";
        case 16:
          return k(l);
        case 8:
          return l === _ ? "StrictMode" : "Mode";
        case 22:
          return "Offscreen";
        case 12:
          return "Profiler";
        case 21:
          return "Scope";
        case 13:
          return "Suspense";
        case 19:
          return "SuspenseList";
        case 25:
          return "TracingMarker";
        case 1:
        case 0:
        case 17:
        case 2:
        case 14:
        case 15:
          if (typeof l == "function")
            return l.displayName || l.name || null;
          if (typeof l == "string")
            return l;
      }
      return null;
    }
    function z(o) {
      var l = o, v = o;
      if (o.alternate)
        for (; l.return; )
          l = l.return;
      else {
        o = l;
        do
          l = o, l.flags & 4098 && (v = l.return), o = l.return;
        while (o);
      }
      return l.tag === 3 ? v : null;
    }
    function I(o) {
      if (z(o) !== o)
        throw Error(c(188));
    }
    function Q(o) {
      var l = o.alternate;
      if (!l) {
        if (l = z(o), l === null)
          throw Error(c(188));
        return l !== o ? null : o;
      }
      for (var v = o, S = l; ; ) {
        var C = v.return;
        if (C === null)
          break;
        var P = C.alternate;
        if (P === null) {
          if (S = C.return, S !== null) {
            v = S;
            continue;
          }
          break;
        }
        if (C.child === P.child) {
          for (P = C.child; P; ) {
            if (P === v)
              return I(C), o;
            if (P === S)
              return I(C), l;
            P = P.sibling;
          }
          throw Error(c(188));
        }
        if (v.return !== S.return)
          v = C, S = P;
        else {
          for (var Z = !1, oe = C.child; oe; ) {
            if (oe === v) {
              Z = !0, v = C, S = P;
              break;
            }
            if (oe === S) {
              Z = !0, S = C, v = P;
              break;
            }
            oe = oe.sibling;
          }
          if (!Z) {
            for (oe = P.child; oe; ) {
              if (oe === v) {
                Z = !0, v = P, S = C;
                break;
              }
              if (oe === S) {
                Z = !0, S = P, v = C;
                break;
              }
              oe = oe.sibling;
            }
            if (!Z)
              throw Error(c(189));
          }
        }
        if (v.alternate !== S)
          throw Error(c(190));
      }
      if (v.tag !== 3)
        throw Error(c(188));
      return v.stateNode.current === v ? o : l;
    }
    function te(o) {
      return o = Q(o), o !== null ? $(o) : null;
    }
    function $(o) {
      if (o.tag === 5 || o.tag === 6)
        return o;
      for (o = o.child; o !== null; ) {
        var l = $(o);
        if (l !== null)
          return l;
        o = o.sibling;
      }
      return null;
    }
    function ie(o) {
      if (o.tag === 5 || o.tag === 6)
        return o;
      for (o = o.child; o !== null; ) {
        if (o.tag !== 4) {
          var l = ie(o);
          if (l !== null)
            return l;
        }
        o = o.sibling;
      }
      return null;
    }
    var fe = Array.isArray, Ee = e.getPublicInstance, Te = e.getRootHostContext, W = e.getChildHostContext, ae = e.prepareForCommit, ne = e.resetAfterCommit, Se = e.createInstance, ue = e.appendInitialChild, pe = e.finalizeInitialChildren, ye = e.prepareUpdate, je = e.shouldSetTextContent, Be = e.createTextInstance, de = e.scheduleTimeout, dt = e.cancelTimeout, _t = e.noTimeout, qe = e.isPrimaryRenderer, ot = e.supportsMutation, Ie = e.supportsPersistence, Me = e.supportsHydration, Ne = e.getInstanceFromNode, nt = e.preparePortalMount, Ze = e.getCurrentEventPriority, xt = e.detachDeletedInstance, Et = e.supportsMicrotasks, mt = e.scheduleMicrotask, Nt = e.supportsTestSelectors, Wt = e.findFiberRoot, Y = e.getBoundingRect, H = e.getTextContent, xe = e.isHiddenSubtree, Ve = e.matchAccessibilityRole, ke = e.setFocusIfFocusable, Qe = e.setupIntersectionObserver, Lt = e.appendChild, ht = e.appendChildToContainer, Ae = e.commitTextUpdate, se = e.commitMount, me = e.commitUpdate, De = e.insertBefore, Fe = e.insertInContainerBefore, Pe = e.removeChild, wt = e.removeChildFromContainer, St = e.resetTextContent, rt = e.hideInstance, X = e.hideTextInstance, be = e.unhideInstance, Le = e.unhideTextInstance, He = e.clearContainer, Tt = e.cloneInstance, tn = e.createContainerChildSet, mn = e.appendChildToContainerChildSet, Gn = e.finalizeContainerChildren, Gt = e.replaceContainerChildren, ln = e.cloneHiddenInstance, kn = e.cloneHiddenTextInstance, oi = e.canHydrateInstance, Ei = e.canHydrateTextInstance, wi = e.canHydrateSuspenseInstance, Io = e.isSuspenseInstancePending, Rr = e.isSuspenseInstanceFallback, ms = e.registerSuspenseInstanceRetry, q = e.getNextHydratableSibling, O = e.getFirstHydratableChild, ee = e.getFirstHydratableChildWithinContainer, K = e.getFirstHydratableChildWithinSuspenseInstance, ce = e.hydrateInstance, Ke = e.hydrateTextInstance, at = e.hydrateSuspenseInstance, $e = e.getNextHydratableInstanceAfterSuspenseInstance, it = e.commitHydratedContainer, bt = e.commitHydratedSuspenseInstance, Mt = e.clearSuspenseBoundary, Ct = e.clearSuspenseBoundaryFromContainer, Ht = e.shouldDeleteUnhydratedTailInstances, Cn = e.didNotMatchHydratedContainerTextInstance, Yn = e.didNotMatchHydratedTextInstance, bn;
    function Nn(o) {
      if (bn === void 0)
        try {
          throw Error();
        } catch (v) {
          var l = v.stack.trim().match(/\n( *(at )?)/);
          bn = l && l[1] || "";
        }
      return `
` + bn + o;
    }
    var Xt = !1;
    function Xs(o, l) {
      if (!o || Xt)
        return "";
      Xt = !0;
      var v = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      try {
        if (l)
          if (l = function() {
            throw Error();
          }, Object.defineProperty(l.prototype, "props", { set: function() {
            throw Error();
          } }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(l, []);
            } catch (Ye) {
              var S = Ye;
            }
            Reflect.construct(o, [], l);
          } else {
            try {
              l.call();
            } catch (Ye) {
              S = Ye;
            }
            o.call(l.prototype);
          }
        else {
          try {
            throw Error();
          } catch (Ye) {
            S = Ye;
          }
          o();
        }
      } catch (Ye) {
        if (Ye && S && typeof Ye.stack == "string") {
          for (var C = Ye.stack.split(`
`), P = S.stack.split(`
`), Z = C.length - 1, oe = P.length - 1; 1 <= Z && 0 <= oe && C[Z] !== P[oe]; )
            oe--;
          for (; 1 <= Z && 0 <= oe; Z--, oe--)
            if (C[Z] !== P[oe]) {
              if (Z !== 1 || oe !== 1)
                do
                  if (Z--, oe--, 0 > oe || C[Z] !== P[oe]) {
                    var Re = `
` + C[Z].replace(" at new ", " at ");
                    return o.displayName && Re.includes("<anonymous>") && (Re = Re.replace("<anonymous>", o.displayName)), Re;
                  }
                while (1 <= Z && 0 <= oe);
              break;
            }
        }
      } finally {
        Xt = !1, Error.prepareStackTrace = v;
      }
      return (o = o ? o.displayName || o.name : "") ? Nn(o) : "";
    }
    var li = Object.prototype.hasOwnProperty, Lr = [], ya = -1;
    function ki(o) {
      return { current: o };
    }
    function xn(o) {
      0 > ya || (o.current = Lr[ya], Lr[ya] = null, ya--);
    }
    function qt(o, l) {
      ya++, Lr[ya] = o.current, o.current = l;
    }
    var Ri = {}, ui = ki(Ri), Jt = ki(!1), vr = Ri;
    function vs(o, l) {
      var v = o.type.contextTypes;
      if (!v)
        return Ri;
      var S = o.stateNode;
      if (S && S.__reactInternalMemoizedUnmaskedChildContext === l)
        return S.__reactInternalMemoizedMaskedChildContext;
      var C = {}, P;
      for (P in v)
        C[P] = l[P];
      return S && (o = o.stateNode, o.__reactInternalMemoizedUnmaskedChildContext = l, o.__reactInternalMemoizedMaskedChildContext = C), C;
    }
    function Li(o) {
      return o = o.childContextTypes, o != null;
    }
    function hc() {
      xn(Jt), xn(ui);
    }
    function Gp(o, l, v) {
      if (ui.current !== Ri)
        throw Error(c(168));
      qt(ui, l), qt(Jt, v);
    }
    function Wp(o, l, v) {
      var S = o.stateNode;
      if (l = l.childContextTypes, typeof S.getChildContext != "function")
        return v;
      S = S.getChildContext();
      for (var C in S)
        if (!(C in l))
          throw Error(c(108, G(o) || "Unknown", C));
      return s({}, v, S);
    }
    function Fo(o) {
      return o = (o = o.stateNode) && o.__reactInternalMemoizedMergedChildContext || Ri, vr = ui.current, qt(ui, o), qt(Jt, Jt.current), !0;
    }
    function hd(o, l, v) {
      var S = o.stateNode;
      if (!S)
        throw Error(c(169));
      v ? (o = Wp(o, l, vr), S.__reactInternalMemoizedMergedChildContext = o, xn(Jt), xn(ui), qt(ui, o)) : xn(Jt), qt(Jt, v);
    }
    var Dr = Math.clz32 ? Math.clz32 : Xp, pd = Math.log, qp = Math.LN2;
    function Xp(o) {
      return o >>>= 0, o === 0 ? 32 : 31 - (pd(o) / qp | 0) | 0;
    }
    var pc = 64, Bo = 4194304;
    function gs(o) {
      switch (o & -o) {
        case 1:
          return 1;
        case 2:
          return 2;
        case 4:
          return 4;
        case 8:
          return 8;
        case 16:
          return 16;
        case 32:
          return 32;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return o & 4194240;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return o & 130023424;
        case 134217728:
          return 134217728;
        case 268435456:
          return 268435456;
        case 536870912:
          return 536870912;
        case 1073741824:
          return 1073741824;
        default:
          return o;
      }
    }
    function mc(o, l) {
      var v = o.pendingLanes;
      if (v === 0)
        return 0;
      var S = 0, C = o.suspendedLanes, P = o.pingedLanes, Z = v & 268435455;
      if (Z !== 0) {
        var oe = Z & ~C;
        oe !== 0 ? S = gs(oe) : (P &= Z, P !== 0 && (S = gs(P)));
      } else
        Z = v & ~C, Z !== 0 ? S = gs(Z) : P !== 0 && (S = gs(P));
      if (S === 0)
        return 0;
      if (l !== 0 && l !== S && !(l & C) && (C = S & -S, P = l & -l, C >= P || C === 16 && (P & 4194240) !== 0))
        return l;
      if (S & 4 && (S |= v & 16), l = o.entangledLanes, l !== 0)
        for (o = o.entanglements, l &= S; 0 < l; )
          v = 31 - Dr(l), C = 1 << v, S |= o[v], l &= ~C;
      return S;
    }
    function Kr(o, l) {
      switch (o) {
        case 1:
        case 2:
        case 4:
          return l + 250;
        case 8:
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return l + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return -1;
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;
        default:
          return -1;
      }
    }
    function Zl(o, l) {
      for (var v = o.suspendedLanes, S = o.pingedLanes, C = o.expirationTimes, P = o.pendingLanes; 0 < P; ) {
        var Z = 31 - Dr(P), oe = 1 << Z, Re = C[Z];
        Re === -1 ? (!(oe & v) || oe & S) && (C[Z] = Kr(oe, l)) : Re <= l && (o.expiredLanes |= oe), P &= ~oe;
      }
    }
    function ji(o) {
      return o = o.pendingLanes & -1073741825, o !== 0 ? o : o & 1073741824 ? 1073741824 : 0;
    }
    function md(o) {
      for (var l = [], v = 0; 31 > v; v++)
        l.push(o);
      return l;
    }
    function Jl(o, l, v) {
      o.pendingLanes |= l, l !== 536870912 && (o.suspendedLanes = 0, o.pingedLanes = 0), o = o.eventTimes, l = 31 - Dr(l), o[l] = v;
    }
    function Qg(o, l) {
      var v = o.pendingLanes & ~l;
      o.pendingLanes = l, o.suspendedLanes = 0, o.pingedLanes = 0, o.expiredLanes &= l, o.mutableReadLanes &= l, o.entangledLanes &= l, l = o.entanglements;
      var S = o.eventTimes;
      for (o = o.expirationTimes; 0 < v; ) {
        var C = 31 - Dr(v), P = 1 << C;
        l[C] = 0, S[C] = -1, o[C] = -1, v &= ~P;
      }
    }
    function vd(o, l) {
      var v = o.entangledLanes |= l;
      for (o = o.entanglements; v; ) {
        var S = 31 - Dr(v), C = 1 << S;
        C & l | o[S] & l && (o[S] |= l), v &= ~C;
      }
    }
    var vn = 0;
    function jp(o) {
      return o &= -o, 1 < o ? 4 < o ? o & 268435455 ? 16 : 536870912 : 4 : 1;
    }
    var ys = a.unstable_scheduleCallback, Yp = a.unstable_cancelCallback, Kg = a.unstable_shouldYield, $g = a.unstable_requestPaint, Xn = a.unstable_now, gd = a.unstable_ImmediatePriority, ey = a.unstable_UserBlockingPriority, yd = a.unstable_NormalPriority, ty = a.unstable_IdlePriority, vc = null, _a = null;
    function ny(o) {
      if (_a && typeof _a.onCommitFiberRoot == "function")
        try {
          _a.onCommitFiberRoot(vc, o, void 0, (o.current.flags & 128) === 128);
        } catch {
        }
    }
    function iy(o, l) {
      return o === l && (o !== 0 || 1 / o === 1 / l) || o !== o && l !== l;
    }
    var xa = typeof Object.is == "function" ? Object.is : iy, Wa = null, gc = !1, _d = !1;
    function xd(o) {
      Wa === null ? Wa = [o] : Wa.push(o);
    }
    function ry(o) {
      gc = !0, xd(o);
    }
    function Sa() {
      if (!_d && Wa !== null) {
        _d = !0;
        var o = 0, l = vn;
        try {
          var v = Wa;
          for (vn = 1; o < v.length; o++) {
            var S = v[o];
            do
              S = S(!0);
            while (S !== null);
          }
          Wa = null, gc = !1;
        } catch (C) {
          throw Wa !== null && (Wa = Wa.slice(o + 1)), ys(gd, Sa), C;
        } finally {
          vn = l, _d = !1;
        }
      }
      return null;
    }
    var ay = f.ReactCurrentBatchConfig;
    function yc(o, l) {
      if (xa(o, l))
        return !0;
      if (typeof o != "object" || o === null || typeof l != "object" || l === null)
        return !1;
      var v = Object.keys(o), S = Object.keys(l);
      if (v.length !== S.length)
        return !1;
      for (S = 0; S < v.length; S++) {
        var C = v[S];
        if (!li.call(l, C) || !xa(o[C], l[C]))
          return !1;
      }
      return !0;
    }
    function sy(o) {
      switch (o.tag) {
        case 5:
          return Nn(o.type);
        case 16:
          return Nn("Lazy");
        case 13:
          return Nn("Suspense");
        case 19:
          return Nn("SuspenseList");
        case 0:
        case 2:
        case 15:
          return o = Xs(o.type, !1), o;
        case 11:
          return o = Xs(o.type.render, !1), o;
        case 1:
          return o = Xs(o.type, !0), o;
        default:
          return "";
      }
    }
    function $r(o, l) {
      if (o && o.defaultProps) {
        l = s({}, l), o = o.defaultProps;
        for (var v in o)
          l[v] === void 0 && (l[v] = o[v]);
        return l;
      }
      return l;
    }
    var Ql = ki(null), Kl = null, Ho = null, _c = null;
    function Sd() {
      _c = Ho = Kl = null;
    }
    function Md(o, l, v) {
      qe ? (qt(Ql, l._currentValue), l._currentValue = v) : (qt(Ql, l._currentValue2), l._currentValue2 = v);
    }
    function xc(o) {
      var l = Ql.current;
      xn(Ql), qe ? o._currentValue = l : o._currentValue2 = l;
    }
    function bd(o, l, v) {
      for (; o !== null; ) {
        var S = o.alternate;
        if ((o.childLanes & l) !== l ? (o.childLanes |= l, S !== null && (S.childLanes |= l)) : S !== null && (S.childLanes & l) !== l && (S.childLanes |= l), o === v)
          break;
        o = o.return;
      }
    }
    function ko(o, l) {
      Kl = o, _c = Ho = null, o = o.dependencies, o !== null && o.firstContext !== null && (o.lanes & l && (Vi = !0), o.firstContext = null);
    }
    function Pr(o) {
      var l = qe ? o._currentValue : o._currentValue2;
      if (_c !== o)
        if (o = { context: o, memoizedValue: l, next: null }, Ho === null) {
          if (Kl === null)
            throw Error(c(308));
          Ho = o, Kl.dependencies = { lanes: 0, firstContext: o };
        } else
          Ho = Ho.next = o;
      return l;
    }
    var ea = null, Ma = !1;
    function Ed(o) {
      o.updateQueue = { baseState: o.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
    }
    function $l(o, l) {
      o = o.updateQueue, l.updateQueue === o && (l.updateQueue = { baseState: o.baseState, firstBaseUpdate: o.firstBaseUpdate, lastBaseUpdate: o.lastBaseUpdate, shared: o.shared, effects: o.effects });
    }
    function qa(o, l) {
      return { eventTime: o, lane: l, tag: 0, payload: null, callback: null, next: null };
    }
    function _s(o, l) {
      var v = o.updateQueue;
      v !== null && (v = v.shared, ci !== null && o.mode & 1 && !(Kt & 2) ? (o = v.interleaved, o === null ? (l.next = l, ea === null ? ea = [v] : ea.push(v)) : (l.next = o.next, o.next = l), v.interleaved = l) : (o = v.pending, o === null ? l.next = l : (l.next = o.next, o.next = l), v.pending = l));
    }
    function Sc(o, l, v) {
      if (l = l.updateQueue, l !== null && (l = l.shared, (v & 4194240) !== 0)) {
        var S = l.lanes;
        S &= o.pendingLanes, v |= S, l.lanes = v, vd(o, v);
      }
    }
    function Zp(o, l) {
      var v = o.updateQueue, S = o.alternate;
      if (S !== null && (S = S.updateQueue, v === S)) {
        var C = null, P = null;
        if (v = v.firstBaseUpdate, v !== null) {
          do {
            var Z = { eventTime: v.eventTime, lane: v.lane, tag: v.tag, payload: v.payload, callback: v.callback, next: null };
            P === null ? C = P = Z : P = P.next = Z, v = v.next;
          } while (v !== null);
          P === null ? C = P = l : P = P.next = l;
        } else
          C = P = l;
        v = { baseState: S.baseState, firstBaseUpdate: C, lastBaseUpdate: P, shared: S.shared, effects: S.effects }, o.updateQueue = v;
        return;
      }
      o = v.lastBaseUpdate, o === null ? v.firstBaseUpdate = l : o.next = l, v.lastBaseUpdate = l;
    }
    function Mc(o, l, v, S) {
      var C = o.updateQueue;
      Ma = !1;
      var P = C.firstBaseUpdate, Z = C.lastBaseUpdate, oe = C.shared.pending;
      if (oe !== null) {
        C.shared.pending = null;
        var Re = oe, Ye = Re.next;
        Re.next = null, Z === null ? P = Ye : Z.next = Ye, Z = Re;
        var tt = o.alternate;
        tt !== null && (tt = tt.updateQueue, oe = tt.lastBaseUpdate, oe !== Z && (oe === null ? tt.firstBaseUpdate = Ye : oe.next = Ye, tt.lastBaseUpdate = Re));
      }
      if (P !== null) {
        var Bt = C.baseState;
        Z = 0, tt = Ye = Re = null, oe = P;
        do {
          var zt = oe.lane, Dn = oe.eventTime;
          if ((S & zt) === zt) {
            tt !== null && (tt = tt.next = {
              eventTime: Dn,
              lane: 0,
              tag: oe.tag,
              payload: oe.payload,
              callback: oe.callback,
              next: null
            });
            e: {
              var Dt = o, Ni = oe;
              switch (zt = l, Dn = v, Ni.tag) {
                case 1:
                  if (Dt = Ni.payload, typeof Dt == "function") {
                    Bt = Dt.call(Dn, Bt, zt);
                    break e;
                  }
                  Bt = Dt;
                  break e;
                case 3:
                  Dt.flags = Dt.flags & -65537 | 128;
                case 0:
                  if (Dt = Ni.payload, zt = typeof Dt == "function" ? Dt.call(Dn, Bt, zt) : Dt, zt == null)
                    break e;
                  Bt = s({}, Bt, zt);
                  break e;
                case 2:
                  Ma = !0;
              }
            }
            oe.callback !== null && oe.lane !== 0 && (o.flags |= 64, zt = C.effects, zt === null ? C.effects = [oe] : zt.push(oe));
          } else
            Dn = { eventTime: Dn, lane: zt, tag: oe.tag, payload: oe.payload, callback: oe.callback, next: null }, tt === null ? (Ye = tt = Dn, Re = Bt) : tt = tt.next = Dn, Z |= zt;
          if (oe = oe.next, oe === null) {
            if (oe = C.shared.pending, oe === null)
              break;
            zt = oe, oe = zt.next, zt.next = null, C.lastBaseUpdate = zt, C.shared.pending = null;
          }
        } while (1);
        if (tt === null && (Re = Bt), C.baseState = Re, C.firstBaseUpdate = Ye, C.lastBaseUpdate = tt, l = C.shared.interleaved, l !== null) {
          C = l;
          do
            Z |= C.lane, C = C.next;
          while (C !== l);
        } else
          P === null && (C.shared.lanes = 0);
        La |= Z, o.lanes = Z, o.memoizedState = Bt;
      }
    }
    function Jp(o, l, v) {
      if (o = l.effects, l.effects = null, o !== null)
        for (l = 0; l < o.length; l++) {
          var S = o[l], C = S.callback;
          if (C !== null) {
            if (S.callback = null, S = v, typeof C != "function")
              throw Error(c(191, C));
            C.call(S);
          }
        }
    }
    var Qp = new n.Component().refs;
    function bc(o, l, v, S) {
      l = o.memoizedState, v = v(S, l), v = v == null ? l : s({}, l, v), o.memoizedState = v, o.lanes === 0 && (o.updateQueue.baseState = v);
    }
    var Ec = { isMounted: function(o) {
      return (o = o._reactInternals) ? z(o) === o : !1;
    }, enqueueSetState: function(o, l, v) {
      o = o._reactInternals;
      var S = Gi(), C = Cs(o), P = qa(S, C);
      P.payload = l, v != null && (P.callback = v), _s(o, P), l = Br(o, C, S), l !== null && Sc(l, o, C);
    }, enqueueReplaceState: function(o, l, v) {
      o = o._reactInternals;
      var S = Gi(), C = Cs(o), P = qa(S, C);
      P.tag = 1, P.payload = l, v != null && (P.callback = v), _s(o, P), l = Br(o, C, S), l !== null && Sc(l, o, C);
    }, enqueueForceUpdate: function(o, l) {
      o = o._reactInternals;
      var v = Gi(), S = Cs(o), C = qa(
        v,
        S
      );
      C.tag = 2, l != null && (C.callback = l), _s(o, C), l = Br(o, S, v), l !== null && Sc(l, o, S);
    } };
    function Kp(o, l, v, S, C, P, Z) {
      return o = o.stateNode, typeof o.shouldComponentUpdate == "function" ? o.shouldComponentUpdate(S, P, Z) : l.prototype && l.prototype.isPureReactComponent ? !yc(v, S) || !yc(C, P) : !0;
    }
    function $p(o, l, v) {
      var S = !1, C = Ri, P = l.contextType;
      return typeof P == "object" && P !== null ? P = Pr(P) : (C = Li(l) ? vr : ui.current, S = l.contextTypes, P = (S = S != null) ? vs(o, C) : Ri), l = new l(v, P), o.memoizedState = l.state !== null && l.state !== void 0 ? l.state : null, l.updater = Ec, o.stateNode = l, l._reactInternals = o, S && (o = o.stateNode, o.__reactInternalMemoizedUnmaskedChildContext = C, o.__reactInternalMemoizedMaskedChildContext = P), l;
    }
    function em(o, l, v, S) {
      o = l.state, typeof l.componentWillReceiveProps == "function" && l.componentWillReceiveProps(v, S), typeof l.UNSAFE_componentWillReceiveProps == "function" && l.UNSAFE_componentWillReceiveProps(v, S), l.state !== o && Ec.enqueueReplaceState(l, l.state, null);
    }
    function wd(o, l, v, S) {
      var C = o.stateNode;
      C.props = v, C.state = o.memoizedState, C.refs = Qp, Ed(o);
      var P = l.contextType;
      typeof P == "object" && P !== null ? C.context = Pr(P) : (P = Li(l) ? vr : ui.current, C.context = vs(o, P)), C.state = o.memoizedState, P = l.getDerivedStateFromProps, typeof P == "function" && (bc(o, l, P, v), C.state = o.memoizedState), typeof l.getDerivedStateFromProps == "function" || typeof C.getSnapshotBeforeUpdate == "function" || typeof C.UNSAFE_componentWillMount != "function" && typeof C.componentWillMount != "function" || (l = C.state, typeof C.componentWillMount == "function" && C.componentWillMount(), typeof C.UNSAFE_componentWillMount == "function" && C.UNSAFE_componentWillMount(), l !== C.state && Ec.enqueueReplaceState(C, C.state, null), Mc(o, v, C, S), C.state = o.memoizedState), typeof C.componentDidMount == "function" && (o.flags |= 4194308);
    }
    var Vo = [], Go = 0, wc = null, Tc = 0, Ur = [], Nr = 0, js = null, Xa = 1, ja = "";
    function Ys(o, l) {
      Vo[Go++] = Tc, Vo[Go++] = wc, wc = o, Tc = l;
    }
    function tm(o, l, v) {
      Ur[Nr++] = Xa, Ur[Nr++] = ja, Ur[Nr++] = js, js = o;
      var S = Xa;
      o = ja;
      var C = 32 - Dr(S) - 1;
      S &= ~(1 << C), v += 1;
      var P = 32 - Dr(l) + C;
      if (30 < P) {
        var Z = C - C % 5;
        P = (S & (1 << Z) - 1).toString(32), S >>= Z, C -= Z, Xa = 1 << 32 - Dr(l) + C | v << C | S, ja = P + o;
      } else
        Xa = 1 << P | v << C | S, ja = o;
    }
    function Td(o) {
      o.return !== null && (Ys(o, 1), tm(o, 1, 0));
    }
    function Cd(o) {
      for (; o === wc; )
        wc = Vo[--Go], Vo[Go] = null, Tc = Vo[--Go], Vo[Go] = null;
      for (; o === js; )
        js = Ur[--Nr], Ur[Nr] = null, ja = Ur[--Nr], Ur[Nr] = null, Xa = Ur[--Nr], Ur[Nr] = null;
    }
    var gr = null, Di = null, In = !1, Wo = !1, zr = null;
    function Ad(o, l) {
      var v = Wi(5, null, null, 0);
      v.elementType = "DELETED", v.stateNode = l, v.return = o, l = o.deletions, l === null ? (o.deletions = [v], o.flags |= 16) : l.push(v);
    }
    function Rd(o, l) {
      switch (o.tag) {
        case 5:
          return l = oi(l, o.type, o.pendingProps), l !== null ? (o.stateNode = l, gr = o, Di = O(l), !0) : !1;
        case 6:
          return l = Ei(l, o.pendingProps), l !== null ? (o.stateNode = l, gr = o, Di = null, !0) : !1;
        case 13:
          if (l = wi(l), l !== null) {
            var v = js !== null ? { id: Xa, overflow: ja } : null;
            return o.memoizedState = { dehydrated: l, treeContext: v, retryLane: 1073741824 }, v = Wi(18, null, null, 0), v.stateNode = l, v.return = o, o.child = v, gr = o, Di = null, !0;
          }
          return !1;
        default:
          return !1;
      }
    }
    function Cc(o) {
      return (o.mode & 1) !== 0 && (o.flags & 128) === 0;
    }
    function Ac(o) {
      if (In) {
        var l = Di;
        if (l) {
          var v = l;
          if (!Rd(o, l)) {
            if (Cc(o))
              throw Error(c(418));
            l = q(v);
            var S = gr;
            l && Rd(o, l) ? Ad(S, v) : (o.flags = o.flags & -4097 | 2, In = !1, gr = o);
          }
        } else {
          if (Cc(o))
            throw Error(c(418));
          o.flags = o.flags & -4097 | 2, In = !1, gr = o;
        }
      }
    }
    function Ld(o) {
      for (o = o.return; o !== null && o.tag !== 5 && o.tag !== 3 && o.tag !== 13; )
        o = o.return;
      gr = o;
    }
    function eu(o) {
      if (!Me || o !== gr)
        return !1;
      if (!In)
        return Ld(o), In = !0, !1;
      if (o.tag !== 3 && (o.tag !== 5 || Ht(o.type) && !je(o.type, o.memoizedProps))) {
        var l = Di;
        if (l) {
          if (Cc(o)) {
            for (o = Di; o; )
              o = q(o);
            throw Error(c(418));
          }
          for (; l; )
            Ad(o, l), l = q(l);
        }
      }
      if (Ld(o), o.tag === 13) {
        if (!Me)
          throw Error(c(316));
        if (o = o.memoizedState, o = o !== null ? o.dehydrated : null, !o)
          throw Error(c(317));
        Di = $e(o);
      } else
        Di = gr ? q(o.stateNode) : null;
      return !0;
    }
    function qo() {
      Me && (Di = gr = null, Wo = In = !1);
    }
    function tu(o) {
      zr === null ? zr = [o] : zr.push(o);
    }
    function Zs(o, l, v) {
      if (o = v.ref, o !== null && typeof o != "function" && typeof o != "object") {
        if (v._owner) {
          if (v = v._owner, v) {
            if (v.tag !== 1)
              throw Error(c(309));
            var S = v.stateNode;
          }
          if (!S)
            throw Error(c(147, o));
          var C = S, P = "" + o;
          return l !== null && l.ref !== null && typeof l.ref == "function" && l.ref._stringRef === P ? l.ref : (l = function(Z) {
            var oe = C.refs;
            oe === Qp && (oe = C.refs = {}), Z === null ? delete oe[P] : oe[P] = Z;
          }, l._stringRef = P, l);
        }
        if (typeof o != "string")
          throw Error(c(284));
        if (!v._owner)
          throw Error(c(290, o));
      }
      return o;
    }
    function ta(o, l) {
      throw o = Object.prototype.toString.call(l), Error(c(31, o === "[object Object]" ? "object with keys {" + Object.keys(l).join(", ") + "}" : o));
    }
    function Rc(o) {
      var l = o._init;
      return l(o._payload);
    }
    function nu(o) {
      function l(ge, le) {
        if (o) {
          var we = ge.deletions;
          we === null ? (ge.deletions = [le], ge.flags |= 16) : we.push(le);
        }
      }
      function v(ge, le) {
        if (!o)
          return null;
        for (; le !== null; )
          l(ge, le), le = le.sibling;
        return null;
      }
      function S(ge, le) {
        for (ge = /* @__PURE__ */ new Map(); le !== null; )
          le.key !== null ? ge.set(le.key, le) : ge.set(le.index, le), le = le.sibling;
        return ge;
      }
      function C(ge, le) {
        return ge = or(ge, le), ge.index = 0, ge.sibling = null, ge;
      }
      function P(ge, le, we) {
        return ge.index = we, o ? (we = ge.alternate, we !== null ? (we = we.index, we < le ? (ge.flags |= 2, le) : we) : (ge.flags |= 2, le)) : (ge.flags |= 1048576, le);
      }
      function Z(ge) {
        return o && ge.alternate === null && (ge.flags |= 2), ge;
      }
      function oe(ge, le, we, ct) {
        return le === null || le.tag !== 6 ? (le = tf(we, ge.mode, ct), le.return = ge, le) : (le = C(le, we), le.return = ge, le);
      }
      function Re(ge, le, we, ct) {
        var At = we.type;
        return At === g ? tt(ge, le, we.props.children, ct, we.key) : le !== null && (le.elementType === At || typeof At == "object" && At !== null && At.$$typeof === R && Rc(At) === le.type) ? (ct = C(le, we.props), ct.ref = Zs(ge, le, we), ct.return = ge, ct) : (ct = po(we.type, we.key, we.props, null, ge.mode, ct), ct.ref = Zs(ge, le, we), ct.return = ge, ct);
      }
      function Ye(ge, le, we, ct) {
        return le === null || le.tag !== 4 || le.stateNode.containerInfo !== we.containerInfo || le.stateNode.implementation !== we.implementation ? (le = bu(we, ge.mode, ct), le.return = ge, le) : (le = C(le, we.children || []), le.return = ge, le);
      }
      function tt(ge, le, we, ct, At) {
        return le === null || le.tag !== 7 ? (le = Rs(we, ge.mode, ct, At), le.return = ge, le) : (le = C(le, we), le.return = ge, le);
      }
      function Bt(ge, le, we) {
        if (typeof le == "string" && le !== "" || typeof le == "number")
          return le = tf("" + le, ge.mode, we), le.return = ge, le;
        if (typeof le == "object" && le !== null) {
          switch (le.$$typeof) {
            case p:
              return we = po(le.type, le.key, le.props, null, ge.mode, we), we.ref = Zs(ge, null, le), we.return = ge, we;
            case h:
              return le = bu(le, ge.mode, we), le.return = ge, le;
            case R:
              var ct = le._init;
              return Bt(ge, ct(le._payload), we);
          }
          if (fe(le) || V(le))
            return le = Rs(le, ge.mode, we, null), le.return = ge, le;
          ta(ge, le);
        }
        return null;
      }
      function zt(ge, le, we, ct) {
        var At = le !== null ? le.key : null;
        if (typeof we == "string" && we !== "" || typeof we == "number")
          return At !== null ? null : oe(ge, le, "" + we, ct);
        if (typeof we == "object" && we !== null) {
          switch (we.$$typeof) {
            case p:
              return we.key === At ? Re(ge, le, we, ct) : null;
            case h:
              return we.key === At ? Ye(ge, le, we, ct) : null;
            case R:
              return At = we._init, zt(
                ge,
                le,
                At(we._payload),
                ct
              );
          }
          if (fe(we) || V(we))
            return At !== null ? null : tt(ge, le, we, ct, null);
          ta(ge, we);
        }
        return null;
      }
      function Dn(ge, le, we, ct, At) {
        if (typeof ct == "string" && ct !== "" || typeof ct == "number")
          return ge = ge.get(we) || null, oe(le, ge, "" + ct, At);
        if (typeof ct == "object" && ct !== null) {
          switch (ct.$$typeof) {
            case p:
              return ge = ge.get(ct.key === null ? we : ct.key) || null, Re(le, ge, ct, At);
            case h:
              return ge = ge.get(ct.key === null ? we : ct.key) || null, Ye(le, ge, ct, At);
            case R:
              var Yt = ct._init;
              return Dn(ge, le, we, Yt(ct._payload), At);
          }
          if (fe(ct) || V(ct))
            return ge = ge.get(we) || null, tt(le, ge, ct, At, null);
          ta(le, ct);
        }
        return null;
      }
      function Dt(ge, le, we, ct) {
        for (var At = null, Yt = null, It = le, $t = le = 0, $n = null; It !== null && $t < we.length; $t++) {
          It.index > $t ? ($n = It, It = null) : $n = It.sibling;
          var hn = zt(ge, It, we[$t], ct);
          if (hn === null) {
            It === null && (It = $n);
            break;
          }
          o && It && hn.alternate === null && l(ge, It), le = P(hn, le, $t), Yt === null ? At = hn : Yt.sibling = hn, Yt = hn, It = $n;
        }
        if ($t === we.length)
          return v(ge, It), In && Ys(ge, $t), At;
        if (It === null) {
          for (; $t < we.length; $t++)
            It = Bt(ge, we[$t], ct), It !== null && (le = P(It, le, $t), Yt === null ? At = It : Yt.sibling = It, Yt = It);
          return In && Ys(ge, $t), At;
        }
        for (It = S(ge, It); $t < we.length; $t++)
          $n = Dn(It, ge, $t, we[$t], ct), $n !== null && (o && $n.alternate !== null && It.delete($n.key === null ? $t : $n.key), le = P($n, le, $t), Yt === null ? At = $n : Yt.sibling = $n, Yt = $n);
        return o && It.forEach(function(Ls) {
          return l(ge, Ls);
        }), In && Ys(ge, $t), At;
      }
      function Ni(ge, le, we, ct) {
        var At = V(we);
        if (typeof At != "function")
          throw Error(c(150));
        if (we = At.call(we), we == null)
          throw Error(c(151));
        for (var Yt = At = null, It = le, $t = le = 0, $n = null, hn = we.next(); It !== null && !hn.done; $t++, hn = we.next()) {
          It.index > $t ? ($n = It, It = null) : $n = It.sibling;
          var Ls = zt(ge, It, hn.value, ct);
          if (Ls === null) {
            It === null && (It = $n);
            break;
          }
          o && It && Ls.alternate === null && l(ge, It), le = P(Ls, le, $t), Yt === null ? At = Ls : Yt.sibling = Ls, Yt = Ls, It = $n;
        }
        if (hn.done)
          return v(
            ge,
            It
          ), In && Ys(ge, $t), At;
        if (It === null) {
          for (; !hn.done; $t++, hn = we.next())
            hn = Bt(ge, hn.value, ct), hn !== null && (le = P(hn, le, $t), Yt === null ? At = hn : Yt.sibling = hn, Yt = hn);
          return In && Ys(ge, $t), At;
        }
        for (It = S(ge, It); !hn.done; $t++, hn = we.next())
          hn = Dn(It, ge, $t, hn.value, ct), hn !== null && (o && hn.alternate !== null && It.delete(hn.key === null ? $t : hn.key), le = P(hn, le, $t), Yt === null ? At = hn : Yt.sibling = hn, Yt = hn);
        return o && It.forEach(function(nf) {
          return l(ge, nf);
        }), In && Ys(ge, $t), At;
      }
      function Yi(ge, le, we, ct) {
        if (typeof we == "object" && we !== null && we.type === g && we.key === null && (we = we.props.children), typeof we == "object" && we !== null) {
          switch (we.$$typeof) {
            case p:
              e: {
                for (var At = we.key, Yt = le; Yt !== null; ) {
                  if (Yt.key === At) {
                    if (At = we.type, At === g) {
                      if (Yt.tag === 7) {
                        v(ge, Yt.sibling), le = C(Yt, we.props.children), le.return = ge, ge = le;
                        break e;
                      }
                    } else if (Yt.elementType === At || typeof At == "object" && At !== null && At.$$typeof === R && Rc(At) === Yt.type) {
                      v(ge, Yt.sibling), le = C(Yt, we.props), le.ref = Zs(ge, Yt, we), le.return = ge, ge = le;
                      break e;
                    }
                    v(ge, Yt);
                    break;
                  } else
                    l(ge, Yt);
                  Yt = Yt.sibling;
                }
                we.type === g ? (le = Rs(we.props.children, ge.mode, ct, we.key), le.return = ge, ge = le) : (ct = po(we.type, we.key, we.props, null, ge.mode, ct), ct.ref = Zs(ge, le, we), ct.return = ge, ge = ct);
              }
              return Z(ge);
            case h:
              e: {
                for (Yt = we.key; le !== null; ) {
                  if (le.key === Yt)
                    if (le.tag === 4 && le.stateNode.containerInfo === we.containerInfo && le.stateNode.implementation === we.implementation) {
                      v(ge, le.sibling), le = C(le, we.children || []), le.return = ge, ge = le;
                      break e;
                    } else {
                      v(ge, le);
                      break;
                    }
                  else
                    l(ge, le);
                  le = le.sibling;
                }
                le = bu(we, ge.mode, ct), le.return = ge, ge = le;
              }
              return Z(ge);
            case R:
              return Yt = we._init, Yi(ge, le, Yt(we._payload), ct);
          }
          if (fe(we))
            return Dt(ge, le, we, ct);
          if (V(we))
            return Ni(ge, le, we, ct);
          ta(ge, we);
        }
        return typeof we == "string" && we !== "" || typeof we == "number" ? (we = "" + we, le !== null && le.tag === 6 ? (v(ge, le.sibling), le = C(le, we), le.return = ge, ge = le) : (v(ge, le), le = tf(we, ge.mode, ct), le.return = ge, ge = le), Z(ge)) : v(ge, le);
      }
      return Yi;
    }
    var Xo = nu(!0), Lc = nu(!1), iu = {}, ir = ki(iu), ru = ki(iu), xs = ki(iu);
    function na(o) {
      if (o === iu)
        throw Error(c(174));
      return o;
    }
    function Dc(o, l) {
      qt(xs, l), qt(ru, o), qt(ir, iu), o = Te(l), xn(ir), qt(ir, o);
    }
    function Js() {
      xn(ir), xn(ru), xn(xs);
    }
    function au(o) {
      var l = na(xs.current), v = na(ir.current);
      l = W(v, o.type, l), v !== l && (qt(ru, o), qt(ir, l));
    }
    function yr(o) {
      ru.current === o && (xn(ir), xn(ru));
    }
    var Fn = ki(0);
    function Qs(o) {
      for (var l = o; l !== null; ) {
        if (l.tag === 13) {
          var v = l.memoizedState;
          if (v !== null && (v = v.dehydrated, v === null || Io(v) || Rr(v)))
            return l;
        } else if (l.tag === 19 && l.memoizedProps.revealOrder !== void 0) {
          if (l.flags & 128)
            return l;
        } else if (l.child !== null) {
          l.child.return = l, l = l.child;
          continue;
        }
        if (l === o)
          break;
        for (; l.sibling === null; ) {
          if (l.return === null || l.return === o)
            return null;
          l = l.return;
        }
        l.sibling.return = l.return, l = l.sibling;
      }
      return null;
    }
    var ia = [];
    function ba() {
      for (var o = 0; o < ia.length; o++) {
        var l = ia[o];
        qe ? l._workInProgressVersionPrimary = null : l._workInProgressVersionSecondary = null;
      }
      ia.length = 0;
    }
    var mi = f.ReactCurrentDispatcher, An = f.ReactCurrentBatchConfig, Ss = 0, fn = null, Vn = null, Ln = null, jo = !1, Ea = !1, Yo = 0, Zo = 0;
    function vi() {
      throw Error(c(321));
    }
    function Or(o, l) {
      if (l === null)
        return !1;
      for (var v = 0; v < l.length && v < o.length; v++)
        if (!xa(o[v], l[v]))
          return !1;
      return !0;
    }
    function Jo(o, l, v, S, C, P) {
      if (Ss = P, fn = l, l.memoizedState = null, l.updateQueue = null, l.lanes = 0, mi.current = o === null || o.memoizedState === null ? Nd : zd, o = v(S, C), Ea) {
        P = 0;
        do {
          if (Ea = !1, Yo = 0, 25 <= P)
            throw Error(c(301));
          P += 1, Ln = Vn = null, l.updateQueue = null, mi.current = Od, o = v(S, C);
        } while (Ea);
      }
      if (mi.current = tl, l = Vn !== null && Vn.next !== null, Ss = 0, Ln = Vn = fn = null, jo = !1, l)
        throw Error(c(300));
      return o;
    }
    function su() {
      var o = Yo !== 0;
      return Yo = 0, o;
    }
    function wa() {
      var o = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
      return Ln === null ? fn.memoizedState = Ln = o : Ln = Ln.next = o, Ln;
    }
    function ra() {
      if (Vn === null) {
        var o = fn.alternate;
        o = o !== null ? o.memoizedState : null;
      } else
        o = Vn.next;
      var l = Ln === null ? fn.memoizedState : Ln.next;
      if (l !== null)
        Ln = l, Vn = o;
      else {
        if (o === null)
          throw Error(c(310));
        Vn = o, o = { memoizedState: Vn.memoizedState, baseState: Vn.baseState, baseQueue: Vn.baseQueue, queue: Vn.queue, next: null }, Ln === null ? fn.memoizedState = Ln = o : Ln = Ln.next = o;
      }
      return Ln;
    }
    function Ta(o, l) {
      return typeof l == "function" ? l(o) : l;
    }
    function ou(o) {
      var l = ra(), v = l.queue;
      if (v === null)
        throw Error(c(311));
      v.lastRenderedReducer = o;
      var S = Vn, C = S.baseQueue, P = v.pending;
      if (P !== null) {
        if (C !== null) {
          var Z = C.next;
          C.next = P.next, P.next = Z;
        }
        S.baseQueue = C = P, v.pending = null;
      }
      if (C !== null) {
        P = C.next, S = S.baseState;
        var oe = Z = null, Re = null, Ye = P;
        do {
          var tt = Ye.lane;
          if ((Ss & tt) === tt)
            Re !== null && (Re = Re.next = { lane: 0, action: Ye.action, hasEagerState: Ye.hasEagerState, eagerState: Ye.eagerState, next: null }), S = Ye.hasEagerState ? Ye.eagerState : o(S, Ye.action);
          else {
            var Bt = {
              lane: tt,
              action: Ye.action,
              hasEagerState: Ye.hasEagerState,
              eagerState: Ye.eagerState,
              next: null
            };
            Re === null ? (oe = Re = Bt, Z = S) : Re = Re.next = Bt, fn.lanes |= tt, La |= tt;
          }
          Ye = Ye.next;
        } while (Ye !== null && Ye !== P);
        Re === null ? Z = S : Re.next = oe, xa(S, l.memoizedState) || (Vi = !0), l.memoizedState = S, l.baseState = Z, l.baseQueue = Re, v.lastRenderedState = S;
      }
      if (o = v.interleaved, o !== null) {
        C = o;
        do
          P = C.lane, fn.lanes |= P, La |= P, C = C.next;
        while (C !== o);
      } else
        C === null && (v.lanes = 0);
      return [l.memoizedState, v.dispatch];
    }
    function Pc(o) {
      var l = ra(), v = l.queue;
      if (v === null)
        throw Error(c(311));
      v.lastRenderedReducer = o;
      var S = v.dispatch, C = v.pending, P = l.memoizedState;
      if (C !== null) {
        v.pending = null;
        var Z = C = C.next;
        do
          P = o(P, Z.action), Z = Z.next;
        while (Z !== C);
        xa(P, l.memoizedState) || (Vi = !0), l.memoizedState = P, l.baseQueue === null && (l.baseState = P), v.lastRenderedState = P;
      }
      return [P, S];
    }
    function Ks() {
    }
    function Dd(o, l) {
      var v = fn, S = ra(), C = l(), P = !xa(S.memoizedState, C);
      if (P && (S.memoizedState = C, Vi = !0), S = S.queue, We(pn.bind(null, v, S, o), [o]), S.getSnapshot !== l || P || Ln !== null && Ln.memoizedState.tag & 1) {
        if (v.flags |= 2048, Qo(9, En.bind(null, v, S, C, l), void 0, null), ci === null)
          throw Error(c(349));
        Ss & 30 || kt(v, l, C);
      }
      return C;
    }
    function kt(o, l, v) {
      o.flags |= 16384, o = { getSnapshot: l, value: v }, l = fn.updateQueue, l === null ? (l = { lastEffect: null, stores: null }, fn.updateQueue = l, l.stores = [o]) : (v = l.stores, v === null ? l.stores = [o] : v.push(o));
    }
    function En(o, l, v, S) {
      l.value = v, l.getSnapshot = S, Zn(l) && Br(o, 1, -1);
    }
    function pn(o, l, v) {
      return v(function() {
        Zn(l) && Br(o, 1, -1);
      });
    }
    function Zn(o) {
      var l = o.getSnapshot;
      o = o.value;
      try {
        var v = l();
        return !xa(o, v);
      } catch {
        return !0;
      }
    }
    function Ir(o) {
      var l = wa();
      return typeof o == "function" && (o = o()), l.memoizedState = l.baseState = o, o = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: Ta, lastRenderedState: o }, l.queue = o, o = o.dispatch = Ud.bind(null, fn, o), [l.memoizedState, o];
    }
    function Qo(o, l, v, S) {
      return o = { tag: o, create: l, destroy: v, deps: S, next: null }, l = fn.updateQueue, l === null ? (l = { lastEffect: null, stores: null }, fn.updateQueue = l, l.lastEffect = o.next = o) : (v = l.lastEffect, v === null ? l.lastEffect = o.next = o : (S = v.next, v.next = o, o.next = S, l.lastEffect = o)), o;
    }
    function nm() {
      return ra().memoizedState;
    }
    function Uc(o, l, v, S) {
      var C = wa();
      fn.flags |= o, C.memoizedState = Qo(1 | l, v, void 0, S === void 0 ? null : S);
    }
    function Nc(o, l, v, S) {
      var C = ra();
      S = S === void 0 ? null : S;
      var P = void 0;
      if (Vn !== null) {
        var Z = Vn.memoizedState;
        if (P = Z.destroy, S !== null && Or(S, Z.deps)) {
          C.memoizedState = Qo(l, v, P, S);
          return;
        }
      }
      fn.flags |= o, C.memoizedState = Qo(1 | l, v, P, S);
    }
    function lu(o, l) {
      return Uc(8390656, 8, o, l);
    }
    function We(o, l) {
      return Nc(2048, 8, o, l);
    }
    function gi(o, l) {
      return Nc(4, 2, o, l);
    }
    function sn(o, l) {
      return Nc(4, 4, o, l);
    }
    function $s(o, l) {
      if (typeof l == "function")
        return o = o(), l(o), function() {
          l(null);
        };
      if (l != null)
        return o = o(), l.current = o, function() {
          l.current = null;
        };
    }
    function Ya(o, l, v) {
      return v = v != null ? v.concat([o]) : null, Nc(4, 4, $s.bind(null, l, o), v);
    }
    function Za() {
    }
    function Ca(o, l) {
      var v = ra();
      l = l === void 0 ? null : l;
      var S = v.memoizedState;
      return S !== null && l !== null && Or(l, S[1]) ? S[0] : (v.memoizedState = [o, l], o);
    }
    function Ko(o, l) {
      var v = ra();
      l = l === void 0 ? null : l;
      var S = v.memoizedState;
      return S !== null && l !== null && Or(l, S[1]) ? S[0] : (o = o(), v.memoizedState = [o, l], o);
    }
    function $o(o, l) {
      var v = vn;
      vn = v !== 0 && 4 > v ? v : 4, o(!0);
      var S = An.transition;
      An.transition = {};
      try {
        o(!1), l();
      } finally {
        vn = v, An.transition = S;
      }
    }
    function el() {
      return ra().memoizedState;
    }
    function Pd(o, l, v) {
      var S = Cs(o);
      v = { lane: S, action: v, hasEagerState: !1, eagerState: null, next: null }, zc(o) ? Oc(l, v) : (Ic(o, l, v), v = Gi(), o = Br(o, S, v), o !== null && Fc(o, l, S));
    }
    function Ud(o, l, v) {
      var S = Cs(o), C = { lane: S, action: v, hasEagerState: !1, eagerState: null, next: null };
      if (zc(o))
        Oc(l, C);
      else {
        Ic(o, l, C);
        var P = o.alternate;
        if (o.lanes === 0 && (P === null || P.lanes === 0) && (P = l.lastRenderedReducer, P !== null))
          try {
            var Z = l.lastRenderedState, oe = P(Z, v);
            if (C.hasEagerState = !0, C.eagerState = oe, xa(oe, Z))
              return;
          } catch {
          } finally {
          }
        v = Gi(), o = Br(o, S, v), o !== null && Fc(o, l, S);
      }
    }
    function zc(o) {
      var l = o.alternate;
      return o === fn || l !== null && l === fn;
    }
    function Oc(o, l) {
      Ea = jo = !0;
      var v = o.pending;
      v === null ? l.next = l : (l.next = v.next, v.next = l), o.pending = l;
    }
    function Ic(o, l, v) {
      ci !== null && o.mode & 1 && !(Kt & 2) ? (o = l.interleaved, o === null ? (v.next = v, ea === null ? ea = [l] : ea.push(l)) : (v.next = o.next, o.next = v), l.interleaved = v) : (o = l.pending, o === null ? v.next = v : (v.next = o.next, o.next = v), l.pending = v);
    }
    function Fc(o, l, v) {
      if (v & 4194240) {
        var S = l.lanes;
        S &= o.pendingLanes, v |= S, l.lanes = v, vd(o, v);
      }
    }
    var tl = { readContext: Pr, useCallback: vi, useContext: vi, useEffect: vi, useImperativeHandle: vi, useInsertionEffect: vi, useLayoutEffect: vi, useMemo: vi, useReducer: vi, useRef: vi, useState: vi, useDebugValue: vi, useDeferredValue: vi, useTransition: vi, useMutableSource: vi, useSyncExternalStore: vi, useId: vi, unstable_isNewReconciler: !1 }, Nd = { readContext: Pr, useCallback: function(o, l) {
      return wa().memoizedState = [o, l === void 0 ? null : l], o;
    }, useContext: Pr, useEffect: lu, useImperativeHandle: function(o, l, v) {
      return v = v != null ? v.concat([o]) : null, Uc(
        4194308,
        4,
        $s.bind(null, l, o),
        v
      );
    }, useLayoutEffect: function(o, l) {
      return Uc(4194308, 4, o, l);
    }, useInsertionEffect: function(o, l) {
      return Uc(4, 2, o, l);
    }, useMemo: function(o, l) {
      var v = wa();
      return l = l === void 0 ? null : l, o = o(), v.memoizedState = [o, l], o;
    }, useReducer: function(o, l, v) {
      var S = wa();
      return l = v !== void 0 ? v(l) : l, S.memoizedState = S.baseState = l, o = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: o, lastRenderedState: l }, S.queue = o, o = o.dispatch = Pd.bind(null, fn, o), [S.memoizedState, o];
    }, useRef: function(o) {
      var l = wa();
      return o = { current: o }, l.memoizedState = o;
    }, useState: Ir, useDebugValue: Za, useDeferredValue: function(o) {
      var l = Ir(o), v = l[0], S = l[1];
      return lu(function() {
        var C = An.transition;
        An.transition = {};
        try {
          S(o);
        } finally {
          An.transition = C;
        }
      }, [o]), v;
    }, useTransition: function() {
      var o = Ir(!1), l = o[0];
      return o = $o.bind(null, o[1]), wa().memoizedState = o, [l, o];
    }, useMutableSource: function() {
    }, useSyncExternalStore: function(o, l, v) {
      var S = fn, C = wa();
      if (In) {
        if (v === void 0)
          throw Error(c(407));
        v = v();
      } else {
        if (v = l(), ci === null)
          throw Error(c(349));
        Ss & 30 || kt(S, l, v);
      }
      C.memoizedState = v;
      var P = { value: v, getSnapshot: l };
      return C.queue = P, lu(pn.bind(null, S, P, o), [o]), S.flags |= 2048, Qo(9, En.bind(null, S, P, v, l), void 0, null), v;
    }, useId: function() {
      var o = wa(), l = ci.identifierPrefix;
      if (In) {
        var v = ja, S = Xa;
        v = (S & ~(1 << 32 - Dr(S) - 1)).toString(32) + v, l = ":" + l + "R" + v, v = Yo++, 0 < v && (l += "H" + v.toString(32)), l += ":";
      } else
        v = Zo++, l = ":" + l + "r" + v.toString(32) + ":";
      return o.memoizedState = l;
    }, unstable_isNewReconciler: !1 }, zd = {
      readContext: Pr,
      useCallback: Ca,
      useContext: Pr,
      useEffect: We,
      useImperativeHandle: Ya,
      useInsertionEffect: gi,
      useLayoutEffect: sn,
      useMemo: Ko,
      useReducer: ou,
      useRef: nm,
      useState: function() {
        return ou(Ta);
      },
      useDebugValue: Za,
      useDeferredValue: function(o) {
        var l = ou(Ta), v = l[0], S = l[1];
        return We(function() {
          var C = An.transition;
          An.transition = {};
          try {
            S(o);
          } finally {
            An.transition = C;
          }
        }, [o]), v;
      },
      useTransition: function() {
        var o = ou(Ta)[0], l = ra().memoizedState;
        return [o, l];
      },
      useMutableSource: Ks,
      useSyncExternalStore: Dd,
      useId: el,
      unstable_isNewReconciler: !1
    }, Od = {
      readContext: Pr,
      useCallback: Ca,
      useContext: Pr,
      useEffect: We,
      useImperativeHandle: Ya,
      useInsertionEffect: gi,
      useLayoutEffect: sn,
      useMemo: Ko,
      useReducer: Pc,
      useRef: nm,
      useState: function() {
        return Pc(Ta);
      },
      useDebugValue: Za,
      useDeferredValue: function(o) {
        var l = Pc(Ta), v = l[0], S = l[1];
        return We(function() {
          var C = An.transition;
          An.transition = {};
          try {
            S(o);
          } finally {
            An.transition = C;
          }
        }, [o]), v;
      },
      useTransition: function() {
        var o = Pc(Ta)[0], l = ra().memoizedState;
        return [o, l];
      },
      useMutableSource: Ks,
      useSyncExternalStore: Dd,
      useId: el,
      unstable_isNewReconciler: !1
    };
    function uu(o, l) {
      try {
        var v = "", S = l;
        do
          v += sy(S), S = S.return;
        while (S);
        var C = v;
      } catch (P) {
        C = `
Error generating stack: ` + P.message + `
` + P.stack;
      }
      return { value: o, source: l, stack: C };
    }
    function cu(o, l) {
      try {
        console.error(l.value);
      } catch (v) {
        setTimeout(function() {
          throw v;
        });
      }
    }
    var Id = typeof WeakMap == "function" ? WeakMap : Map;
    function Bc(o, l, v) {
      v = qa(-1, v), v.tag = 3, v.payload = { element: null };
      var S = l.value;
      return v.callback = function() {
        vu || (vu = !0, Qc = S), cu(o, l);
      }, v;
    }
    function Hc(o, l, v) {
      v = qa(-1, v), v.tag = 3;
      var S = o.type.getDerivedStateFromError;
      if (typeof S == "function") {
        var C = l.value;
        v.payload = function() {
          return S(C);
        }, v.callback = function() {
          cu(o, l);
        };
      }
      var P = o.stateNode;
      return P !== null && typeof P.componentDidCatch == "function" && (v.callback = function() {
        cu(o, l), typeof S != "function" && (ws === null ? ws = /* @__PURE__ */ new Set([this]) : ws.add(this));
        var Z = l.stack;
        this.componentDidCatch(l.value, { componentStack: Z !== null ? Z : "" });
      }), v;
    }
    function fu(o, l, v) {
      var S = o.pingCache;
      if (S === null) {
        S = o.pingCache = new Id();
        var C = /* @__PURE__ */ new Set();
        S.set(l, C);
      } else
        C = S.get(l), C === void 0 && (C = /* @__PURE__ */ new Set(), S.set(l, C));
      C.has(v) || (C.add(v), o = Da.bind(null, o, l, v), l.then(o, o));
    }
    function eo(o) {
      do {
        var l;
        if ((l = o.tag === 13) && (l = o.memoizedState, l = l !== null ? l.dehydrated !== null : !0), l)
          return o;
        o = o.return;
      } while (o !== null);
      return null;
    }
    function kc(o, l, v, S, C) {
      return o.mode & 1 ? (o.flags |= 65536, o.lanes = C, o) : (o === l ? o.flags |= 65536 : (o.flags |= 128, v.flags |= 131072, v.flags &= -52805, v.tag === 1 && (v.alternate === null ? v.tag = 17 : (l = qa(-1, 1), l.tag = 2, _s(v, l))), v.lanes |= 1), o);
    }
    function Fr(o) {
      o.flags |= 4;
    }
    function Vc(o, l) {
      if (o !== null && o.child === l.child)
        return !0;
      if (l.flags & 16)
        return !1;
      for (o = l.child; o !== null; ) {
        if (o.flags & 12854 || o.subtreeFlags & 12854)
          return !1;
        o = o.sibling;
      }
      return !0;
    }
    var to, nl, Ms, du;
    if (ot)
      to = function(o, l) {
        for (var v = l.child; v !== null; ) {
          if (v.tag === 5 || v.tag === 6)
            ue(o, v.stateNode);
          else if (v.tag !== 4 && v.child !== null) {
            v.child.return = v, v = v.child;
            continue;
          }
          if (v === l)
            break;
          for (; v.sibling === null; ) {
            if (v.return === null || v.return === l)
              return;
            v = v.return;
          }
          v.sibling.return = v.return, v = v.sibling;
        }
      }, nl = function() {
      }, Ms = function(o, l, v, S, C) {
        if (o = o.memoizedProps, o !== S) {
          var P = l.stateNode, Z = na(ir.current);
          v = ye(P, v, o, S, C, Z), (l.updateQueue = v) && Fr(l);
        }
      }, du = function(o, l, v, S) {
        v !== S && Fr(l);
      };
    else if (Ie) {
      to = function(o, l, v, S) {
        for (var C = l.child; C !== null; ) {
          if (C.tag === 5) {
            var P = C.stateNode;
            v && S && (P = ln(P, C.type, C.memoizedProps, C)), ue(o, P);
          } else if (C.tag === 6)
            P = C.stateNode, v && S && (P = kn(P, C.memoizedProps, C)), ue(o, P);
          else if (C.tag !== 4) {
            if (C.tag === 22 && C.memoizedState !== null)
              P = C.child, P !== null && (P.return = C), to(o, C, !0, !0);
            else if (C.child !== null) {
              C.child.return = C, C = C.child;
              continue;
            }
          }
          if (C === l)
            break;
          for (; C.sibling === null; ) {
            if (C.return === null || C.return === l)
              return;
            C = C.return;
          }
          C.sibling.return = C.return, C = C.sibling;
        }
      };
      var il = function(o, l, v, S) {
        for (var C = l.child; C !== null; ) {
          if (C.tag === 5) {
            var P = C.stateNode;
            v && S && (P = ln(P, C.type, C.memoizedProps, C)), mn(o, P);
          } else if (C.tag === 6)
            P = C.stateNode, v && S && (P = kn(P, C.memoizedProps, C)), mn(o, P);
          else if (C.tag !== 4) {
            if (C.tag === 22 && C.memoizedState !== null)
              P = C.child, P !== null && (P.return = C), il(o, C, !0, !0);
            else if (C.child !== null) {
              C.child.return = C, C = C.child;
              continue;
            }
          }
          if (C === l)
            break;
          for (; C.sibling === null; ) {
            if (C.return === null || C.return === l)
              return;
            C = C.return;
          }
          C.sibling.return = C.return, C = C.sibling;
        }
      };
      nl = function(o, l) {
        var v = l.stateNode;
        if (!Vc(o, l)) {
          o = v.containerInfo;
          var S = tn(o);
          il(S, l, !1, !1), v.pendingChildren = S, Fr(l), Gn(o, S);
        }
      }, Ms = function(o, l, v, S, C) {
        var P = o.stateNode, Z = o.memoizedProps;
        if ((o = Vc(o, l)) && Z === S)
          l.stateNode = P;
        else {
          var oe = l.stateNode, Re = na(ir.current), Ye = null;
          Z !== S && (Ye = ye(oe, v, Z, S, C, Re)), o && Ye === null ? l.stateNode = P : (P = Tt(P, Ye, v, Z, S, l, o, oe), pe(P, v, S, C, Re) && Fr(l), l.stateNode = P, o ? Fr(l) : to(P, l, !1, !1));
        }
      }, du = function(o, l, v, S) {
        v !== S ? (o = na(xs.current), v = na(ir.current), l.stateNode = Be(S, o, v, l), Fr(l)) : l.stateNode = o.stateNode;
      };
    } else
      nl = function() {
      }, Ms = function() {
      }, du = function() {
      };
    function aa(o, l) {
      if (!In)
        switch (o.tailMode) {
          case "hidden":
            l = o.tail;
            for (var v = null; l !== null; )
              l.alternate !== null && (v = l), l = l.sibling;
            v === null ? o.tail = null : v.sibling = null;
            break;
          case "collapsed":
            v = o.tail;
            for (var S = null; v !== null; )
              v.alternate !== null && (S = v), v = v.sibling;
            S === null ? l || o.tail === null ? o.tail = null : o.tail.sibling = null : S.sibling = null;
        }
    }
    function Rn(o) {
      var l = o.alternate !== null && o.alternate.child === o.child, v = 0, S = 0;
      if (l)
        for (var C = o.child; C !== null; )
          v |= C.lanes | C.childLanes, S |= C.subtreeFlags & 14680064, S |= C.flags & 14680064, C.return = o, C = C.sibling;
      else
        for (C = o.child; C !== null; )
          v |= C.lanes | C.childLanes, S |= C.subtreeFlags, S |= C.flags, C.return = o, C = C.sibling;
      return o.subtreeFlags |= S, o.childLanes = v, l;
    }
    function oy(o, l, v) {
      var S = l.pendingProps;
      switch (Cd(l), l.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return Rn(l), null;
        case 1:
          return Li(l.type) && hc(), Rn(l), null;
        case 3:
          return S = l.stateNode, Js(), xn(Jt), xn(ui), ba(), S.pendingContext && (S.context = S.pendingContext, S.pendingContext = null), (o === null || o.child === null) && (eu(l) ? Fr(l) : o === null || o.memoizedState.isDehydrated && !(l.flags & 256) || (l.flags |= 1024, zr !== null && (_u(zr), zr = null))), nl(o, l), Rn(l), null;
        case 5:
          yr(l), v = na(xs.current);
          var C = l.type;
          if (o !== null && l.stateNode != null)
            Ms(o, l, C, S, v), o.ref !== l.ref && (l.flags |= 512, l.flags |= 2097152);
          else {
            if (!S) {
              if (l.stateNode === null)
                throw Error(c(166));
              return Rn(l), null;
            }
            if (o = na(ir.current), eu(l)) {
              if (!Me)
                throw Error(c(175));
              o = ce(l.stateNode, l.type, l.memoizedProps, v, o, l, !Wo), l.updateQueue = o, o !== null && Fr(l);
            } else {
              var P = Se(C, S, v, o, l);
              to(P, l, !1, !1), l.stateNode = P, pe(P, C, S, v, o) && Fr(l);
            }
            l.ref !== null && (l.flags |= 512, l.flags |= 2097152);
          }
          return Rn(l), null;
        case 6:
          if (o && l.stateNode != null)
            du(o, l, o.memoizedProps, S);
          else {
            if (typeof S != "string" && l.stateNode === null)
              throw Error(c(166));
            if (o = na(xs.current), v = na(ir.current), eu(l)) {
              if (!Me)
                throw Error(c(176));
              if (o = l.stateNode, S = l.memoizedProps, (v = Ke(o, S, l, !Wo)) && (C = gr, C !== null))
                switch (P = (C.mode & 1) !== 0, C.tag) {
                  case 3:
                    Cn(C.stateNode.containerInfo, o, S, P);
                    break;
                  case 5:
                    Yn(C.type, C.memoizedProps, C.stateNode, o, S, P);
                }
              v && Fr(l);
            } else
              l.stateNode = Be(S, o, v, l);
          }
          return Rn(l), null;
        case 13:
          if (xn(Fn), S = l.memoizedState, In && Di !== null && l.mode & 1 && !(l.flags & 128)) {
            for (o = Di; o; )
              o = q(o);
            return qo(), l.flags |= 98560, l;
          }
          if (S !== null && S.dehydrated !== null) {
            if (S = eu(l), o === null) {
              if (!S)
                throw Error(c(318));
              if (!Me)
                throw Error(c(344));
              if (o = l.memoizedState, o = o !== null ? o.dehydrated : null, !o)
                throw Error(c(317));
              at(o, l);
            } else
              qo(), !(l.flags & 128) && (l.memoizedState = null), l.flags |= 4;
            return Rn(l), null;
          }
          return zr !== null && (_u(zr), zr = null), l.flags & 128 ? (l.lanes = v, l) : (S = S !== null, v = !1, o === null ? eu(l) : v = o.memoizedState !== null, S && !v && (l.child.flags |= 8192, l.mode & 1 && (o === null || Fn.current & 1 ? _i === 0 && (_i = 3) : nh())), l.updateQueue !== null && (l.flags |= 4), Rn(l), null);
        case 4:
          return Js(), nl(o, l), o === null && nt(l.stateNode.containerInfo), Rn(l), null;
        case 10:
          return xc(l.type._context), Rn(l), null;
        case 17:
          return Li(l.type) && hc(), Rn(l), null;
        case 19:
          if (xn(Fn), C = l.memoizedState, C === null)
            return Rn(l), null;
          if (S = (l.flags & 128) !== 0, P = C.rendering, P === null)
            if (S)
              aa(C, !1);
            else {
              if (_i !== 0 || o !== null && o.flags & 128)
                for (o = l.child; o !== null; ) {
                  if (P = Qs(o), P !== null) {
                    for (l.flags |= 128, aa(C, !1), o = P.updateQueue, o !== null && (l.updateQueue = o, l.flags |= 4), l.subtreeFlags = 0, o = v, S = l.child; S !== null; )
                      v = S, C = o, v.flags &= 14680066, P = v.alternate, P === null ? (v.childLanes = 0, v.lanes = C, v.child = null, v.subtreeFlags = 0, v.memoizedProps = null, v.memoizedState = null, v.updateQueue = null, v.dependencies = null, v.stateNode = null) : (v.childLanes = P.childLanes, v.lanes = P.lanes, v.child = P.child, v.subtreeFlags = 0, v.deletions = null, v.memoizedProps = P.memoizedProps, v.memoizedState = P.memoizedState, v.updateQueue = P.updateQueue, v.type = P.type, C = P.dependencies, v.dependencies = C === null ? null : { lanes: C.lanes, firstContext: C.firstContext }), S = S.sibling;
                    return qt(Fn, Fn.current & 1 | 2), l.child;
                  }
                  o = o.sibling;
                }
              C.tail !== null && Xn() > Kd && (l.flags |= 128, S = !0, aa(C, !1), l.lanes = 4194304);
            }
          else {
            if (!S)
              if (o = Qs(P), o !== null) {
                if (l.flags |= 128, S = !0, o = o.updateQueue, o !== null && (l.updateQueue = o, l.flags |= 4), aa(C, !0), C.tail === null && C.tailMode === "hidden" && !P.alternate && !In)
                  return Rn(l), null;
              } else
                2 * Xn() - C.renderingStartTime > Kd && v !== 1073741824 && (l.flags |= 128, S = !0, aa(C, !1), l.lanes = 4194304);
            C.isBackwards ? (P.sibling = l.child, l.child = P) : (o = C.last, o !== null ? o.sibling = P : l.child = P, C.last = P);
          }
          return C.tail !== null ? (l = C.tail, C.rendering = l, C.tail = l.sibling, C.renderingStartTime = Xn(), l.sibling = null, o = Fn.current, qt(Fn, S ? o & 1 | 2 : o & 1), l) : (Rn(l), null);
        case 22:
        case 23:
          return Hr(), S = l.memoizedState !== null, o !== null && o.memoizedState !== null !== S && (l.flags |= 8192), S && l.mode & 1 ? xr & 1073741824 && (Rn(l), ot && l.subtreeFlags & 6 && (l.flags |= 8192)) : Rn(l), null;
        case 24:
          return null;
        case 25:
          return null;
      }
      throw Error(c(156, l.tag));
    }
    var zn = f.ReactCurrentOwner, Vi = !1;
    function Ti(o, l, v, S) {
      l.child = o === null ? Lc(l, null, v, S) : Xo(l, o.child, v, S);
    }
    function rl(o, l, v, S, C) {
      v = v.render;
      var P = l.ref;
      return ko(l, C), S = Jo(o, l, v, S, P, C), v = su(), o !== null && !Vi ? (l.updateQueue = o.updateQueue, l.flags &= -2053, o.lanes &= ~C, Jn(o, l, C)) : (In && v && Td(l), l.flags |= 1, Ti(o, l, S, C), l.child);
    }
    function hu(o, l, v, S, C) {
      if (o === null) {
        var P = v.type;
        return typeof P == "function" && !ho(P) && P.defaultProps === void 0 && v.compare === null && v.defaultProps === void 0 ? (l.tag = 15, l.type = P, im(o, l, P, S, C)) : (o = po(v.type, null, S, l, l.mode, C), o.ref = l.ref, o.return = l, l.child = o);
      }
      if (P = o.child, !(o.lanes & C)) {
        var Z = P.memoizedProps;
        if (v = v.compare, v = v !== null ? v : yc, v(Z, S) && o.ref === l.ref)
          return Jn(o, l, C);
      }
      return l.flags |= 1, o = or(P, S), o.ref = l.ref, o.return = l, l.child = o;
    }
    function im(o, l, v, S, C) {
      if (o !== null && yc(o.memoizedProps, S) && o.ref === l.ref)
        if (Vi = !1, (o.lanes & C) !== 0)
          o.flags & 131072 && (Vi = !0);
        else
          return l.lanes = o.lanes, Jn(o, l, C);
      return Fd(o, l, v, S, C);
    }
    function rm(o, l, v) {
      var S = l.pendingProps, C = S.children, P = o !== null ? o.memoizedState : null;
      if (S.mode === "hidden")
        if (!(l.mode & 1))
          l.memoizedState = { baseLanes: 0, cachePool: null }, qt(fl, xr), xr |= v;
        else if (v & 1073741824)
          l.memoizedState = { baseLanes: 0, cachePool: null }, S = P !== null ? P.baseLanes : v, qt(fl, xr), xr |= S;
        else
          return o = P !== null ? P.baseLanes | v : v, l.lanes = l.childLanes = 1073741824, l.memoizedState = { baseLanes: o, cachePool: null }, l.updateQueue = null, qt(fl, xr), xr |= o, null;
      else
        P !== null ? (S = P.baseLanes | v, l.memoizedState = null) : S = v, qt(fl, xr), xr |= S;
      return Ti(o, l, C, v), l.child;
    }
    function am(o, l) {
      var v = l.ref;
      (o === null && v !== null || o !== null && o.ref !== v) && (l.flags |= 512, l.flags |= 2097152);
    }
    function Fd(o, l, v, S, C) {
      var P = Li(v) ? vr : ui.current;
      return P = vs(l, P), ko(l, C), v = Jo(o, l, v, S, P, C), S = su(), o !== null && !Vi ? (l.updateQueue = o.updateQueue, l.flags &= -2053, o.lanes &= ~C, Jn(o, l, C)) : (In && S && Td(l), l.flags |= 1, Ti(o, l, v, C), l.child);
    }
    function Gc(o, l, v, S, C) {
      if (Li(v)) {
        var P = !0;
        Fo(l);
      } else
        P = !1;
      if (ko(l, C), l.stateNode === null)
        o !== null && (o.alternate = null, l.alternate = null, l.flags |= 2), $p(l, v, S), wd(l, v, S, C), S = !0;
      else if (o === null) {
        var Z = l.stateNode, oe = l.memoizedProps;
        Z.props = oe;
        var Re = Z.context, Ye = v.contextType;
        typeof Ye == "object" && Ye !== null ? Ye = Pr(Ye) : (Ye = Li(v) ? vr : ui.current, Ye = vs(l, Ye));
        var tt = v.getDerivedStateFromProps, Bt = typeof tt == "function" || typeof Z.getSnapshotBeforeUpdate == "function";
        Bt || typeof Z.UNSAFE_componentWillReceiveProps != "function" && typeof Z.componentWillReceiveProps != "function" || (oe !== S || Re !== Ye) && em(l, Z, S, Ye), Ma = !1;
        var zt = l.memoizedState;
        Z.state = zt, Mc(l, S, Z, C), Re = l.memoizedState, oe !== S || zt !== Re || Jt.current || Ma ? (typeof tt == "function" && (bc(l, v, tt, S), Re = l.memoizedState), (oe = Ma || Kp(l, v, oe, S, zt, Re, Ye)) ? (Bt || typeof Z.UNSAFE_componentWillMount != "function" && typeof Z.componentWillMount != "function" || (typeof Z.componentWillMount == "function" && Z.componentWillMount(), typeof Z.UNSAFE_componentWillMount == "function" && Z.UNSAFE_componentWillMount()), typeof Z.componentDidMount == "function" && (l.flags |= 4194308)) : (typeof Z.componentDidMount == "function" && (l.flags |= 4194308), l.memoizedProps = S, l.memoizedState = Re), Z.props = S, Z.state = Re, Z.context = Ye, S = oe) : (typeof Z.componentDidMount == "function" && (l.flags |= 4194308), S = !1);
      } else {
        Z = l.stateNode, $l(o, l), oe = l.memoizedProps, Ye = l.type === l.elementType ? oe : $r(l.type, oe), Z.props = Ye, Bt = l.pendingProps, zt = Z.context, Re = v.contextType, typeof Re == "object" && Re !== null ? Re = Pr(Re) : (Re = Li(v) ? vr : ui.current, Re = vs(l, Re));
        var Dn = v.getDerivedStateFromProps;
        (tt = typeof Dn == "function" || typeof Z.getSnapshotBeforeUpdate == "function") || typeof Z.UNSAFE_componentWillReceiveProps != "function" && typeof Z.componentWillReceiveProps != "function" || (oe !== Bt || zt !== Re) && em(l, Z, S, Re), Ma = !1, zt = l.memoizedState, Z.state = zt, Mc(l, S, Z, C);
        var Dt = l.memoizedState;
        oe !== Bt || zt !== Dt || Jt.current || Ma ? (typeof Dn == "function" && (bc(l, v, Dn, S), Dt = l.memoizedState), (Ye = Ma || Kp(l, v, Ye, S, zt, Dt, Re) || !1) ? (tt || typeof Z.UNSAFE_componentWillUpdate != "function" && typeof Z.componentWillUpdate != "function" || (typeof Z.componentWillUpdate == "function" && Z.componentWillUpdate(
          S,
          Dt,
          Re
        ), typeof Z.UNSAFE_componentWillUpdate == "function" && Z.UNSAFE_componentWillUpdate(S, Dt, Re)), typeof Z.componentDidUpdate == "function" && (l.flags |= 4), typeof Z.getSnapshotBeforeUpdate == "function" && (l.flags |= 1024)) : (typeof Z.componentDidUpdate != "function" || oe === o.memoizedProps && zt === o.memoizedState || (l.flags |= 4), typeof Z.getSnapshotBeforeUpdate != "function" || oe === o.memoizedProps && zt === o.memoizedState || (l.flags |= 1024), l.memoizedProps = S, l.memoizedState = Dt), Z.props = S, Z.state = Dt, Z.context = Re, S = Ye) : (typeof Z.componentDidUpdate != "function" || oe === o.memoizedProps && zt === o.memoizedState || (l.flags |= 4), typeof Z.getSnapshotBeforeUpdate != "function" || oe === o.memoizedProps && zt === o.memoizedState || (l.flags |= 1024), S = !1);
      }
      return Bd(o, l, v, S, P, C);
    }
    function Bd(o, l, v, S, C, P) {
      am(o, l);
      var Z = (l.flags & 128) !== 0;
      if (!S && !Z)
        return C && hd(l, v, !1), Jn(o, l, P);
      S = l.stateNode, zn.current = l;
      var oe = Z && typeof v.getDerivedStateFromError != "function" ? null : S.render();
      return l.flags |= 1, o !== null && Z ? (l.child = Xo(l, o.child, null, P), l.child = Xo(l, null, oe, P)) : Ti(o, l, oe, P), l.memoizedState = S.state, C && hd(l, v, !0), l.child;
    }
    function Wc(o) {
      var l = o.stateNode;
      l.pendingContext ? Gp(o, l.pendingContext, l.pendingContext !== l.context) : l.context && Gp(o, l.context, !1), Dc(o, l.containerInfo);
    }
    function Hd(o, l, v, S, C) {
      return qo(), tu(C), l.flags |= 256, Ti(o, l, v, S), l.child;
    }
    var qc = { dehydrated: null, treeContext: null, retryLane: 0 };
    function no(o) {
      return { baseLanes: o, cachePool: null };
    }
    function sm(o, l, v) {
      var S = l.pendingProps, C = Fn.current, P = !1, Z = (l.flags & 128) !== 0, oe;
      if ((oe = Z) || (oe = o !== null && o.memoizedState === null ? !1 : (C & 2) !== 0), oe ? (P = !0, l.flags &= -129) : (o === null || o.memoizedState !== null) && (C |= 1), qt(Fn, C & 1), o === null)
        return Ac(l), o = l.memoizedState, o !== null && (o = o.dehydrated, o !== null) ? (l.mode & 1 ? Rr(o) ? l.lanes = 8 : l.lanes = 1073741824 : l.lanes = 1, null) : (C = S.children, o = S.fallback, P ? (S = l.mode, P = l.child, C = { mode: "hidden", children: C }, !(S & 1) && P !== null ? (P.childLanes = 0, P.pendingProps = C) : P = Mu(C, S, 0, null), o = Rs(o, S, v, null), P.return = l, o.return = l, P.sibling = o, l.child = P, l.child.memoizedState = no(v), l.memoizedState = qc, o) : Xc(l, C));
      if (C = o.memoizedState, C !== null) {
        if (oe = C.dehydrated, oe !== null) {
          if (Z)
            return l.flags & 256 ? (l.flags &= -257, Aa(o, l, v, Error(c(422)))) : l.memoizedState !== null ? (l.child = o.child, l.flags |= 128, null) : (P = S.fallback, C = l.mode, S = Mu({ mode: "visible", children: S.children }, C, 0, null), P = Rs(P, C, v, null), P.flags |= 2, S.return = l, P.return = l, S.sibling = P, l.child = S, l.mode & 1 && Xo(
              l,
              o.child,
              null,
              v
            ), l.child.memoizedState = no(v), l.memoizedState = qc, P);
          if (!(l.mode & 1))
            l = Aa(o, l, v, null);
          else if (Rr(oe))
            l = Aa(o, l, v, Error(c(419)));
          else if (S = (v & o.childLanes) !== 0, Vi || S) {
            if (S = ci, S !== null) {
              switch (v & -v) {
                case 4:
                  P = 2;
                  break;
                case 16:
                  P = 8;
                  break;
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                case 4096:
                case 8192:
                case 16384:
                case 32768:
                case 65536:
                case 131072:
                case 262144:
                case 524288:
                case 1048576:
                case 2097152:
                case 4194304:
                case 8388608:
                case 16777216:
                case 33554432:
                case 67108864:
                  P = 32;
                  break;
                case 536870912:
                  P = 268435456;
                  break;
                default:
                  P = 0;
              }
              S = P & (S.suspendedLanes | v) ? 0 : P, S !== 0 && S !== C.retryLane && (C.retryLane = S, Br(o, S, -1));
            }
            nh(), l = Aa(o, l, v, Error(c(421)));
          } else
            Io(oe) ? (l.flags |= 128, l.child = o.child, l = fy.bind(null, o), ms(oe, l), l = null) : (v = C.treeContext, Me && (Di = K(oe), gr = l, In = !0, zr = null, Wo = !1, v !== null && (Ur[Nr++] = Xa, Ur[Nr++] = ja, Ur[Nr++] = js, Xa = v.id, ja = v.overflow, js = l)), l = Xc(l, l.pendingProps.children), l.flags |= 4096);
          return l;
        }
        return P ? (S = lm(o, l, S.children, S.fallback, v), P = l.child, C = o.child.memoizedState, P.memoizedState = C === null ? no(v) : { baseLanes: C.baseLanes | v, cachePool: null }, P.childLanes = o.childLanes & ~v, l.memoizedState = qc, S) : (v = om(o, l, S.children, v), l.memoizedState = null, v);
      }
      return P ? (S = lm(o, l, S.children, S.fallback, v), P = l.child, C = o.child.memoizedState, P.memoizedState = C === null ? no(v) : { baseLanes: C.baseLanes | v, cachePool: null }, P.childLanes = o.childLanes & ~v, l.memoizedState = qc, S) : (v = om(o, l, S.children, v), l.memoizedState = null, v);
    }
    function Xc(o, l) {
      return l = Mu({ mode: "visible", children: l }, o.mode, 0, null), l.return = o, o.child = l;
    }
    function om(o, l, v, S) {
      var C = o.child;
      return o = C.sibling, v = or(C, { mode: "visible", children: v }), !(l.mode & 1) && (v.lanes = S), v.return = l, v.sibling = null, o !== null && (S = l.deletions, S === null ? (l.deletions = [o], l.flags |= 16) : S.push(o)), l.child = v;
    }
    function lm(o, l, v, S, C) {
      var P = l.mode;
      o = o.child;
      var Z = o.sibling, oe = { mode: "hidden", children: v };
      return !(P & 1) && l.child !== o ? (v = l.child, v.childLanes = 0, v.pendingProps = oe, l.deletions = null) : (v = or(o, oe), v.subtreeFlags = o.subtreeFlags & 14680064), Z !== null ? S = or(Z, S) : (S = Rs(S, P, C, null), S.flags |= 2), S.return = l, v.return = l, v.sibling = S, l.child = v, S;
    }
    function Aa(o, l, v, S) {
      return S !== null && tu(S), Xo(l, o.child, null, v), o = Xc(l, l.pendingProps.children), o.flags |= 2, l.memoizedState = null, o;
    }
    function al(o, l, v) {
      o.lanes |= l;
      var S = o.alternate;
      S !== null && (S.lanes |= l), bd(o.return, l, v);
    }
    function Ja(o, l, v, S, C) {
      var P = o.memoizedState;
      P === null ? o.memoizedState = { isBackwards: l, rendering: null, renderingStartTime: 0, last: S, tail: v, tailMode: C } : (P.isBackwards = l, P.rendering = null, P.renderingStartTime = 0, P.last = S, P.tail = v, P.tailMode = C);
    }
    function jc(o, l, v) {
      var S = l.pendingProps, C = S.revealOrder, P = S.tail;
      if (Ti(o, l, S.children, v), S = Fn.current, S & 2)
        S = S & 1 | 2, l.flags |= 128;
      else {
        if (o !== null && o.flags & 128)
          e:
            for (o = l.child; o !== null; ) {
              if (o.tag === 13)
                o.memoizedState !== null && al(o, v, l);
              else if (o.tag === 19)
                al(o, v, l);
              else if (o.child !== null) {
                o.child.return = o, o = o.child;
                continue;
              }
              if (o === l)
                break e;
              for (; o.sibling === null; ) {
                if (o.return === null || o.return === l)
                  break e;
                o = o.return;
              }
              o.sibling.return = o.return, o = o.sibling;
            }
        S &= 1;
      }
      if (qt(Fn, S), !(l.mode & 1))
        l.memoizedState = null;
      else
        switch (C) {
          case "forwards":
            for (v = l.child, C = null; v !== null; )
              o = v.alternate, o !== null && Qs(o) === null && (C = v), v = v.sibling;
            v = C, v === null ? (C = l.child, l.child = null) : (C = v.sibling, v.sibling = null), Ja(l, !1, C, v, P);
            break;
          case "backwards":
            for (v = null, C = l.child, l.child = null; C !== null; ) {
              if (o = C.alternate, o !== null && Qs(o) === null) {
                l.child = C;
                break;
              }
              o = C.sibling, C.sibling = v, v = C, C = o;
            }
            Ja(l, !0, v, null, P);
            break;
          case "together":
            Ja(l, !1, null, null, void 0);
            break;
          default:
            l.memoizedState = null;
        }
      return l.child;
    }
    function Jn(o, l, v) {
      if (o !== null && (l.dependencies = o.dependencies), La |= l.lanes, !(v & l.childLanes))
        return null;
      if (o !== null && l.child !== o.child)
        throw Error(c(153));
      if (l.child !== null) {
        for (o = l.child, v = or(o, o.pendingProps), l.child = v, v.return = l; o.sibling !== null; )
          o = o.sibling, v = v.sibling = or(o, o.pendingProps), v.return = l;
        v.sibling = null;
      }
      return l.child;
    }
    function sl(o, l, v) {
      switch (l.tag) {
        case 3:
          Wc(l), qo();
          break;
        case 5:
          au(l);
          break;
        case 1:
          Li(l.type) && Fo(l);
          break;
        case 4:
          Dc(l, l.stateNode.containerInfo);
          break;
        case 10:
          Md(l, l.type._context, l.memoizedProps.value);
          break;
        case 13:
          var S = l.memoizedState;
          if (S !== null)
            return S.dehydrated !== null ? (qt(Fn, Fn.current & 1), l.flags |= 128, null) : v & l.child.childLanes ? sm(o, l, v) : (qt(Fn, Fn.current & 1), o = Jn(o, l, v), o !== null ? o.sibling : null);
          qt(Fn, Fn.current & 1);
          break;
        case 19:
          if (S = (v & l.childLanes) !== 0, o.flags & 128) {
            if (S)
              return jc(
                o,
                l,
                v
              );
            l.flags |= 128;
          }
          var C = l.memoizedState;
          if (C !== null && (C.rendering = null, C.tail = null, C.lastEffect = null), qt(Fn, Fn.current), S)
            break;
          return null;
        case 22:
        case 23:
          return l.lanes = 0, rm(o, l, v);
      }
      return Jn(o, l, v);
    }
    function jt(o, l) {
      switch (Cd(l), l.tag) {
        case 1:
          return Li(l.type) && hc(), o = l.flags, o & 65536 ? (l.flags = o & -65537 | 128, l) : null;
        case 3:
          return Js(), xn(Jt), xn(ui), ba(), o = l.flags, o & 65536 && !(o & 128) ? (l.flags = o & -65537 | 128, l) : null;
        case 5:
          return yr(l), null;
        case 13:
          if (xn(Fn), o = l.memoizedState, o !== null && o.dehydrated !== null) {
            if (l.alternate === null)
              throw Error(c(340));
            qo();
          }
          return o = l.flags, o & 65536 ? (l.flags = o & -65537 | 128, l) : null;
        case 19:
          return xn(Fn), null;
        case 4:
          return Js(), null;
        case 10:
          return xc(l.type._context), null;
        case 22:
        case 23:
          return Hr(), null;
        case 24:
          return null;
        default:
          return null;
      }
    }
    var io = !1, bs = !1, PS = typeof WeakSet == "function" ? WeakSet : Set, ft = null;
    function ol(o, l) {
      var v = o.ref;
      if (v !== null)
        if (typeof v == "function")
          try {
            v(null);
          } catch (S) {
            gn(o, l, S);
          }
        else
          v.current = null;
    }
    function ro(o, l, v) {
      try {
        v();
      } catch (S) {
        gn(o, l, S);
      }
    }
    var um = !1;
    function cm(o, l) {
      for (ae(o.containerInfo), ft = l; ft !== null; )
        if (o = ft, l = o.child, (o.subtreeFlags & 1028) !== 0 && l !== null)
          l.return = o, ft = l;
        else
          for (; ft !== null; ) {
            o = ft;
            try {
              var v = o.alternate;
              if (o.flags & 1024)
                switch (o.tag) {
                  case 0:
                  case 11:
                  case 15:
                    break;
                  case 1:
                    if (v !== null) {
                      var S = v.memoizedProps, C = v.memoizedState, P = o.stateNode, Z = P.getSnapshotBeforeUpdate(o.elementType === o.type ? S : $r(o.type, S), C);
                      P.__reactInternalSnapshotBeforeUpdate = Z;
                    }
                    break;
                  case 3:
                    ot && He(o.stateNode.containerInfo);
                    break;
                  case 5:
                  case 6:
                  case 4:
                  case 17:
                    break;
                  default:
                    throw Error(c(163));
                }
            } catch (oe) {
              gn(o, o.return, oe);
            }
            if (l = o.sibling, l !== null) {
              l.return = o.return, ft = l;
              break;
            }
            ft = o.return;
          }
      return v = um, um = !1, v;
    }
    function ao(o, l, v) {
      var S = l.updateQueue;
      if (S = S !== null ? S.lastEffect : null, S !== null) {
        var C = S = S.next;
        do {
          if ((C.tag & o) === o) {
            var P = C.destroy;
            C.destroy = void 0, P !== void 0 && ro(l, v, P);
          }
          C = C.next;
        } while (C !== S);
      }
    }
    function so(o, l) {
      if (l = l.updateQueue, l = l !== null ? l.lastEffect : null, l !== null) {
        var v = l = l.next;
        do {
          if ((v.tag & o) === o) {
            var S = v.create;
            v.destroy = S();
          }
          v = v.next;
        } while (v !== l);
      }
    }
    function kd(o) {
      var l = o.ref;
      if (l !== null) {
        var v = o.stateNode;
        switch (o.tag) {
          case 5:
            o = Ee(v);
            break;
          default:
            o = v;
        }
        typeof l == "function" ? l(o) : l.current = o;
      }
    }
    function Vd(o, l, v) {
      if (_a && typeof _a.onCommitFiberUnmount == "function")
        try {
          _a.onCommitFiberUnmount(vc, l);
        } catch {
        }
      switch (l.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          if (o = l.updateQueue, o !== null && (o = o.lastEffect, o !== null)) {
            var S = o = o.next;
            do {
              var C = S, P = C.destroy;
              C = C.tag, P !== void 0 && (C & 2 || C & 4) && ro(l, v, P), S = S.next;
            } while (S !== o);
          }
          break;
        case 1:
          if (ol(l, v), o = l.stateNode, typeof o.componentWillUnmount == "function")
            try {
              o.props = l.memoizedProps, o.state = l.memoizedState, o.componentWillUnmount();
            } catch (Z) {
              gn(
                l,
                v,
                Z
              );
            }
          break;
        case 5:
          ol(l, v);
          break;
        case 4:
          ot ? yi(o, l, v) : Ie && Ie && (l = l.stateNode.containerInfo, v = tn(l), Gt(l, v));
      }
    }
    function Gd(o, l, v) {
      for (var S = l; ; )
        if (Vd(o, S, v), S.child === null || ot && S.tag === 4) {
          if (S === l)
            break;
          for (; S.sibling === null; ) {
            if (S.return === null || S.return === l)
              return;
            S = S.return;
          }
          S.sibling.return = S.return, S = S.sibling;
        } else
          S.child.return = S, S = S.child;
    }
    function sa(o) {
      var l = o.alternate;
      l !== null && (o.alternate = null, sa(l)), o.child = null, o.deletions = null, o.sibling = null, o.tag === 5 && (l = o.stateNode, l !== null && xt(l)), o.stateNode = null, o.return = null, o.dependencies = null, o.memoizedProps = null, o.memoizedState = null, o.pendingProps = null, o.stateNode = null, o.updateQueue = null;
    }
    function ll(o) {
      return o.tag === 5 || o.tag === 3 || o.tag === 4;
    }
    function ul(o) {
      e:
        for (; ; ) {
          for (; o.sibling === null; ) {
            if (o.return === null || ll(o.return))
              return null;
            o = o.return;
          }
          for (o.sibling.return = o.return, o = o.sibling; o.tag !== 5 && o.tag !== 6 && o.tag !== 18; ) {
            if (o.flags & 2 || o.child === null || o.tag === 4)
              continue e;
            o.child.return = o, o = o.child;
          }
          if (!(o.flags & 2))
            return o.stateNode;
        }
    }
    function Yc(o) {
      if (ot) {
        e: {
          for (var l = o.return; l !== null; ) {
            if (ll(l))
              break e;
            l = l.return;
          }
          throw Error(c(160));
        }
        var v = l;
        switch (v.tag) {
          case 5:
            l = v.stateNode, v.flags & 32 && (St(l), v.flags &= -33), v = ul(o), _r(o, v, l);
            break;
          case 3:
          case 4:
            l = v.stateNode.containerInfo, v = ul(o), oo(o, v, l);
            break;
          default:
            throw Error(c(161));
        }
      }
    }
    function oo(o, l, v) {
      var S = o.tag;
      if (S === 5 || S === 6)
        o = o.stateNode, l ? Fe(v, o, l) : ht(v, o);
      else if (S !== 4 && (o = o.child, o !== null))
        for (oo(o, l, v), o = o.sibling; o !== null; )
          oo(o, l, v), o = o.sibling;
    }
    function _r(o, l, v) {
      var S = o.tag;
      if (S === 5 || S === 6)
        o = o.stateNode, l ? De(v, o, l) : Lt(v, o);
      else if (S !== 4 && (o = o.child, o !== null))
        for (_r(o, l, v), o = o.sibling; o !== null; )
          _r(o, l, v), o = o.sibling;
    }
    function yi(o, l, v) {
      for (var S = l, C = !1, P, Z; ; ) {
        if (!C) {
          C = S.return;
          e:
            for (; ; ) {
              if (C === null)
                throw Error(c(160));
              switch (P = C.stateNode, C.tag) {
                case 5:
                  Z = !1;
                  break e;
                case 3:
                  P = P.containerInfo, Z = !0;
                  break e;
                case 4:
                  P = P.containerInfo, Z = !0;
                  break e;
              }
              C = C.return;
            }
          C = !0;
        }
        if (S.tag === 5 || S.tag === 6)
          Gd(o, S, v), Z ? wt(P, S.stateNode) : Pe(P, S.stateNode);
        else if (S.tag === 18)
          Z ? Ct(P, S.stateNode) : Mt(P, S.stateNode);
        else if (S.tag === 4) {
          if (S.child !== null) {
            P = S.stateNode.containerInfo, Z = !0, S.child.return = S, S = S.child;
            continue;
          }
        } else if (Vd(o, S, v), S.child !== null) {
          S.child.return = S, S = S.child;
          continue;
        }
        if (S === l)
          break;
        for (; S.sibling === null; ) {
          if (S.return === null || S.return === l)
            return;
          S = S.return, S.tag === 4 && (C = !1);
        }
        S.sibling.return = S.return, S = S.sibling;
      }
    }
    function Wd(o, l) {
      if (ot) {
        switch (l.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            ao(3, l, l.return), so(3, l), ao(5, l, l.return);
            return;
          case 1:
            return;
          case 5:
            var v = l.stateNode;
            if (v != null) {
              var S = l.memoizedProps;
              o = o !== null ? o.memoizedProps : S;
              var C = l.type, P = l.updateQueue;
              l.updateQueue = null, P !== null && me(v, P, C, o, S, l);
            }
            return;
          case 6:
            if (l.stateNode === null)
              throw Error(c(162));
            v = l.memoizedProps, Ae(l.stateNode, o !== null ? o.memoizedProps : v, v);
            return;
          case 3:
            Me && o !== null && o.memoizedState.isDehydrated && it(l.stateNode.containerInfo);
            return;
          case 12:
            return;
          case 13:
            Zc(l);
            return;
          case 19:
            Zc(l);
            return;
          case 17:
            return;
        }
        throw Error(c(163));
      }
      switch (l.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          ao(3, l, l.return), so(3, l), ao(5, l, l.return);
          return;
        case 12:
          return;
        case 13:
          Zc(l);
          return;
        case 19:
          Zc(l);
          return;
        case 3:
          Me && o !== null && o.memoizedState.isDehydrated && it(l.stateNode.containerInfo);
          break;
        case 22:
        case 23:
          return;
      }
      e:
        if (Ie) {
          switch (l.tag) {
            case 1:
            case 5:
            case 6:
              break e;
            case 3:
            case 4:
              l = l.stateNode, Gt(l.containerInfo, l.pendingChildren);
              break e;
          }
          throw Error(c(163));
        }
    }
    function Zc(o) {
      var l = o.updateQueue;
      if (l !== null) {
        o.updateQueue = null;
        var v = o.stateNode;
        v === null && (v = o.stateNode = new PS()), l.forEach(function(S) {
          var C = fo.bind(null, o, S);
          v.has(S) || (v.add(S), S.then(C, C));
        });
      }
    }
    function ly(o, l) {
      for (ft = l; ft !== null; ) {
        l = ft;
        var v = l.deletions;
        if (v !== null)
          for (var S = 0; S < v.length; S++) {
            var C = v[S];
            try {
              var P = o;
              ot ? yi(P, C, l) : Gd(P, C, l);
              var Z = C.alternate;
              Z !== null && (Z.return = null), C.return = null;
            } catch (At) {
              gn(C, l, At);
            }
          }
        if (v = l.child, l.subtreeFlags & 12854 && v !== null)
          v.return = l, ft = v;
        else
          for (; ft !== null; ) {
            l = ft;
            try {
              var oe = l.flags;
              if (oe & 32 && ot && St(l.stateNode), oe & 512) {
                var Re = l.alternate;
                if (Re !== null) {
                  var Ye = Re.ref;
                  Ye !== null && (typeof Ye == "function" ? Ye(null) : Ye.current = null);
                }
              }
              if (oe & 8192)
                switch (l.tag) {
                  case 13:
                    if (l.memoizedState !== null) {
                      var tt = l.alternate;
                      (tt === null || tt.memoizedState === null) && (Qd = Xn());
                    }
                    break;
                  case 22:
                    var Bt = l.memoizedState !== null, zt = l.alternate, Dn = zt !== null && zt.memoizedState !== null;
                    if (v = l, ot) {
                      e:
                        if (S = v, C = Bt, P = null, ot)
                          for (var Dt = S; ; ) {
                            if (Dt.tag === 5) {
                              if (P === null) {
                                P = Dt;
                                var Ni = Dt.stateNode;
                                C ? rt(Ni) : be(Dt.stateNode, Dt.memoizedProps);
                              }
                            } else if (Dt.tag === 6) {
                              if (P === null) {
                                var Yi = Dt.stateNode;
                                C ? X(Yi) : Le(Yi, Dt.memoizedProps);
                              }
                            } else if ((Dt.tag !== 22 && Dt.tag !== 23 || Dt.memoizedState === null || Dt === S) && Dt.child !== null) {
                              Dt.child.return = Dt, Dt = Dt.child;
                              continue;
                            }
                            if (Dt === S)
                              break;
                            for (; Dt.sibling === null; ) {
                              if (Dt.return === null || Dt.return === S)
                                break e;
                              P === Dt && (P = null), Dt = Dt.return;
                            }
                            P === Dt && (P = null), Dt.sibling.return = Dt.return, Dt = Dt.sibling;
                          }
                    }
                    if (Bt && !Dn && v.mode & 1) {
                      ft = v;
                      for (var ge = v.child; ge !== null; ) {
                        for (v = ft = ge; ft !== null; ) {
                          S = ft;
                          var le = S.child;
                          switch (S.tag) {
                            case 0:
                            case 11:
                            case 14:
                            case 15:
                              ao(4, S, S.return);
                              break;
                            case 1:
                              ol(S, S.return);
                              var we = S.stateNode;
                              if (typeof we.componentWillUnmount == "function") {
                                var ct = S.return;
                                try {
                                  we.props = S.memoizedProps, we.state = S.memoizedState, we.componentWillUnmount();
                                } catch (At) {
                                  gn(
                                    S,
                                    ct,
                                    At
                                  );
                                }
                              }
                              break;
                            case 5:
                              ol(S, S.return);
                              break;
                            case 22:
                              if (S.memoizedState !== null) {
                                dm(v);
                                continue;
                              }
                          }
                          le !== null ? (le.return = S, ft = le) : dm(v);
                        }
                        ge = ge.sibling;
                      }
                    }
                }
              switch (oe & 4102) {
                case 2:
                  Yc(l), l.flags &= -3;
                  break;
                case 6:
                  Yc(l), l.flags &= -3, Wd(l.alternate, l);
                  break;
                case 4096:
                  l.flags &= -4097;
                  break;
                case 4100:
                  l.flags &= -4097, Wd(l.alternate, l);
                  break;
                case 4:
                  Wd(l.alternate, l);
              }
            } catch (At) {
              gn(l, l.return, At);
            }
            if (v = l.sibling, v !== null) {
              v.return = l.return, ft = v;
              break;
            }
            ft = l.return;
          }
      }
    }
    function fm(o, l, v) {
      ft = o, qd(o);
    }
    function qd(o, l, v) {
      for (var S = (o.mode & 1) !== 0; ft !== null; ) {
        var C = ft, P = C.child;
        if (C.tag === 22 && S) {
          var Z = C.memoizedState !== null || io;
          if (!Z) {
            var oe = C.alternate, Re = oe !== null && oe.memoizedState !== null || bs;
            oe = io;
            var Ye = bs;
            if (io = Z, (bs = Re) && !Ye)
              for (ft = C; ft !== null; )
                Z = ft, Re = Z.child, Z.tag === 22 && Z.memoizedState !== null ? hm(C) : Re !== null ? (Re.return = Z, ft = Re) : hm(C);
            for (; P !== null; )
              ft = P, qd(P), P = P.sibling;
            ft = C, io = oe, bs = Ye;
          }
          Xd(o);
        } else
          C.subtreeFlags & 8772 && P !== null ? (P.return = C, ft = P) : Xd(o);
      }
    }
    function Xd(o) {
      for (; ft !== null; ) {
        var l = ft;
        if (l.flags & 8772) {
          var v = l.alternate;
          try {
            if (l.flags & 8772)
              switch (l.tag) {
                case 0:
                case 11:
                case 15:
                  bs || so(5, l);
                  break;
                case 1:
                  var S = l.stateNode;
                  if (l.flags & 4 && !bs)
                    if (v === null)
                      S.componentDidMount();
                    else {
                      var C = l.elementType === l.type ? v.memoizedProps : $r(l.type, v.memoizedProps);
                      S.componentDidUpdate(C, v.memoizedState, S.__reactInternalSnapshotBeforeUpdate);
                    }
                  var P = l.updateQueue;
                  P !== null && Jp(l, P, S);
                  break;
                case 3:
                  var Z = l.updateQueue;
                  if (Z !== null) {
                    if (v = null, l.child !== null)
                      switch (l.child.tag) {
                        case 5:
                          v = Ee(l.child.stateNode);
                          break;
                        case 1:
                          v = l.child.stateNode;
                      }
                    Jp(l, Z, v);
                  }
                  break;
                case 5:
                  var oe = l.stateNode;
                  v === null && l.flags & 4 && se(oe, l.type, l.memoizedProps, l);
                  break;
                case 6:
                  break;
                case 4:
                  break;
                case 12:
                  break;
                case 13:
                  if (Me && l.memoizedState === null) {
                    var Re = l.alternate;
                    if (Re !== null) {
                      var Ye = Re.memoizedState;
                      if (Ye !== null) {
                        var tt = Ye.dehydrated;
                        tt !== null && bt(tt);
                      }
                    }
                  }
                  break;
                case 19:
                case 17:
                case 21:
                case 22:
                case 23:
                  break;
                default:
                  throw Error(c(163));
              }
            bs || l.flags & 512 && kd(l);
          } catch (Bt) {
            gn(l, l.return, Bt);
          }
        }
        if (l === o) {
          ft = null;
          break;
        }
        if (v = l.sibling, v !== null) {
          v.return = l.return, ft = v;
          break;
        }
        ft = l.return;
      }
    }
    function dm(o) {
      for (; ft !== null; ) {
        var l = ft;
        if (l === o) {
          ft = null;
          break;
        }
        var v = l.sibling;
        if (v !== null) {
          v.return = l.return, ft = v;
          break;
        }
        ft = l.return;
      }
    }
    function hm(o) {
      for (; ft !== null; ) {
        var l = ft;
        try {
          switch (l.tag) {
            case 0:
            case 11:
            case 15:
              var v = l.return;
              try {
                so(4, l);
              } catch (Re) {
                gn(l, v, Re);
              }
              break;
            case 1:
              var S = l.stateNode;
              if (typeof S.componentDidMount == "function") {
                var C = l.return;
                try {
                  S.componentDidMount();
                } catch (Re) {
                  gn(l, C, Re);
                }
              }
              var P = l.return;
              try {
                kd(l);
              } catch (Re) {
                gn(l, P, Re);
              }
              break;
            case 5:
              var Z = l.return;
              try {
                kd(l);
              } catch (Re) {
                gn(l, Z, Re);
              }
          }
        } catch (Re) {
          gn(l, l.return, Re);
        }
        if (l === o) {
          ft = null;
          break;
        }
        var oe = l.sibling;
        if (oe !== null) {
          oe.return = l.return, ft = oe;
          break;
        }
        ft = l.return;
      }
    }
    var Jc = 0, Qn = 1, lo = 2, pu = 3, Qa = 4;
    if (typeof Symbol == "function" && Symbol.for) {
      var cl = Symbol.for;
      Jc = cl("selector.component"), Qn = cl("selector.has_pseudo_class"), lo = cl("selector.role"), pu = cl("selector.test_id"), Qa = cl("selector.text");
    }
    function jd(o) {
      var l = Ne(o);
      if (l != null) {
        if (typeof l.memoizedProps["data-testname"] != "string")
          throw Error(c(364));
        return l;
      }
      if (o = Wt(o), o === null)
        throw Error(c(362));
      return o.stateNode.current;
    }
    function Yd(o, l) {
      switch (l.$$typeof) {
        case Jc:
          if (o.type === l.value)
            return !0;
          break;
        case Qn:
          e: {
            l = l.value, o = [o, 0];
            for (var v = 0; v < o.length; ) {
              var S = o[v++], C = o[v++], P = l[C];
              if (S.tag !== 5 || !xe(S)) {
                for (; P != null && Yd(S, P); )
                  C++, P = l[C];
                if (C === l.length) {
                  l = !0;
                  break e;
                } else
                  for (S = S.child; S !== null; )
                    o.push(S, C), S = S.sibling;
              }
            }
            l = !1;
          }
          return l;
        case lo:
          if (o.tag === 5 && Ve(o.stateNode, l.value))
            return !0;
          break;
        case Qa:
          if ((o.tag === 5 || o.tag === 6) && (o = H(o), o !== null && 0 <= o.indexOf(l.value)))
            return !0;
          break;
        case pu:
          if (o.tag === 5 && (o = o.memoizedProps["data-testname"], typeof o == "string" && o.toLowerCase() === l.value.toLowerCase()))
            return !0;
          break;
        default:
          throw Error(c(365));
      }
      return !1;
    }
    function Es(o) {
      switch (o.$$typeof) {
        case Jc:
          return "<" + (k(o.value) || "Unknown") + ">";
        case Qn:
          return ":has(" + (Es(o) || "") + ")";
        case lo:
          return '[role="' + o.value + '"]';
        case Qa:
          return '"' + o.value + '"';
        case pu:
          return '[data-testname="' + o.value + '"]';
        default:
          throw Error(c(365));
      }
    }
    function Pi(o, l) {
      var v = [];
      o = [o, 0];
      for (var S = 0; S < o.length; ) {
        var C = o[S++], P = o[S++], Z = l[P];
        if (C.tag !== 5 || !xe(C)) {
          for (; Z != null && Yd(C, Z); )
            P++, Z = l[P];
          if (P === l.length)
            v.push(C);
          else
            for (C = C.child; C !== null; )
              o.push(C, P), C = C.sibling;
        }
      }
      return v;
    }
    function ut(o, l) {
      if (!Nt)
        throw Error(c(363));
      o = jd(o), o = Pi(o, l), l = [], o = Array.from(o);
      for (var v = 0; v < o.length; ) {
        var S = o[v++];
        if (S.tag === 5)
          xe(S) || l.push(S.stateNode);
        else
          for (S = S.child; S !== null; )
            o.push(S), S = S.sibling;
      }
      return l;
    }
    var Ra = Math.ceil, rr = f.ReactCurrentDispatcher, Zd = f.ReactCurrentOwner, Kn = f.ReactCurrentBatchConfig, Kt = 0, ci = null, fi = null, dn = 0, xr = 0, fl = ki(0), _i = 0, dl = null, La = 0, Ka = 0, Jd = 0, mu = null, ar = null, Qd = 0, Kd = 1 / 0;
    function hl() {
      Kd = Xn() + 500;
    }
    var vu = !1, Qc = null, ws = null, Kc = !1, Ts = null, $c = 0, gu = 0, $d = null, yu = -1, ef = 0;
    function Gi() {
      return Kt & 6 ? Xn() : yu !== -1 ? yu : yu = Xn();
    }
    function Cs(o) {
      return o.mode & 1 ? Kt & 2 && dn !== 0 ? dn & -dn : ay.transition !== null ? (ef === 0 && (o = pc, pc <<= 1, !(pc & 4194240) && (pc = 64), ef = o), ef) : (o = vn, o !== 0 ? o : Ze()) : 1;
    }
    function Br(o, l, v) {
      if (50 < gu)
        throw gu = 0, $d = null, Error(c(185));
      var S = pl(o, l);
      return S === null ? null : (Jl(S, l, v), (!(Kt & 2) || S !== ci) && (S === ci && (!(Kt & 2) && (Ka |= l), _i === 4 && $a(S, dn)), sr(S, v), l === 1 && Kt === 0 && !(o.mode & 1) && (hl(), gc && Sa())), S);
    }
    function pl(o, l) {
      o.lanes |= l;
      var v = o.alternate;
      for (v !== null && (v.lanes |= l), v = o, o = o.return; o !== null; )
        o.childLanes |= l, v = o.alternate, v !== null && (v.childLanes |= l), v = o, o = o.return;
      return v.tag === 3 ? v.stateNode : null;
    }
    function sr(o, l) {
      var v = o.callbackNode;
      Zl(o, l);
      var S = mc(o, o === ci ? dn : 0);
      if (S === 0)
        v !== null && Yp(v), o.callbackNode = null, o.callbackPriority = 0;
      else if (l = S & -S, o.callbackPriority !== l) {
        if (v != null && Yp(v), l === 1)
          o.tag === 0 ? ry(pm.bind(null, o)) : xd(pm.bind(null, o)), Et ? mt(function() {
            Kt === 0 && Sa();
          }) : ys(gd, Sa), v = null;
        else {
          switch (jp(S)) {
            case 1:
              v = gd;
              break;
            case 4:
              v = ey;
              break;
            case 16:
              v = yd;
              break;
            case 536870912:
              v = ty;
              break;
            default:
              v = yd;
          }
          v = vl(v, Sr.bind(null, o));
        }
        o.callbackPriority = l, o.callbackNode = v;
      }
    }
    function Sr(o, l) {
      if (yu = -1, ef = 0, Kt & 6)
        throw Error(c(327));
      var v = o.callbackNode;
      if (co() && o.callbackNode !== v)
        return null;
      var S = mc(o, o === ci ? dn : 0);
      if (S === 0)
        return null;
      if (S & 30 || S & o.expiredLanes || l)
        l = uo(o, S);
      else {
        l = S;
        var C = Kt;
        Kt |= 2;
        var P = vm();
        (ci !== o || dn !== l) && (hl(), As(o, l));
        do
          try {
            gm();
            break;
          } catch (oe) {
            mm(o, oe);
          }
        while (1);
        Sd(), rr.current = P, Kt = C, fi !== null ? l = 0 : (ci = null, dn = 0, l = _i);
      }
      if (l !== 0) {
        if (l === 2 && (C = ji(o), C !== 0 && (S = C, l = oa(o, C))), l === 1)
          throw v = dl, As(o, 0), $a(o, S), sr(o, Xn()), v;
        if (l === 6)
          $a(o, S);
        else {
          if (C = o.current.alternate, !(S & 30) && !eh(C) && (l = uo(o, S), l === 2 && (P = ji(o), P !== 0 && (S = P, l = oa(o, P))), l === 1))
            throw v = dl, As(o, 0), $a(o, S), sr(o, Xn()), v;
          switch (o.finishedWork = C, o.finishedLanes = S, l) {
            case 0:
            case 1:
              throw Error(c(345));
            case 2:
              la(o, ar);
              break;
            case 3:
              if ($a(o, S), (S & 130023424) === S && (l = Qd + 500 - Xn(), 10 < l)) {
                if (mc(o, 0) !== 0)
                  break;
                if (C = o.suspendedLanes, (C & S) !== S) {
                  Gi(), o.pingedLanes |= o.suspendedLanes & C;
                  break;
                }
                o.timeoutHandle = de(la.bind(null, o, ar), l);
                break;
              }
              la(o, ar);
              break;
            case 4:
              if ($a(o, S), (S & 4194240) === S)
                break;
              for (l = o.eventTimes, C = -1; 0 < S; ) {
                var Z = 31 - Dr(S);
                P = 1 << Z, Z = l[Z], Z > C && (C = Z), S &= ~P;
              }
              if (S = C, S = Xn() - S, S = (120 > S ? 120 : 480 > S ? 480 : 1080 > S ? 1080 : 1920 > S ? 1920 : 3e3 > S ? 3e3 : 4320 > S ? 4320 : 1960 * Ra(S / 1960)) - S, 10 < S) {
                o.timeoutHandle = de(la.bind(null, o, ar), S);
                break;
              }
              la(o, ar);
              break;
            case 5:
              la(o, ar);
              break;
            default:
              throw Error(c(329));
          }
        }
      }
      return sr(o, Xn()), o.callbackNode === v ? Sr.bind(null, o) : null;
    }
    function oa(o, l) {
      var v = mu;
      return o.current.memoizedState.isDehydrated && (As(o, l).flags |= 256), o = uo(o, l), o !== 2 && (l = ar, ar = v, l !== null && _u(l)), o;
    }
    function _u(o) {
      ar === null ? ar = o : ar.push.apply(ar, o);
    }
    function eh(o) {
      for (var l = o; ; ) {
        if (l.flags & 16384) {
          var v = l.updateQueue;
          if (v !== null && (v = v.stores, v !== null))
            for (var S = 0; S < v.length; S++) {
              var C = v[S], P = C.getSnapshot;
              C = C.value;
              try {
                if (!xa(P(), C))
                  return !1;
              } catch {
                return !1;
              }
            }
        }
        if (v = l.child, l.subtreeFlags & 16384 && v !== null)
          v.return = l, l = v;
        else {
          if (l === o)
            break;
          for (; l.sibling === null; ) {
            if (l.return === null || l.return === o)
              return !0;
            l = l.return;
          }
          l.sibling.return = l.return, l = l.sibling;
        }
      }
      return !0;
    }
    function $a(o, l) {
      for (l &= ~Jd, l &= ~Ka, o.suspendedLanes |= l, o.pingedLanes &= ~l, o = o.expirationTimes; 0 < l; ) {
        var v = 31 - Dr(l), S = 1 << v;
        o[v] = -1, l &= ~S;
      }
    }
    function pm(o) {
      if (Kt & 6)
        throw Error(c(327));
      co();
      var l = mc(o, 0);
      if (!(l & 1))
        return sr(o, Xn()), null;
      var v = uo(o, l);
      if (o.tag !== 0 && v === 2) {
        var S = ji(o);
        S !== 0 && (l = S, v = oa(o, S));
      }
      if (v === 1)
        throw v = dl, As(o, 0), $a(o, l), sr(o, Xn()), v;
      if (v === 6)
        throw Error(c(345));
      return o.finishedWork = o.current.alternate, o.finishedLanes = l, la(o, ar), sr(o, Xn()), null;
    }
    function th(o) {
      Ts !== null && Ts.tag === 0 && !(Kt & 6) && co();
      var l = Kt;
      Kt |= 1;
      var v = Kn.transition, S = vn;
      try {
        if (Kn.transition = null, vn = 1, o)
          return o();
      } finally {
        vn = S, Kn.transition = v, Kt = l, !(Kt & 6) && Sa();
      }
    }
    function Hr() {
      xr = fl.current, xn(fl);
    }
    function As(o, l) {
      o.finishedWork = null, o.finishedLanes = 0;
      var v = o.timeoutHandle;
      if (v !== _t && (o.timeoutHandle = _t, dt(v)), fi !== null)
        for (v = fi.return; v !== null; ) {
          var S = v;
          switch (Cd(S), S.tag) {
            case 1:
              S = S.type.childContextTypes, S != null && hc();
              break;
            case 3:
              Js(), xn(Jt), xn(ui), ba();
              break;
            case 5:
              yr(S);
              break;
            case 4:
              Js();
              break;
            case 13:
              xn(Fn);
              break;
            case 19:
              xn(Fn);
              break;
            case 10:
              xc(S.type._context);
              break;
            case 22:
            case 23:
              Hr();
          }
          v = v.return;
        }
      if (ci = o, fi = o = or(o.current, null), dn = xr = l, _i = 0, dl = null, Jd = Ka = La = 0, ar = mu = null, ea !== null) {
        for (l = 0; l < ea.length; l++)
          if (v = ea[l], S = v.interleaved, S !== null) {
            v.interleaved = null;
            var C = S.next, P = v.pending;
            if (P !== null) {
              var Z = P.next;
              P.next = C, S.next = Z;
            }
            v.pending = S;
          }
        ea = null;
      }
      return o;
    }
    function mm(o, l) {
      do {
        var v = fi;
        try {
          if (Sd(), mi.current = tl, jo) {
            for (var S = fn.memoizedState; S !== null; ) {
              var C = S.queue;
              C !== null && (C.pending = null), S = S.next;
            }
            jo = !1;
          }
          if (Ss = 0, Ln = Vn = fn = null, Ea = !1, Yo = 0, Zd.current = null, v === null || v.return === null) {
            _i = 1, dl = l, fi = null;
            break;
          }
          e: {
            var P = o, Z = v.return, oe = v, Re = l;
            if (l = dn, oe.flags |= 32768, Re !== null && typeof Re == "object" && typeof Re.then == "function") {
              var Ye = Re, tt = oe, Bt = tt.tag;
              if (!(tt.mode & 1) && (Bt === 0 || Bt === 11 || Bt === 15)) {
                var zt = tt.alternate;
                zt ? (tt.updateQueue = zt.updateQueue, tt.memoizedState = zt.memoizedState, tt.lanes = zt.lanes) : (tt.updateQueue = null, tt.memoizedState = null);
              }
              var Dn = eo(Z);
              if (Dn !== null) {
                Dn.flags &= -257, kc(Dn, Z, oe, P, l), Dn.mode & 1 && fu(P, Ye, l), l = Dn, Re = Ye;
                var Dt = l.updateQueue;
                if (Dt === null) {
                  var Ni = /* @__PURE__ */ new Set();
                  Ni.add(Re), l.updateQueue = Ni;
                } else
                  Dt.add(Re);
                break e;
              } else {
                if (!(l & 1)) {
                  fu(P, Ye, l), nh();
                  break e;
                }
                Re = Error(c(426));
              }
            } else if (In && oe.mode & 1) {
              var Yi = eo(Z);
              if (Yi !== null) {
                !(Yi.flags & 65536) && (Yi.flags |= 256), kc(Yi, Z, oe, P, l), tu(Re);
                break e;
              }
            }
            P = Re, _i !== 4 && (_i = 2), mu === null ? mu = [P] : mu.push(P), Re = uu(Re, oe), oe = Z;
            do {
              switch (oe.tag) {
                case 3:
                  oe.flags |= 65536, l &= -l, oe.lanes |= l;
                  var ge = Bc(oe, Re, l);
                  Zp(oe, ge);
                  break e;
                case 1:
                  P = Re;
                  var le = oe.type, we = oe.stateNode;
                  if (!(oe.flags & 128) && (typeof le.getDerivedStateFromError == "function" || we !== null && typeof we.componentDidCatch == "function" && (ws === null || !ws.has(we)))) {
                    oe.flags |= 65536, l &= -l, oe.lanes |= l;
                    var ct = Hc(oe, P, l);
                    Zp(oe, ct);
                    break e;
                  }
              }
              oe = oe.return;
            } while (oe !== null);
          }
          Mr(v);
        } catch (At) {
          l = At, fi === v && v !== null && (fi = v = v.return);
          continue;
        }
        break;
      } while (1);
    }
    function vm() {
      var o = rr.current;
      return rr.current = tl, o === null ? tl : o;
    }
    function nh() {
      (_i === 0 || _i === 3 || _i === 2) && (_i = 4), ci === null || !(La & 268435455) && !(Ka & 268435455) || $a(ci, dn);
    }
    function uo(o, l) {
      var v = Kt;
      Kt |= 2;
      var S = vm();
      ci === o && dn === l || As(o, l);
      do
        try {
          uy();
          break;
        } catch (C) {
          mm(o, C);
        }
      while (1);
      if (Sd(), Kt = v, rr.current = S, fi !== null)
        throw Error(c(261));
      return ci = null, dn = 0, _i;
    }
    function uy() {
      for (; fi !== null; )
        ih(fi);
    }
    function gm() {
      for (; fi !== null && !Kg(); )
        ih(fi);
    }
    function ih(o) {
      var l = ml(o.alternate, o, xr);
      o.memoizedProps = o.pendingProps, l === null ? Mr(o) : fi = l, Zd.current = null;
    }
    function Mr(o) {
      var l = o;
      do {
        var v = l.alternate;
        if (o = l.return, l.flags & 32768) {
          if (v = jt(v, l), v !== null) {
            v.flags &= 32767, fi = v;
            return;
          }
          if (o !== null)
            o.flags |= 32768, o.subtreeFlags = 0, o.deletions = null;
          else {
            _i = 6, fi = null;
            return;
          }
        } else if (v = oy(v, l, xr), v !== null) {
          fi = v;
          return;
        }
        if (l = l.sibling, l !== null) {
          fi = l;
          return;
        }
        fi = l = o;
      } while (l !== null);
      _i === 0 && (_i = 5);
    }
    function la(o, l) {
      var v = vn, S = Kn.transition;
      try {
        Kn.transition = null, vn = 1, cy(o, l, v);
      } finally {
        Kn.transition = S, vn = v;
      }
      return null;
    }
    function cy(o, l, v) {
      do
        co();
      while (Ts !== null);
      if (Kt & 6)
        throw Error(c(327));
      var S = o.finishedWork, C = o.finishedLanes;
      if (S === null)
        return null;
      if (o.finishedWork = null, o.finishedLanes = 0, S === o.current)
        throw Error(c(177));
      o.callbackNode = null, o.callbackPriority = 0;
      var P = S.lanes | S.childLanes;
      if (Qg(o, P), o === ci && (fi = ci = null, dn = 0), !(S.subtreeFlags & 2064) && !(S.flags & 2064) || Kc || (Kc = !0, vl(yd, function() {
        return co(), null;
      })), P = (S.flags & 15990) !== 0, S.subtreeFlags & 15990 || P) {
        P = Kn.transition, Kn.transition = null;
        var Z = vn;
        vn = 1;
        var oe = Kt;
        Kt |= 4, Zd.current = null, cm(o, S), ly(o, S), ne(o.containerInfo), o.current = S, fm(S), $g(), Kt = oe, vn = Z, Kn.transition = P;
      } else
        o.current = S;
      if (Kc && (Kc = !1, Ts = o, $c = C), P = o.pendingLanes, P === 0 && (ws = null), ny(S.stateNode), sr(o, Xn()), l !== null)
        for (v = o.onRecoverableError, S = 0; S < l.length; S++)
          v(l[S]);
      if (vu)
        throw vu = !1, o = Qc, Qc = null, o;
      return $c & 1 && o.tag !== 0 && co(), P = o.pendingLanes, P & 1 ? o === $d ? gu++ : (gu = 0, $d = o) : gu = 0, Sa(), null;
    }
    function co() {
      if (Ts !== null) {
        var o = jp($c), l = Kn.transition, v = vn;
        try {
          if (Kn.transition = null, vn = 16 > o ? 16 : o, Ts === null)
            var S = !1;
          else {
            if (o = Ts, Ts = null, $c = 0, Kt & 6)
              throw Error(c(331));
            var C = Kt;
            for (Kt |= 4, ft = o.current; ft !== null; ) {
              var P = ft, Z = P.child;
              if (ft.flags & 16) {
                var oe = P.deletions;
                if (oe !== null) {
                  for (var Re = 0; Re < oe.length; Re++) {
                    var Ye = oe[Re];
                    for (ft = Ye; ft !== null; ) {
                      var tt = ft;
                      switch (tt.tag) {
                        case 0:
                        case 11:
                        case 15:
                          ao(8, tt, P);
                      }
                      var Bt = tt.child;
                      if (Bt !== null)
                        Bt.return = tt, ft = Bt;
                      else
                        for (; ft !== null; ) {
                          tt = ft;
                          var zt = tt.sibling, Dn = tt.return;
                          if (sa(tt), tt === Ye) {
                            ft = null;
                            break;
                          }
                          if (zt !== null) {
                            zt.return = Dn, ft = zt;
                            break;
                          }
                          ft = Dn;
                        }
                    }
                  }
                  var Dt = P.alternate;
                  if (Dt !== null) {
                    var Ni = Dt.child;
                    if (Ni !== null) {
                      Dt.child = null;
                      do {
                        var Yi = Ni.sibling;
                        Ni.sibling = null, Ni = Yi;
                      } while (Ni !== null);
                    }
                  }
                  ft = P;
                }
              }
              if (P.subtreeFlags & 2064 && Z !== null)
                Z.return = P, ft = Z;
              else
                e:
                  for (; ft !== null; ) {
                    if (P = ft, P.flags & 2048)
                      switch (P.tag) {
                        case 0:
                        case 11:
                        case 15:
                          ao(9, P, P.return);
                      }
                    var ge = P.sibling;
                    if (ge !== null) {
                      ge.return = P.return, ft = ge;
                      break e;
                    }
                    ft = P.return;
                  }
            }
            var le = o.current;
            for (ft = le; ft !== null; ) {
              Z = ft;
              var we = Z.child;
              if (Z.subtreeFlags & 2064 && we !== null)
                we.return = Z, ft = we;
              else
                e:
                  for (Z = le; ft !== null; ) {
                    if (oe = ft, oe.flags & 2048)
                      try {
                        switch (oe.tag) {
                          case 0:
                          case 11:
                          case 15:
                            so(9, oe);
                        }
                      } catch (At) {
                        gn(oe, oe.return, At);
                      }
                    if (oe === Z) {
                      ft = null;
                      break e;
                    }
                    var ct = oe.sibling;
                    if (ct !== null) {
                      ct.return = oe.return, ft = ct;
                      break e;
                    }
                    ft = oe.return;
                  }
            }
            if (Kt = C, Sa(), _a && typeof _a.onPostCommitFiberRoot == "function")
              try {
                _a.onPostCommitFiberRoot(vc, o);
              } catch {
              }
            S = !0;
          }
          return S;
        } finally {
          vn = v, Kn.transition = l;
        }
      }
      return !1;
    }
    function Ui(o, l, v) {
      l = uu(v, l), l = Bc(o, l, 1), _s(o, l), l = Gi(), o = pl(o, 1), o !== null && (Jl(o, 1, l), sr(o, l));
    }
    function gn(o, l, v) {
      if (o.tag === 3)
        Ui(o, o, v);
      else
        for (; l !== null; ) {
          if (l.tag === 3) {
            Ui(l, o, v);
            break;
          } else if (l.tag === 1) {
            var S = l.stateNode;
            if (typeof l.type.getDerivedStateFromError == "function" || typeof S.componentDidCatch == "function" && (ws === null || !ws.has(S))) {
              o = uu(v, o), o = Hc(l, o, 1), _s(l, o), o = Gi(), l = pl(l, 1), l !== null && (Jl(l, 1, o), sr(l, o));
              break;
            }
          }
          l = l.return;
        }
    }
    function Da(o, l, v) {
      var S = o.pingCache;
      S !== null && S.delete(l), l = Gi(), o.pingedLanes |= o.suspendedLanes & v, ci === o && (dn & v) === v && (_i === 4 || _i === 3 && (dn & 130023424) === dn && 500 > Xn() - Qd ? As(o, 0) : Jd |= v), sr(o, l);
    }
    function kr(o, l) {
      l === 0 && (o.mode & 1 ? (l = Bo, Bo <<= 1, !(Bo & 130023424) && (Bo = 4194304)) : l = 1);
      var v = Gi();
      o = pl(o, l), o !== null && (Jl(o, l, v), sr(o, v));
    }
    function fy(o) {
      var l = o.memoizedState, v = 0;
      l !== null && (v = l.retryLane), kr(o, v);
    }
    function fo(o, l) {
      var v = 0;
      switch (o.tag) {
        case 13:
          var S = o.stateNode, C = o.memoizedState;
          C !== null && (v = C.retryLane);
          break;
        case 19:
          S = o.stateNode;
          break;
        default:
          throw Error(c(314));
      }
      S !== null && S.delete(l), kr(o, v);
    }
    var ml;
    ml = function(o, l, v) {
      if (o !== null)
        if (o.memoizedProps !== l.pendingProps || Jt.current)
          Vi = !0;
        else {
          if (!(o.lanes & v) && !(l.flags & 128))
            return Vi = !1, sl(o, l, v);
          Vi = !!(o.flags & 131072);
        }
      else
        Vi = !1, In && l.flags & 1048576 && tm(l, Tc, l.index);
      switch (l.lanes = 0, l.tag) {
        case 2:
          var S = l.type;
          o !== null && (o.alternate = null, l.alternate = null, l.flags |= 2), o = l.pendingProps;
          var C = vs(l, ui.current);
          ko(l, v), C = Jo(null, l, S, o, C, v);
          var P = su();
          return l.flags |= 1, typeof C == "object" && C !== null && typeof C.render == "function" && C.$$typeof === void 0 ? (l.tag = 1, l.memoizedState = null, l.updateQueue = null, Li(S) ? (P = !0, Fo(l)) : P = !1, l.memoizedState = C.state !== null && C.state !== void 0 ? C.state : null, Ed(l), C.updater = Ec, l.stateNode = C, C._reactInternals = l, wd(l, S, o, v), l = Bd(null, l, S, !0, P, v)) : (l.tag = 0, In && P && Td(l), Ti(null, l, C, v), l = l.child), l;
        case 16:
          S = l.elementType;
          e: {
            switch (o !== null && (o.alternate = null, l.alternate = null, l.flags |= 2), o = l.pendingProps, C = S._init, S = C(S._payload), l.type = S, C = l.tag = Su(S), o = $r(S, o), C) {
              case 0:
                l = Fd(null, l, S, o, v);
                break e;
              case 1:
                l = Gc(
                  null,
                  l,
                  S,
                  o,
                  v
                );
                break e;
              case 11:
                l = rl(null, l, S, o, v);
                break e;
              case 14:
                l = hu(null, l, S, $r(S.type, o), v);
                break e;
            }
            throw Error(c(306, S, ""));
          }
          return l;
        case 0:
          return S = l.type, C = l.pendingProps, C = l.elementType === S ? C : $r(S, C), Fd(o, l, S, C, v);
        case 1:
          return S = l.type, C = l.pendingProps, C = l.elementType === S ? C : $r(S, C), Gc(o, l, S, C, v);
        case 3:
          e: {
            if (Wc(l), o === null)
              throw Error(c(387));
            S = l.pendingProps, P = l.memoizedState, C = P.element, $l(o, l), Mc(l, S, null, v);
            var Z = l.memoizedState;
            if (S = Z.element, Me && P.isDehydrated)
              if (P = {
                element: S,
                isDehydrated: !1,
                cache: Z.cache,
                transitions: Z.transitions
              }, l.updateQueue.baseState = P, l.memoizedState = P, l.flags & 256) {
                C = Error(c(423)), l = Hd(o, l, S, v, C);
                break e;
              } else if (S !== C) {
                C = Error(c(424)), l = Hd(o, l, S, v, C);
                break e;
              } else
                for (Me && (Di = ee(l.stateNode.containerInfo), gr = l, In = !0, zr = null, Wo = !1), v = Lc(l, null, S, v), l.child = v; v; )
                  v.flags = v.flags & -3 | 4096, v = v.sibling;
            else {
              if (qo(), S === C) {
                l = Jn(o, l, v);
                break e;
              }
              Ti(o, l, S, v);
            }
            l = l.child;
          }
          return l;
        case 5:
          return au(l), o === null && Ac(l), S = l.type, C = l.pendingProps, P = o !== null ? o.memoizedProps : null, Z = C.children, je(S, C) ? Z = null : P !== null && je(S, P) && (l.flags |= 32), am(o, l), Ti(o, l, Z, v), l.child;
        case 6:
          return o === null && Ac(l), null;
        case 13:
          return sm(o, l, v);
        case 4:
          return Dc(l, l.stateNode.containerInfo), S = l.pendingProps, o === null ? l.child = Xo(l, null, S, v) : Ti(o, l, S, v), l.child;
        case 11:
          return S = l.type, C = l.pendingProps, C = l.elementType === S ? C : $r(S, C), rl(o, l, S, C, v);
        case 7:
          return Ti(o, l, l.pendingProps, v), l.child;
        case 8:
          return Ti(o, l, l.pendingProps.children, v), l.child;
        case 12:
          return Ti(o, l, l.pendingProps.children, v), l.child;
        case 10:
          e: {
            if (S = l.type._context, C = l.pendingProps, P = l.memoizedProps, Z = C.value, Md(l, S, Z), P !== null)
              if (xa(P.value, Z)) {
                if (P.children === C.children && !Jt.current) {
                  l = Jn(o, l, v);
                  break e;
                }
              } else
                for (P = l.child, P !== null && (P.return = l); P !== null; ) {
                  var oe = P.dependencies;
                  if (oe !== null) {
                    Z = P.child;
                    for (var Re = oe.firstContext; Re !== null; ) {
                      if (Re.context === S) {
                        if (P.tag === 1) {
                          Re = qa(-1, v & -v), Re.tag = 2;
                          var Ye = P.updateQueue;
                          if (Ye !== null) {
                            Ye = Ye.shared;
                            var tt = Ye.pending;
                            tt === null ? Re.next = Re : (Re.next = tt.next, tt.next = Re), Ye.pending = Re;
                          }
                        }
                        P.lanes |= v, Re = P.alternate, Re !== null && (Re.lanes |= v), bd(P.return, v, l), oe.lanes |= v;
                        break;
                      }
                      Re = Re.next;
                    }
                  } else if (P.tag === 10)
                    Z = P.type === l.type ? null : P.child;
                  else if (P.tag === 18) {
                    if (Z = P.return, Z === null)
                      throw Error(c(341));
                    Z.lanes |= v, oe = Z.alternate, oe !== null && (oe.lanes |= v), bd(Z, v, l), Z = P.sibling;
                  } else
                    Z = P.child;
                  if (Z !== null)
                    Z.return = P;
                  else
                    for (Z = P; Z !== null; ) {
                      if (Z === l) {
                        Z = null;
                        break;
                      }
                      if (P = Z.sibling, P !== null) {
                        P.return = Z.return, Z = P;
                        break;
                      }
                      Z = Z.return;
                    }
                  P = Z;
                }
            Ti(o, l, C.children, v), l = l.child;
          }
          return l;
        case 9:
          return C = l.type, S = l.pendingProps.children, ko(l, v), C = Pr(C), S = S(C), l.flags |= 1, Ti(o, l, S, v), l.child;
        case 14:
          return S = l.type, C = $r(S, l.pendingProps), C = $r(S.type, C), hu(o, l, S, C, v);
        case 15:
          return im(o, l, l.type, l.pendingProps, v);
        case 17:
          return S = l.type, C = l.pendingProps, C = l.elementType === S ? C : $r(S, C), o !== null && (o.alternate = null, l.alternate = null, l.flags |= 2), l.tag = 1, Li(S) ? (o = !0, Fo(l)) : o = !1, ko(l, v), $p(l, S, C), wd(l, S, C, v), Bd(null, l, S, !0, o, v);
        case 19:
          return jc(o, l, v);
        case 22:
          return rm(o, l, v);
      }
      throw Error(c(156, l.tag));
    };
    function vl(o, l) {
      return ys(o, l);
    }
    function xu(o, l, v, S) {
      this.tag = o, this.key = v, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.ref = null, this.pendingProps = l, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = S, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
    }
    function Wi(o, l, v, S) {
      return new xu(o, l, v, S);
    }
    function ho(o) {
      return o = o.prototype, !(!o || !o.isReactComponent);
    }
    function Su(o) {
      if (typeof o == "function")
        return ho(o) ? 1 : 0;
      if (o != null) {
        if (o = o.$$typeof, o === A)
          return 11;
        if (o === L)
          return 14;
      }
      return 2;
    }
    function or(o, l) {
      var v = o.alternate;
      return v === null ? (v = Wi(o.tag, l, o.key, o.mode), v.elementType = o.elementType, v.type = o.type, v.stateNode = o.stateNode, v.alternate = o, o.alternate = v) : (v.pendingProps = l, v.type = o.type, v.flags = 0, v.subtreeFlags = 0, v.deletions = null), v.flags = o.flags & 14680064, v.childLanes = o.childLanes, v.lanes = o.lanes, v.child = o.child, v.memoizedProps = o.memoizedProps, v.memoizedState = o.memoizedState, v.updateQueue = o.updateQueue, l = o.dependencies, v.dependencies = l === null ? null : { lanes: l.lanes, firstContext: l.firstContext }, v.sibling = o.sibling, v.index = o.index, v.ref = o.ref, v;
    }
    function po(o, l, v, S, C, P) {
      var Z = 2;
      if (S = o, typeof o == "function")
        ho(o) && (Z = 1);
      else if (typeof o == "string")
        Z = 5;
      else
        e:
          switch (o) {
            case g:
              return Rs(v.children, C, P, l);
            case _:
              Z = 8, C |= 8;
              break;
            case x:
              return o = Wi(12, v, l, C | 2), o.elementType = x, o.lanes = P, o;
            case T:
              return o = Wi(13, v, l, C), o.elementType = T, o.lanes = P, o;
            case b:
              return o = Wi(19, v, l, C), o.elementType = b, o.lanes = P, o;
            case U:
              return Mu(v, C, P, l);
            default:
              if (typeof o == "object" && o !== null)
                switch (o.$$typeof) {
                  case M:
                    Z = 10;
                    break e;
                  case E:
                    Z = 9;
                    break e;
                  case A:
                    Z = 11;
                    break e;
                  case L:
                    Z = 14;
                    break e;
                  case R:
                    Z = 16, S = null;
                    break e;
                }
              throw Error(c(130, o == null ? o : typeof o, ""));
          }
      return l = Wi(Z, v, l, C), l.elementType = o, l.type = S, l.lanes = P, l;
    }
    function Rs(o, l, v, S) {
      return o = Wi(7, o, S, l), o.lanes = v, o;
    }
    function Mu(o, l, v, S) {
      return o = Wi(22, o, S, l), o.elementType = U, o.lanes = v, o.stateNode = {}, o;
    }
    function tf(o, l, v) {
      return o = Wi(6, o, null, l), o.lanes = v, o;
    }
    function bu(o, l, v) {
      return l = Wi(4, o.children !== null ? o.children : [], o.key, l), l.lanes = v, l.stateNode = { containerInfo: o.containerInfo, pendingChildren: null, implementation: o.implementation }, l;
    }
    function dy(o, l, v, S, C) {
      this.tag = l, this.containerInfo = o, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = _t, this.callbackNode = this.pendingContext = this.context = null, this.callbackPriority = 0, this.eventTimes = md(0), this.expirationTimes = md(-1), this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = md(0), this.identifierPrefix = S, this.onRecoverableError = C, Me && (this.mutableSourceEagerHydrationData = null);
    }
    function ym(o, l, v, S, C, P, Z, oe, Re) {
      return o = new dy(o, l, v, oe, Re), l === 1 ? (l = 1, P === !0 && (l |= 8)) : l = 0, P = Wi(3, null, null, l), o.current = P, P.stateNode = o, P.memoizedState = { element: S, isDehydrated: v, cache: null, transitions: null }, Ed(P), o;
    }
    function Vr(o) {
      if (!o)
        return Ri;
      o = o._reactInternals;
      e: {
        if (z(o) !== o || o.tag !== 1)
          throw Error(c(170));
        var l = o;
        do {
          switch (l.tag) {
            case 3:
              l = l.stateNode.context;
              break e;
            case 1:
              if (Li(l.type)) {
                l = l.stateNode.__reactInternalMemoizedMergedChildContext;
                break e;
              }
          }
          l = l.return;
        } while (l !== null);
        throw Error(c(171));
      }
      if (o.tag === 1) {
        var v = o.type;
        if (Li(v))
          return Wp(o, v, l);
      }
      return l;
    }
    function Eu(o) {
      var l = o._reactInternals;
      if (l === void 0)
        throw typeof o.render == "function" ? Error(c(188)) : (o = Object.keys(o).join(","), Error(c(268, o)));
      return o = te(l), o === null ? null : o.stateNode;
    }
    function gl(o, l) {
      if (o = o.memoizedState, o !== null && o.dehydrated !== null) {
        var v = o.retryLane;
        o.retryLane = v !== 0 && v < l ? v : l;
      }
    }
    function yl(o, l) {
      gl(o, l), (o = o.alternate) && gl(o, l);
    }
    function _l(o) {
      return o = te(o), o === null ? null : o.stateNode;
    }
    function rh() {
      return null;
    }
    return t.attemptContinuousHydration = function(o) {
      if (o.tag === 13) {
        var l = Gi();
        Br(o, 134217728, l), yl(o, 134217728);
      }
    }, t.attemptHydrationAtCurrentPriority = function(o) {
      if (o.tag === 13) {
        var l = Gi(), v = Cs(o);
        Br(o, v, l), yl(o, v);
      }
    }, t.attemptSynchronousHydration = function(o) {
      switch (o.tag) {
        case 3:
          var l = o.stateNode;
          if (l.current.memoizedState.isDehydrated) {
            var v = gs(l.pendingLanes);
            v !== 0 && (vd(l, v | 1), sr(l, Xn()), !(Kt & 6) && (hl(), Sa()));
          }
          break;
        case 13:
          var S = Gi();
          th(function() {
            return Br(o, 1, S);
          }), yl(o, 1);
      }
    }, t.batchedUpdates = function(o, l) {
      var v = Kt;
      Kt |= 1;
      try {
        return o(l);
      } finally {
        Kt = v, Kt === 0 && (hl(), gc && Sa());
      }
    }, t.createComponentSelector = function(o) {
      return { $$typeof: Jc, value: o };
    }, t.createContainer = function(o, l, v, S, C, P, Z) {
      return ym(o, l, !1, null, v, S, C, P, Z);
    }, t.createHasPseudoClassSelector = function(o) {
      return { $$typeof: Qn, value: o };
    }, t.createHydrationContainer = function(o, l, v, S, C, P, Z, oe, Re) {
      return o = ym(v, S, !0, o, C, P, Z, oe, Re), o.context = Vr(null), v = o.current, S = Gi(), C = Cs(v), P = qa(S, C), P.callback = l ?? null, _s(v, P), o.current.lanes = C, Jl(o, C, S), sr(o, S), o;
    }, t.createPortal = function(o, l, v) {
      var S = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
      return { $$typeof: h, key: S == null ? null : "" + S, children: o, containerInfo: l, implementation: v };
    }, t.createRoleSelector = function(o) {
      return { $$typeof: lo, value: o };
    }, t.createTestNameSelector = function(o) {
      return { $$typeof: pu, value: o };
    }, t.createTextSelector = function(o) {
      return { $$typeof: Qa, value: o };
    }, t.deferredUpdates = function(o) {
      var l = vn, v = Kn.transition;
      try {
        return Kn.transition = null, vn = 16, o();
      } finally {
        vn = l, Kn.transition = v;
      }
    }, t.discreteUpdates = function(o, l, v, S, C) {
      var P = vn, Z = Kn.transition;
      try {
        return Kn.transition = null, vn = 1, o(l, v, S, C);
      } finally {
        vn = P, Kn.transition = Z, Kt === 0 && hl();
      }
    }, t.findAllNodes = ut, t.findBoundingRects = function(o, l) {
      if (!Nt)
        throw Error(c(363));
      l = ut(o, l), o = [];
      for (var v = 0; v < l.length; v++)
        o.push(Y(l[v]));
      for (l = o.length - 1; 0 < l; l--) {
        v = o[l];
        for (var S = v.x, C = S + v.width, P = v.y, Z = P + v.height, oe = l - 1; 0 <= oe; oe--)
          if (l !== oe) {
            var Re = o[oe], Ye = Re.x, tt = Ye + Re.width, Bt = Re.y, zt = Bt + Re.height;
            if (S >= Ye && P >= Bt && C <= tt && Z <= zt) {
              o.splice(l, 1);
              break;
            } else if (S !== Ye || v.width !== Re.width || zt < P || Bt > Z) {
              if (!(P !== Bt || v.height !== Re.height || tt < S || Ye > C)) {
                Ye > S && (Re.width += Ye - S, Re.x = S), tt < C && (Re.width = C - Ye), o.splice(l, 1);
                break;
              }
            } else {
              Bt > P && (Re.height += Bt - P, Re.y = P), zt < Z && (Re.height = Z - Bt), o.splice(l, 1);
              break;
            }
          }
      }
      return o;
    }, t.findHostInstance = Eu, t.findHostInstanceWithNoPortals = function(o) {
      return o = Q(o), o = o !== null ? ie(o) : null, o === null ? null : o.stateNode;
    }, t.findHostInstanceWithWarning = function(o) {
      return Eu(o);
    }, t.flushControlled = function(o) {
      var l = Kt;
      Kt |= 1;
      var v = Kn.transition, S = vn;
      try {
        Kn.transition = null, vn = 1, o();
      } finally {
        vn = S, Kn.transition = v, Kt = l, Kt === 0 && (hl(), Sa());
      }
    }, t.flushPassiveEffects = co, t.flushSync = th, t.focusWithin = function(o, l) {
      if (!Nt)
        throw Error(c(363));
      for (o = jd(o), l = Pi(o, l), l = Array.from(l), o = 0; o < l.length; ) {
        var v = l[o++];
        if (!xe(v)) {
          if (v.tag === 5 && ke(v.stateNode))
            return !0;
          for (v = v.child; v !== null; )
            l.push(v), v = v.sibling;
        }
      }
      return !1;
    }, t.getCurrentUpdatePriority = function() {
      return vn;
    }, t.getFindAllNodesFailureDescription = function(o, l) {
      if (!Nt)
        throw Error(c(363));
      var v = 0, S = [];
      o = [jd(o), 0];
      for (var C = 0; C < o.length; ) {
        var P = o[C++], Z = o[C++], oe = l[Z];
        if ((P.tag !== 5 || !xe(P)) && (Yd(P, oe) && (S.push(Es(oe)), Z++, Z > v && (v = Z)), Z < l.length))
          for (P = P.child; P !== null; )
            o.push(P, Z), P = P.sibling;
      }
      if (v < l.length) {
        for (o = []; v < l.length; v++)
          o.push(Es(l[v]));
        return `findAllNodes was able to match part of the selector:
  ` + (S.join(" > ") + `

No matching component was found for:
  `) + o.join(" > ");
      }
      return null;
    }, t.getPublicRootInstance = function(o) {
      if (o = o.current, !o.child)
        return null;
      switch (o.child.tag) {
        case 5:
          return Ee(o.child.stateNode);
        default:
          return o.child.stateNode;
      }
    }, t.injectIntoDevTools = function(o) {
      if (o = { bundleType: o.bundleType, version: o.version, rendererPackageName: o.rendererPackageName, rendererConfig: o.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: f.ReactCurrentDispatcher, findHostInstanceByFiber: _l, findFiberByHostInstance: o.findFiberByHostInstance || rh, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.0.0-fc46dba67-20220329" }, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u")
        o = !1;
      else {
        var l = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (l.isDisabled || !l.supportsFiber)
          o = !0;
        else {
          try {
            vc = l.inject(o), _a = l;
          } catch {
          }
          o = !!l.checkDCE;
        }
      }
      return o;
    }, t.isAlreadyRendering = function() {
      return !1;
    }, t.observeVisibleRects = function(o, l, v, S) {
      if (!Nt)
        throw Error(c(363));
      o = ut(o, l);
      var C = Qe(o, v, S).disconnect;
      return { disconnect: function() {
        C();
      } };
    }, t.registerMutableSourceForHydration = function(o, l) {
      var v = l._getVersion;
      v = v(l._source), o.mutableSourceEagerHydrationData == null ? o.mutableSourceEagerHydrationData = [l, v] : o.mutableSourceEagerHydrationData.push(l, v);
    }, t.runWithPriority = function(o, l) {
      var v = vn;
      try {
        return vn = o, l();
      } finally {
        vn = v;
      }
    }, t.shouldError = function() {
      return null;
    }, t.shouldSuspend = function() {
      return !1;
    }, t.updateContainer = function(o, l, v, S) {
      var C = l.current, P = Gi(), Z = Cs(C);
      return v = Vr(v), l.context === null ? l.context = v : l.pendingContext = v, l = qa(P, Z), l.payload = { element: o }, S = S === void 0 ? null : S, S !== null && (l.callback = S), _s(C, l), o = Br(C, Z, P), o !== null && Sc(o, C, Z), Z;
    }, t;
  }), q_;
}
var Dg = {}, JI = {
  get exports() {
    return Dg;
  },
  set exports(u) {
    Dg = u;
  }
};
/**
 * @license React
 * react-reconciler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var rw;
function QI() {
  return rw || (rw = 1, process.env.NODE_ENV !== "production" && (JI.exports = function(e) {
    var t = {}, n = Ng, a = EC(), s = n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, c = !1;
    function f(i) {
      c = i;
    }
    function p(i) {
      if (!c) {
        for (var r = arguments.length, d = new Array(r > 1 ? r - 1 : 0), m = 1; m < r; m++)
          d[m - 1] = arguments[m];
        g("warn", i, d);
      }
    }
    function h(i) {
      if (!c) {
        for (var r = arguments.length, d = new Array(r > 1 ? r - 1 : 0), m = 1; m < r; m++)
          d[m - 1] = arguments[m];
        g("error", i, d);
      }
    }
    function g(i, r, d) {
      {
        var m = s.ReactDebugCurrentFrame, y = m.getStackAddendum();
        y !== "" && (r += "%s", d = d.concat([y]));
        var w = d.map(function(D) {
          return String(D);
        });
        w.unshift("Warning: " + r), Function.prototype.apply.call(console[i], console, w);
      }
    }
    var _ = Object.assign;
    function x(i) {
      return i._reactInternals;
    }
    function M(i, r) {
      i._reactInternals = r;
    }
    var E = !1, A = !1, T = !1, b = !1, L = !1, R = !1, U = !0, F = !0, V = !0, k = 0, G = 1, z = 2, I = 3, Q = 4, te = 5, $ = 6, ie = 7, fe = 8, Ee = 9, Te = 10, W = 11, ae = 12, ne = 13, Se = 14, ue = 15, pe = 16, ye = 17, je = 18, Be = 19, de = 21, dt = 22, _t = 23, qe = 24, ot = 25, Ie = Symbol.for("react.element"), Me = Symbol.for("react.portal"), Ne = Symbol.for("react.fragment"), nt = Symbol.for("react.strict_mode"), Ze = Symbol.for("react.profiler"), xt = Symbol.for("react.provider"), Et = Symbol.for("react.context"), mt = Symbol.for("react.forward_ref"), Nt = Symbol.for("react.suspense"), Wt = Symbol.for("react.suspense_list"), Y = Symbol.for("react.memo"), H = Symbol.for("react.lazy"), xe = Symbol.for("react.scope"), Ve = Symbol.for("react.debug_trace_mode"), ke = Symbol.for("react.offscreen"), Qe = Symbol.for("react.legacy_hidden"), Lt = Symbol.for("react.cache"), ht = Symbol.for("react.tracing_marker"), Ae = Symbol.iterator, se = "@@iterator";
    function me(i) {
      if (i === null || typeof i != "object")
        return null;
      var r = Ae && i[Ae] || i[se];
      return typeof r == "function" ? r : null;
    }
    function De(i, r, d) {
      var m = i.displayName;
      if (m)
        return m;
      var y = r.displayName || r.name || "";
      return y !== "" ? d + "(" + y + ")" : d;
    }
    function Fe(i) {
      return i.displayName || "Context";
    }
    function Pe(i) {
      if (i == null)
        return null;
      if (typeof i.tag == "number" && h("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof i == "function")
        return i.displayName || i.name || null;
      if (typeof i == "string")
        return i;
      switch (i) {
        case Ne:
          return "Fragment";
        case Me:
          return "Portal";
        case Ze:
          return "Profiler";
        case nt:
          return "StrictMode";
        case Nt:
          return "Suspense";
        case Wt:
          return "SuspenseList";
      }
      if (typeof i == "object")
        switch (i.$$typeof) {
          case Et:
            var r = i;
            return Fe(r) + ".Consumer";
          case xt:
            var d = i;
            return Fe(d._context) + ".Provider";
          case mt:
            return De(i, i.render, "ForwardRef");
          case Y:
            var m = i.displayName || null;
            return m !== null ? m : Pe(i.type) || "Memo";
          case H: {
            var y = i, w = y._payload, D = y._init;
            try {
              return Pe(D(w));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    function wt(i, r, d) {
      var m = r.displayName || r.name || "";
      return i.displayName || (m !== "" ? d + "(" + m + ")" : d);
    }
    function St(i) {
      return i.displayName || "Context";
    }
    function rt(i) {
      var r = i.tag, d = i.type;
      switch (r) {
        case qe:
          return "Cache";
        case Ee:
          var m = d;
          return St(m) + ".Consumer";
        case Te:
          var y = d;
          return St(y._context) + ".Provider";
        case je:
          return "DehydratedFragment";
        case W:
          return wt(d, d.render, "ForwardRef");
        case ie:
          return "Fragment";
        case te:
          return d;
        case Q:
          return "Portal";
        case I:
          return "Root";
        case $:
          return "Text";
        case pe:
          return Pe(d);
        case fe:
          return d === nt ? "StrictMode" : "Mode";
        case dt:
          return "Offscreen";
        case ae:
          return "Profiler";
        case de:
          return "Scope";
        case ne:
          return "Suspense";
        case Be:
          return "SuspenseList";
        case ot:
          return "TracingMarker";
        case G:
        case k:
        case ye:
        case z:
        case Se:
        case ue:
          if (typeof d == "function")
            return d.displayName || d.name || null;
          if (typeof d == "string")
            return d;
          break;
      }
      return null;
    }
    var X = (
      /*                      */
      0
    ), be = (
      /*                */
      1
    ), Le = (
      /*                    */
      2
    ), He = (
      /*                       */
      4
    ), Tt = (
      /*           */
      Le | He
    ), tn = (
      /*                */
      16
    ), mn = (
      /*                 */
      32
    ), Gn = (
      /*                     */
      64
    ), Gt = (
      /*                   */
      128
    ), ln = (
      /*            */
      256
    ), kn = (
      /*                          */
      512
    ), oi = (
      /*                     */
      1024
    ), Ei = (
      /*                      */
      2048
    ), wi = (
      /*                    */
      4096
    ), Io = (
      /*           */
      wi | He
    ), Rr = (
      /*                   */
      8192
    ), ms = (
      /*             */
      16384
    ), q = Ei | He | Gn | kn | oi | ms, O = (
      /*               */
      32767
    ), ee = (
      /*                   */
      32768
    ), K = (
      /*                */
      65536
    ), ce = (
      /* */
      131072
    ), Ke = (
      /*                       */
      1048576
    ), at = (
      /*                    */
      2097152
    ), $e = (
      /*                 */
      4194304
    ), it = (
      /*                */
      8388608
    ), bt = (
      /*               */
      16777216
    ), Mt = (
      /*              */
      33554432
    ), Ct = (
      // TODO: Remove Update flag from before mutation phase by re-landing Visibility
      // flag logic (see #20043)
      He | oi | 0
    ), Ht = Le | He | tn | mn | kn | wi | Rr, Cn = He | Gn | kn | Rr, Yn = Ei | tn, bn = $e | it | at, Nn = s.ReactCurrentOwner;
    function Xt(i) {
      var r = i, d = i;
      if (i.alternate)
        for (; r.return; )
          r = r.return;
      else {
        var m = r;
        do
          r = m, (r.flags & (Le | wi)) !== X && (d = r.return), m = r.return;
        while (m);
      }
      return r.tag === I ? d : null;
    }
    function Xs(i) {
      return Xt(i) === i;
    }
    function li(i) {
      {
        var r = Nn.current;
        if (r !== null && r.tag === G) {
          var d = r, m = d.stateNode;
          m._warnedAboutRefsInRender || h("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", rt(d) || "A component"), m._warnedAboutRefsInRender = !0;
        }
      }
      var y = x(i);
      return y ? Xt(y) === y : !1;
    }
    function Lr(i) {
      if (Xt(i) !== i)
        throw new Error("Unable to find node on an unmounted component.");
    }
    function ya(i) {
      var r = i.alternate;
      if (!r) {
        var d = Xt(i);
        if (d === null)
          throw new Error("Unable to find node on an unmounted component.");
        return d !== i ? null : i;
      }
      for (var m = i, y = r; ; ) {
        var w = m.return;
        if (w === null)
          break;
        var D = w.alternate;
        if (D === null) {
          var N = w.return;
          if (N !== null) {
            m = y = N;
            continue;
          }
          break;
        }
        if (w.child === D.child) {
          for (var B = w.child; B; ) {
            if (B === m)
              return Lr(w), i;
            if (B === y)
              return Lr(w), r;
            B = B.sibling;
          }
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (m.return !== y.return)
          m = w, y = D;
        else {
          for (var J = !1, re = w.child; re; ) {
            if (re === m) {
              J = !0, m = w, y = D;
              break;
            }
            if (re === y) {
              J = !0, y = w, m = D;
              break;
            }
            re = re.sibling;
          }
          if (!J) {
            for (re = D.child; re; ) {
              if (re === m) {
                J = !0, m = D, y = w;
                break;
              }
              if (re === y) {
                J = !0, y = D, m = w;
                break;
              }
              re = re.sibling;
            }
            if (!J)
              throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
          }
        }
        if (m.alternate !== y)
          throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
      }
      if (m.tag !== I)
        throw new Error("Unable to find node on an unmounted component.");
      return m.stateNode.current === m ? i : r;
    }
    function ki(i) {
      var r = ya(i);
      return r !== null ? xn(r) : null;
    }
    function xn(i) {
      if (i.tag === te || i.tag === $)
        return i;
      for (var r = i.child; r !== null; ) {
        var d = xn(r);
        if (d !== null)
          return d;
        r = r.sibling;
      }
      return null;
    }
    function qt(i) {
      var r = ya(i);
      return r !== null ? Ri(r) : null;
    }
    function Ri(i) {
      if (i.tag === te || i.tag === $)
        return i;
      for (var r = i.child; r !== null; ) {
        if (r.tag !== Q) {
          var d = Ri(r);
          if (d !== null)
            return d;
        }
        r = r.sibling;
      }
      return null;
    }
    var ui = Array.isArray;
    function Jt(i) {
      return ui(i);
    }
    var vr = e.getPublicInstance, vs = e.getRootHostContext, Li = e.getChildHostContext, hc = e.prepareForCommit, Gp = e.resetAfterCommit, Wp = e.createInstance, Fo = e.appendInitialChild, hd = e.finalizeInitialChildren, Dr = e.prepareUpdate, pd = e.shouldSetTextContent, qp = e.createTextInstance, Xp = e.scheduleTimeout, pc = e.cancelTimeout, Bo = e.noTimeout;
    e.now;
    var gs = e.isPrimaryRenderer, mc = e.warnsIfNotActing, Kr = e.supportsMutation, Zl = e.supportsPersistence, ji = e.supportsHydration, md = e.getInstanceFromNode;
    e.beforeActiveInstanceBlur, e.afterActiveInstanceBlur;
    var Jl = e.preparePortalMount;
    e.preparePortalMount, e.getInstanceFromScope;
    var Qg = e.getCurrentEventPriority, vd = e.detachDeletedInstance, vn = e.supportsMicrotasks, jp = e.scheduleMicrotask, ys = e.supportsTestSelectors, Yp = e.findFiberRoot, Kg = e.getBoundingRect, $g = e.getTextContent, Xn = e.isHiddenSubtree, gd = e.matchAccessibilityRole, ey = e.setFocusIfFocusable, yd = e.setupIntersectionObserver, ty = e.appendChild, vc = e.appendChildToContainer, _a = e.commitTextUpdate, ny = e.commitMount, iy = e.commitUpdate, xa = e.insertBefore, Wa = e.insertInContainerBefore, gc = e.removeChild, _d = e.removeChildFromContainer, xd = e.resetTextContent, ry = e.hideInstance, Sa = e.hideTextInstance, ay = e.unhideInstance, yc = e.unhideTextInstance, sy = e.clearContainer, $r = e.cloneInstance, Ql = e.createContainerChildSet, Kl = e.appendChildToContainerChildSet, Ho = e.finalizeContainerChildren, _c = e.replaceContainerChildren;
    e.getOffscreenContainerType;
    var Sd = e.getOffscreenContainerProps, Md = e.cloneHiddenInstance, xc = e.cloneHiddenTextInstance, bd = e.canHydrateInstance, ko = e.canHydrateTextInstance, Pr = e.canHydrateSuspenseInstance, ea = e.isSuspenseInstancePending, Ma = e.isSuspenseInstanceFallback, Ed = e.registerSuspenseInstanceRetry, $l = e.getNextHydratableSibling, qa = e.getFirstHydratableChild, _s = e.getFirstHydratableChildWithinContainer, Sc = e.getFirstHydratableChildWithinSuspenseInstance, Zp = e.hydrateInstance, Mc = e.hydrateTextInstance, Jp = e.hydrateSuspenseInstance, Qp = e.getNextHydratableInstanceAfterSuspenseInstance, bc = e.commitHydratedContainer, Ec = e.commitHydratedSuspenseInstance, Kp = e.clearSuspenseBoundary, $p = e.clearSuspenseBoundaryFromContainer, em = e.shouldDeleteUnhydratedTailInstances, wd = e.didNotMatchHydratedContainerTextInstance, Vo = e.didNotMatchHydratedTextInstance, Go = e.didNotHydrateInstanceWithinContainer, wc = e.didNotHydrateInstanceWithinSuspenseInstance, Tc = e.didNotHydrateInstance, Ur = e.didNotFindHydratableInstanceWithinContainer, Nr = e.didNotFindHydratableTextInstanceWithinContainer, js = e.didNotFindHydratableSuspenseInstanceWithinContainer, Xa = e.didNotFindHydratableInstanceWithinSuspenseInstance, ja = e.didNotFindHydratableTextInstanceWithinSuspenseInstance, Ys = e.didNotFindHydratableSuspenseInstanceWithinSuspenseInstance, tm = e.didNotFindHydratableInstance, Td = e.didNotFindHydratableTextInstance, Cd = e.didNotFindHydratableSuspenseInstance, gr = e.errorHydratingContainer, Di = 0, In, Wo, zr, Ad, Rd, Cc, Ac;
    function Ld() {
    }
    Ld.__reactDisabledLog = !0;
    function eu() {
      {
        if (Di === 0) {
          In = console.log, Wo = console.info, zr = console.warn, Ad = console.error, Rd = console.group, Cc = console.groupCollapsed, Ac = console.groupEnd;
          var i = {
            configurable: !0,
            enumerable: !0,
            value: Ld,
            writable: !0
          };
          Object.defineProperties(console, {
            info: i,
            log: i,
            warn: i,
            error: i,
            group: i,
            groupCollapsed: i,
            groupEnd: i
          });
        }
        Di++;
      }
    }
    function qo() {
      {
        if (Di--, Di === 0) {
          var i = {
            configurable: !0,
            enumerable: !0,
            writable: !0
          };
          Object.defineProperties(console, {
            log: _({}, i, {
              value: In
            }),
            info: _({}, i, {
              value: Wo
            }),
            warn: _({}, i, {
              value: zr
            }),
            error: _({}, i, {
              value: Ad
            }),
            group: _({}, i, {
              value: Rd
            }),
            groupCollapsed: _({}, i, {
              value: Cc
            }),
            groupEnd: _({}, i, {
              value: Ac
            })
          });
        }
        Di < 0 && h("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var tu = s.ReactCurrentDispatcher, Zs;
    function ta(i, r, d) {
      {
        if (Zs === void 0)
          try {
            throw Error();
          } catch (y) {
            var m = y.stack.trim().match(/\n( *(at )?)/);
            Zs = m && m[1] || "";
          }
        return `
` + Zs + i;
      }
    }
    var Rc = !1, nu;
    {
      var Xo = typeof WeakMap == "function" ? WeakMap : Map;
      nu = new Xo();
    }
    function Lc(i, r) {
      if (!i || Rc)
        return "";
      {
        var d = nu.get(i);
        if (d !== void 0)
          return d;
      }
      var m;
      Rc = !0;
      var y = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var w;
      w = tu.current, tu.current = null, eu();
      try {
        if (r) {
          var D = function() {
            throw Error();
          };
          if (Object.defineProperty(D.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(D, []);
            } catch (Xe) {
              m = Xe;
            }
            Reflect.construct(i, [], D);
          } else {
            try {
              D.call();
            } catch (Xe) {
              m = Xe;
            }
            i.call(D.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (Xe) {
            m = Xe;
          }
          i();
        }
      } catch (Xe) {
        if (Xe && m && typeof Xe.stack == "string") {
          for (var N = Xe.stack.split(`
`), B = m.stack.split(`
`), J = N.length - 1, re = B.length - 1; J >= 1 && re >= 0 && N[J] !== B[re]; )
            re--;
          for (; J >= 1 && re >= 0; J--, re--)
            if (N[J] !== B[re]) {
              if (J !== 1 || re !== 1)
                do
                  if (J--, re--, re < 0 || N[J] !== B[re]) {
                    var he = `
` + N[J].replace(" at new ", " at ");
                    return i.displayName && he.includes("<anonymous>") && (he = he.replace("<anonymous>", i.displayName)), typeof i == "function" && nu.set(i, he), he;
                  }
                while (J >= 1 && re >= 0);
              break;
            }
        }
      } finally {
        Rc = !1, tu.current = w, qo(), Error.prepareStackTrace = y;
      }
      var Ce = i ? i.displayName || i.name : "", Ue = Ce ? ta(Ce) : "";
      return typeof i == "function" && nu.set(i, Ue), Ue;
    }
    function iu(i, r, d) {
      return Lc(i, !0);
    }
    function ir(i, r, d) {
      return Lc(i, !1);
    }
    function ru(i) {
      var r = i.prototype;
      return !!(r && r.isReactComponent);
    }
    function xs(i, r, d) {
      if (i == null)
        return "";
      if (typeof i == "function")
        return Lc(i, ru(i));
      if (typeof i == "string")
        return ta(i);
      switch (i) {
        case Nt:
          return ta("Suspense");
        case Wt:
          return ta("SuspenseList");
      }
      if (typeof i == "object")
        switch (i.$$typeof) {
          case mt:
            return ir(i.render);
          case Y:
            return xs(i.type, r, d);
          case H: {
            var m = i, y = m._payload, w = m._init;
            try {
              return xs(w(y), r, d);
            } catch {
            }
          }
        }
      return "";
    }
    var na = Object.prototype.hasOwnProperty, Dc = {}, Js = s.ReactDebugCurrentFrame;
    function au(i) {
      if (i) {
        var r = i._owner, d = xs(i.type, i._source, r ? r.type : null);
        Js.setExtraStackFrame(d);
      } else
        Js.setExtraStackFrame(null);
    }
    function yr(i, r, d, m, y) {
      {
        var w = Function.call.bind(na);
        for (var D in i)
          if (w(i, D)) {
            var N = void 0;
            try {
              if (typeof i[D] != "function") {
                var B = Error((m || "React class") + ": " + d + " type `" + D + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof i[D] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw B.name = "Invariant Violation", B;
              }
              N = i[D](r, D, m, d, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (J) {
              N = J;
            }
            N && !(N instanceof Error) && (au(y), h("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", m || "React class", d, D, typeof N), au(null)), N instanceof Error && !(N.message in Dc) && (Dc[N.message] = !0, au(y), h("Failed %s type: %s", d, N.message), au(null));
          }
      }
    }
    var Fn = [], Qs;
    Qs = [];
    var ia = -1;
    function ba(i) {
      return {
        current: i
      };
    }
    function mi(i, r) {
      if (ia < 0) {
        h("Unexpected pop.");
        return;
      }
      r !== Qs[ia] && h("Unexpected Fiber popped."), i.current = Fn[ia], Fn[ia] = null, Qs[ia] = null, ia--;
    }
    function An(i, r, d) {
      ia++, Fn[ia] = i.current, Qs[ia] = d, i.current = r;
    }
    var Ss;
    Ss = {};
    var fn = {};
    Object.freeze(fn);
    var Vn = ba(fn), Ln = ba(!1), jo = fn;
    function Ea(i, r, d) {
      return d && Or(r) ? jo : Vn.current;
    }
    function Yo(i, r, d) {
      {
        var m = i.stateNode;
        m.__reactInternalMemoizedUnmaskedChildContext = r, m.__reactInternalMemoizedMaskedChildContext = d;
      }
    }
    function Zo(i, r) {
      {
        var d = i.type, m = d.contextTypes;
        if (!m)
          return fn;
        var y = i.stateNode;
        if (y && y.__reactInternalMemoizedUnmaskedChildContext === r)
          return y.__reactInternalMemoizedMaskedChildContext;
        var w = {};
        for (var D in m)
          w[D] = r[D];
        {
          var N = rt(i) || "Unknown";
          yr(m, w, "context", N);
        }
        return y && Yo(i, r, w), w;
      }
    }
    function vi() {
      return Ln.current;
    }
    function Or(i) {
      {
        var r = i.childContextTypes;
        return r != null;
      }
    }
    function Jo(i) {
      mi(Ln, i), mi(Vn, i);
    }
    function su(i) {
      mi(Ln, i), mi(Vn, i);
    }
    function wa(i, r, d) {
      {
        if (Vn.current !== fn)
          throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        An(Vn, r, i), An(Ln, d, i);
      }
    }
    function ra(i, r, d) {
      {
        var m = i.stateNode, y = r.childContextTypes;
        if (typeof m.getChildContext != "function") {
          {
            var w = rt(i) || "Unknown";
            Ss[w] || (Ss[w] = !0, h("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", w, w));
          }
          return d;
        }
        var D = m.getChildContext();
        for (var N in D)
          if (!(N in y))
            throw new Error((rt(i) || "Unknown") + '.getChildContext(): key "' + N + '" is not defined in childContextTypes.');
        {
          var B = rt(i) || "Unknown";
          yr(y, D, "child context", B);
        }
        return _({}, d, D);
      }
    }
    function Ta(i) {
      {
        var r = i.stateNode, d = r && r.__reactInternalMemoizedMergedChildContext || fn;
        return jo = Vn.current, An(Vn, d, i), An(Ln, Ln.current, i), !0;
      }
    }
    function ou(i, r, d) {
      {
        var m = i.stateNode;
        if (!m)
          throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (d) {
          var y = ra(i, r, jo);
          m.__reactInternalMemoizedMergedChildContext = y, mi(Ln, i), mi(Vn, i), An(Vn, y, i), An(Ln, d, i);
        } else
          mi(Ln, i), An(Ln, d, i);
      }
    }
    function Pc(i) {
      {
        if (!Xs(i) || i.tag !== G)
          throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var r = i;
        do {
          switch (r.tag) {
            case I:
              return r.stateNode.context;
            case G: {
              var d = r.type;
              if (Or(d))
                return r.stateNode.__reactInternalMemoizedMergedChildContext;
              break;
            }
          }
          r = r.return;
        } while (r !== null);
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    var Ks = 0, Dd = 1, kt = (
      /*                         */
      0
    ), En = (
      /*                 */
      1
    ), pn = (
      /*                    */
      2
    ), Zn = (
      /*               */
      8
    ), Ir = (
      /*              */
      16
    ), Qo = Math.clz32 ? Math.clz32 : Nc, nm = Math.log, Uc = Math.LN2;
    function Nc(i) {
      var r = i >>> 0;
      return r === 0 ? 32 : 31 - (nm(r) / Uc | 0) | 0;
    }
    var lu = 31, We = (
      /*                        */
      0
    ), gi = (
      /*                          */
      0
    ), sn = (
      /*                        */
      1
    ), $s = (
      /*    */
      2
    ), Ya = (
      /*            */
      4
    ), Za = (
      /*            */
      8
    ), Ca = (
      /*                    */
      16
    ), Ko = (
      /*                */
      32
    ), $o = (
      /*                       */
      4194240
    ), el = (
      /*                        */
      64
    ), Pd = (
      /*                        */
      128
    ), Ud = (
      /*                        */
      256
    ), zc = (
      /*                        */
      512
    ), Oc = (
      /*                        */
      1024
    ), Ic = (
      /*                        */
      2048
    ), Fc = (
      /*                        */
      4096
    ), tl = (
      /*                        */
      8192
    ), Nd = (
      /*                        */
      16384
    ), zd = (
      /*                       */
      32768
    ), Od = (
      /*                       */
      65536
    ), uu = (
      /*                       */
      131072
    ), cu = (
      /*                       */
      262144
    ), Id = (
      /*                       */
      524288
    ), Bc = (
      /*                       */
      1048576
    ), Hc = (
      /*                       */
      2097152
    ), fu = (
      /*                            */
      130023424
    ), eo = (
      /*                             */
      4194304
    ), kc = (
      /*                             */
      8388608
    ), Fr = (
      /*                             */
      16777216
    ), Vc = (
      /*                             */
      33554432
    ), to = (
      /*                             */
      67108864
    ), nl = eo, Ms = (
      /*          */
      134217728
    ), du = (
      /*                                 */
      268435455
    ), il = (
      /*               */
      268435456
    ), aa = (
      /*                       */
      536870912
    ), Rn = (
      /*                   */
      1073741824
    );
    function oy(i) {
      {
        if (i & sn)
          return "Sync";
        if (i & $s)
          return "InputContinuousHydration";
        if (i & Ya)
          return "InputContinuous";
        if (i & Za)
          return "DefaultHydration";
        if (i & Ca)
          return "Default";
        if (i & Ko)
          return "TransitionHydration";
        if (i & $o)
          return "Transition";
        if (i & fu)
          return "Retry";
        if (i & Ms)
          return "SelectiveHydration";
        if (i & il)
          return "IdleHydration";
        if (i & aa)
          return "Idle";
        if (i & Rn)
          return "Offscreen";
      }
    }
    var zn = -1, Vi = el, Ti = eo;
    function rl(i) {
      switch (Aa(i)) {
        case sn:
          return sn;
        case $s:
          return $s;
        case Ya:
          return Ya;
        case Za:
          return Za;
        case Ca:
          return Ca;
        case Ko:
          return Ko;
        case el:
        case Pd:
        case Ud:
        case zc:
        case Oc:
        case Ic:
        case Fc:
        case tl:
        case Nd:
        case zd:
        case Od:
        case uu:
        case cu:
        case Id:
        case Bc:
        case Hc:
          return i & $o;
        case eo:
        case kc:
        case Fr:
        case Vc:
        case to:
          return i & fu;
        case Ms:
          return Ms;
        case il:
          return il;
        case aa:
          return aa;
        case Rn:
          return Rn;
        default:
          return h("Should have found matching lanes. This is a bug in React."), i;
      }
    }
    function hu(i, r) {
      var d = i.pendingLanes;
      if (d === We)
        return We;
      var m = We, y = i.suspendedLanes, w = i.pingedLanes, D = d & du;
      if (D !== We) {
        var N = D & ~y;
        if (N !== We)
          m = rl(N);
        else {
          var B = D & w;
          B !== We && (m = rl(B));
        }
      } else {
        var J = d & ~y;
        J !== We ? m = rl(J) : w !== We && (m = rl(w));
      }
      if (m === We)
        return We;
      if (r !== We && r !== m && // If we already suspended with a delay, then interrupting is fine. Don't
      // bother waiting until the root is complete.
      (r & y) === We) {
        var re = Aa(m), he = Aa(r);
        if (
          // Tests whether the next lane is equal or lower priority than the wip
          // one. This works because the bits decrease in priority as you go left.
          re >= he || // Default priority updates should not interrupt transition updates. The
          // only difference between default updates and transition updates is that
          // default updates do not support refresh transitions.
          re === Ca && (he & $o) !== We
        )
          return r;
      }
      (m & Ya) !== We && (m |= d & Ca);
      var Ce = i.entangledLanes;
      if (Ce !== We)
        for (var Ue = i.entanglements, Xe = m & Ce; Xe > 0; ) {
          var Je = Ja(Xe), Ut = 1 << Je;
          m |= Ue[Je], Xe &= ~Ut;
        }
      return m;
    }
    function im(i, r) {
      for (var d = i.eventTimes, m = zn; r > 0; ) {
        var y = Ja(r), w = 1 << y, D = d[y];
        D > m && (m = D), r &= ~w;
      }
      return m;
    }
    function rm(i, r) {
      switch (i) {
        case sn:
        case $s:
        case Ya:
          return r + 250;
        case Za:
        case Ca:
        case Ko:
        case el:
        case Pd:
        case Ud:
        case zc:
        case Oc:
        case Ic:
        case Fc:
        case tl:
        case Nd:
        case zd:
        case Od:
        case uu:
        case cu:
        case Id:
        case Bc:
        case Hc:
          return r + 5e3;
        case eo:
        case kc:
        case Fr:
        case Vc:
        case to:
          return zn;
        case Ms:
        case il:
        case aa:
        case Rn:
          return zn;
        default:
          return h("Should have found matching lanes. This is a bug in React."), zn;
      }
    }
    function am(i, r) {
      for (var d = i.pendingLanes, m = i.suspendedLanes, y = i.pingedLanes, w = i.expirationTimes, D = d; D > 0; ) {
        var N = Ja(D), B = 1 << N, J = w[N];
        J === zn ? ((B & m) === We || (B & y) !== We) && (w[N] = rm(B, r)) : J <= r && (i.expiredLanes |= B), D &= ~B;
      }
    }
    function Fd(i) {
      return rl(i.pendingLanes);
    }
    function Gc(i) {
      var r = i.pendingLanes & ~Rn;
      return r !== We ? r : r & Rn ? Rn : We;
    }
    function Bd(i) {
      return (i & sn) !== We;
    }
    function Wc(i) {
      return (i & du) !== We;
    }
    function Hd(i) {
      return (i & fu) === i;
    }
    function qc(i) {
      return (i & $o) === i;
    }
    function no(i, r) {
      var d = $s | Ya | Za | Ca;
      return (r & d) !== We;
    }
    function sm(i, r) {
      return (r & i.expiredLanes) !== We;
    }
    function Xc(i) {
      return (i & $o) !== 0;
    }
    function om() {
      var i = Vi;
      return Vi <<= 1, Vi & $o || (Vi = el), i;
    }
    function lm() {
      var i = Ti;
      return Ti <<= 1, Ti & fu || (Ti = eo), i;
    }
    function Aa(i) {
      return i & -i;
    }
    function al(i) {
      return Aa(i);
    }
    function Ja(i) {
      return 31 - Qo(i);
    }
    function jc(i) {
      return Ja(i);
    }
    function Jn(i, r) {
      return (i & r) !== We;
    }
    function sl(i, r) {
      return (i & r) === r;
    }
    function jt(i, r) {
      return i | r;
    }
    function io(i, r) {
      return i & ~r;
    }
    function bs(i, r) {
      return i & r;
    }
    function PS(i) {
      return i;
    }
    function ft(i, r) {
      return i !== gi && i < r ? i : r;
    }
    function ol(i) {
      for (var r = [], d = 0; d < lu; d++)
        r.push(i);
      return r;
    }
    function ro(i, r, d) {
      i.pendingLanes |= r, r !== aa && (i.suspendedLanes = We, i.pingedLanes = We);
      var m = i.eventTimes, y = jc(r);
      m[y] = d;
    }
    function um(i, r) {
      i.suspendedLanes |= r, i.pingedLanes &= ~r;
      for (var d = i.expirationTimes, m = r; m > 0; ) {
        var y = Ja(m), w = 1 << y;
        d[y] = zn, m &= ~w;
      }
    }
    function cm(i, r, d) {
      i.pingedLanes |= i.suspendedLanes & r;
    }
    function ao(i, r) {
      var d = i.pendingLanes & ~r;
      i.pendingLanes = r, i.suspendedLanes = 0, i.pingedLanes = 0, i.expiredLanes &= r, i.mutableReadLanes &= r, i.entangledLanes &= r;
      for (var m = i.entanglements, y = i.eventTimes, w = i.expirationTimes, D = d; D > 0; ) {
        var N = Ja(D), B = 1 << N;
        m[N] = We, y[N] = zn, w[N] = zn, D &= ~B;
      }
    }
    function so(i, r) {
      for (var d = i.entangledLanes |= r, m = i.entanglements, y = d; y; ) {
        var w = Ja(y), D = 1 << w;
        // Is this one of the newly entangled lanes?
        D & r | // Is this lane transitively entangled with the newly entangled lanes?
        m[w] & r && (m[w] |= r), y &= ~D;
      }
    }
    function kd(i, r) {
      var d = Aa(r), m;
      switch (d) {
        case Ya:
          m = $s;
          break;
        case Ca:
          m = Za;
          break;
        case el:
        case Pd:
        case Ud:
        case zc:
        case Oc:
        case Ic:
        case Fc:
        case tl:
        case Nd:
        case zd:
        case Od:
        case uu:
        case cu:
        case Id:
        case Bc:
        case Hc:
        case eo:
        case kc:
        case Fr:
        case Vc:
        case to:
          m = Ko;
          break;
        case aa:
          m = il;
          break;
        default:
          m = gi;
          break;
      }
      return (m & (i.suspendedLanes | r)) !== gi ? gi : m;
    }
    function Vd(i, r, d) {
      if (rr)
        for (var m = i.pendingUpdatersLaneMap; d > 0; ) {
          var y = jc(d), w = 1 << y, D = m[y];
          D.add(r), d &= ~w;
        }
    }
    function Gd(i, r) {
      if (rr)
        for (var d = i.pendingUpdatersLaneMap, m = i.memoizedUpdaters; r > 0; ) {
          var y = jc(r), w = 1 << y, D = d[y];
          D.size > 0 && (D.forEach(function(N) {
            var B = N.alternate;
            (B === null || !m.has(B)) && m.add(N);
          }), D.clear()), r &= ~w;
        }
    }
    var sa = sn, ll = Ya, ul = Ca, Yc = aa, oo = gi;
    function _r() {
      return oo;
    }
    function yi(i) {
      oo = i;
    }
    function Wd(i, r) {
      var d = oo;
      try {
        return oo = i, r();
      } finally {
        oo = d;
      }
    }
    function Zc(i, r) {
      return i !== 0 && i < r ? i : r;
    }
    function ly(i, r) {
      return i === 0 || i > r ? i : r;
    }
    function fm(i, r) {
      return i !== 0 && i < r;
    }
    function qd(i) {
      var r = Aa(i);
      return fm(sa, r) ? fm(ll, r) ? Wc(r) ? ul : Yc : ll : sa;
    }
    var Xd = a.unstable_scheduleCallback, dm = a.unstable_cancelCallback, hm = a.unstable_shouldYield, Jc = a.unstable_requestPaint, Qn = a.unstable_now, lo = a.unstable_ImmediatePriority, pu = a.unstable_UserBlockingPriority, Qa = a.unstable_NormalPriority, cl = a.unstable_IdlePriority, jd = a.unstable_yieldValue, Yd = a.unstable_setDisableYieldValue, Es = null, Pi = null, ut = null, Ra = !1, rr = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u";
    function Zd(i) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u")
        return !1;
      var r = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (r.isDisabled)
        return !0;
      if (!r.supportsFiber)
        return h("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"), !0;
      try {
        U && (i = _({}, i, {
          getLaneLabelMap: fl,
          injectProfilingHooks: xr
        })), Es = r.inject(i), Pi = r;
      } catch (d) {
        h("React instrumentation encountered an error: %s.", d);
      }
      return !!r.checkDCE;
    }
    function Kn(i, r) {
      if (Pi && typeof Pi.onScheduleFiberRoot == "function")
        try {
          Pi.onScheduleFiberRoot(Es, i, r);
        } catch (d) {
          Ra || (Ra = !0, h("React instrumentation encountered an error: %s", d));
        }
    }
    function Kt(i, r) {
      if (Pi && typeof Pi.onCommitFiberRoot == "function")
        try {
          var d = (i.current.flags & Gt) === Gt;
          if (F) {
            var m;
            switch (r) {
              case sa:
                m = lo;
                break;
              case ll:
                m = pu;
                break;
              case ul:
                m = Qa;
                break;
              case Yc:
                m = cl;
                break;
              default:
                m = Qa;
                break;
            }
            Pi.onCommitFiberRoot(Es, i, m, d);
          }
        } catch (y) {
          Ra || (Ra = !0, h("React instrumentation encountered an error: %s", y));
        }
    }
    function ci(i) {
      if (Pi && typeof Pi.onPostCommitFiberRoot == "function")
        try {
          Pi.onPostCommitFiberRoot(Es, i);
        } catch (r) {
          Ra || (Ra = !0, h("React instrumentation encountered an error: %s", r));
        }
    }
    function fi(i) {
      if (Pi && typeof Pi.onCommitFiberUnmount == "function")
        try {
          Pi.onCommitFiberUnmount(Es, i);
        } catch (r) {
          Ra || (Ra = !0, h("React instrumentation encountered an error: %s", r));
        }
    }
    function dn(i) {
      if (typeof jd == "function" && (Yd(i), f(i)), Pi && typeof Pi.setStrictMode == "function")
        try {
          Pi.setStrictMode(Es, i);
        } catch (r) {
          Ra || (Ra = !0, h("React instrumentation encountered an error: %s", r));
        }
    }
    function xr(i) {
      ut = i;
    }
    function fl() {
      {
        for (var i = /* @__PURE__ */ new Map(), r = 1, d = 0; d < lu; d++) {
          var m = oy(r);
          i.set(r, m), r *= 2;
        }
        return i;
      }
    }
    function _i(i) {
      ut !== null && typeof ut.markCommitStarted == "function" && ut.markCommitStarted(i);
    }
    function dl() {
      ut !== null && typeof ut.markCommitStopped == "function" && ut.markCommitStopped();
    }
    function La(i) {
      ut !== null && typeof ut.markComponentRenderStarted == "function" && ut.markComponentRenderStarted(i);
    }
    function Ka() {
      ut !== null && typeof ut.markComponentRenderStopped == "function" && ut.markComponentRenderStopped();
    }
    function Jd(i) {
      ut !== null && typeof ut.markComponentPassiveEffectMountStarted == "function" && ut.markComponentPassiveEffectMountStarted(i);
    }
    function mu() {
      ut !== null && typeof ut.markComponentPassiveEffectMountStopped == "function" && ut.markComponentPassiveEffectMountStopped();
    }
    function ar(i) {
      ut !== null && typeof ut.markComponentPassiveEffectUnmountStarted == "function" && ut.markComponentPassiveEffectUnmountStarted(i);
    }
    function Qd() {
      ut !== null && typeof ut.markComponentPassiveEffectUnmountStopped == "function" && ut.markComponentPassiveEffectUnmountStopped();
    }
    function Kd(i) {
      ut !== null && typeof ut.markComponentLayoutEffectMountStarted == "function" && ut.markComponentLayoutEffectMountStarted(i);
    }
    function hl() {
      ut !== null && typeof ut.markComponentLayoutEffectMountStopped == "function" && ut.markComponentLayoutEffectMountStopped();
    }
    function vu(i) {
      ut !== null && typeof ut.markComponentLayoutEffectUnmountStarted == "function" && ut.markComponentLayoutEffectUnmountStarted(i);
    }
    function Qc() {
      ut !== null && typeof ut.markComponentLayoutEffectUnmountStopped == "function" && ut.markComponentLayoutEffectUnmountStopped();
    }
    function ws(i, r, d) {
      ut !== null && typeof ut.markComponentErrored == "function" && ut.markComponentErrored(i, r, d);
    }
    function Kc(i, r, d) {
      ut !== null && typeof ut.markComponentSuspended == "function" && ut.markComponentSuspended(i, r, d);
    }
    function Ts(i) {
      ut !== null && typeof ut.markLayoutEffectsStarted == "function" && ut.markLayoutEffectsStarted(i);
    }
    function $c() {
      ut !== null && typeof ut.markLayoutEffectsStopped == "function" && ut.markLayoutEffectsStopped();
    }
    function gu(i) {
      ut !== null && typeof ut.markPassiveEffectsStarted == "function" && ut.markPassiveEffectsStarted(i);
    }
    function $d() {
      ut !== null && typeof ut.markPassiveEffectsStopped == "function" && ut.markPassiveEffectsStopped();
    }
    function yu(i) {
      ut !== null && typeof ut.markRenderStarted == "function" && ut.markRenderStarted(i);
    }
    function ef() {
      ut !== null && typeof ut.markRenderYielded == "function" && ut.markRenderYielded();
    }
    function Gi() {
      ut !== null && typeof ut.markRenderStopped == "function" && ut.markRenderStopped();
    }
    function Cs(i) {
      ut !== null && typeof ut.markRenderScheduled == "function" && ut.markRenderScheduled(i);
    }
    function Br(i, r) {
      ut !== null && typeof ut.markForceUpdateScheduled == "function" && ut.markForceUpdateScheduled(i, r);
    }
    function pl(i, r) {
      ut !== null && typeof ut.markStateUpdateScheduled == "function" && ut.markStateUpdateScheduled(i, r);
    }
    function sr(i, r) {
      return i === r && (i !== 0 || 1 / i === 1 / r) || i !== i && r !== r;
    }
    var Sr = typeof Object.is == "function" ? Object.is : sr, oa = null, _u = !1, eh = !1;
    function $a(i) {
      oa === null ? oa = [i] : oa.push(i);
    }
    function pm(i) {
      _u = !0, $a(i);
    }
    function th() {
      _u && Hr();
    }
    function Hr() {
      if (!eh && oa !== null) {
        eh = !0;
        var i = 0, r = _r();
        try {
          var d = !0, m = oa;
          for (yi(sa); i < m.length; i++) {
            var y = m[i];
            do
              y = y(d);
            while (y !== null);
          }
          oa = null, _u = !1;
        } catch (w) {
          throw oa !== null && (oa = oa.slice(i + 1)), Xd(lo, Hr), w;
        } finally {
          yi(r), eh = !1;
        }
      }
      return null;
    }
    function As(i) {
      var r = i.current.memoizedState;
      return r.isDehydrated;
    }
    var mm = s.ReactCurrentBatchConfig, vm = null;
    function nh() {
      return mm.transition;
    }
    function uo(i, r) {
      if (Sr(i, r))
        return !0;
      if (typeof i != "object" || i === null || typeof r != "object" || r === null)
        return !1;
      var d = Object.keys(i), m = Object.keys(r);
      if (d.length !== m.length)
        return !1;
      for (var y = 0; y < d.length; y++) {
        var w = d[y];
        if (!na.call(r, w) || !Sr(i[w], r[w]))
          return !1;
      }
      return !0;
    }
    function uy(i) {
      switch (i._debugOwner && i._debugOwner.type, i._debugSource, i.tag) {
        case te:
          return ta(i.type);
        case pe:
          return ta("Lazy");
        case ne:
          return ta("Suspense");
        case Be:
          return ta("SuspenseList");
        case k:
        case z:
        case ue:
          return ir(i.type);
        case W:
          return ir(i.type.render);
        case G:
          return iu(i.type);
        default:
          return "";
      }
    }
    function gm(i) {
      try {
        var r = "", d = i;
        do
          r += uy(d), d = d.return;
        while (d);
        return r;
      } catch (m) {
        return `
Error generating stack: ` + m.message + `
` + m.stack;
      }
    }
    var ih = s.ReactDebugCurrentFrame, Mr = null, la = !1;
    function cy() {
      {
        if (Mr === null)
          return null;
        var i = Mr._debugOwner;
        if (i !== null && typeof i < "u")
          return rt(i);
      }
      return null;
    }
    function co() {
      return Mr === null ? "" : gm(Mr);
    }
    function Ui() {
      ih.getCurrentStack = null, Mr = null, la = !1;
    }
    function gn(i) {
      ih.getCurrentStack = co, Mr = i, la = !1;
    }
    function Da(i) {
      la = i;
    }
    var kr = {
      recordUnsafeLifecycleWarnings: function(i, r) {
      },
      flushPendingUnsafeLifecycleWarnings: function() {
      },
      recordLegacyContextWarning: function(i, r) {
      },
      flushLegacyContextWarning: function() {
      },
      discardPendingWarnings: function() {
      }
    };
    {
      var fy = function(i) {
        for (var r = null, d = i; d !== null; )
          d.mode & Zn && (r = d), d = d.return;
        return r;
      }, fo = function(i) {
        var r = [];
        return i.forEach(function(d) {
          r.push(d);
        }), r.sort().join(", ");
      }, ml = [], vl = [], xu = [], Wi = [], ho = [], Su = [], or = /* @__PURE__ */ new Set();
      kr.recordUnsafeLifecycleWarnings = function(i, r) {
        or.has(i.type) || (typeof r.componentWillMount == "function" && // Don't warn about react-lifecycles-compat polyfilled components.
        r.componentWillMount.__suppressDeprecationWarning !== !0 && ml.push(i), i.mode & Zn && typeof r.UNSAFE_componentWillMount == "function" && vl.push(i), typeof r.componentWillReceiveProps == "function" && r.componentWillReceiveProps.__suppressDeprecationWarning !== !0 && xu.push(i), i.mode & Zn && typeof r.UNSAFE_componentWillReceiveProps == "function" && Wi.push(i), typeof r.componentWillUpdate == "function" && r.componentWillUpdate.__suppressDeprecationWarning !== !0 && ho.push(i), i.mode & Zn && typeof r.UNSAFE_componentWillUpdate == "function" && Su.push(i));
      }, kr.flushPendingUnsafeLifecycleWarnings = function() {
        var i = /* @__PURE__ */ new Set();
        ml.length > 0 && (ml.forEach(function(Ce) {
          i.add(rt(Ce) || "Component"), or.add(Ce.type);
        }), ml = []);
        var r = /* @__PURE__ */ new Set();
        vl.length > 0 && (vl.forEach(function(Ce) {
          r.add(rt(Ce) || "Component"), or.add(Ce.type);
        }), vl = []);
        var d = /* @__PURE__ */ new Set();
        xu.length > 0 && (xu.forEach(function(Ce) {
          d.add(rt(Ce) || "Component"), or.add(Ce.type);
        }), xu = []);
        var m = /* @__PURE__ */ new Set();
        Wi.length > 0 && (Wi.forEach(function(Ce) {
          m.add(rt(Ce) || "Component"), or.add(Ce.type);
        }), Wi = []);
        var y = /* @__PURE__ */ new Set();
        ho.length > 0 && (ho.forEach(function(Ce) {
          y.add(rt(Ce) || "Component"), or.add(Ce.type);
        }), ho = []);
        var w = /* @__PURE__ */ new Set();
        if (Su.length > 0 && (Su.forEach(function(Ce) {
          w.add(rt(Ce) || "Component"), or.add(Ce.type);
        }), Su = []), r.size > 0) {
          var D = fo(r);
          h(`Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.

Please update the following components: %s`, D);
        }
        if (m.size > 0) {
          var N = fo(m);
          h(`Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state

Please update the following components: %s`, N);
        }
        if (w.size > 0) {
          var B = fo(w);
          h(`Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.

Please update the following components: %s`, B);
        }
        if (i.size > 0) {
          var J = fo(i);
          p(`componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.
* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, J);
        }
        if (d.size > 0) {
          var re = fo(d);
          p(`componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state
* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, re);
        }
        if (y.size > 0) {
          var he = fo(y);
          p(`componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, he);
        }
      };
      var po = /* @__PURE__ */ new Map(), Rs = /* @__PURE__ */ new Set();
      kr.recordLegacyContextWarning = function(i, r) {
        var d = fy(i);
        if (d === null) {
          h("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
          return;
        }
        if (!Rs.has(i.type)) {
          var m = po.get(d);
          (i.type.contextTypes != null || i.type.childContextTypes != null || r !== null && typeof r.getChildContext == "function") && (m === void 0 && (m = [], po.set(d, m)), m.push(i));
        }
      }, kr.flushLegacyContextWarning = function() {
        po.forEach(function(i, r) {
          if (i.length !== 0) {
            var d = i[0], m = /* @__PURE__ */ new Set();
            i.forEach(function(w) {
              m.add(rt(w) || "Component"), Rs.add(w.type);
            });
            var y = fo(m);
            try {
              gn(d), h(`Legacy context API has been detected within a strict-mode tree.

The old API will be supported in all 16.x releases, but applications using it should migrate to the new version.

Please update the following components: %s

Learn more about this warning here: https://reactjs.org/link/legacy-context`, y);
            } finally {
              Ui();
            }
          }
        });
      }, kr.discardPendingWarnings = function() {
        ml = [], vl = [], xu = [], Wi = [], ho = [], Su = [], po = /* @__PURE__ */ new Map();
      };
    }
    function Mu(i) {
      {
        var r = typeof Symbol == "function" && Symbol.toStringTag, d = r && i[Symbol.toStringTag] || i.constructor.name || "Object";
        return d;
      }
    }
    function tf(i) {
      try {
        return bu(i), !1;
      } catch {
        return !0;
      }
    }
    function bu(i) {
      return "" + i;
    }
    function dy(i) {
      if (tf(i))
        return h("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", Mu(i)), bu(i);
    }
    function ym(i, r) {
      if (tf(i))
        return h("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", r, Mu(i)), bu(i);
    }
    function Vr(i, r) {
      if (i && i.defaultProps) {
        var d = _({}, r), m = i.defaultProps;
        for (var y in m)
          d[y] === void 0 && (d[y] = m[y]);
        return d;
      }
      return r;
    }
    var Eu = ba(null), gl;
    gl = {};
    var yl = null, _l = null, rh = null, o = !1;
    function l() {
      yl = null, _l = null, rh = null, o = !1;
    }
    function v() {
      o = !0;
    }
    function S() {
      o = !1;
    }
    function C(i, r, d) {
      gs ? (An(Eu, r._currentValue, i), r._currentValue = d, r._currentRenderer !== void 0 && r._currentRenderer !== null && r._currentRenderer !== gl && h("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), r._currentRenderer = gl) : (An(Eu, r._currentValue2, i), r._currentValue2 = d, r._currentRenderer2 !== void 0 && r._currentRenderer2 !== null && r._currentRenderer2 !== gl && h("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), r._currentRenderer2 = gl);
    }
    function P(i, r) {
      var d = Eu.current;
      mi(Eu, r), gs ? i._currentValue = d : i._currentValue2 = d;
    }
    function Z(i, r, d) {
      for (var m = i; m !== null; ) {
        var y = m.alternate;
        if (sl(m.childLanes, r) ? y !== null && !sl(y.childLanes, r) && (y.childLanes = jt(y.childLanes, r)) : (m.childLanes = jt(m.childLanes, r), y !== null && (y.childLanes = jt(y.childLanes, r))), m === d)
          break;
        m = m.return;
      }
      m !== d && h("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
    }
    function oe(i, r, d) {
      Re(i, r, d);
    }
    function Re(i, r, d) {
      var m = i.child;
      for (m !== null && (m.return = i); m !== null; ) {
        var y = void 0, w = m.dependencies;
        if (w !== null) {
          y = m.child;
          for (var D = w.firstContext; D !== null; ) {
            if (D.context === r) {
              if (m.tag === G) {
                var N = al(d), B = It(zn, N);
                B.tag = Yi;
                var J = m.updateQueue;
                if (J !== null) {
                  var re = J.shared, he = re.pending;
                  he === null ? B.next = B : (B.next = he.next, he.next = B), re.pending = B;
                }
              }
              m.lanes = jt(m.lanes, d);
              var Ce = m.alternate;
              Ce !== null && (Ce.lanes = jt(Ce.lanes, d)), Z(m.return, d, i), w.lanes = jt(w.lanes, d);
              break;
            }
            D = D.next;
          }
        } else if (m.tag === Te)
          y = m.type === i.type ? null : m.child;
        else if (m.tag === je) {
          var Ue = m.return;
          if (Ue === null)
            throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
          Ue.lanes = jt(Ue.lanes, d);
          var Xe = Ue.alternate;
          Xe !== null && (Xe.lanes = jt(Xe.lanes, d)), Z(Ue, d, i), y = m.sibling;
        } else
          y = m.child;
        if (y !== null)
          y.return = m;
        else
          for (y = m; y !== null; ) {
            if (y === i) {
              y = null;
              break;
            }
            var Je = y.sibling;
            if (Je !== null) {
              Je.return = y.return, y = Je;
              break;
            }
            y = y.return;
          }
        m = y;
      }
    }
    function Ye(i, r) {
      yl = i, _l = null, rh = null;
      var d = i.dependencies;
      if (d !== null) {
        var m = d.firstContext;
        m !== null && (Jn(d.lanes, r) && tv(), d.firstContext = null);
      }
    }
    function tt(i) {
      o && h("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      var r = gs ? i._currentValue : i._currentValue2;
      if (rh !== i) {
        var d = {
          context: i,
          memoizedValue: r,
          next: null
        };
        if (_l === null) {
          if (yl === null)
            throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          _l = d, yl.dependencies = {
            lanes: We,
            firstContext: d
          };
        } else
          _l = _l.next = d;
      }
      return r;
    }
    var Bt = null;
    function zt(i) {
      Bt === null ? Bt = [i] : Bt.push(i);
    }
    function Dn() {
      if (Bt !== null) {
        for (var i = 0; i < Bt.length; i++) {
          var r = Bt[i], d = r.interleaved;
          if (d !== null) {
            r.interleaved = null;
            var m = d.next, y = r.pending;
            if (y !== null) {
              var w = y.next;
              y.next = m, d.next = w;
            }
            r.pending = d;
          }
        }
        Bt = null;
      }
    }
    var Dt = 0, Ni = 1, Yi = 2, ge = 3, le = !1, we, ct;
    we = !1, ct = null;
    function At(i) {
      var r = {
        baseState: i.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
          pending: null,
          interleaved: null,
          lanes: We
        },
        effects: null
      };
      i.updateQueue = r;
    }
    function Yt(i, r) {
      var d = r.updateQueue, m = i.updateQueue;
      if (d === m) {
        var y = {
          baseState: m.baseState,
          firstBaseUpdate: m.firstBaseUpdate,
          lastBaseUpdate: m.lastBaseUpdate,
          shared: m.shared,
          effects: m.effects
        };
        r.updateQueue = y;
      }
    }
    function It(i, r) {
      var d = {
        eventTime: i,
        lane: r,
        tag: Dt,
        payload: null,
        callback: null,
        next: null
      };
      return d;
    }
    function $t(i, r, d) {
      var m = i.updateQueue;
      if (m !== null) {
        var y = m.shared;
        if (U1(i)) {
          var w = y.interleaved;
          w === null ? (r.next = r, zt(y)) : (r.next = w.next, w.next = r), y.interleaved = r;
        } else {
          var D = y.pending;
          D === null ? r.next = r : (r.next = D.next, D.next = r), y.pending = r;
        }
        ct === y && !we && (h("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."), we = !0);
      }
    }
    function $n(i, r, d) {
      var m = r.updateQueue;
      if (m !== null) {
        var y = m.shared;
        if (Xc(d)) {
          var w = y.lanes;
          w = bs(w, i.pendingLanes);
          var D = jt(w, d);
          y.lanes = D, so(i, D);
        }
      }
    }
    function hn(i, r) {
      var d = i.updateQueue, m = i.alternate;
      if (m !== null) {
        var y = m.updateQueue;
        if (d === y) {
          var w = null, D = null, N = d.firstBaseUpdate;
          if (N !== null) {
            var B = N;
            do {
              var J = {
                eventTime: B.eventTime,
                lane: B.lane,
                tag: B.tag,
                payload: B.payload,
                callback: B.callback,
                next: null
              };
              D === null ? w = D = J : (D.next = J, D = J), B = B.next;
            } while (B !== null);
            D === null ? w = D = r : (D.next = r, D = r);
          } else
            w = D = r;
          d = {
            baseState: y.baseState,
            firstBaseUpdate: w,
            lastBaseUpdate: D,
            shared: y.shared,
            effects: y.effects
          }, i.updateQueue = d;
          return;
        }
      }
      var re = d.lastBaseUpdate;
      re === null ? d.firstBaseUpdate = r : re.next = r, d.lastBaseUpdate = r;
    }
    function Ls(i, r, d, m, y, w) {
      switch (d.tag) {
        case Ni: {
          var D = d.payload;
          if (typeof D == "function") {
            v();
            var N = D.call(w, m, y);
            {
              if (i.mode & Zn) {
                dn(!0);
                try {
                  D.call(w, m, y);
                } finally {
                  dn(!1);
                }
              }
              S();
            }
            return N;
          }
          return D;
        }
        case ge:
          i.flags = i.flags & ~K | Gt;
        case Dt: {
          var B = d.payload, J;
          if (typeof B == "function") {
            v(), J = B.call(w, m, y);
            {
              if (i.mode & Zn) {
                dn(!0);
                try {
                  B.call(w, m, y);
                } finally {
                  dn(!1);
                }
              }
              S();
            }
          } else
            J = B;
          return J == null ? m : _({}, m, J);
        }
        case Yi:
          return le = !0, m;
      }
      return m;
    }
    function nf(i, r, d, m) {
      var y = i.updateQueue;
      le = !1, ct = y.shared;
      var w = y.firstBaseUpdate, D = y.lastBaseUpdate, N = y.shared.pending;
      if (N !== null) {
        y.shared.pending = null;
        var B = N, J = B.next;
        B.next = null, D === null ? w = J : D.next = J, D = B;
        var re = i.alternate;
        if (re !== null) {
          var he = re.updateQueue, Ce = he.lastBaseUpdate;
          Ce !== D && (Ce === null ? he.firstBaseUpdate = J : Ce.next = J, he.lastBaseUpdate = B);
        }
      }
      if (w !== null) {
        var Ue = y.baseState, Xe = We, Je = null, Ut = null, Zt = null, Ft = w;
        do {
          var Wn = Ft.lane, qn = Ft.eventTime;
          if (sl(m, Wn)) {
            if (Zt !== null) {
              var ze = {
                eventTime: qn,
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: gi,
                tag: Ft.tag,
                payload: Ft.payload,
                callback: Ft.callback,
                next: null
              };
              Zt = Zt.next = ze;
            }
            Ue = Ls(i, y, Ft, Ue, r, d);
            var ve = Ft.callback;
            if (ve !== null && // If the update was already committed, we should not queue its
            // callback again.
            Ft.lane !== gi) {
              i.flags |= Gn;
              var et = y.effects;
              et === null ? y.effects = [Ft] : et.push(Ft);
            }
          } else {
            var _e = {
              eventTime: qn,
              lane: Wn,
              tag: Ft.tag,
              payload: Ft.payload,
              callback: Ft.callback,
              next: null
            };
            Zt === null ? (Ut = Zt = _e, Je = Ue) : Zt = Zt.next = _e, Xe = jt(Xe, Wn);
          }
          if (Ft = Ft.next, Ft === null) {
            if (N = y.shared.pending, N === null)
              break;
            var Pt = N, gt = Pt.next;
            Pt.next = null, Ft = gt, y.lastBaseUpdate = Pt, y.shared.pending = null;
          }
        } while (!0);
        Zt === null && (Je = Ue), y.baseState = Je, y.firstBaseUpdate = Ut, y.lastBaseUpdate = Zt;
        var un = y.shared.interleaved;
        if (un !== null) {
          var wn = un;
          do
            Xe = jt(Xe, wn.lane), wn = wn.next;
          while (wn !== un);
        } else
          w === null && (y.shared.lanes = We);
        Ev(Xe), i.lanes = Xe, i.memoizedState = Ue;
      }
      ct = null;
    }
    function VC(i, r) {
      if (typeof i != "function")
        throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + i));
      i.call(r);
    }
    function US() {
      le = !1;
    }
    function _m() {
      return le;
    }
    function NS(i, r, d) {
      var m = r.effects;
      if (r.effects = null, m !== null)
        for (var y = 0; y < m.length; y++) {
          var w = m[y], D = w.callback;
          D !== null && (w.callback = null, VC(D, d));
        }
    }
    var hy = {}, zS = new n.Component().refs, py, my, vy, gy, yy, OS, xm, _y, xy, Sy;
    {
      py = /* @__PURE__ */ new Set(), my = /* @__PURE__ */ new Set(), vy = /* @__PURE__ */ new Set(), gy = /* @__PURE__ */ new Set(), _y = /* @__PURE__ */ new Set(), yy = /* @__PURE__ */ new Set(), xy = /* @__PURE__ */ new Set(), Sy = /* @__PURE__ */ new Set();
      var IS = /* @__PURE__ */ new Set();
      xm = function(i, r) {
        if (!(i === null || typeof i == "function")) {
          var d = r + "_" + i;
          IS.has(d) || (IS.add(d), h("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", r, i));
        }
      }, OS = function(i, r) {
        if (r === void 0) {
          var d = Pe(i) || "Component";
          yy.has(d) || (yy.add(d), h("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", d));
        }
      }, Object.defineProperty(hy, "_processChildContext", {
        enumerable: !1,
        value: function() {
          throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
      }), Object.freeze(hy);
    }
    function My(i, r, d, m) {
      var y = i.memoizedState, w = d(m, y);
      {
        if (i.mode & Zn) {
          dn(!0);
          try {
            w = d(m, y);
          } finally {
            dn(!1);
          }
        }
        OS(r, w);
      }
      var D = w == null ? y : _({}, y, w);
      if (i.memoizedState = D, i.lanes === We) {
        var N = i.updateQueue;
        N.baseState = D;
      }
    }
    var by = {
      isMounted: li,
      enqueueSetState: function(i, r, d) {
        var m = x(i), y = Er(), w = Cl(m), D = It(y, w);
        D.payload = r, d != null && (xm(d, "setState"), D.callback = d), $t(m, D);
        var N = Fi(m, w, y);
        N !== null && $n(N, m, w), pl(m, w);
      },
      enqueueReplaceState: function(i, r, d) {
        var m = x(i), y = Er(), w = Cl(m), D = It(y, w);
        D.tag = Ni, D.payload = r, d != null && (xm(d, "replaceState"), D.callback = d), $t(m, D);
        var N = Fi(m, w, y);
        N !== null && $n(N, m, w), pl(m, w);
      },
      enqueueForceUpdate: function(i, r) {
        var d = x(i), m = Er(), y = Cl(d), w = It(m, y);
        w.tag = Yi, r != null && (xm(r, "forceUpdate"), w.callback = r), $t(d, w);
        var D = Fi(d, y, m);
        D !== null && $n(D, d, y), Br(d, y);
      }
    };
    function FS(i, r, d, m, y, w, D) {
      var N = i.stateNode;
      if (typeof N.shouldComponentUpdate == "function") {
        var B = N.shouldComponentUpdate(m, w, D);
        {
          if (i.mode & Zn) {
            dn(!0);
            try {
              B = N.shouldComponentUpdate(m, w, D);
            } finally {
              dn(!1);
            }
          }
          B === void 0 && h("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", Pe(r) || "Component");
        }
        return B;
      }
      return r.prototype && r.prototype.isPureReactComponent ? !uo(d, m) || !uo(y, w) : !0;
    }
    function GC(i, r, d) {
      var m = i.stateNode;
      {
        var y = Pe(r) || "Component", w = m.render;
        w || (r.prototype && typeof r.prototype.render == "function" ? h("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", y) : h("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", y)), m.getInitialState && !m.getInitialState.isReactClassApproved && !m.state && h("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", y), m.getDefaultProps && !m.getDefaultProps.isReactClassApproved && h("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", y), m.propTypes && h("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", y), m.contextType && h("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", y), m.contextTypes && h("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", y), r.contextType && r.contextTypes && !xy.has(r) && (xy.add(r), h("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", y)), typeof m.componentShouldUpdate == "function" && h("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", y), r.prototype && r.prototype.isPureReactComponent && typeof m.shouldComponentUpdate < "u" && h("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", Pe(r) || "A pure component"), typeof m.componentDidUnmount == "function" && h("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", y), typeof m.componentDidReceiveProps == "function" && h("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", y), typeof m.componentWillRecieveProps == "function" && h("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", y), typeof m.UNSAFE_componentWillRecieveProps == "function" && h("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", y);
        var D = m.props !== d;
        m.props !== void 0 && D && h("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", y, y), m.defaultProps && h("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", y, y), typeof m.getSnapshotBeforeUpdate == "function" && typeof m.componentDidUpdate != "function" && !vy.has(r) && (vy.add(r), h("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", Pe(r))), typeof m.getDerivedStateFromProps == "function" && h("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", y), typeof m.getDerivedStateFromError == "function" && h("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", y), typeof r.getSnapshotBeforeUpdate == "function" && h("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", y);
        var N = m.state;
        N && (typeof N != "object" || Jt(N)) && h("%s.state: must be set to an object or null", y), typeof m.getChildContext == "function" && typeof r.childContextTypes != "object" && h("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", y);
      }
    }
    function BS(i, r) {
      r.updater = by, i.stateNode = r, M(r, i), r._reactInternalInstance = hy;
    }
    function HS(i, r, d) {
      var m = !1, y = fn, w = fn, D = r.contextType;
      if ("contextType" in r) {
        var N = (
          // Allow null for conditional declaration
          D === null || D !== void 0 && D.$$typeof === Et && D._context === void 0
        );
        if (!N && !Sy.has(r)) {
          Sy.add(r);
          var B = "";
          D === void 0 ? B = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof D != "object" ? B = " However, it is set to a " + typeof D + "." : D.$$typeof === xt ? B = " Did you accidentally pass the Context.Provider instead?" : D._context !== void 0 ? B = " Did you accidentally pass the Context.Consumer instead?" : B = " However, it is set to an object with keys {" + Object.keys(D).join(", ") + "}.", h("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", Pe(r) || "Component", B);
        }
      }
      if (typeof D == "object" && D !== null)
        w = tt(D);
      else {
        y = Ea(i, r, !0);
        var J = r.contextTypes;
        m = J != null, w = m ? Zo(i, y) : fn;
      }
      var re = new r(d, w);
      if (i.mode & Zn) {
        dn(!0);
        try {
          re = new r(d, w);
        } finally {
          dn(!1);
        }
      }
      var he = i.memoizedState = re.state !== null && re.state !== void 0 ? re.state : null;
      BS(i, re);
      {
        if (typeof r.getDerivedStateFromProps == "function" && he === null) {
          var Ce = Pe(r) || "Component";
          my.has(Ce) || (my.add(Ce), h("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", Ce, re.state === null ? "null" : "undefined", Ce));
        }
        if (typeof r.getDerivedStateFromProps == "function" || typeof re.getSnapshotBeforeUpdate == "function") {
          var Ue = null, Xe = null, Je = null;
          if (typeof re.componentWillMount == "function" && re.componentWillMount.__suppressDeprecationWarning !== !0 ? Ue = "componentWillMount" : typeof re.UNSAFE_componentWillMount == "function" && (Ue = "UNSAFE_componentWillMount"), typeof re.componentWillReceiveProps == "function" && re.componentWillReceiveProps.__suppressDeprecationWarning !== !0 ? Xe = "componentWillReceiveProps" : typeof re.UNSAFE_componentWillReceiveProps == "function" && (Xe = "UNSAFE_componentWillReceiveProps"), typeof re.componentWillUpdate == "function" && re.componentWillUpdate.__suppressDeprecationWarning !== !0 ? Je = "componentWillUpdate" : typeof re.UNSAFE_componentWillUpdate == "function" && (Je = "UNSAFE_componentWillUpdate"), Ue !== null || Xe !== null || Je !== null) {
            var Ut = Pe(r) || "Component", Zt = typeof r.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
            gy.has(Ut) || (gy.add(Ut), h(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, Ut, Zt, Ue !== null ? `
  ` + Ue : "", Xe !== null ? `
  ` + Xe : "", Je !== null ? `
  ` + Je : ""));
          }
        }
      }
      return m && Yo(i, y, w), re;
    }
    function WC(i, r) {
      var d = r.state;
      typeof r.componentWillMount == "function" && r.componentWillMount(), typeof r.UNSAFE_componentWillMount == "function" && r.UNSAFE_componentWillMount(), d !== r.state && (h("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", rt(i) || "Component"), by.enqueueReplaceState(r, r.state, null));
    }
    function kS(i, r, d, m) {
      var y = r.state;
      if (typeof r.componentWillReceiveProps == "function" && r.componentWillReceiveProps(d, m), typeof r.UNSAFE_componentWillReceiveProps == "function" && r.UNSAFE_componentWillReceiveProps(d, m), r.state !== y) {
        {
          var w = rt(i) || "Component";
          py.has(w) || (py.add(w), h("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", w));
        }
        by.enqueueReplaceState(r, r.state, null);
      }
    }
    function Ey(i, r, d, m) {
      GC(i, r, d);
      var y = i.stateNode;
      y.props = d, y.state = i.memoizedState, y.refs = zS, At(i);
      var w = r.contextType;
      if (typeof w == "object" && w !== null)
        y.context = tt(w);
      else {
        var D = Ea(i, r, !0);
        y.context = Zo(i, D);
      }
      {
        if (y.state === d) {
          var N = Pe(r) || "Component";
          _y.has(N) || (_y.add(N), h("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", N));
        }
        i.mode & Zn && kr.recordLegacyContextWarning(i, y), kr.recordUnsafeLifecycleWarnings(i, y);
      }
      y.state = i.memoizedState;
      var B = r.getDerivedStateFromProps;
      if (typeof B == "function" && (My(i, r, B, d), y.state = i.memoizedState), typeof r.getDerivedStateFromProps != "function" && typeof y.getSnapshotBeforeUpdate != "function" && (typeof y.UNSAFE_componentWillMount == "function" || typeof y.componentWillMount == "function") && (WC(i, y), nf(i, d, y, m), y.state = i.memoizedState), typeof y.componentDidMount == "function") {
        var J = He;
        J |= $e, (i.mode & Ir) !== kt && (J |= bt), i.flags |= J;
      }
    }
    function qC(i, r, d, m) {
      var y = i.stateNode, w = i.memoizedProps;
      y.props = w;
      var D = y.context, N = r.contextType, B = fn;
      if (typeof N == "object" && N !== null)
        B = tt(N);
      else {
        var J = Ea(i, r, !0);
        B = Zo(i, J);
      }
      var re = r.getDerivedStateFromProps, he = typeof re == "function" || typeof y.getSnapshotBeforeUpdate == "function";
      !he && (typeof y.UNSAFE_componentWillReceiveProps == "function" || typeof y.componentWillReceiveProps == "function") && (w !== d || D !== B) && kS(i, y, d, B), US();
      var Ce = i.memoizedState, Ue = y.state = Ce;
      if (nf(i, d, y, m), Ue = i.memoizedState, w === d && Ce === Ue && !vi() && !_m()) {
        if (typeof y.componentDidMount == "function") {
          var Xe = He;
          Xe |= $e, (i.mode & Ir) !== kt && (Xe |= bt), i.flags |= Xe;
        }
        return !1;
      }
      typeof re == "function" && (My(i, r, re, d), Ue = i.memoizedState);
      var Je = _m() || FS(i, r, w, d, Ce, Ue, B);
      if (Je) {
        if (!he && (typeof y.UNSAFE_componentWillMount == "function" || typeof y.componentWillMount == "function") && (typeof y.componentWillMount == "function" && y.componentWillMount(), typeof y.UNSAFE_componentWillMount == "function" && y.UNSAFE_componentWillMount()), typeof y.componentDidMount == "function") {
          var Ut = He;
          Ut |= $e, (i.mode & Ir) !== kt && (Ut |= bt), i.flags |= Ut;
        }
      } else {
        if (typeof y.componentDidMount == "function") {
          var Zt = He;
          Zt |= $e, (i.mode & Ir) !== kt && (Zt |= bt), i.flags |= Zt;
        }
        i.memoizedProps = d, i.memoizedState = Ue;
      }
      return y.props = d, y.state = Ue, y.context = B, Je;
    }
    function XC(i, r, d, m, y) {
      var w = r.stateNode;
      Yt(i, r);
      var D = r.memoizedProps, N = r.type === r.elementType ? D : Vr(r.type, D);
      w.props = N;
      var B = r.pendingProps, J = w.context, re = d.contextType, he = fn;
      if (typeof re == "object" && re !== null)
        he = tt(re);
      else {
        var Ce = Ea(r, d, !0);
        he = Zo(r, Ce);
      }
      var Ue = d.getDerivedStateFromProps, Xe = typeof Ue == "function" || typeof w.getSnapshotBeforeUpdate == "function";
      !Xe && (typeof w.UNSAFE_componentWillReceiveProps == "function" || typeof w.componentWillReceiveProps == "function") && (D !== B || J !== he) && kS(r, w, m, he), US();
      var Je = r.memoizedState, Ut = w.state = Je;
      if (nf(r, m, w, y), Ut = r.memoizedState, D === B && Je === Ut && !vi() && !_m() && !T)
        return typeof w.componentDidUpdate == "function" && (D !== i.memoizedProps || Je !== i.memoizedState) && (r.flags |= He), typeof w.getSnapshotBeforeUpdate == "function" && (D !== i.memoizedProps || Je !== i.memoizedState) && (r.flags |= oi), !1;
      typeof Ue == "function" && (My(r, d, Ue, m), Ut = r.memoizedState);
      var Zt = _m() || FS(r, d, N, m, Je, Ut, he) || // TODO: In some cases, we'll end up checking if context has changed twice,
      // both before and after `shouldComponentUpdate` has been called. Not ideal,
      // but I'm loath to refactor this function. This only happens for memoized
      // components so it's not that common.
      T;
      return Zt ? (!Xe && (typeof w.UNSAFE_componentWillUpdate == "function" || typeof w.componentWillUpdate == "function") && (typeof w.componentWillUpdate == "function" && w.componentWillUpdate(m, Ut, he), typeof w.UNSAFE_componentWillUpdate == "function" && w.UNSAFE_componentWillUpdate(m, Ut, he)), typeof w.componentDidUpdate == "function" && (r.flags |= He), typeof w.getSnapshotBeforeUpdate == "function" && (r.flags |= oi)) : (typeof w.componentDidUpdate == "function" && (D !== i.memoizedProps || Je !== i.memoizedState) && (r.flags |= He), typeof w.getSnapshotBeforeUpdate == "function" && (D !== i.memoizedProps || Je !== i.memoizedState) && (r.flags |= oi), r.memoizedProps = m, r.memoizedState = Ut), w.props = m, w.state = Ut, w.context = he, Zt;
    }
    var rf = [], af = 0, Sm = null, Mm = 0, Pa = [], Ua = 0, wu = null, mo = 1, vo = "";
    function jC(i) {
      return Cu(), (i.flags & Ke) !== X;
    }
    function YC(i) {
      return Cu(), Mm;
    }
    function ZC() {
      var i = vo, r = mo, d = r & ~JC(r);
      return d.toString(32) + i;
    }
    function Tu(i, r) {
      Cu(), rf[af++] = Mm, rf[af++] = Sm, Sm = i, Mm = r;
    }
    function VS(i, r, d) {
      Cu(), Pa[Ua++] = mo, Pa[Ua++] = vo, Pa[Ua++] = wu, wu = i;
      var m = mo, y = vo, w = bm(m) - 1, D = m & ~(1 << w), N = d + 1, B = bm(r) + w;
      if (B > 30) {
        var J = w - w % 5, re = (1 << J) - 1, he = (D & re).toString(32), Ce = D >> J, Ue = w - J, Xe = bm(r) + Ue, Je = N << Ue, Ut = Je | Ce, Zt = he + y;
        mo = 1 << Xe | Ut, vo = Zt;
      } else {
        var Ft = N << w, Wn = Ft | D, qn = y;
        mo = 1 << B | Wn, vo = qn;
      }
    }
    function wy(i) {
      Cu();
      var r = i.return;
      if (r !== null) {
        var d = 1, m = 0;
        Tu(i, d), VS(i, d, m);
      }
    }
    function bm(i) {
      return 32 - Qo(i);
    }
    function JC(i) {
      return 1 << bm(i) - 1;
    }
    function Ty(i) {
      for (; i === Sm; )
        Sm = rf[--af], rf[af] = null, Mm = rf[--af], rf[af] = null;
      for (; i === wu; )
        wu = Pa[--Ua], Pa[Ua] = null, vo = Pa[--Ua], Pa[Ua] = null, mo = Pa[--Ua], Pa[Ua] = null;
    }
    function QC() {
      return Cu(), wu !== null ? {
        id: mo,
        overflow: vo
      } : null;
    }
    function KC(i, r) {
      Cu(), Pa[Ua++] = mo, Pa[Ua++] = vo, Pa[Ua++] = wu, mo = r.id, vo = r.overflow, wu = i;
    }
    function Cu() {
      lr() || h("Expected to be hydrating. This is a bug in React. Please file an issue.");
    }
    var Zi = null, Na = null, es = !1, Au = !1, xl = null;
    function $C() {
      es && h("We should not be hydrating here. This is a bug in React. Please file a bug.");
    }
    function eA() {
      Au = !0;
    }
    function tA(i) {
      if (!ji)
        return !1;
      var r = i.stateNode.containerInfo;
      return Na = _s(r), Zi = i, es = !0, xl = null, Au = !1, !0;
    }
    function nA(i, r, d) {
      return ji ? (Na = Sc(r), Zi = i, es = !0, xl = null, Au = !1, d !== null && KC(i, d), !0) : !1;
    }
    function GS(i, r) {
      switch (i.tag) {
        case I:
          Go(i.stateNode.containerInfo, r);
          break;
        case te:
          Tc(i.type, i.memoizedProps, i.stateNode, r);
          break;
        case ne:
          var d = i.memoizedState;
          d.dehydrated !== null && wc(d.dehydrated, r);
          break;
      }
    }
    function WS(i, r) {
      GS(i, r);
      var d = i2();
      d.stateNode = r, d.return = i;
      var m = i.deletions;
      m === null ? (i.deletions = [d], i.flags |= tn) : m.push(d);
    }
    function Cy(i, r) {
      {
        if (Au)
          return;
        switch (i.tag) {
          case I: {
            var d = i.stateNode.containerInfo;
            switch (r.tag) {
              case te:
                var m = r.type, y = r.pendingProps;
                Ur(d, m, y);
                break;
              case $:
                var w = r.pendingProps;
                Nr(d, w);
                break;
              case ne:
                js(d);
                break;
            }
            break;
          }
          case te: {
            var D = i.type, N = i.memoizedProps, B = i.stateNode;
            switch (r.tag) {
              case te:
                var J = r.type, re = r.pendingProps;
                tm(D, N, B, J, re);
                break;
              case $:
                var he = r.pendingProps;
                Td(D, N, B, he);
                break;
              case ne:
                Cd(D, N, B);
                break;
            }
            break;
          }
          case ne: {
            var Ce = i.memoizedState, Ue = Ce.dehydrated;
            if (Ue !== null)
              switch (r.tag) {
                case te:
                  var Xe = r.type, Je = r.pendingProps;
                  Xa(Ue, Xe, Je);
                  break;
                case $:
                  var Ut = r.pendingProps;
                  ja(Ue, Ut);
                  break;
                case ne:
                  Ys(Ue);
                  break;
              }
            break;
          }
          default:
            return;
        }
      }
    }
    function qS(i, r) {
      r.flags = r.flags & ~wi | Le, Cy(i, r);
    }
    function XS(i, r) {
      switch (i.tag) {
        case te: {
          var d = i.type, m = i.pendingProps, y = bd(r, d, m);
          return y !== null ? (i.stateNode = y, Zi = i, Na = qa(y), !0) : !1;
        }
        case $: {
          var w = i.pendingProps, D = ko(r, w);
          return D !== null ? (i.stateNode = D, Zi = i, Na = null, !0) : !1;
        }
        case ne: {
          {
            var N = Pr(r);
            if (N !== null) {
              var B = {
                dehydrated: N,
                treeContext: QC(),
                retryLane: Rn
              };
              i.memoizedState = B;
              var J = r2(N);
              return J.return = i, i.child = J, Zi = i, Na = null, !0;
            }
          }
          return !1;
        }
        default:
          return !1;
      }
    }
    function Ay(i) {
      return (i.mode & En) !== kt && (i.flags & Gt) === X;
    }
    function Ry(i) {
      throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function Ly(i) {
      if (es) {
        var r = Na;
        if (!r) {
          Ay(i) && (Cy(Zi, i), Ry()), qS(Zi, i), es = !1, Zi = i;
          return;
        }
        var d = r;
        if (!XS(i, r)) {
          Ay(i) && (Cy(Zi, i), Ry()), r = $l(d);
          var m = Zi;
          if (!r || !XS(i, r)) {
            qS(Zi, i), es = !1, Zi = i;
            return;
          }
          WS(m, d);
        }
      }
    }
    function iA(i, r, d) {
      if (!ji)
        throw new Error("Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      var m = i.stateNode, y = !Au, w = Zp(m, i.type, i.memoizedProps, r, d, i, y);
      return i.updateQueue = w, w !== null;
    }
    function rA(i) {
      if (!ji)
        throw new Error("Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      var r = i.stateNode, d = i.memoizedProps, m = !Au, y = Mc(r, d, i, m);
      if (y) {
        var w = Zi;
        if (w !== null) {
          var D = (w.mode & En) !== kt;
          switch (w.tag) {
            case I: {
              var N = w.stateNode.containerInfo;
              wd(
                N,
                r,
                d,
                // TODO: Delete this argument when we remove the legacy root API.
                D
              );
              break;
            }
            case te: {
              var B = w.type, J = w.memoizedProps, re = w.stateNode;
              Vo(
                B,
                J,
                re,
                r,
                d,
                // TODO: Delete this argument when we remove the legacy root API.
                D
              );
              break;
            }
          }
        }
      }
      return y;
    }
    function aA(i) {
      if (!ji)
        throw new Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      var r = i.memoizedState, d = r !== null ? r.dehydrated : null;
      if (!d)
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      Jp(d, i);
    }
    function sA(i) {
      if (!ji)
        throw new Error("Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      var r = i.memoizedState, d = r !== null ? r.dehydrated : null;
      if (!d)
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      return Qp(d);
    }
    function jS(i) {
      for (var r = i.return; r !== null && r.tag !== te && r.tag !== I && r.tag !== ne; )
        r = r.return;
      Zi = r;
    }
    function ah(i) {
      if (!ji || i !== Zi)
        return !1;
      if (!es)
        return jS(i), es = !0, !1;
      if (i.tag !== I && (i.tag !== te || em(i.type) && !pd(i.type, i.memoizedProps))) {
        var r = Na;
        if (r)
          if (Ay(i))
            YS(i), Ry();
          else
            for (; r; )
              WS(i, r), r = $l(r);
      }
      return jS(i), i.tag === ne ? Na = sA(i) : Na = Zi ? $l(i.stateNode) : null, !0;
    }
    function oA() {
      return es && Na !== null;
    }
    function YS(i) {
      for (var r = Na; r; )
        GS(i, r), r = $l(r);
    }
    function sf() {
      ji && (Zi = null, Na = null, es = !1, Au = !1);
    }
    function ZS() {
      xl !== null && (z1(xl), xl = null);
    }
    function lr() {
      return es;
    }
    function Dy(i) {
      xl === null ? xl = [i] : xl.push(i);
    }
    var Py, Uy, Ny, zy, Oy, JS = function(i, r) {
    };
    Py = !1, Uy = !1, Ny = {}, zy = {}, Oy = {}, JS = function(i, r) {
      if (!(i === null || typeof i != "object") && !(!i._store || i._store.validated || i.key != null)) {
        if (typeof i._store != "object")
          throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        i._store.validated = !0;
        var d = rt(r) || "Component";
        zy[d] || (zy[d] = !0, h('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.'));
      }
    };
    function sh(i, r, d) {
      var m = d.ref;
      if (m !== null && typeof m != "function" && typeof m != "object") {
        if ((i.mode & Zn || R) && // We warn in ReactElement.js if owner and self are equal for string refs
        // because these cannot be automatically converted to an arrow function
        // using a codemod. Therefore, we don't have to warn about string refs again.
        !(d._owner && d._self && d._owner.stateNode !== d._self)) {
          var y = rt(i) || "Component";
          Ny[y] || (h('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', m), Ny[y] = !0);
        }
        if (d._owner) {
          var w = d._owner, D;
          if (w) {
            var N = w;
            if (N.tag !== G)
              throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
            D = N.stateNode;
          }
          if (!D)
            throw new Error("Missing owner for string ref " + m + ". This error is likely caused by a bug in React. Please file an issue.");
          var B = D;
          ym(m, "ref");
          var J = "" + m;
          if (r !== null && r.ref !== null && typeof r.ref == "function" && r.ref._stringRef === J)
            return r.ref;
          var re = function(he) {
            var Ce = B.refs;
            Ce === zS && (Ce = B.refs = {}), he === null ? delete Ce[J] : Ce[J] = he;
          };
          return re._stringRef = J, re;
        } else {
          if (typeof m != "string")
            throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
          if (!d._owner)
            throw new Error("Element ref was specified as a string (" + m + `) but no owner was set. This could happen for one of the following reasons:
1. You may be adding a ref to a function component
2. You may be adding a ref to a component that was not created inside a component's render method
3. You have multiple copies of React loaded
See https://reactjs.org/link/refs-must-have-owner for more information.`);
        }
      }
      return m;
    }
    function Em(i, r) {
      var d = Object.prototype.toString.call(r);
      throw new Error("Objects are not valid as a React child (found: " + (d === "[object Object]" ? "object with keys {" + Object.keys(r).join(", ") + "}" : d) + "). If you meant to render a collection of children, use an array instead.");
    }
    function wm(i) {
      {
        var r = rt(i) || "Component";
        if (Oy[r])
          return;
        Oy[r] = !0, h("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
    }
    function QS(i) {
      var r = i._payload, d = i._init;
      return d(r);
    }
    function KS(i) {
      function r(_e, ze) {
        if (i) {
          var ve = _e.deletions;
          ve === null ? (_e.deletions = [ze], _e.flags |= tn) : ve.push(ze);
        }
      }
      function d(_e, ze) {
        if (!i)
          return null;
        for (var ve = ze; ve !== null; )
          r(_e, ve), ve = ve.sibling;
        return null;
      }
      function m(_e, ze) {
        for (var ve = /* @__PURE__ */ new Map(), et = ze; et !== null; )
          et.key !== null ? ve.set(et.key, et) : ve.set(et.index, et), et = et.sibling;
        return ve;
      }
      function y(_e, ze) {
        var ve = zu(_e, ze);
        return ve.index = 0, ve.sibling = null, ve;
      }
      function w(_e, ze, ve) {
        if (_e.index = ve, !i)
          return _e.flags |= Ke, ze;
        var et = _e.alternate;
        if (et !== null) {
          var Pt = et.index;
          return Pt < ze ? (_e.flags |= Le, ze) : Pt;
        } else
          return _e.flags |= Le, ze;
      }
      function D(_e) {
        return i && _e.alternate === null && (_e.flags |= Le), _e;
      }
      function N(_e, ze, ve, et) {
        if (ze === null || ze.tag !== $) {
          var Pt = a_(ve, _e.mode, et);
          return Pt.return = _e, Pt;
        } else {
          var gt = y(ze, ve);
          return gt.return = _e, gt;
        }
      }
      function B(_e, ze, ve, et) {
        var Pt = ve.type;
        if (Pt === Ne)
          return re(_e, ze, ve.props.children, et, ve.key);
        if (ze !== null && (ze.elementType === Pt || // Keep this check inline so it only runs on the false path:
        J1(ze, ve) || // Lazy types should reconcile their resolved type.
        // We need to do this after the Hot Reloading check above,
        // because hot reloading has different semantics than prod because
        // it doesn't resuspend. So we can't let the call below suspend.
        typeof Pt == "object" && Pt !== null && Pt.$$typeof === H && QS(Pt) === ze.type)) {
          var gt = y(ze, ve.props);
          return gt.ref = sh(_e, ze, ve), gt.return = _e, gt._debugSource = ve._source, gt._debugOwner = ve._owner, gt;
        }
        var un = r_(ve, _e.mode, et);
        return un.ref = sh(_e, ze, ve), un.return = _e, un;
      }
      function J(_e, ze, ve, et) {
        if (ze === null || ze.tag !== Q || ze.stateNode.containerInfo !== ve.containerInfo || ze.stateNode.implementation !== ve.implementation) {
          var Pt = s_(ve, _e.mode, et);
          return Pt.return = _e, Pt;
        } else {
          var gt = y(ze, ve.children || []);
          return gt.return = _e, gt;
        }
      }
      function re(_e, ze, ve, et, Pt) {
        if (ze === null || ze.tag !== ie) {
          var gt = Rl(ve, _e.mode, et, Pt);
          return gt.return = _e, gt;
        } else {
          var un = y(ze, ve);
          return un.return = _e, un;
        }
      }
      function he(_e, ze, ve) {
        if (typeof ze == "string" && ze !== "" || typeof ze == "number") {
          var et = a_("" + ze, _e.mode, ve);
          return et.return = _e, et;
        }
        if (typeof ze == "object" && ze !== null) {
          switch (ze.$$typeof) {
            case Ie: {
              var Pt = r_(ze, _e.mode, ve);
              return Pt.ref = sh(_e, null, ze), Pt.return = _e, Pt;
            }
            case Me: {
              var gt = s_(ze, _e.mode, ve);
              return gt.return = _e, gt;
            }
            case H: {
              var un = ze._payload, wn = ze._init;
              return he(_e, wn(un), ve);
            }
          }
          if (Jt(ze) || me(ze)) {
            var Bn = Rl(ze, _e.mode, ve, null);
            return Bn.return = _e, Bn;
          }
          Em(_e, ze);
        }
        return typeof ze == "function" && wm(_e), null;
      }
      function Ce(_e, ze, ve, et) {
        var Pt = ze !== null ? ze.key : null;
        if (typeof ve == "string" && ve !== "" || typeof ve == "number")
          return Pt !== null ? null : N(_e, ze, "" + ve, et);
        if (typeof ve == "object" && ve !== null) {
          switch (ve.$$typeof) {
            case Ie:
              return ve.key === Pt ? B(_e, ze, ve, et) : null;
            case Me:
              return ve.key === Pt ? J(_e, ze, ve, et) : null;
            case H: {
              var gt = ve._payload, un = ve._init;
              return Ce(_e, ze, un(gt), et);
            }
          }
          if (Jt(ve) || me(ve))
            return Pt !== null ? null : re(_e, ze, ve, et, null);
          Em(_e, ve);
        }
        return typeof ve == "function" && wm(_e), null;
      }
      function Ue(_e, ze, ve, et, Pt) {
        if (typeof et == "string" && et !== "" || typeof et == "number") {
          var gt = _e.get(ve) || null;
          return N(ze, gt, "" + et, Pt);
        }
        if (typeof et == "object" && et !== null) {
          switch (et.$$typeof) {
            case Ie: {
              var un = _e.get(et.key === null ? ve : et.key) || null;
              return B(ze, un, et, Pt);
            }
            case Me: {
              var wn = _e.get(et.key === null ? ve : et.key) || null;
              return J(ze, wn, et, Pt);
            }
            case H: {
              var Bn = et._payload, Tn = et._init;
              return Ue(_e, ze, ve, Tn(Bn), Pt);
            }
          }
          if (Jt(et) || me(et)) {
            var ii = _e.get(ve) || null;
            return re(ze, ii, et, Pt, null);
          }
          Em(ze, et);
        }
        return typeof et == "function" && wm(ze), null;
      }
      function Xe(_e, ze, ve) {
        {
          if (typeof _e != "object" || _e === null)
            return ze;
          switch (_e.$$typeof) {
            case Ie:
            case Me:
              JS(_e, ve);
              var et = _e.key;
              if (typeof et != "string")
                break;
              if (ze === null) {
                ze = /* @__PURE__ */ new Set(), ze.add(et);
                break;
              }
              if (!ze.has(et)) {
                ze.add(et);
                break;
              }
              h("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", et);
              break;
            case H: {
              var Pt = _e._payload, gt = _e._init;
              Xe(gt(Pt), ze, ve);
              break;
            }
          }
        }
        return ze;
      }
      function Je(_e, ze, ve, et) {
        for (var Pt = null, gt = 0; gt < ve.length; gt++) {
          var un = ve[gt];
          Pt = Xe(un, Pt, _e);
        }
        for (var wn = null, Bn = null, Tn = ze, ii = 0, yn = 0, on = null; Tn !== null && yn < ve.length; yn++) {
          Tn.index > yn ? (on = Tn, Tn = null) : on = Tn.sibling;
          var Si = Ce(_e, Tn, ve[yn], et);
          if (Si === null) {
            Tn === null && (Tn = on);
            break;
          }
          i && Tn && Si.alternate === null && r(_e, Tn), ii = w(Si, ii, yn), Bn === null ? wn = Si : Bn.sibling = Si, Bn = Si, Tn = on;
        }
        if (yn === ve.length) {
          if (d(_e, Tn), lr()) {
            var ri = yn;
            Tu(_e, ri);
          }
          return wn;
        }
        if (Tn === null) {
          for (; yn < ve.length; yn++) {
            var Ha = he(_e, ve[yn], et);
            Ha !== null && (ii = w(Ha, ii, yn), Bn === null ? wn = Ha : Bn.sibling = Ha, Bn = Ha);
          }
          if (lr()) {
            var er = yn;
            Tu(_e, er);
          }
          return wn;
        }
        for (var ca = m(_e, Tn); yn < ve.length; yn++) {
          var fa = Ue(ca, _e, yn, ve[yn], et);
          fa !== null && (i && fa.alternate !== null && ca.delete(fa.key === null ? yn : fa.key), ii = w(fa, ii, yn), Bn === null ? wn = fa : Bn.sibling = fa, Bn = fa);
        }
        if (i && ca.forEach(function(Mf) {
          return r(_e, Mf);
        }), lr()) {
          var Is = yn;
          Tu(_e, Is);
        }
        return wn;
      }
      function Ut(_e, ze, ve, et) {
        var Pt = me(ve);
        if (typeof Pt != "function")
          throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
        {
          typeof Symbol == "function" && // $FlowFixMe Flow doesn't know about toStringTag
          ve[Symbol.toStringTag] === "Generator" && (Uy || h("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), Uy = !0), ve.entries === Pt && (Py || h("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), Py = !0);
          var gt = Pt.call(ve);
          if (gt)
            for (var un = null, wn = gt.next(); !wn.done; wn = gt.next()) {
              var Bn = wn.value;
              un = Xe(Bn, un, _e);
            }
        }
        var Tn = Pt.call(ve);
        if (Tn == null)
          throw new Error("An iterable object provided no iterator.");
        for (var ii = null, yn = null, on = ze, Si = 0, ri = 0, Ha = null, er = Tn.next(); on !== null && !er.done; ri++, er = Tn.next()) {
          on.index > ri ? (Ha = on, on = null) : Ha = on.sibling;
          var ca = Ce(_e, on, er.value, et);
          if (ca === null) {
            on === null && (on = Ha);
            break;
          }
          i && on && ca.alternate === null && r(_e, on), Si = w(ca, Si, ri), yn === null ? ii = ca : yn.sibling = ca, yn = ca, on = Ha;
        }
        if (er.done) {
          if (d(_e, on), lr()) {
            var fa = ri;
            Tu(_e, fa);
          }
          return ii;
        }
        if (on === null) {
          for (; !er.done; ri++, er = Tn.next()) {
            var Is = he(_e, er.value, et);
            Is !== null && (Si = w(Is, Si, ri), yn === null ? ii = Is : yn.sibling = Is, yn = Is);
          }
          if (lr()) {
            var Mf = ri;
            Tu(_e, Mf);
          }
          return ii;
        }
        for (var bf = m(_e, on); !er.done; ri++, er = Tn.next()) {
          var da = Ue(bf, _e, ri, er.value, et);
          da !== null && (i && da.alternate !== null && bf.delete(da.key === null ? ri : da.key), Si = w(da, Si, ri), yn === null ? ii = da : yn.sibling = da, yn = da);
        }
        if (i && bf.forEach(function(f_) {
          return r(_e, f_);
        }), lr()) {
          var Ou = ri;
          Tu(_e, Ou);
        }
        return ii;
      }
      function Zt(_e, ze, ve, et) {
        if (ze !== null && ze.tag === $) {
          d(_e, ze.sibling);
          var Pt = y(ze, ve);
          return Pt.return = _e, Pt;
        }
        d(_e, ze);
        var gt = a_(ve, _e.mode, et);
        return gt.return = _e, gt;
      }
      function Ft(_e, ze, ve, et) {
        for (var Pt = ve.key, gt = ze; gt !== null; ) {
          if (gt.key === Pt) {
            var un = ve.type;
            if (un === Ne) {
              if (gt.tag === ie) {
                d(_e, gt.sibling);
                var wn = y(gt, ve.props.children);
                return wn.return = _e, wn._debugSource = ve._source, wn._debugOwner = ve._owner, wn;
              }
            } else if (gt.elementType === un || // Keep this check inline so it only runs on the false path:
            J1(gt, ve) || // Lazy types should reconcile their resolved type.
            // We need to do this after the Hot Reloading check above,
            // because hot reloading has different semantics than prod because
            // it doesn't resuspend. So we can't let the call below suspend.
            typeof un == "object" && un !== null && un.$$typeof === H && QS(un) === gt.type) {
              d(_e, gt.sibling);
              var Bn = y(gt, ve.props);
              return Bn.ref = sh(_e, gt, ve), Bn.return = _e, Bn._debugSource = ve._source, Bn._debugOwner = ve._owner, Bn;
            }
            d(_e, gt);
            break;
          } else
            r(_e, gt);
          gt = gt.sibling;
        }
        if (ve.type === Ne) {
          var Tn = Rl(ve.props.children, _e.mode, et, ve.key);
          return Tn.return = _e, Tn;
        } else {
          var ii = r_(ve, _e.mode, et);
          return ii.ref = sh(_e, ze, ve), ii.return = _e, ii;
        }
      }
      function Wn(_e, ze, ve, et) {
        for (var Pt = ve.key, gt = ze; gt !== null; ) {
          if (gt.key === Pt)
            if (gt.tag === Q && gt.stateNode.containerInfo === ve.containerInfo && gt.stateNode.implementation === ve.implementation) {
              d(_e, gt.sibling);
              var un = y(gt, ve.children || []);
              return un.return = _e, un;
            } else {
              d(_e, gt);
              break;
            }
          else
            r(_e, gt);
          gt = gt.sibling;
        }
        var wn = s_(ve, _e.mode, et);
        return wn.return = _e, wn;
      }
      function qn(_e, ze, ve, et) {
        var Pt = typeof ve == "object" && ve !== null && ve.type === Ne && ve.key === null;
        if (Pt && (ve = ve.props.children), typeof ve == "object" && ve !== null) {
          switch (ve.$$typeof) {
            case Ie:
              return D(Ft(_e, ze, ve, et));
            case Me:
              return D(Wn(_e, ze, ve, et));
            case H: {
              var gt = ve._payload, un = ve._init;
              return qn(_e, ze, un(gt), et);
            }
          }
          if (Jt(ve))
            return Je(_e, ze, ve, et);
          if (me(ve))
            return Ut(_e, ze, ve, et);
          Em(_e, ve);
        }
        return typeof ve == "string" && ve !== "" || typeof ve == "number" ? D(Zt(_e, ze, "" + ve, et)) : (typeof ve == "function" && wm(_e), d(_e, ze));
      }
      return qn;
    }
    var of = KS(!0), $S = KS(!1);
    function lA(i, r) {
      if (i !== null && r.child !== i.child)
        throw new Error("Resuming work not yet implemented.");
      if (r.child !== null) {
        var d = r.child, m = zu(d, d.pendingProps);
        for (r.child = m, m.return = r; d.sibling !== null; )
          d = d.sibling, m = m.sibling = zu(d, d.pendingProps), m.return = r;
        m.sibling = null;
      }
    }
    function uA(i, r) {
      for (var d = i.child; d !== null; )
        K3(d, r), d = d.sibling;
    }
    var oh = {}, Sl = ba(oh), lh = ba(oh), Tm = ba(oh);
    function Cm(i) {
      if (i === oh)
        throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      return i;
    }
    function Iy() {
      var i = Cm(Tm.current);
      return i;
    }
    function Fy(i, r) {
      An(Tm, r, i), An(lh, i, i), An(Sl, oh, i);
      var d = vs(r);
      mi(Sl, i), An(Sl, d, i);
    }
    function lf(i) {
      mi(Sl, i), mi(lh, i), mi(Tm, i);
    }
    function uh() {
      var i = Cm(Sl.current);
      return i;
    }
    function eM(i) {
      var r = Cm(Tm.current), d = Cm(Sl.current), m = Li(d, i.type, r);
      d !== m && (An(lh, i, i), An(Sl, m, i));
    }
    function By(i) {
      lh.current === i && (mi(Sl, i), mi(lh, i));
    }
    var cA = 0, tM = 1, nM = 1, ch = 2, ts = ba(cA);
    function Hy(i, r) {
      return (i & r) !== 0;
    }
    function uf(i) {
      return i & tM;
    }
    function ky(i, r) {
      return i & tM | r;
    }
    function fA(i, r) {
      return i | r;
    }
    function Ml(i, r) {
      An(ts, r, i);
    }
    function cf(i) {
      mi(ts, i);
    }
    function dA(i, r) {
      var d = i.memoizedState;
      return d !== null ? d.dehydrated !== null : (i.memoizedProps, !0);
    }
    function Am(i) {
      for (var r = i; r !== null; ) {
        if (r.tag === ne) {
          var d = r.memoizedState;
          if (d !== null) {
            var m = d.dehydrated;
            if (m === null || ea(m) || Ma(m))
              return r;
          }
        } else if (r.tag === Be && // revealOrder undefined can't be trusted because it don't
        // keep track of whether it suspended or not.
        r.memoizedProps.revealOrder !== void 0) {
          var y = (r.flags & Gt) !== X;
          if (y)
            return r;
        } else if (r.child !== null) {
          r.child.return = r, r = r.child;
          continue;
        }
        if (r === i)
          return null;
        for (; r.sibling === null; ) {
          if (r.return === null || r.return === i)
            return null;
          r = r.return;
        }
        r.sibling.return = r.return, r = r.sibling;
      }
      return null;
    }
    var Ds = (
      /*   */
      0
    ), ei = (
      /* */
      1
    ), bl = (
      /*  */
      2
    ), xi = (
      /*    */
      4
    ), Ji = (
      /*   */
      8
    ), Vy = [];
    function Gy() {
      for (var i = 0; i < Vy.length; i++) {
        var r = Vy[i];
        gs ? r._workInProgressVersionPrimary = null : r._workInProgressVersionSecondary = null;
      }
      Vy.length = 0;
    }
    function hA(i, r) {
      var d = r._getVersion, m = d(r._source);
      i.mutableSourceEagerHydrationData == null ? i.mutableSourceEagerHydrationData = [r, m] : i.mutableSourceEagerHydrationData.push(r, m);
    }
    var vt = s.ReactCurrentDispatcher, Gr = s.ReactCurrentBatchConfig, Wy, ff;
    Wy = /* @__PURE__ */ new Set();
    var df = We, On = null, ur = null, zi = null, Rm = !1, fh = !1, dh = 0, pA = 0, mA = 25, Oe = null, za = null, El = -1, qy = !1;
    function Sn() {
      {
        var i = Oe;
        za === null ? za = [i] : za.push(i);
      }
    }
    function st() {
      {
        var i = Oe;
        za !== null && (El++, za[El] !== i && vA(i));
      }
    }
    function hf(i) {
      i != null && !Jt(i) && h("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", Oe, typeof i);
    }
    function vA(i) {
      {
        var r = rt(On);
        if (!Wy.has(r) && (Wy.add(r), za !== null)) {
          for (var d = "", m = 30, y = 0; y <= El; y++) {
            for (var w = za[y], D = y === El ? i : w, N = y + 1 + ". " + w; N.length < m; )
              N += " ";
            N += D + `
`, d += N;
          }
          h(`React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks

   Previous render            Next render
   ------------------------------------------------------
%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`, r, d);
        }
      }
    }
    function cr() {
      throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
    }
    function Xy(i, r) {
      if (qy)
        return !1;
      if (r === null)
        return h("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", Oe), !1;
      i.length !== r.length && h(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, Oe, "[" + r.join(", ") + "]", "[" + i.join(", ") + "]");
      for (var d = 0; d < r.length && d < i.length; d++)
        if (!Sr(i[d], r[d]))
          return !1;
      return !0;
    }
    function pf(i, r, d, m, y, w) {
      df = w, On = r, za = i !== null ? i._debugHookTypes : null, El = -1, qy = i !== null && i.type !== r.type, r.memoizedState = null, r.updateQueue = null, r.lanes = We, i !== null && i.memoizedState !== null ? vt.current = EM : za !== null ? vt.current = bM : vt.current = MM;
      var D = d(m, y);
      if (fh) {
        var N = 0;
        do {
          if (fh = !1, dh = 0, N >= mA)
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          N += 1, qy = !1, ur = null, zi = null, r.updateQueue = null, El = -1, vt.current = wM, D = d(m, y);
        } while (fh);
      }
      vt.current = Vm, r._debugHookTypes = za;
      var B = ur !== null && ur.next !== null;
      if (df = We, On = null, ur = null, zi = null, Oe = null, za = null, El = -1, i !== null && (i.flags & bn) !== (r.flags & bn) && // Disable this warning in legacy mode, because legacy Suspense is weird
      // and creates false positives. To make this work in legacy mode, we'd
      // need to mark fibers that commit in an incomplete state, somehow. For
      // now I'll disable the warning that most of the bugs that would trigger
      // it are either exclusive to concurrent mode or exist in both.
      (i.mode & En) !== kt && h("Internal React error: Expected static flag was missing. Please notify the React team."), Rm = !1, B)
        throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
      return D;
    }
    function mf() {
      var i = dh !== 0;
      return dh = 0, i;
    }
    function iM(i, r, d) {
      r.updateQueue = i.updateQueue, (r.mode & Ir) !== kt ? r.flags &= ~(Mt | bt | Ei | He) : r.flags &= ~(Ei | He), i.lanes = io(i.lanes, d);
    }
    function rM() {
      if (vt.current = Vm, Rm) {
        for (var i = On.memoizedState; i !== null; ) {
          var r = i.queue;
          r !== null && (r.pending = null), i = i.next;
        }
        Rm = !1;
      }
      df = We, On = null, ur = null, zi = null, za = null, El = -1, Oe = null, vM = !1, fh = !1, dh = 0;
    }
    function go() {
      var i = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
      };
      return zi === null ? On.memoizedState = zi = i : zi = zi.next = i, zi;
    }
    function Ps() {
      var i;
      if (ur === null) {
        var r = On.alternate;
        r !== null ? i = r.memoizedState : i = null;
      } else
        i = ur.next;
      var d;
      if (zi === null ? d = On.memoizedState : d = zi.next, d !== null)
        zi = d, d = zi.next, ur = i;
      else {
        if (i === null)
          throw new Error("Rendered more hooks than during the previous render.");
        ur = i;
        var m = {
          memoizedState: ur.memoizedState,
          baseState: ur.baseState,
          baseQueue: ur.baseQueue,
          queue: ur.queue,
          next: null
        };
        zi === null ? On.memoizedState = zi = m : zi = zi.next = m;
      }
      return zi;
    }
    function aM() {
      return {
        lastEffect: null,
        stores: null
      };
    }
    function jy(i, r) {
      return typeof r == "function" ? r(i) : r;
    }
    function Yy(i, r, d) {
      var m = go(), y;
      d !== void 0 ? y = d(r) : y = r, m.memoizedState = m.baseState = y;
      var w = {
        pending: null,
        interleaved: null,
        lanes: We,
        dispatch: null,
        lastRenderedReducer: i,
        lastRenderedState: y
      };
      m.queue = w;
      var D = w.dispatch = xA.bind(null, On, w);
      return [m.memoizedState, D];
    }
    function Zy(i, r, d) {
      var m = Ps(), y = m.queue;
      if (y === null)
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      y.lastRenderedReducer = i;
      var w = ur, D = w.baseQueue, N = y.pending;
      if (N !== null) {
        if (D !== null) {
          var B = D.next, J = N.next;
          D.next = J, N.next = B;
        }
        w.baseQueue !== D && h("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."), w.baseQueue = D = N, y.pending = null;
      }
      if (D !== null) {
        var re = D.next, he = w.baseState, Ce = null, Ue = null, Xe = null, Je = re;
        do {
          var Ut = Je.lane;
          if (sl(df, Ut)) {
            if (Xe !== null) {
              var Ft = {
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: gi,
                action: Je.action,
                hasEagerState: Je.hasEagerState,
                eagerState: Je.eagerState,
                next: null
              };
              Xe = Xe.next = Ft;
            }
            if (Je.hasEagerState)
              he = Je.eagerState;
            else {
              var Wn = Je.action;
              he = i(he, Wn);
            }
          } else {
            var Zt = {
              lane: Ut,
              action: Je.action,
              hasEagerState: Je.hasEagerState,
              eagerState: Je.eagerState,
              next: null
            };
            Xe === null ? (Ue = Xe = Zt, Ce = he) : Xe = Xe.next = Zt, On.lanes = jt(On.lanes, Ut), Ev(Ut);
          }
          Je = Je.next;
        } while (Je !== null && Je !== re);
        Xe === null ? Ce = he : Xe.next = Ue, Sr(he, m.memoizedState) || tv(), m.memoizedState = he, m.baseState = Ce, m.baseQueue = Xe, y.lastRenderedState = he;
      }
      var qn = y.interleaved;
      if (qn !== null) {
        var _e = qn;
        do {
          var ze = _e.lane;
          On.lanes = jt(On.lanes, ze), Ev(ze), _e = _e.next;
        } while (_e !== qn);
      } else
        D === null && (y.lanes = We);
      var ve = y.dispatch;
      return [m.memoizedState, ve];
    }
    function Jy(i, r, d) {
      var m = Ps(), y = m.queue;
      if (y === null)
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      y.lastRenderedReducer = i;
      var w = y.dispatch, D = y.pending, N = m.memoizedState;
      if (D !== null) {
        y.pending = null;
        var B = D.next, J = B;
        do {
          var re = J.action;
          N = i(N, re), J = J.next;
        } while (J !== B);
        Sr(N, m.memoizedState) || tv(), m.memoizedState = N, m.baseQueue === null && (m.baseState = N), y.lastRenderedState = N;
      }
      return [N, w];
    }
    function qF(i, r, d) {
    }
    function XF(i, r, d) {
    }
    function Qy(i, r, d) {
      var m = On, y = go(), w, D = lr();
      if (D) {
        if (d === void 0)
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        w = d(), ff || w !== d() && (h("The result of getServerSnapshot should be cached to avoid an infinite loop"), ff = !0);
      } else {
        if (w = r(), !ff) {
          var N = r();
          Sr(w, N) || (h("The result of getSnapshot should be cached to avoid an infinite loop"), ff = !0);
        }
        var B = xv();
        if (B === null)
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        no(B, df) || sM(m, r, w);
      }
      y.memoizedState = w;
      var J = {
        value: w,
        getSnapshot: r
      };
      return y.queue = J, vh(lM.bind(null, m, J, i), [i]), m.flags |= Ei, ph(ei | Ji, oM.bind(null, m, J, w, r), void 0, null), w;
    }
    function Lm(i, r, d) {
      var m = On, y = Ps(), w = r();
      if (!ff) {
        var D = r();
        Sr(w, D) || (h("The result of getSnapshot should be cached to avoid an infinite loop"), ff = !0);
      }
      var N = y.memoizedState, B = !Sr(N, w);
      B && (y.memoizedState = w, tv());
      var J = y.queue;
      if (Ru(lM.bind(null, m, J, i), [i]), J.getSnapshot !== r || B || // Check if the susbcribe function changed. We can save some memory by
      // checking whether we scheduled a subscription effect above.
      zi !== null && zi.memoizedState.tag & ei) {
        m.flags |= Ei, ph(ei | Ji, oM.bind(null, m, J, w, r), void 0, null);
        var re = xv();
        if (re === null)
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        no(re, df) || sM(m, r, w);
      }
      return w;
    }
    function sM(i, r, d) {
      i.flags |= ms;
      var m = {
        getSnapshot: r,
        value: d
      }, y = On.updateQueue;
      if (y === null)
        y = aM(), On.updateQueue = y, y.stores = [m];
      else {
        var w = y.stores;
        w === null ? y.stores = [m] : w.push(m);
      }
    }
    function oM(i, r, d, m) {
      r.value = d, r.getSnapshot = m, uM(r) && cM(i);
    }
    function lM(i, r, d) {
      var m = function() {
        uM(r) && cM(i);
      };
      return d(m);
    }
    function uM(i) {
      var r = i.getSnapshot, d = i.value;
      try {
        var m = r();
        return !Sr(d, m);
      } catch {
        return !0;
      }
    }
    function cM(i) {
      Fi(i, sn, zn);
    }
    function hh(i) {
      var r = go();
      typeof i == "function" && (i = i()), r.memoizedState = r.baseState = i;
      var d = {
        pending: null,
        interleaved: null,
        lanes: We,
        dispatch: null,
        lastRenderedReducer: jy,
        lastRenderedState: i
      };
      r.queue = d;
      var m = d.dispatch = SA.bind(null, On, d);
      return [r.memoizedState, m];
    }
    function Dm(i) {
      return Zy(jy);
    }
    function Pm(i) {
      return Jy(jy);
    }
    function ph(i, r, d, m) {
      var y = {
        tag: i,
        create: r,
        destroy: d,
        deps: m,
        // Circular
        next: null
      }, w = On.updateQueue;
      if (w === null)
        w = aM(), On.updateQueue = w, w.lastEffect = y.next = y;
      else {
        var D = w.lastEffect;
        if (D === null)
          w.lastEffect = y.next = y;
        else {
          var N = D.next;
          D.next = y, y.next = N, w.lastEffect = y;
        }
      }
      return y;
    }
    function Ky(i) {
      var r = go();
      {
        var d = {
          current: i
        };
        return r.memoizedState = d, d;
      }
    }
    function Um(i) {
      var r = Ps();
      return r.memoizedState;
    }
    function mh(i, r, d, m) {
      var y = go(), w = m === void 0 ? null : m;
      On.flags |= i, y.memoizedState = ph(ei | r, d, void 0, w);
    }
    function Nm(i, r, d, m) {
      var y = Ps(), w = m === void 0 ? null : m, D = void 0;
      if (ur !== null) {
        var N = ur.memoizedState;
        if (D = N.destroy, w !== null) {
          var B = N.deps;
          if (Xy(w, B)) {
            y.memoizedState = ph(r, d, D, w);
            return;
          }
        }
      }
      On.flags |= i, y.memoizedState = ph(ei | r, d, D, w);
    }
    function vh(i, r) {
      return (On.mode & Ir) !== kt ? mh(Mt | Ei | it, Ji, i, r) : mh(Ei | it, Ji, i, r);
    }
    function Ru(i, r) {
      return Nm(Ei, Ji, i, r);
    }
    function $y(i, r) {
      return mh(He, bl, i, r);
    }
    function zm(i, r) {
      return Nm(He, bl, i, r);
    }
    function e0(i, r) {
      var d = He;
      return d |= $e, (On.mode & Ir) !== kt && (d |= bt), mh(d, xi, i, r);
    }
    function Om(i, r) {
      return Nm(He, xi, i, r);
    }
    function fM(i, r) {
      if (typeof r == "function") {
        var d = r, m = i();
        return d(m), function() {
          d(null);
        };
      } else if (r != null) {
        var y = r;
        y.hasOwnProperty("current") || h("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(y).join(", ") + "}");
        var w = i();
        return y.current = w, function() {
          y.current = null;
        };
      }
    }
    function t0(i, r, d) {
      typeof r != "function" && h("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", r !== null ? typeof r : "null");
      var m = d != null ? d.concat([i]) : null, y = He;
      return y |= $e, (On.mode & Ir) !== kt && (y |= bt), mh(y, xi, fM.bind(null, r, i), m);
    }
    function Im(i, r, d) {
      typeof r != "function" && h("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", r !== null ? typeof r : "null");
      var m = d != null ? d.concat([i]) : null;
      return Nm(He, xi, fM.bind(null, r, i), m);
    }
    function gA(i, r) {
    }
    var Fm = gA;
    function n0(i, r) {
      var d = go(), m = r === void 0 ? null : r;
      return d.memoizedState = [i, m], i;
    }
    function Bm(i, r) {
      var d = Ps(), m = r === void 0 ? null : r, y = d.memoizedState;
      if (y !== null && m !== null) {
        var w = y[1];
        if (Xy(m, w))
          return y[0];
      }
      return d.memoizedState = [i, m], i;
    }
    function i0(i, r) {
      var d = go(), m = r === void 0 ? null : r, y = i();
      return d.memoizedState = [y, m], y;
    }
    function Hm(i, r) {
      var d = Ps(), m = r === void 0 ? null : r, y = d.memoizedState;
      if (y !== null && m !== null) {
        var w = y[1];
        if (Xy(m, w))
          return y[0];
      }
      var D = i();
      return d.memoizedState = [D, m], D;
    }
    function r0(i) {
      var r = hh(i), d = r[0], m = r[1];
      return vh(function() {
        var y = Gr.transition;
        Gr.transition = {};
        try {
          m(i);
        } finally {
          Gr.transition = y;
        }
      }, [i]), d;
    }
    function dM(i) {
      var r = Dm(), d = r[0], m = r[1];
      return Ru(function() {
        var y = Gr.transition;
        Gr.transition = {};
        try {
          m(i);
        } finally {
          Gr.transition = y;
        }
      }, [i]), d;
    }
    function hM(i) {
      var r = Pm(), d = r[0], m = r[1];
      return Ru(function() {
        var y = Gr.transition;
        Gr.transition = {};
        try {
          m(i);
        } finally {
          Gr.transition = y;
        }
      }, [i]), d;
    }
    function yA(i, r, d) {
      var m = _r();
      yi(Zc(m, ll)), i(!0);
      var y = Gr.transition;
      Gr.transition = {};
      var w = Gr.transition;
      Gr.transition._updatedFibers = /* @__PURE__ */ new Set();
      try {
        i(!1), r();
      } finally {
        if (yi(m), Gr.transition = y, y === null && w._updatedFibers) {
          var D = w._updatedFibers.size;
          D > 10 && p("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), w._updatedFibers.clear();
        }
      }
    }
    function a0() {
      var i = hh(!1), r = i[0], d = i[1], m = yA.bind(null, d), y = go();
      return y.memoizedState = m, [r, m];
    }
    function pM() {
      var i = Dm(), r = i[0], d = Ps(), m = d.memoizedState;
      return [r, m];
    }
    function mM() {
      var i = Pm(), r = i[0], d = Ps(), m = d.memoizedState;
      return [r, m];
    }
    var vM = !1;
    function _A() {
      return vM;
    }
    function s0() {
      var i = go(), r = xv(), d = r.identifierPrefix, m;
      if (lr()) {
        var y = ZC();
        m = ":" + d + "R" + y;
        var w = dh++;
        w > 0 && (m += "H" + w.toString(32)), m += ":";
      } else {
        var D = pA++;
        m = ":" + d + "r" + D.toString(32) + ":";
      }
      return i.memoizedState = m, m;
    }
    function km() {
      var i = Ps(), r = i.memoizedState;
      return r;
    }
    function xA(i, r, d) {
      typeof arguments[3] == "function" && h("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
      var m = Cl(i), y = {
        lane: m,
        action: d,
        hasEagerState: !1,
        eagerState: null,
        next: null
      };
      if (gM(i))
        yM(r, y);
      else {
        _M(i, r, y);
        var w = Er(), D = Fi(i, m, w);
        D !== null && xM(D, r, m);
      }
      SM(i, m);
    }
    function SA(i, r, d) {
      typeof arguments[3] == "function" && h("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
      var m = Cl(i), y = {
        lane: m,
        action: d,
        hasEagerState: !1,
        eagerState: null,
        next: null
      };
      if (gM(i))
        yM(r, y);
      else {
        _M(i, r, y);
        var w = i.alternate;
        if (i.lanes === We && (w === null || w.lanes === We)) {
          var D = r.lastRenderedReducer;
          if (D !== null) {
            var N;
            N = vt.current, vt.current = ns;
            try {
              var B = r.lastRenderedState, J = D(B, d);
              if (y.hasEagerState = !0, y.eagerState = J, Sr(J, B))
                return;
            } catch {
            } finally {
              vt.current = N;
            }
          }
        }
        var re = Er(), he = Fi(i, m, re);
        he !== null && xM(he, r, m);
      }
      SM(i, m);
    }
    function gM(i) {
      var r = i.alternate;
      return i === On || r !== null && r === On;
    }
    function yM(i, r) {
      fh = Rm = !0;
      var d = i.pending;
      d === null ? r.next = r : (r.next = d.next, d.next = r), i.pending = r;
    }
    function _M(i, r, d, m) {
      if (U1(i)) {
        var y = r.interleaved;
        y === null ? (d.next = d, zt(r)) : (d.next = y.next, y.next = d), r.interleaved = d;
      } else {
        var w = r.pending;
        w === null ? d.next = d : (d.next = w.next, w.next = d), r.pending = d;
      }
    }
    function xM(i, r, d) {
      if (Xc(d)) {
        var m = r.lanes;
        m = bs(m, i.pendingLanes);
        var y = jt(m, d);
        r.lanes = y, so(i, y);
      }
    }
    function SM(i, r, d) {
      pl(i, r);
    }
    var Vm = {
      readContext: tt,
      useCallback: cr,
      useContext: cr,
      useEffect: cr,
      useImperativeHandle: cr,
      useInsertionEffect: cr,
      useLayoutEffect: cr,
      useMemo: cr,
      useReducer: cr,
      useRef: cr,
      useState: cr,
      useDebugValue: cr,
      useDeferredValue: cr,
      useTransition: cr,
      useMutableSource: cr,
      useSyncExternalStore: cr,
      useId: cr,
      unstable_isNewReconciler: A
    }, MM = null, bM = null, EM = null, wM = null, Us = null, ns = null, Gm = null;
    {
      var o0 = function() {
        h("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      }, Vt = function() {
        h("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
      };
      MM = {
        readContext: function(i) {
          return tt(i);
        },
        useCallback: function(i, r) {
          return Oe = "useCallback", Sn(), hf(r), n0(i, r);
        },
        useContext: function(i) {
          return Oe = "useContext", Sn(), tt(i);
        },
        useEffect: function(i, r) {
          return Oe = "useEffect", Sn(), hf(r), vh(i, r);
        },
        useImperativeHandle: function(i, r, d) {
          return Oe = "useImperativeHandle", Sn(), hf(d), t0(i, r, d);
        },
        useInsertionEffect: function(i, r) {
          return Oe = "useInsertionEffect", Sn(), hf(r), $y(i, r);
        },
        useLayoutEffect: function(i, r) {
          return Oe = "useLayoutEffect", Sn(), hf(r), e0(i, r);
        },
        useMemo: function(i, r) {
          Oe = "useMemo", Sn(), hf(r);
          var d = vt.current;
          vt.current = Us;
          try {
            return i0(i, r);
          } finally {
            vt.current = d;
          }
        },
        useReducer: function(i, r, d) {
          Oe = "useReducer", Sn();
          var m = vt.current;
          vt.current = Us;
          try {
            return Yy(i, r, d);
          } finally {
            vt.current = m;
          }
        },
        useRef: function(i) {
          return Oe = "useRef", Sn(), Ky(i);
        },
        useState: function(i) {
          Oe = "useState", Sn();
          var r = vt.current;
          vt.current = Us;
          try {
            return hh(i);
          } finally {
            vt.current = r;
          }
        },
        useDebugValue: function(i, r) {
          return Oe = "useDebugValue", Sn(), void 0;
        },
        useDeferredValue: function(i) {
          return Oe = "useDeferredValue", Sn(), r0(i);
        },
        useTransition: function() {
          return Oe = "useTransition", Sn(), a0();
        },
        useMutableSource: function(i, r, d) {
          return Oe = "useMutableSource", Sn(), void 0;
        },
        useSyncExternalStore: function(i, r, d) {
          return Oe = "useSyncExternalStore", Sn(), Qy(i, r, d);
        },
        useId: function() {
          return Oe = "useId", Sn(), s0();
        },
        unstable_isNewReconciler: A
      }, bM = {
        readContext: function(i) {
          return tt(i);
        },
        useCallback: function(i, r) {
          return Oe = "useCallback", st(), n0(i, r);
        },
        useContext: function(i) {
          return Oe = "useContext", st(), tt(i);
        },
        useEffect: function(i, r) {
          return Oe = "useEffect", st(), vh(i, r);
        },
        useImperativeHandle: function(i, r, d) {
          return Oe = "useImperativeHandle", st(), t0(i, r, d);
        },
        useInsertionEffect: function(i, r) {
          return Oe = "useInsertionEffect", st(), $y(i, r);
        },
        useLayoutEffect: function(i, r) {
          return Oe = "useLayoutEffect", st(), e0(i, r);
        },
        useMemo: function(i, r) {
          Oe = "useMemo", st();
          var d = vt.current;
          vt.current = Us;
          try {
            return i0(i, r);
          } finally {
            vt.current = d;
          }
        },
        useReducer: function(i, r, d) {
          Oe = "useReducer", st();
          var m = vt.current;
          vt.current = Us;
          try {
            return Yy(i, r, d);
          } finally {
            vt.current = m;
          }
        },
        useRef: function(i) {
          return Oe = "useRef", st(), Ky(i);
        },
        useState: function(i) {
          Oe = "useState", st();
          var r = vt.current;
          vt.current = Us;
          try {
            return hh(i);
          } finally {
            vt.current = r;
          }
        },
        useDebugValue: function(i, r) {
          return Oe = "useDebugValue", st(), void 0;
        },
        useDeferredValue: function(i) {
          return Oe = "useDeferredValue", st(), r0(i);
        },
        useTransition: function() {
          return Oe = "useTransition", st(), a0();
        },
        useMutableSource: function(i, r, d) {
          return Oe = "useMutableSource", st(), void 0;
        },
        useSyncExternalStore: function(i, r, d) {
          return Oe = "useSyncExternalStore", st(), Qy(i, r, d);
        },
        useId: function() {
          return Oe = "useId", st(), s0();
        },
        unstable_isNewReconciler: A
      }, EM = {
        readContext: function(i) {
          return tt(i);
        },
        useCallback: function(i, r) {
          return Oe = "useCallback", st(), Bm(i, r);
        },
        useContext: function(i) {
          return Oe = "useContext", st(), tt(i);
        },
        useEffect: function(i, r) {
          return Oe = "useEffect", st(), Ru(i, r);
        },
        useImperativeHandle: function(i, r, d) {
          return Oe = "useImperativeHandle", st(), Im(i, r, d);
        },
        useInsertionEffect: function(i, r) {
          return Oe = "useInsertionEffect", st(), zm(i, r);
        },
        useLayoutEffect: function(i, r) {
          return Oe = "useLayoutEffect", st(), Om(i, r);
        },
        useMemo: function(i, r) {
          Oe = "useMemo", st();
          var d = vt.current;
          vt.current = ns;
          try {
            return Hm(i, r);
          } finally {
            vt.current = d;
          }
        },
        useReducer: function(i, r, d) {
          Oe = "useReducer", st();
          var m = vt.current;
          vt.current = ns;
          try {
            return Zy(i, r, d);
          } finally {
            vt.current = m;
          }
        },
        useRef: function(i) {
          return Oe = "useRef", st(), Um();
        },
        useState: function(i) {
          Oe = "useState", st();
          var r = vt.current;
          vt.current = ns;
          try {
            return Dm(i);
          } finally {
            vt.current = r;
          }
        },
        useDebugValue: function(i, r) {
          return Oe = "useDebugValue", st(), Fm();
        },
        useDeferredValue: function(i) {
          return Oe = "useDeferredValue", st(), dM(i);
        },
        useTransition: function() {
          return Oe = "useTransition", st(), pM();
        },
        useMutableSource: function(i, r, d) {
          return Oe = "useMutableSource", st(), void 0;
        },
        useSyncExternalStore: function(i, r, d) {
          return Oe = "useSyncExternalStore", st(), Lm(i, r);
        },
        useId: function() {
          return Oe = "useId", st(), km();
        },
        unstable_isNewReconciler: A
      }, wM = {
        readContext: function(i) {
          return tt(i);
        },
        useCallback: function(i, r) {
          return Oe = "useCallback", st(), Bm(i, r);
        },
        useContext: function(i) {
          return Oe = "useContext", st(), tt(i);
        },
        useEffect: function(i, r) {
          return Oe = "useEffect", st(), Ru(i, r);
        },
        useImperativeHandle: function(i, r, d) {
          return Oe = "useImperativeHandle", st(), Im(i, r, d);
        },
        useInsertionEffect: function(i, r) {
          return Oe = "useInsertionEffect", st(), zm(i, r);
        },
        useLayoutEffect: function(i, r) {
          return Oe = "useLayoutEffect", st(), Om(i, r);
        },
        useMemo: function(i, r) {
          Oe = "useMemo", st();
          var d = vt.current;
          vt.current = Gm;
          try {
            return Hm(i, r);
          } finally {
            vt.current = d;
          }
        },
        useReducer: function(i, r, d) {
          Oe = "useReducer", st();
          var m = vt.current;
          vt.current = Gm;
          try {
            return Jy(i, r, d);
          } finally {
            vt.current = m;
          }
        },
        useRef: function(i) {
          return Oe = "useRef", st(), Um();
        },
        useState: function(i) {
          Oe = "useState", st();
          var r = vt.current;
          vt.current = Gm;
          try {
            return Pm(i);
          } finally {
            vt.current = r;
          }
        },
        useDebugValue: function(i, r) {
          return Oe = "useDebugValue", st(), Fm();
        },
        useDeferredValue: function(i) {
          return Oe = "useDeferredValue", st(), hM(i);
        },
        useTransition: function() {
          return Oe = "useTransition", st(), mM();
        },
        useMutableSource: function(i, r, d) {
          return Oe = "useMutableSource", st(), void 0;
        },
        useSyncExternalStore: function(i, r, d) {
          return Oe = "useSyncExternalStore", st(), Lm(i, r);
        },
        useId: function() {
          return Oe = "useId", st(), km();
        },
        unstable_isNewReconciler: A
      }, Us = {
        readContext: function(i) {
          return o0(), tt(i);
        },
        useCallback: function(i, r) {
          return Oe = "useCallback", Vt(), Sn(), n0(i, r);
        },
        useContext: function(i) {
          return Oe = "useContext", Vt(), Sn(), tt(i);
        },
        useEffect: function(i, r) {
          return Oe = "useEffect", Vt(), Sn(), vh(i, r);
        },
        useImperativeHandle: function(i, r, d) {
          return Oe = "useImperativeHandle", Vt(), Sn(), t0(i, r, d);
        },
        useInsertionEffect: function(i, r) {
          return Oe = "useInsertionEffect", Vt(), Sn(), $y(i, r);
        },
        useLayoutEffect: function(i, r) {
          return Oe = "useLayoutEffect", Vt(), Sn(), e0(i, r);
        },
        useMemo: function(i, r) {
          Oe = "useMemo", Vt(), Sn();
          var d = vt.current;
          vt.current = Us;
          try {
            return i0(i, r);
          } finally {
            vt.current = d;
          }
        },
        useReducer: function(i, r, d) {
          Oe = "useReducer", Vt(), Sn();
          var m = vt.current;
          vt.current = Us;
          try {
            return Yy(i, r, d);
          } finally {
            vt.current = m;
          }
        },
        useRef: function(i) {
          return Oe = "useRef", Vt(), Sn(), Ky(i);
        },
        useState: function(i) {
          Oe = "useState", Vt(), Sn();
          var r = vt.current;
          vt.current = Us;
          try {
            return hh(i);
          } finally {
            vt.current = r;
          }
        },
        useDebugValue: function(i, r) {
          return Oe = "useDebugValue", Vt(), Sn(), void 0;
        },
        useDeferredValue: function(i) {
          return Oe = "useDeferredValue", Vt(), Sn(), r0(i);
        },
        useTransition: function() {
          return Oe = "useTransition", Vt(), Sn(), a0();
        },
        useMutableSource: function(i, r, d) {
          return Oe = "useMutableSource", Vt(), Sn(), void 0;
        },
        useSyncExternalStore: function(i, r, d) {
          return Oe = "useSyncExternalStore", Vt(), Sn(), Qy(i, r, d);
        },
        useId: function() {
          return Oe = "useId", Vt(), Sn(), s0();
        },
        unstable_isNewReconciler: A
      }, ns = {
        readContext: function(i) {
          return o0(), tt(i);
        },
        useCallback: function(i, r) {
          return Oe = "useCallback", Vt(), st(), Bm(i, r);
        },
        useContext: function(i) {
          return Oe = "useContext", Vt(), st(), tt(i);
        },
        useEffect: function(i, r) {
          return Oe = "useEffect", Vt(), st(), Ru(i, r);
        },
        useImperativeHandle: function(i, r, d) {
          return Oe = "useImperativeHandle", Vt(), st(), Im(i, r, d);
        },
        useInsertionEffect: function(i, r) {
          return Oe = "useInsertionEffect", Vt(), st(), zm(i, r);
        },
        useLayoutEffect: function(i, r) {
          return Oe = "useLayoutEffect", Vt(), st(), Om(i, r);
        },
        useMemo: function(i, r) {
          Oe = "useMemo", Vt(), st();
          var d = vt.current;
          vt.current = ns;
          try {
            return Hm(i, r);
          } finally {
            vt.current = d;
          }
        },
        useReducer: function(i, r, d) {
          Oe = "useReducer", Vt(), st();
          var m = vt.current;
          vt.current = ns;
          try {
            return Zy(i, r, d);
          } finally {
            vt.current = m;
          }
        },
        useRef: function(i) {
          return Oe = "useRef", Vt(), st(), Um();
        },
        useState: function(i) {
          Oe = "useState", Vt(), st();
          var r = vt.current;
          vt.current = ns;
          try {
            return Dm(i);
          } finally {
            vt.current = r;
          }
        },
        useDebugValue: function(i, r) {
          return Oe = "useDebugValue", Vt(), st(), Fm();
        },
        useDeferredValue: function(i) {
          return Oe = "useDeferredValue", Vt(), st(), dM(i);
        },
        useTransition: function() {
          return Oe = "useTransition", Vt(), st(), pM();
        },
        useMutableSource: function(i, r, d) {
          return Oe = "useMutableSource", Vt(), st(), void 0;
        },
        useSyncExternalStore: function(i, r, d) {
          return Oe = "useSyncExternalStore", Vt(), st(), Lm(i, r);
        },
        useId: function() {
          return Oe = "useId", Vt(), st(), km();
        },
        unstable_isNewReconciler: A
      }, Gm = {
        readContext: function(i) {
          return o0(), tt(i);
        },
        useCallback: function(i, r) {
          return Oe = "useCallback", Vt(), st(), Bm(i, r);
        },
        useContext: function(i) {
          return Oe = "useContext", Vt(), st(), tt(i);
        },
        useEffect: function(i, r) {
          return Oe = "useEffect", Vt(), st(), Ru(i, r);
        },
        useImperativeHandle: function(i, r, d) {
          return Oe = "useImperativeHandle", Vt(), st(), Im(i, r, d);
        },
        useInsertionEffect: function(i, r) {
          return Oe = "useInsertionEffect", Vt(), st(), zm(i, r);
        },
        useLayoutEffect: function(i, r) {
          return Oe = "useLayoutEffect", Vt(), st(), Om(i, r);
        },
        useMemo: function(i, r) {
          Oe = "useMemo", Vt(), st();
          var d = vt.current;
          vt.current = ns;
          try {
            return Hm(i, r);
          } finally {
            vt.current = d;
          }
        },
        useReducer: function(i, r, d) {
          Oe = "useReducer", Vt(), st();
          var m = vt.current;
          vt.current = ns;
          try {
            return Jy(i, r, d);
          } finally {
            vt.current = m;
          }
        },
        useRef: function(i) {
          return Oe = "useRef", Vt(), st(), Um();
        },
        useState: function(i) {
          Oe = "useState", Vt(), st();
          var r = vt.current;
          vt.current = ns;
          try {
            return Pm(i);
          } finally {
            vt.current = r;
          }
        },
        useDebugValue: function(i, r) {
          return Oe = "useDebugValue", Vt(), st(), Fm();
        },
        useDeferredValue: function(i) {
          return Oe = "useDeferredValue", Vt(), st(), hM(i);
        },
        useTransition: function() {
          return Oe = "useTransition", Vt(), st(), mM();
        },
        useMutableSource: function(i, r, d) {
          return Oe = "useMutableSource", Vt(), st(), void 0;
        },
        useSyncExternalStore: function(i, r, d) {
          return Oe = "useSyncExternalStore", Vt(), st(), Lm(i, r);
        },
        useId: function() {
          return Oe = "useId", Vt(), st(), km();
        },
        unstable_isNewReconciler: A
      };
    }
    var wl = a.unstable_now, TM = 0, Wm = -1, gh = -1, qm = -1, l0 = !1, Xm = !1;
    function CM() {
      return l0;
    }
    function MA() {
      Xm = !0;
    }
    function bA() {
      l0 = !1, Xm = !1;
    }
    function EA() {
      l0 = Xm, Xm = !1;
    }
    function AM() {
      return TM;
    }
    function RM() {
      TM = wl();
    }
    function u0(i) {
      gh = wl(), i.actualStartTime < 0 && (i.actualStartTime = wl());
    }
    function LM(i) {
      gh = -1;
    }
    function jm(i, r) {
      if (gh >= 0) {
        var d = wl() - gh;
        i.actualDuration += d, r && (i.selfBaseDuration = d), gh = -1;
      }
    }
    function Oa(i) {
      if (Wm >= 0) {
        var r = wl() - Wm;
        Wm = -1;
        for (var d = i.return; d !== null; ) {
          switch (d.tag) {
            case I:
              var m = d.stateNode;
              m.effectDuration += r;
              return;
            case ae:
              var y = d.stateNode;
              y.effectDuration += r;
              return;
          }
          d = d.return;
        }
      }
    }
    function c0(i) {
      if (qm >= 0) {
        var r = wl() - qm;
        qm = -1;
        for (var d = i.return; d !== null; ) {
          switch (d.tag) {
            case I:
              var m = d.stateNode;
              m !== null && (m.passiveEffectDuration += r);
              return;
            case ae:
              var y = d.stateNode;
              y !== null && (y.passiveEffectDuration += r);
              return;
          }
          d = d.return;
        }
      }
    }
    function Ia() {
      Wm = wl();
    }
    function f0() {
      qm = wl();
    }
    function d0(i) {
      for (var r = i.child; r; )
        i.actualDuration += r.actualDuration, r = r.sibling;
    }
    function Ym(i, r) {
      return {
        value: i,
        source: r,
        stack: gm(r)
      };
    }
    function wA(i, r) {
      return !0;
    }
    function h0(i, r) {
      try {
        var d = wA(i, r);
        if (d === !1)
          return;
        var m = r.value, y = r.source, w = r.stack, D = w !== null ? w : "";
        if (m != null && m._suppressLogging) {
          if (i.tag === G)
            return;
          console.error(m);
        }
        var N = y ? rt(y) : null, B = N ? "The above error occurred in the <" + N + "> component:" : "The above error occurred in one of your React components:", J;
        if (i.tag === I)
          J = `Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.`;
        else {
          var re = rt(i) || "Anonymous";
          J = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + re + ".");
        }
        var he = B + `
` + D + `

` + ("" + J);
        console.error(he);
      } catch (Ce) {
        setTimeout(function() {
          throw Ce;
        });
      }
    }
    var TA = typeof WeakMap == "function" ? WeakMap : Map;
    function DM(i, r, d) {
      var m = It(zn, d);
      m.tag = ge, m.payload = {
        element: null
      };
      var y = r.value;
      return m.callback = function() {
        P3(y), h0(i, r);
      }, m;
    }
    function p0(i, r, d) {
      var m = It(zn, d);
      m.tag = ge;
      var y = i.type.getDerivedStateFromError;
      if (typeof y == "function") {
        var w = r.value;
        m.payload = function() {
          return y(w);
        }, m.callback = function() {
          Q1(i), h0(i, r);
        };
      }
      var D = i.stateNode;
      return D !== null && typeof D.componentDidCatch == "function" && (m.callback = function() {
        Q1(i), h0(i, r), typeof y != "function" && L3(this);
        var B = r.value, J = r.stack;
        this.componentDidCatch(B, {
          componentStack: J !== null ? J : ""
        }), typeof y != "function" && (Jn(i.lanes, sn) || h("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", rt(i) || "Unknown"));
      }), m;
    }
    function PM(i, r, d) {
      var m = i.pingCache, y;
      if (m === null ? (m = i.pingCache = new TA(), y = /* @__PURE__ */ new Set(), m.set(r, y)) : (y = m.get(r), y === void 0 && (y = /* @__PURE__ */ new Set(), m.set(r, y))), !y.has(d)) {
        y.add(d);
        var w = U3.bind(null, i, r, d);
        rr && Uh(i, d), r.then(w, w);
      }
    }
    function CA(i, r, d, m) {
      var y = i.updateQueue;
      if (y === null) {
        var w = /* @__PURE__ */ new Set();
        w.add(d), i.updateQueue = w;
      } else
        y.add(d);
    }
    function AA(i, r) {
      var d = i.tag;
      if ((i.mode & En) === kt && (d === k || d === W || d === ue)) {
        var m = i.alternate;
        m ? (i.updateQueue = m.updateQueue, i.memoizedState = m.memoizedState, i.lanes = m.lanes) : (i.updateQueue = null, i.memoizedState = null);
      }
    }
    function UM(i) {
      var r = i;
      do {
        if (r.tag === ne && dA(r))
          return r;
        r = r.return;
      } while (r !== null);
      return null;
    }
    function NM(i, r, d, m, y) {
      if ((i.mode & En) === kt) {
        if (i === r)
          i.flags |= K;
        else {
          if (i.flags |= Gt, d.flags |= ce, d.flags &= ~(q | ee), Zl && E) {
            var w = i.alternate;
            if (w === null) {
              var D = i.child, N = D.child;
              if (N !== null) {
                var B = N.memoizedProps.children, J = Sd("hidden", B);
                N.pendingProps = J, N.memoizedProps = J;
              }
            }
          }
          if (d.tag === G) {
            var re = d.alternate;
            if (re === null)
              d.tag = ye;
            else {
              var he = It(zn, sn);
              he.tag = Yi, $t(d, he);
            }
          }
          d.lanes = jt(d.lanes, sn);
        }
        return i;
      }
      return i.flags |= K, i.lanes = y, i;
    }
    function RA(i, r, d, m, y) {
      if (d.flags |= ee, rr && Uh(i, y), m !== null && typeof m == "object" && typeof m.then == "function") {
        var w = m;
        AA(d);
        var D = UM(r);
        if (D !== null) {
          D.flags &= ~ln, NM(D, r, d, i, y), D.mode & En && PM(i, w, y), CA(D, i, w);
          return;
        } else {
          if (!Bd(y)) {
            PM(i, w, y), j0();
            return;
          }
          var N = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
          m = N;
        }
      } else if (lr() && d.mode & En) {
        eA();
        var B = UM(r);
        if (B !== null) {
          (B.flags & K) === X && (B.flags |= ln), NM(B, r, d, i, y), Dy(m);
          return;
        }
      }
      M3(m), m = Ym(m, d);
      var J = r;
      do {
        switch (J.tag) {
          case I: {
            var re = m;
            J.flags |= K;
            var he = al(y);
            J.lanes = jt(J.lanes, he);
            var Ce = DM(J, re, he);
            hn(J, Ce);
            return;
          }
          case G:
            var Ue = m, Xe = J.type, Je = J.stateNode;
            if ((J.flags & Gt) === X && (typeof Xe.getDerivedStateFromError == "function" || Je !== null && typeof Je.componentDidCatch == "function" && !V1(Je))) {
              J.flags |= K;
              var Ut = al(y);
              J.lanes = jt(J.lanes, Ut);
              var Zt = p0(J, Ue, Ut);
              hn(J, Zt);
              return;
            }
            break;
        }
        J = J.return;
      } while (J !== null);
    }
    function LA() {
      return null;
    }
    function Ns(i) {
      i.flags |= He;
    }
    function zM(i) {
      i.flags |= kn, i.flags |= at;
    }
    function OM(i, r) {
      var d = i !== null && i.child === r.child;
      if (d)
        return !0;
      if ((r.flags & tn) !== X)
        return !1;
      for (var m = r.child; m !== null; ) {
        if ((m.flags & Ht) !== X || (m.subtreeFlags & Ht) !== X)
          return !1;
        m = m.sibling;
      }
      return !0;
    }
    var yh, _h, Zm, Jm;
    if (Kr)
      yh = function(i, r, d, m) {
        for (var y = r.child; y !== null; ) {
          if (y.tag === te || y.tag === $)
            Fo(i, y.stateNode);
          else if (y.tag !== Q) {
            if (y.child !== null) {
              y.child.return = y, y = y.child;
              continue;
            }
          }
          if (y === r)
            return;
          for (; y.sibling === null; ) {
            if (y.return === null || y.return === r)
              return;
            y = y.return;
          }
          y.sibling.return = y.return, y = y.sibling;
        }
      }, _h = function(i, r) {
      }, Zm = function(i, r, d, m, y) {
        var w = i.memoizedProps;
        if (w !== m) {
          var D = r.stateNode, N = uh(), B = Dr(D, d, w, m, y, N);
          r.updateQueue = B, B && Ns(r);
        }
      }, Jm = function(i, r, d, m) {
        d !== m && Ns(r);
      };
    else if (Zl) {
      yh = function(i, r, d, m) {
        for (var y = r.child; y !== null; ) {
          if (y.tag === te) {
            var w = y.stateNode;
            if (d && m) {
              var D = y.memoizedProps, N = y.type;
              w = Md(w, N, D, y);
            }
            Fo(i, w);
          } else if (y.tag === $) {
            var B = y.stateNode;
            if (d && m) {
              var J = y.memoizedProps;
              B = xc(B, J, y);
            }
            Fo(i, B);
          } else if (y.tag !== Q) {
            if (y.tag === dt && y.memoizedState !== null) {
              var re = y.child;
              re !== null && (re.return = y), yh(i, y, !0, !0);
            } else if (y.child !== null) {
              y.child.return = y, y = y.child;
              continue;
            }
          }
          if (y = y, y === r)
            return;
          for (; y.sibling === null; ) {
            if (y.return === null || y.return === r)
              return;
            y = y.return;
          }
          y.sibling.return = y.return, y = y.sibling;
        }
      };
      var IM = function(i, r, d, m) {
        for (var y = r.child; y !== null; ) {
          if (y.tag === te) {
            var w = y.stateNode;
            if (d && m) {
              var D = y.memoizedProps, N = y.type;
              w = Md(w, N, D, y);
            }
            Kl(i, w);
          } else if (y.tag === $) {
            var B = y.stateNode;
            if (d && m) {
              var J = y.memoizedProps;
              B = xc(B, J, y);
            }
            Kl(i, B);
          } else if (y.tag !== Q) {
            if (y.tag === dt && y.memoizedState !== null) {
              var re = y.child;
              re !== null && (re.return = y), IM(i, y, !0, !0);
            } else if (y.child !== null) {
              y.child.return = y, y = y.child;
              continue;
            }
          }
          if (y = y, y === r)
            return;
          for (; y.sibling === null; ) {
            if (y.return === null || y.return === r)
              return;
            y = y.return;
          }
          y.sibling.return = y.return, y = y.sibling;
        }
      };
      _h = function(i, r) {
        var d = r.stateNode, m = OM(i, r);
        if (!m) {
          var y = d.containerInfo, w = Ql(y);
          IM(w, r, !1, !1), d.pendingChildren = w, Ns(r), Ho(y, w);
        }
      }, Zm = function(i, r, d, m, y) {
        var w = i.stateNode, D = i.memoizedProps, N = OM(i, r);
        if (N && D === m) {
          r.stateNode = w;
          return;
        }
        var B = r.stateNode, J = uh(), re = null;
        if (D !== m && (re = Dr(B, d, D, m, y, J)), N && re === null) {
          r.stateNode = w;
          return;
        }
        var he = $r(w, re, d, D, m, r, N, B);
        hd(he, d, m, y, J) && Ns(r), r.stateNode = he, N ? Ns(r) : yh(he, r, !1, !1);
      }, Jm = function(i, r, d, m) {
        if (d !== m) {
          var y = Iy(), w = uh();
          r.stateNode = qp(m, y, w, r), Ns(r);
        } else
          r.stateNode = i.stateNode;
      };
    } else
      _h = function(i, r) {
      }, Zm = function(i, r, d, m, y) {
      }, Jm = function(i, r, d, m) {
      };
    function xh(i, r) {
      if (!lr())
        switch (i.tailMode) {
          case "hidden": {
            for (var d = i.tail, m = null; d !== null; )
              d.alternate !== null && (m = d), d = d.sibling;
            m === null ? i.tail = null : m.sibling = null;
            break;
          }
          case "collapsed": {
            for (var y = i.tail, w = null; y !== null; )
              y.alternate !== null && (w = y), y = y.sibling;
            w === null ? !r && i.tail !== null ? i.tail.sibling = null : i.tail = null : w.sibling = null;
            break;
          }
        }
    }
    function Qi(i) {
      var r = i.alternate !== null && i.alternate.child === i.child, d = We, m = X;
      if (r) {
        if ((i.mode & pn) !== kt) {
          for (var B = i.selfBaseDuration, J = i.child; J !== null; )
            d = jt(d, jt(J.lanes, J.childLanes)), m |= J.subtreeFlags & bn, m |= J.flags & bn, B += J.treeBaseDuration, J = J.sibling;
          i.treeBaseDuration = B;
        } else
          for (var re = i.child; re !== null; )
            d = jt(d, jt(re.lanes, re.childLanes)), m |= re.subtreeFlags & bn, m |= re.flags & bn, re.return = i, re = re.sibling;
        i.subtreeFlags |= m;
      } else {
        if ((i.mode & pn) !== kt) {
          for (var y = i.actualDuration, w = i.selfBaseDuration, D = i.child; D !== null; )
            d = jt(d, jt(D.lanes, D.childLanes)), m |= D.subtreeFlags, m |= D.flags, y += D.actualDuration, w += D.treeBaseDuration, D = D.sibling;
          i.actualDuration = y, i.treeBaseDuration = w;
        } else
          for (var N = i.child; N !== null; )
            d = jt(d, jt(N.lanes, N.childLanes)), m |= N.subtreeFlags, m |= N.flags, N.return = i, N = N.sibling;
        i.subtreeFlags |= m;
      }
      return i.childLanes = d, r;
    }
    function FM(i, r, d) {
      var m = r.pendingProps;
      switch (Ty(r), r.tag) {
        case z:
        case pe:
        case ue:
        case k:
        case W:
        case ie:
        case fe:
        case ae:
        case Ee:
        case Se:
          return Qi(r), null;
        case G: {
          var y = r.type;
          return Or(y) && Jo(r), Qi(r), null;
        }
        case I: {
          var w = r.stateNode;
          if (lf(r), su(r), Gy(), w.pendingContext && (w.context = w.pendingContext, w.pendingContext = null), i === null || i.child === null) {
            var D = ah(r);
            if (D)
              Ns(r);
            else if (i !== null) {
              var N = i.memoizedState;
              // Check if this is a client root
              (!N.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
              (r.flags & ln) !== X) && (r.flags |= oi, ZS());
            }
          }
          return _h(i, r), Qi(r), null;
        }
        case te: {
          By(r);
          var B = Iy(), J = r.type;
          if (i !== null && r.stateNode != null)
            Zm(i, r, J, m, B), i.ref !== r.ref && zM(r);
          else {
            if (!m) {
              if (r.stateNode === null)
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              return Qi(r), null;
            }
            var re = uh(), he = ah(r);
            if (he)
              iA(r, B, re) && Ns(r);
            else {
              var Ce = Wp(J, m, B, re, r);
              yh(Ce, r, !1, !1), r.stateNode = Ce, hd(Ce, J, m, B, re) && Ns(r);
            }
            r.ref !== null && zM(r);
          }
          return Qi(r), null;
        }
        case $: {
          var Ue = m;
          if (i && r.stateNode != null) {
            var Xe = i.memoizedProps;
            Jm(i, r, Xe, Ue);
          } else {
            if (typeof Ue != "string" && r.stateNode === null)
              throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            var Je = Iy(), Ut = uh(), Zt = ah(r);
            Zt ? rA(r) && Ns(r) : r.stateNode = qp(Ue, Je, Ut, r);
          }
          return Qi(r), null;
        }
        case ne: {
          cf(r);
          var Ft = r.memoizedState;
          {
            if (oA() && (r.mode & En) !== kt && (r.flags & Gt) === X)
              return YS(r), sf(), r.flags |= ln | ee | K, r;
            if (Ft !== null && Ft.dehydrated !== null) {
              var Wn = ah(r);
              if (i === null) {
                if (!Wn)
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                if (aA(r), Qi(r), (r.mode & pn) !== kt) {
                  var qn = Ft !== null;
                  if (qn) {
                    var _e = r.child;
                    _e !== null && (r.treeBaseDuration -= _e.treeBaseDuration);
                  }
                }
                return null;
              } else {
                if (sf(), (r.flags & Gt) === X && (r.memoizedState = null), r.flags |= He, Qi(r), (r.mode & pn) !== kt) {
                  var ze = Ft !== null;
                  if (ze) {
                    var ve = r.child;
                    ve !== null && (r.treeBaseDuration -= ve.treeBaseDuration);
                  }
                }
                return null;
              }
            }
            ZS();
          }
          if ((r.flags & Gt) !== X)
            return r.lanes = d, (r.mode & pn) !== kt && d0(r), r;
          var et = Ft !== null, Pt = !1;
          if (i === null)
            ah(r);
          else {
            var gt = i.memoizedState;
            Pt = gt !== null;
          }
          if (et && !Pt) {
            var un = r.child;
            if (un.flags |= Rr, (r.mode & En) !== kt) {
              var wn = i === null && (r.memoizedProps.unstable_avoidThisFallback !== !0 || !L);
              wn || Hy(ts.current, nM) ? S3() : j0();
            }
          }
          var Bn = r.updateQueue;
          if (Bn !== null && (r.flags |= He), Qi(r), (r.mode & pn) !== kt && et) {
            var Tn = r.child;
            Tn !== null && (r.treeBaseDuration -= Tn.treeBaseDuration);
          }
          return null;
        }
        case Q:
          return lf(r), _h(i, r), i === null && Jl(r.stateNode.containerInfo), Qi(r), null;
        case Te:
          var ii = r.type._context;
          return P(ii, r), Qi(r), null;
        case ye: {
          var yn = r.type;
          return Or(yn) && Jo(r), Qi(r), null;
        }
        case Be: {
          cf(r);
          var on = r.memoizedState;
          if (on === null)
            return Qi(r), null;
          var Si = (r.flags & Gt) !== X, ri = on.rendering;
          if (ri === null)
            if (Si)
              xh(on, !1);
            else {
              var Ha = b3() && (i === null || (i.flags & Gt) === X);
              if (!Ha)
                for (var er = r.child; er !== null; ) {
                  var ca = Am(er);
                  if (ca !== null) {
                    Si = !0, r.flags |= Gt, xh(on, !1);
                    var fa = ca.updateQueue;
                    return fa !== null && (r.updateQueue = fa, r.flags |= He), r.subtreeFlags = X, uA(r, d), Ml(r, ky(ts.current, ch)), r.child;
                  }
                  er = er.sibling;
                }
              on.tail !== null && Qn() > P1() && (r.flags |= Gt, Si = !0, xh(on, !1), r.lanes = nl);
            }
          else {
            if (!Si) {
              var Is = Am(ri);
              if (Is !== null) {
                r.flags |= Gt, Si = !0;
                var Mf = Is.updateQueue;
                if (Mf !== null && (r.updateQueue = Mf, r.flags |= He), xh(on, !0), on.tail === null && on.tailMode === "hidden" && !ri.alternate && !lr())
                  return Qi(r), null;
              } else
                // The time it took to render last row is greater than the remaining
                // time we have to render. So rendering one more row would likely
                // exceed it.
                Qn() * 2 - on.renderingStartTime > P1() && d !== Rn && (r.flags |= Gt, Si = !0, xh(on, !1), r.lanes = nl);
            }
            if (on.isBackwards)
              ri.sibling = r.child, r.child = ri;
            else {
              var bf = on.last;
              bf !== null ? bf.sibling = ri : r.child = ri, on.last = ri;
            }
          }
          if (on.tail !== null) {
            var da = on.tail;
            on.rendering = da, on.tail = da.sibling, on.renderingStartTime = Qn(), da.sibling = null;
            var Ou = ts.current;
            return Si ? Ou = ky(Ou, ch) : Ou = uf(Ou), Ml(r, Ou), da;
          }
          return Qi(r), null;
        }
        case de:
          break;
        case dt:
        case _t: {
          X0(r);
          var f_ = r.memoizedState, Eb = f_ !== null;
          if (i !== null) {
            var S2 = i.memoizedState, M2 = S2 !== null;
            M2 !== Eb && // LegacyHidden doesn't do any hiding — it only pre-renders.
            !b && (r.flags |= Rr);
          }
          return !Eb || (r.mode & En) === kt ? Qi(r) : Jn(zs, Rn) && (Qi(r), Kr && r.subtreeFlags & (Le | He) && (r.flags |= Rr)), null;
        }
        case qe:
          return null;
        case ot:
          return null;
      }
      throw new Error("Unknown unit of work tag (" + r.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    var Sh = s.ReactCurrentOwner, is = !1, m0, Mh, v0, g0, y0, Lu, _0, Qm;
    m0 = {}, Mh = {}, v0 = {}, g0 = {}, y0 = {}, Lu = !1, _0 = {}, Qm = {};
    function br(i, r, d, m) {
      i === null ? r.child = $S(r, null, d, m) : r.child = of(r, i.child, d, m);
    }
    function DA(i, r, d, m) {
      r.child = of(r, i.child, null, m), r.child = of(r, null, d, m);
    }
    function BM(i, r, d, m, y) {
      if (r.type !== r.elementType) {
        var w = d.propTypes;
        w && yr(
          w,
          m,
          // Resolved props
          "prop",
          Pe(d)
        );
      }
      var D = d.render, N = r.ref, B, J;
      Ye(r, y), La(r);
      {
        if (Sh.current = r, Da(!0), B = pf(i, r, D, m, N, y), J = mf(), r.mode & Zn) {
          dn(!0);
          try {
            B = pf(i, r, D, m, N, y), J = mf();
          } finally {
            dn(!1);
          }
        }
        Da(!1);
      }
      return Ka(), i !== null && !is ? (iM(i, r, y), yo(i, r, y)) : (lr() && J && wy(r), r.flags |= be, br(i, r, B, y), r.child);
    }
    function HM(i, r, d, m, y) {
      if (i === null) {
        var w = d.type;
        if (J3(w) && d.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
        d.defaultProps === void 0) {
          var D = w;
          return D = Sf(w), r.tag = ue, r.type = D, M0(r, w), kM(i, r, D, m, y);
        }
        {
          var N = w.propTypes;
          N && yr(
            N,
            m,
            // Resolved props
            "prop",
            Pe(w)
          );
        }
        var B = i_(d.type, null, m, r, r.mode, y);
        return B.ref = r.ref, B.return = r, r.child = B, B;
      }
      {
        var J = d.type, re = J.propTypes;
        re && yr(
          re,
          m,
          // Resolved props
          "prop",
          Pe(J)
        );
      }
      var he = i.child, Ce = T0(i, y);
      if (!Ce) {
        var Ue = he.memoizedProps, Xe = d.compare;
        if (Xe = Xe !== null ? Xe : uo, Xe(Ue, m) && i.ref === r.ref)
          return yo(i, r, y);
      }
      r.flags |= be;
      var Je = zu(he, m);
      return Je.ref = r.ref, Je.return = r, r.child = Je, Je;
    }
    function kM(i, r, d, m, y) {
      if (r.type !== r.elementType) {
        var w = r.elementType;
        if (w.$$typeof === H) {
          var D = w, N = D._payload, B = D._init;
          try {
            w = B(N);
          } catch {
            w = null;
          }
          var J = w && w.propTypes;
          J && yr(
            J,
            m,
            // Resolved (SimpleMemoComponent has no defaultProps)
            "prop",
            Pe(w)
          );
        }
      }
      if (i !== null) {
        var re = i.memoizedProps;
        if (uo(re, m) && i.ref === r.ref && // Prevent bailout if the implementation changed due to hot reload.
        r.type === i.type)
          if (is = !1, T0(i, y))
            (i.flags & ce) !== X && (is = !0);
          else
            return r.lanes = i.lanes, yo(i, r, y);
      }
      return x0(i, r, d, m, y);
    }
    function VM(i, r, d) {
      var m = r.pendingProps, y = m.children, w = i !== null ? i.memoizedState : null;
      if (m.mode === "hidden" || b)
        if ((r.mode & En) === kt) {
          var D = {
            baseLanes: We,
            cachePool: null
          };
          r.memoizedState = D, bv(r, d);
        } else if (Jn(d, Rn)) {
          var he = {
            baseLanes: We,
            cachePool: null
          };
          r.memoizedState = he;
          var Ce = w !== null ? w.baseLanes : d;
          bv(r, Ce);
        } else {
          var N = null, B;
          if (w !== null) {
            var J = w.baseLanes;
            B = jt(J, d);
          } else
            B = d;
          r.lanes = r.childLanes = Rn;
          var re = {
            baseLanes: B,
            cachePool: N
          };
          return r.memoizedState = re, r.updateQueue = null, bv(r, B), null;
        }
      else {
        var Ue;
        w !== null ? (Ue = jt(w.baseLanes, d), r.memoizedState = null) : Ue = d, bv(r, Ue);
      }
      return br(i, r, y, d), r.child;
    }
    function PA(i, r, d) {
      var m = r.pendingProps;
      return br(i, r, m, d), r.child;
    }
    function UA(i, r, d) {
      var m = r.pendingProps.children;
      return br(i, r, m, d), r.child;
    }
    function NA(i, r, d) {
      {
        r.flags |= He;
        {
          var m = r.stateNode;
          m.effectDuration = 0, m.passiveEffectDuration = 0;
        }
      }
      var y = r.pendingProps, w = y.children;
      return br(i, r, w, d), r.child;
    }
    function GM(i, r) {
      var d = r.ref;
      (i === null && d !== null || i !== null && i.ref !== d) && (r.flags |= kn, r.flags |= at);
    }
    function x0(i, r, d, m, y) {
      if (r.type !== r.elementType) {
        var w = d.propTypes;
        w && yr(
          w,
          m,
          // Resolved props
          "prop",
          Pe(d)
        );
      }
      var D;
      {
        var N = Ea(r, d, !0);
        D = Zo(r, N);
      }
      var B, J;
      Ye(r, y), La(r);
      {
        if (Sh.current = r, Da(!0), B = pf(i, r, d, m, D, y), J = mf(), r.mode & Zn) {
          dn(!0);
          try {
            B = pf(i, r, d, m, D, y), J = mf();
          } finally {
            dn(!1);
          }
        }
        Da(!1);
      }
      return Ka(), i !== null && !is ? (iM(i, r, y), yo(i, r, y)) : (lr() && J && wy(r), r.flags |= be, br(i, r, B, y), r.child);
    }
    function WM(i, r, d, m, y) {
      {
        switch (sb(r)) {
          case !1: {
            var w = r.stateNode, D = r.type, N = new D(r.memoizedProps, w.context), B = N.state;
            w.updater.enqueueSetState(w, B, null);
            break;
          }
          case !0: {
            r.flags |= Gt, r.flags |= K;
            var J = new Error("Simulated error coming from DevTools"), re = al(y);
            r.lanes = jt(r.lanes, re);
            var he = p0(r, Ym(J, r), re);
            hn(r, he);
            break;
          }
        }
        if (r.type !== r.elementType) {
          var Ce = d.propTypes;
          Ce && yr(
            Ce,
            m,
            // Resolved props
            "prop",
            Pe(d)
          );
        }
      }
      var Ue;
      Or(d) ? (Ue = !0, Ta(r)) : Ue = !1, Ye(r, y);
      var Xe = r.stateNode, Je;
      Xe === null ? (i !== null && (i.alternate = null, r.alternate = null, r.flags |= Le), HS(r, d, m), Ey(r, d, m, y), Je = !0) : i === null ? Je = qC(r, d, m, y) : Je = XC(i, r, d, m, y);
      var Ut = S0(i, r, d, Je, Ue, y);
      {
        var Zt = r.stateNode;
        Je && Zt.props !== m && (Lu || h("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", rt(r) || "a component"), Lu = !0);
      }
      return Ut;
    }
    function S0(i, r, d, m, y, w) {
      GM(i, r);
      var D = (r.flags & Gt) !== X;
      if (!m && !D)
        return y && ou(r, d, !1), yo(i, r, w);
      var N = r.stateNode;
      Sh.current = r;
      var B;
      if (D && typeof d.getDerivedStateFromError != "function")
        B = null, LM();
      else {
        La(r);
        {
          if (Da(!0), B = N.render(), r.mode & Zn) {
            dn(!0);
            try {
              N.render();
            } finally {
              dn(!1);
            }
          }
          Da(!1);
        }
        Ka();
      }
      return r.flags |= be, i !== null && D ? DA(i, r, B, w) : br(i, r, B, w), r.memoizedState = N.state, y && ou(r, d, !0), r.child;
    }
    function qM(i) {
      var r = i.stateNode;
      r.pendingContext ? wa(i, r.pendingContext, r.pendingContext !== r.context) : r.context && wa(i, r.context, !1), Fy(i, r.containerInfo);
    }
    function zA(i, r, d) {
      if (qM(r), i === null)
        throw new Error("Should have a current fiber. This is a bug in React.");
      var m = r.pendingProps, y = r.memoizedState, w = y.element;
      Yt(i, r), nf(r, m, null, d);
      var D = r.memoizedState;
      r.stateNode;
      var N = D.element;
      if (ji && y.isDehydrated) {
        var B = {
          element: N,
          isDehydrated: !1,
          cache: D.cache,
          transitions: D.transitions
        }, J = r.updateQueue;
        if (J.baseState = B, r.memoizedState = B, r.flags & ln) {
          var re = new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.");
          return XM(i, r, N, d, re);
        } else if (N !== w) {
          var he = new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering.");
          return XM(i, r, N, d, he);
        } else {
          tA(r);
          var Ce = $S(r, null, N, d);
          r.child = Ce;
          for (var Ue = Ce; Ue; )
            Ue.flags = Ue.flags & ~Le | wi, Ue = Ue.sibling;
        }
      } else {
        if (sf(), N === w)
          return yo(i, r, d);
        br(i, r, N, d);
      }
      return r.child;
    }
    function XM(i, r, d, m, y) {
      return sf(), Dy(y), r.flags |= ln, br(i, r, d, m), r.child;
    }
    function OA(i, r, d) {
      eM(r), i === null && Ly(r);
      var m = r.type, y = r.pendingProps, w = i !== null ? i.memoizedProps : null, D = y.children, N = pd(m, y);
      return N ? D = null : w !== null && pd(m, w) && (r.flags |= mn), GM(i, r), br(i, r, D, d), r.child;
    }
    function IA(i, r) {
      return i === null && Ly(r), null;
    }
    function FA(i, r, d, m) {
      i !== null && (i.alternate = null, r.alternate = null, r.flags |= Le);
      var y = r.pendingProps, w = d, D = w._payload, N = w._init, B = N(D);
      r.type = B;
      var J = r.tag = Q3(B), re = Vr(B, y), he;
      switch (J) {
        case k:
          return M0(r, B), r.type = B = Sf(B), he = x0(null, r, B, re, m), he;
        case G:
          return r.type = B = Q0(B), he = WM(null, r, B, re, m), he;
        case W:
          return r.type = B = K0(B), he = BM(null, r, B, re, m), he;
        case Se: {
          if (r.type !== r.elementType) {
            var Ce = B.propTypes;
            Ce && yr(
              Ce,
              re,
              // Resolved for outer only
              "prop",
              Pe(B)
            );
          }
          return he = HM(
            null,
            r,
            B,
            Vr(B.type, re),
            // The inner type can have defaults too
            m
          ), he;
        }
      }
      var Ue = "";
      throw B !== null && typeof B == "object" && B.$$typeof === H && (Ue = " Did you wrap a component in React.lazy() more than once?"), new Error("Element type is invalid. Received a promise that resolves to: " + B + ". " + ("Lazy element type must resolve to a class or function." + Ue));
    }
    function BA(i, r, d, m, y) {
      i !== null && (i.alternate = null, r.alternate = null, r.flags |= Le), r.tag = G;
      var w;
      return Or(d) ? (w = !0, Ta(r)) : w = !1, Ye(r, y), HS(r, d, m), Ey(r, d, m, y), S0(null, r, d, !0, w, y);
    }
    function HA(i, r, d, m) {
      i !== null && (i.alternate = null, r.alternate = null, r.flags |= Le);
      var y = r.pendingProps, w;
      {
        var D = Ea(r, d, !1);
        w = Zo(r, D);
      }
      Ye(r, m);
      var N, B;
      La(r);
      {
        if (d.prototype && typeof d.prototype.render == "function") {
          var J = Pe(d) || "Unknown";
          m0[J] || (h("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", J, J), m0[J] = !0);
        }
        r.mode & Zn && kr.recordLegacyContextWarning(r, null), Da(!0), Sh.current = r, N = pf(null, r, d, y, w, m), B = mf(), Da(!1);
      }
      if (Ka(), r.flags |= be, typeof N == "object" && N !== null && typeof N.render == "function" && N.$$typeof === void 0) {
        var re = Pe(d) || "Unknown";
        Mh[re] || (h("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", re, re, re), Mh[re] = !0);
      }
      if (
        // Run these checks in production only if the flag is off.
        // Eventually we'll delete this branch altogether.
        typeof N == "object" && N !== null && typeof N.render == "function" && N.$$typeof === void 0
      ) {
        {
          var he = Pe(d) || "Unknown";
          Mh[he] || (h("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", he, he, he), Mh[he] = !0);
        }
        r.tag = G, r.memoizedState = null, r.updateQueue = null;
        var Ce = !1;
        return Or(d) ? (Ce = !0, Ta(r)) : Ce = !1, r.memoizedState = N.state !== null && N.state !== void 0 ? N.state : null, At(r), BS(r, N), Ey(r, d, y, m), S0(null, r, d, !0, Ce, m);
      } else {
        if (r.tag = k, r.mode & Zn) {
          dn(!0);
          try {
            N = pf(null, r, d, y, w, m), B = mf();
          } finally {
            dn(!1);
          }
        }
        return lr() && B && wy(r), br(null, r, N, m), M0(r, d), r.child;
      }
    }
    function M0(i, r) {
      {
        if (r && r.childContextTypes && h("%s(...): childContextTypes cannot be defined on a function component.", r.displayName || r.name || "Component"), i.ref !== null) {
          var d = "", m = cy();
          m && (d += `

Check the render method of \`` + m + "`.");
          var y = m || "", w = i._debugSource;
          w && (y = w.fileName + ":" + w.lineNumber), y0[y] || (y0[y] = !0, h("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", d));
        }
        if (typeof r.getDerivedStateFromProps == "function") {
          var D = Pe(r) || "Unknown";
          g0[D] || (h("%s: Function components do not support getDerivedStateFromProps.", D), g0[D] = !0);
        }
        if (typeof r.contextType == "object" && r.contextType !== null) {
          var N = Pe(r) || "Unknown";
          v0[N] || (h("%s: Function components do not support contextType.", N), v0[N] = !0);
        }
      }
    }
    var Km = {
      dehydrated: null,
      treeContext: null,
      retryLane: gi
    };
    function $m(i) {
      return {
        baseLanes: i,
        cachePool: LA()
      };
    }
    function jM(i, r) {
      var d = null;
      return {
        baseLanes: jt(i.baseLanes, r),
        cachePool: d
      };
    }
    function kA(i, r, d, m) {
      if (r !== null) {
        var y = r.memoizedState;
        if (y === null)
          return !1;
      }
      return Hy(i, ch);
    }
    function YM(i, r) {
      return io(i.childLanes, r);
    }
    function ZM(i, r, d) {
      var m = r.pendingProps;
      lb(r) && (r.flags |= Gt);
      var y = ts.current, w = !1, D = (r.flags & Gt) !== X;
      if (D || kA(y, i) ? (w = !0, r.flags &= ~Gt) : (i === null || i.memoizedState !== null) && (y = fA(y, nM)), y = uf(y), Ml(r, y), i === null) {
        Ly(r);
        {
          var N = r.memoizedState;
          if (N !== null) {
            var B = N.dehydrated;
            if (B !== null)
              return WA(r, B);
          }
        }
        var J = m.children, re = m.fallback;
        if (w) {
          var he = VA(r, J, re, d), Ce = r.child;
          return Ce.memoizedState = $m(d), r.memoizedState = Km, he;
        } else
          return b0(r, J);
      } else {
        var Ue = i.memoizedState;
        if (Ue !== null) {
          {
            var Xe = Ue.dehydrated;
            if (Xe !== null)
              if (D) {
                if (r.flags & ln)
                  return r.flags &= ~ln, ev(i, r, d, new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                if (r.memoizedState !== null)
                  return r.child = i.child, r.flags |= Gt, null;
                var Je = m.children, Ut = m.fallback, Zt = GA(i, r, Je, Ut, d), Ft = r.child;
                return Ft.memoizedState = $m(d), r.memoizedState = Km, Zt;
              } else
                return qA(i, r, Xe, Ue, d);
          }
          if (w) {
            var Wn = m.fallback, qn = m.children, _e = KM(i, r, qn, Wn, d), ze = r.child, ve = i.child.memoizedState;
            return ze.memoizedState = ve === null ? $m(d) : jM(ve, d), ze.childLanes = YM(i, d), r.memoizedState = Km, _e;
          } else {
            var et = m.children, Pt = QM(i, r, et, d);
            return r.memoizedState = null, Pt;
          }
        } else if (w) {
          var gt = m.fallback, un = m.children, wn = KM(i, r, un, gt, d), Bn = r.child, Tn = i.child.memoizedState;
          return Bn.memoizedState = Tn === null ? $m(d) : jM(Tn, d), Bn.childLanes = YM(i, d), r.memoizedState = Km, wn;
        } else {
          var ii = m.children, yn = QM(i, r, ii, d);
          return r.memoizedState = null, yn;
        }
      }
    }
    function b0(i, r, d) {
      var m = i.mode, y = {
        mode: "visible",
        children: r
      }, w = E0(y, m);
      return w.return = i, i.child = w, w;
    }
    function VA(i, r, d, m) {
      var y = i.mode, w = i.child, D = {
        mode: "hidden",
        children: r
      }, N, B;
      return (y & En) === kt && w !== null ? (N = w, N.childLanes = We, N.pendingProps = D, i.mode & pn && (N.actualDuration = 0, N.actualStartTime = -1, N.selfBaseDuration = 0, N.treeBaseDuration = 0), B = Rl(d, y, m, null)) : (N = E0(D, y), B = Rl(d, y, m, null)), N.return = i, B.return = i, N.sibling = B, i.child = N, B;
    }
    function E0(i, r, d) {
      return $1(i, r, We, null);
    }
    function JM(i, r) {
      return zu(i, r);
    }
    function QM(i, r, d, m) {
      var y = i.child, w = y.sibling, D = JM(y, {
        mode: "visible",
        children: d
      });
      if ((r.mode & En) === kt && (D.lanes = m), D.return = r, D.sibling = null, w !== null) {
        var N = r.deletions;
        N === null ? (r.deletions = [w], r.flags |= tn) : N.push(w);
      }
      return r.child = D, D;
    }
    function KM(i, r, d, m, y) {
      var w = r.mode, D = i.child, N = D.sibling, B = {
        mode: "hidden",
        children: d
      }, J;
      if (
        // In legacy mode, we commit the primary tree as if it successfully
        // completed, even though it's in an inconsistent state.
        (w & En) === kt && // Make sure we're on the second pass, i.e. the primary child fragment was
        // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        r.child !== D
      ) {
        var re = r.child;
        J = re, J.childLanes = We, J.pendingProps = B, r.mode & pn && (J.actualDuration = 0, J.actualStartTime = -1, J.selfBaseDuration = D.selfBaseDuration, J.treeBaseDuration = D.treeBaseDuration), r.deletions = null;
      } else
        J = JM(D, B), J.subtreeFlags = D.subtreeFlags & bn;
      var he;
      return N !== null ? he = zu(N, m) : (he = Rl(m, w, y, null), he.flags |= Le), he.return = r, J.return = r, J.sibling = he, r.child = J, he;
    }
    function ev(i, r, d, m) {
      m !== null && Dy(m), of(r, i.child, null, d);
      var y = r.pendingProps, w = y.children, D = b0(r, w);
      return D.flags |= Le, r.memoizedState = null, D;
    }
    function GA(i, r, d, m, y) {
      var w = r.mode, D = {
        mode: "visible",
        children: d
      }, N = E0(D, w), B = Rl(m, w, y, null);
      return B.flags |= Le, N.return = r, B.return = r, N.sibling = B, r.child = N, (r.mode & En) !== kt && of(r, i.child, null, y), B;
    }
    function WA(i, r, d) {
      return (i.mode & En) === kt ? (h("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components."), i.lanes = sn) : Ma(r) ? i.lanes = Za : i.lanes = Rn, null;
    }
    function qA(i, r, d, m, y) {
      if ($C(), (r.mode & En) === kt)
        return ev(
          i,
          r,
          y,
          // TODO: When we delete legacy mode, we should make this error argument
          // required — every concurrent mode path that causes hydration to
          // de-opt to client rendering should have an error message.
          null
        );
      if (Ma(d))
        return ev(
          i,
          r,
          y,
          // TODO: The server should serialize the error message so we can log it
          // here on the client. Or, in production, a hash/id that corresponds to
          // the error.
          new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.")
        );
      var w = Jn(y, i.childLanes);
      if (is || w) {
        var D = xv();
        if (D !== null) {
          var N = kd(D, y);
          if (N !== gi && N !== m.retryLane) {
            m.retryLane = N;
            var B = zn;
            Fi(i, N, B);
          }
        }
        return j0(), ev(i, r, y, new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
      } else if (ea(d)) {
        r.flags |= Gt, r.child = i.child;
        var J = N3.bind(null, i);
        return Ed(d, J), null;
      } else {
        nA(r, d, m.treeContext);
        var re = r.pendingProps, he = re.children, Ce = b0(r, he);
        return Ce.flags |= wi, Ce;
      }
    }
    function $M(i, r, d) {
      i.lanes = jt(i.lanes, r);
      var m = i.alternate;
      m !== null && (m.lanes = jt(m.lanes, r)), Z(i.return, r, d);
    }
    function XA(i, r, d) {
      for (var m = r; m !== null; ) {
        if (m.tag === ne) {
          var y = m.memoizedState;
          y !== null && $M(m, d, i);
        } else if (m.tag === Be)
          $M(m, d, i);
        else if (m.child !== null) {
          m.child.return = m, m = m.child;
          continue;
        }
        if (m === i)
          return;
        for (; m.sibling === null; ) {
          if (m.return === null || m.return === i)
            return;
          m = m.return;
        }
        m.sibling.return = m.return, m = m.sibling;
      }
    }
    function jA(i) {
      for (var r = i, d = null; r !== null; ) {
        var m = r.alternate;
        m !== null && Am(m) === null && (d = r), r = r.sibling;
      }
      return d;
    }
    function YA(i) {
      if (i !== void 0 && i !== "forwards" && i !== "backwards" && i !== "together" && !_0[i])
        if (_0[i] = !0, typeof i == "string")
          switch (i.toLowerCase()) {
            case "together":
            case "forwards":
            case "backwards": {
              h('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', i, i.toLowerCase());
              break;
            }
            case "forward":
            case "backward": {
              h('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', i, i.toLowerCase());
              break;
            }
            default:
              h('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', i);
              break;
          }
        else
          h('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', i);
    }
    function ZA(i, r) {
      i !== void 0 && !Qm[i] && (i !== "collapsed" && i !== "hidden" ? (Qm[i] = !0, h('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', i)) : r !== "forwards" && r !== "backwards" && (Qm[i] = !0, h('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', i)));
    }
    function e1(i, r) {
      {
        var d = Jt(i), m = !d && typeof me(i) == "function";
        if (d || m) {
          var y = d ? "array" : "iterable";
          return h("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", y, r, y), !1;
        }
      }
      return !0;
    }
    function JA(i, r) {
      if ((r === "forwards" || r === "backwards") && i !== void 0 && i !== null && i !== !1)
        if (Jt(i)) {
          for (var d = 0; d < i.length; d++)
            if (!e1(i[d], d))
              return;
        } else {
          var m = me(i);
          if (typeof m == "function") {
            var y = m.call(i);
            if (y)
              for (var w = y.next(), D = 0; !w.done; w = y.next()) {
                if (!e1(w.value, D))
                  return;
                D++;
              }
          } else
            h('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', r);
        }
    }
    function w0(i, r, d, m, y) {
      var w = i.memoizedState;
      w === null ? i.memoizedState = {
        isBackwards: r,
        rendering: null,
        renderingStartTime: 0,
        last: m,
        tail: d,
        tailMode: y
      } : (w.isBackwards = r, w.rendering = null, w.renderingStartTime = 0, w.last = m, w.tail = d, w.tailMode = y);
    }
    function t1(i, r, d) {
      var m = r.pendingProps, y = m.revealOrder, w = m.tail, D = m.children;
      YA(y), ZA(w, y), JA(D, y), br(i, r, D, d);
      var N = ts.current, B = Hy(N, ch);
      if (B)
        N = ky(N, ch), r.flags |= Gt;
      else {
        var J = i !== null && (i.flags & Gt) !== X;
        J && XA(r, r.child, d), N = uf(N);
      }
      if (Ml(r, N), (r.mode & En) === kt)
        r.memoizedState = null;
      else
        switch (y) {
          case "forwards": {
            var re = jA(r.child), he;
            re === null ? (he = r.child, r.child = null) : (he = re.sibling, re.sibling = null), w0(
              r,
              !1,
              // isBackwards
              he,
              re,
              w
            );
            break;
          }
          case "backwards": {
            var Ce = null, Ue = r.child;
            for (r.child = null; Ue !== null; ) {
              var Xe = Ue.alternate;
              if (Xe !== null && Am(Xe) === null) {
                r.child = Ue;
                break;
              }
              var Je = Ue.sibling;
              Ue.sibling = Ce, Ce = Ue, Ue = Je;
            }
            w0(
              r,
              !0,
              // isBackwards
              Ce,
              null,
              // last
              w
            );
            break;
          }
          case "together": {
            w0(
              r,
              !1,
              // isBackwards
              null,
              // tail
              null,
              // last
              void 0
            );
            break;
          }
          default:
            r.memoizedState = null;
        }
      return r.child;
    }
    function QA(i, r, d) {
      Fy(r, r.stateNode.containerInfo);
      var m = r.pendingProps;
      return i === null ? r.child = of(r, null, m, d) : br(i, r, m, d), r.child;
    }
    var n1 = !1;
    function KA(i, r, d) {
      var m = r.type, y = m._context, w = r.pendingProps, D = r.memoizedProps, N = w.value;
      {
        "value" in w || n1 || (n1 = !0, h("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"));
        var B = r.type.propTypes;
        B && yr(B, w, "prop", "Context.Provider");
      }
      if (C(r, y, N), D !== null) {
        var J = D.value;
        if (Sr(J, N)) {
          if (D.children === w.children && !vi())
            return yo(i, r, d);
        } else
          oe(r, y, d);
      }
      var re = w.children;
      return br(i, r, re, d), r.child;
    }
    var i1 = !1;
    function $A(i, r, d) {
      var m = r.type;
      m._context === void 0 ? m !== m.Consumer && (i1 || (i1 = !0, h("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : m = m._context;
      var y = r.pendingProps, w = y.children;
      typeof w != "function" && h("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."), Ye(r, d);
      var D = tt(m);
      La(r);
      var N;
      return Sh.current = r, Da(!0), N = w(D), Da(!1), Ka(), r.flags |= be, br(i, r, N, d), r.child;
    }
    function tv() {
      is = !0;
    }
    function yo(i, r, d) {
      return i !== null && (r.dependencies = i.dependencies), LM(), Ev(r.lanes), Jn(d, r.childLanes) ? (lA(i, r), r.child) : null;
    }
    function eR(i, r, d) {
      {
        var m = r.return;
        if (m === null)
          throw new Error("Cannot swap the root fiber.");
        if (i.alternate = null, r.alternate = null, d.index = r.index, d.sibling = r.sibling, d.return = r.return, d.ref = r.ref, r === m.child)
          m.child = d;
        else {
          var y = m.child;
          if (y === null)
            throw new Error("Expected parent to have a child.");
          for (; y.sibling !== r; )
            if (y = y.sibling, y === null)
              throw new Error("Expected to find the previous sibling.");
          y.sibling = d;
        }
        var w = m.deletions;
        return w === null ? (m.deletions = [i], m.flags |= tn) : w.push(i), d.flags |= Le, d;
      }
    }
    function T0(i, r) {
      var d = i.lanes;
      return !!Jn(d, r);
    }
    function tR(i, r, d) {
      switch (r.tag) {
        case I:
          qM(r), r.stateNode, sf();
          break;
        case te:
          eM(r);
          break;
        case G: {
          var m = r.type;
          Or(m) && Ta(r);
          break;
        }
        case Q:
          Fy(r, r.stateNode.containerInfo);
          break;
        case Te: {
          var y = r.memoizedProps.value, w = r.type._context;
          C(r, w, y);
          break;
        }
        case ae:
          {
            var D = Jn(d, r.childLanes);
            D && (r.flags |= He);
            {
              var N = r.stateNode;
              N.effectDuration = 0, N.passiveEffectDuration = 0;
            }
          }
          break;
        case ne: {
          var B = r.memoizedState;
          if (B !== null) {
            if (B.dehydrated !== null)
              return Ml(r, uf(ts.current)), r.flags |= Gt, null;
            var J = r.child, re = J.childLanes;
            if (Jn(d, re))
              return ZM(i, r, d);
            Ml(r, uf(ts.current));
            var he = yo(i, r, d);
            return he !== null ? he.sibling : null;
          } else
            Ml(r, uf(ts.current));
          break;
        }
        case Be: {
          var Ce = (i.flags & Gt) !== X, Ue = Jn(d, r.childLanes);
          if (Ce) {
            if (Ue)
              return t1(i, r, d);
            r.flags |= Gt;
          }
          var Xe = r.memoizedState;
          if (Xe !== null && (Xe.rendering = null, Xe.tail = null, Xe.lastEffect = null), Ml(r, ts.current), Ue)
            break;
          return null;
        }
        case dt:
        case _t:
          return r.lanes = We, VM(i, r, d);
      }
      return yo(i, r, d);
    }
    function r1(i, r, d) {
      if (r._debugNeedsRemount && i !== null)
        return eR(i, r, i_(r.type, r.key, r.pendingProps, r._debugOwner || null, r.mode, r.lanes));
      if (i !== null) {
        var m = i.memoizedProps, y = r.pendingProps;
        if (m !== y || vi() || // Force a re-render if the implementation changed due to hot reload:
        r.type !== i.type)
          is = !0;
        else {
          var w = T0(i, d);
          if (!w && // If this is the second pass of an error or suspense boundary, there
          // may not be work scheduled on `current`, so we check for this flag.
          (r.flags & Gt) === X)
            return is = !1, tR(i, r, d);
          (i.flags & ce) !== X ? is = !0 : is = !1;
        }
      } else if (is = !1, lr() && jC(r)) {
        var D = r.index, N = YC();
        VS(r, N, D);
      }
      switch (r.lanes = We, r.tag) {
        case z:
          return HA(i, r, r.type, d);
        case pe: {
          var B = r.elementType;
          return FA(i, r, B, d);
        }
        case k: {
          var J = r.type, re = r.pendingProps, he = r.elementType === J ? re : Vr(J, re);
          return x0(i, r, J, he, d);
        }
        case G: {
          var Ce = r.type, Ue = r.pendingProps, Xe = r.elementType === Ce ? Ue : Vr(Ce, Ue);
          return WM(i, r, Ce, Xe, d);
        }
        case I:
          return zA(i, r, d);
        case te:
          return OA(i, r, d);
        case $:
          return IA(i, r);
        case ne:
          return ZM(i, r, d);
        case Q:
          return QA(i, r, d);
        case W: {
          var Je = r.type, Ut = r.pendingProps, Zt = r.elementType === Je ? Ut : Vr(Je, Ut);
          return BM(i, r, Je, Zt, d);
        }
        case ie:
          return PA(i, r, d);
        case fe:
          return UA(i, r, d);
        case ae:
          return NA(i, r, d);
        case Te:
          return KA(i, r, d);
        case Ee:
          return $A(i, r, d);
        case Se: {
          var Ft = r.type, Wn = r.pendingProps, qn = Vr(Ft, Wn);
          if (r.type !== r.elementType) {
            var _e = Ft.propTypes;
            _e && yr(
              _e,
              qn,
              // Resolved for outer only
              "prop",
              Pe(Ft)
            );
          }
          return qn = Vr(Ft.type, qn), HM(i, r, Ft, qn, d);
        }
        case ue:
          return kM(i, r, r.type, r.pendingProps, d);
        case ye: {
          var ze = r.type, ve = r.pendingProps, et = r.elementType === ze ? ve : Vr(ze, ve);
          return BA(i, r, ze, et, d);
        }
        case Be:
          return t1(i, r, d);
        case de:
          break;
        case dt:
          return VM(i, r, d);
      }
      throw new Error("Unknown unit of work tag (" + r.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function nR(i, r, d) {
      switch (Ty(r), r.tag) {
        case G: {
          var m = r.type;
          Or(m) && Jo(r);
          var y = r.flags;
          return y & K ? (r.flags = y & ~K | Gt, (r.mode & pn) !== kt && d0(r), r) : null;
        }
        case I: {
          lf(r), su(r), Gy();
          var w = r.flags;
          return (w & K) !== X && (w & Gt) === X ? (r.flags = w & ~K | Gt, r) : null;
        }
        case te:
          return By(r), null;
        case ne: {
          cf(r);
          {
            var D = r.memoizedState;
            if (D !== null && D.dehydrated !== null) {
              if (r.alternate === null)
                throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
              sf();
            }
          }
          var N = r.flags;
          return N & K ? (r.flags = N & ~K | Gt, (r.mode & pn) !== kt && d0(r), r) : null;
        }
        case Be:
          return cf(r), null;
        case Q:
          return lf(r), null;
        case Te:
          var B = r.type._context;
          return P(B, r), null;
        case dt:
        case _t:
          return X0(r), null;
        case qe:
          return null;
        default:
          return null;
      }
    }
    function a1(i, r, d) {
      switch (Ty(r), r.tag) {
        case G: {
          var m = r.type.childContextTypes;
          m != null && Jo(r);
          break;
        }
        case I: {
          lf(r), su(r), Gy();
          break;
        }
        case te: {
          By(r);
          break;
        }
        case Q:
          lf(r);
          break;
        case ne:
          cf(r);
          break;
        case Be:
          cf(r);
          break;
        case Te:
          var y = r.type._context;
          P(y, r);
          break;
        case dt:
        case _t:
          X0(r);
          break;
      }
    }
    function s1(i, r, d, m, y, w, D, N, B) {
      var J = Array.prototype.slice.call(arguments, 3);
      try {
        r.apply(d, J);
      } catch (re) {
        this.onError(re);
      }
    }
    var o1 = s1;
    if (typeof window < "u" && typeof window.dispatchEvent == "function" && typeof document < "u" && typeof document.createEvent == "function") {
      var C0 = document.createElement("react");
      o1 = function(r, d, m, y, w, D, N, B, J) {
        if (typeof document > "u" || document === null)
          throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
        var re = document.createEvent("Event"), he = !1, Ce = !0, Ue = window.event, Xe = Object.getOwnPropertyDescriptor(window, "event");
        function Je() {
          C0.removeEventListener(ze, Zt, !1), typeof window.event < "u" && window.hasOwnProperty("event") && (window.event = Ue);
        }
        var Ut = Array.prototype.slice.call(arguments, 3);
        function Zt() {
          he = !0, Je(), d.apply(m, Ut), Ce = !1;
        }
        var Ft, Wn = !1, qn = !1;
        function _e(ve) {
          if (Ft = ve.error, Wn = !0, Ft === null && ve.colno === 0 && ve.lineno === 0 && (qn = !0), ve.defaultPrevented && Ft != null && typeof Ft == "object")
            try {
              Ft._suppressLogging = !0;
            } catch {
            }
        }
        var ze = "react-" + (r || "invokeguardedcallback");
        if (window.addEventListener("error", _e), C0.addEventListener(ze, Zt, !1), re.initEvent(ze, !1, !1), C0.dispatchEvent(re), Xe && Object.defineProperty(window, "event", Xe), he && Ce && (Wn ? qn && (Ft = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.")) : Ft = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`), this.onError(Ft)), window.removeEventListener("error", _e), !he)
          return Je(), s1.apply(this, arguments);
      };
    }
    var iR = o1, bh = !1, nv = null, rR = {
      onError: function(i) {
        bh = !0, nv = i;
      }
    };
    function l1(i, r, d, m, y, w, D, N, B) {
      bh = !1, nv = null, iR.apply(rR, arguments);
    }
    function aR() {
      return bh;
    }
    function u1() {
      if (bh) {
        var i = nv;
        return bh = !1, nv = null, i;
      } else
        throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    var c1 = null;
    c1 = /* @__PURE__ */ new Set();
    var iv = !1, Tl = !1, sR = typeof WeakSet == "function" ? WeakSet : Set, pt = null, vf = null, gf = null;
    function Ki(i) {
      l1(null, function() {
        throw i;
      }), u1();
    }
    var oR = function(i, r) {
      if (r.props = i.memoizedProps, r.state = i.memoizedState, i.mode & pn)
        try {
          Ia(), r.componentWillUnmount();
        } finally {
          Oa(i);
        }
      else
        r.componentWillUnmount();
    };
    function f1(i, r) {
      try {
        _o(xi, i);
      } catch (d) {
        Ki(d), $i(i, r, d);
      }
    }
    function A0(i, r, d) {
      try {
        oR(i, d);
      } catch (m) {
        Ki(m), $i(i, r, m);
      }
    }
    function lR(i, r, d) {
      try {
        d.componentDidMount();
      } catch (m) {
        Ki(m), $i(i, r, m);
      }
    }
    function d1(i, r) {
      try {
        p1(i);
      } catch (d) {
        Ki(d), $i(i, r, d);
      }
    }
    function rv(i, r) {
      var d = i.ref;
      if (d !== null)
        if (typeof d == "function") {
          var m;
          try {
            if (F && V && i.mode & pn)
              try {
                Ia(), m = d(null);
              } finally {
                Oa(i);
              }
            else
              m = d(null);
          } catch (y) {
            Ki(y), $i(i, r, y);
          }
          typeof m == "function" && h("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", rt(i));
        } else
          d.current = null;
    }
    function av(i, r, d) {
      try {
        d();
      } catch (m) {
        Ki(m), $i(i, r, m);
      }
    }
    var h1 = !1;
    function uR(i, r) {
      hc(i.containerInfo), pt = r, cR();
      var d = h1;
      return h1 = !1, d;
    }
    function cR() {
      for (; pt !== null; ) {
        var i = pt, r = i.child;
        (i.subtreeFlags & Ct) !== X && r !== null ? (Fa(r, i), pt = r) : fR();
      }
    }
    function fR() {
      for (; pt !== null; ) {
        var i = pt;
        gn(i);
        try {
          dR(i);
        } catch (d) {
          Ki(d), $i(i, i.return, d);
        }
        Ui();
        var r = i.sibling;
        if (r !== null) {
          Fa(r, i.return), pt = r;
          return;
        }
        pt = i.return;
      }
    }
    function dR(i) {
      var r = i.alternate, d = i.flags;
      if ((d & oi) !== X) {
        switch (gn(i), i.tag) {
          case k:
          case W:
          case ue:
            break;
          case G: {
            if (r !== null) {
              var m = r.memoizedProps, y = r.memoizedState, w = i.stateNode;
              i.type === i.elementType && !Lu && (w.props !== i.memoizedProps && h("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", rt(i) || "instance"), w.state !== i.memoizedState && h("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", rt(i) || "instance"));
              var D = w.getSnapshotBeforeUpdate(i.elementType === i.type ? m : Vr(i.type, m), y);
              {
                var N = c1;
                D === void 0 && !N.has(i.type) && (N.add(i.type), h("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", rt(i)));
              }
              w.__reactInternalSnapshotBeforeUpdate = D;
            }
            break;
          }
          case I: {
            if (Kr) {
              var B = i.stateNode;
              sy(B.containerInfo);
            }
            break;
          }
          case te:
          case $:
          case Q:
          case ye:
            break;
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        Ui();
      }
    }
    function Wr(i, r, d) {
      var m = r.updateQueue, y = m !== null ? m.lastEffect : null;
      if (y !== null) {
        var w = y.next, D = w;
        do {
          if ((D.tag & i) === i) {
            var N = D.destroy;
            D.destroy = void 0, N !== void 0 && ((i & Ji) !== Ds ? ar(r) : (i & xi) !== Ds && vu(r), av(r, d, N), (i & Ji) !== Ds ? Qd() : (i & xi) !== Ds && Qc());
          }
          D = D.next;
        } while (D !== w);
      }
    }
    function _o(i, r) {
      var d = r.updateQueue, m = d !== null ? d.lastEffect : null;
      if (m !== null) {
        var y = m.next, w = y;
        do {
          if ((w.tag & i) === i) {
            (i & Ji) !== Ds ? Jd(r) : (i & xi) !== Ds && Kd(r);
            var D = w.create;
            w.destroy = D(), (i & Ji) !== Ds ? mu() : (i & xi) !== Ds && hl();
            {
              var N = w.destroy;
              if (N !== void 0 && typeof N != "function") {
                var B = void 0;
                (w.tag & xi) !== X ? B = "useLayoutEffect" : (w.tag & bl) !== X ? B = "useInsertionEffect" : B = "useEffect";
                var J = void 0;
                N === null ? J = " You returned null. If your effect does not require clean up, return undefined (or nothing)." : typeof N.then == "function" ? J = `

It looks like you wrote ` + B + `(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:

` + B + `(() => {
  async function fetchData() {
    // You can await here
    const response = await MyAPI.getData(someId);
    // ...
  }
  fetchData();
}, [someId]); // Or [] if effect doesn't need props or state

Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching` : J = " You returned: " + N, h("%s must not return anything besides a function, which is used for clean-up.%s", B, J);
              }
            }
          }
          w = w.next;
        } while (w !== y);
      }
    }
    function hR(i, r) {
      if ((r.flags & He) !== X)
        switch (r.tag) {
          case ae: {
            var d = r.stateNode.passiveEffectDuration, m = r.memoizedProps, y = m.id, w = m.onPostCommit, D = AM(), N = r.alternate === null ? "mount" : "update";
            CM() && (N = "nested-update"), typeof w == "function" && w(y, N, d, D);
            var B = r.return;
            e:
              for (; B !== null; ) {
                switch (B.tag) {
                  case I:
                    var J = B.stateNode;
                    J.passiveEffectDuration += d;
                    break e;
                  case ae:
                    var re = B.stateNode;
                    re.passiveEffectDuration += d;
                    break e;
                }
                B = B.return;
              }
            break;
          }
        }
    }
    function pR(i, r, d, m) {
      if ((d.flags & Cn) !== X)
        switch (d.tag) {
          case k:
          case W:
          case ue: {
            if (!Tl)
              if (d.mode & pn)
                try {
                  Ia(), _o(xi | ei, d);
                } finally {
                  Oa(d);
                }
              else
                _o(xi | ei, d);
            break;
          }
          case G: {
            var y = d.stateNode;
            if (d.flags & He && !Tl)
              if (r === null)
                if (d.type === d.elementType && !Lu && (y.props !== d.memoizedProps && h("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", rt(d) || "instance"), y.state !== d.memoizedState && h("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", rt(d) || "instance")), d.mode & pn)
                  try {
                    Ia(), y.componentDidMount();
                  } finally {
                    Oa(d);
                  }
                else
                  y.componentDidMount();
              else {
                var w = d.elementType === d.type ? r.memoizedProps : Vr(d.type, r.memoizedProps), D = r.memoizedState;
                if (d.type === d.elementType && !Lu && (y.props !== d.memoizedProps && h("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", rt(d) || "instance"), y.state !== d.memoizedState && h("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", rt(d) || "instance")), d.mode & pn)
                  try {
                    Ia(), y.componentDidUpdate(w, D, y.__reactInternalSnapshotBeforeUpdate);
                  } finally {
                    Oa(d);
                  }
                else
                  y.componentDidUpdate(w, D, y.__reactInternalSnapshotBeforeUpdate);
              }
            var N = d.updateQueue;
            N !== null && (d.type === d.elementType && !Lu && (y.props !== d.memoizedProps && h("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", rt(d) || "instance"), y.state !== d.memoizedState && h("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", rt(d) || "instance")), NS(d, N, y));
            break;
          }
          case I: {
            var B = d.updateQueue;
            if (B !== null) {
              var J = null;
              if (d.child !== null)
                switch (d.child.tag) {
                  case te:
                    J = vr(d.child.stateNode);
                    break;
                  case G:
                    J = d.child.stateNode;
                    break;
                }
              NS(d, B, J);
            }
            break;
          }
          case te: {
            var re = d.stateNode;
            if (r === null && d.flags & He) {
              var he = d.type, Ce = d.memoizedProps;
              ny(re, he, Ce, d);
            }
            break;
          }
          case $:
            break;
          case Q:
            break;
          case ae: {
            {
              var Ue = d.memoizedProps, Xe = Ue.onCommit, Je = Ue.onRender, Ut = d.stateNode.effectDuration, Zt = AM(), Ft = r === null ? "mount" : "update";
              CM() && (Ft = "nested-update"), typeof Je == "function" && Je(d.memoizedProps.id, Ft, d.actualDuration, d.treeBaseDuration, d.actualStartTime, Zt);
              {
                typeof Xe == "function" && Xe(d.memoizedProps.id, Ft, Ut, Zt), A3(d);
                var Wn = d.return;
                e:
                  for (; Wn !== null; ) {
                    switch (Wn.tag) {
                      case I:
                        var qn = Wn.stateNode;
                        qn.effectDuration += Ut;
                        break e;
                      case ae:
                        var _e = Wn.stateNode;
                        _e.effectDuration += Ut;
                        break e;
                    }
                    Wn = Wn.return;
                  }
              }
            }
            break;
          }
          case ne: {
            bR(i, d);
            break;
          }
          case Be:
          case ye:
          case de:
          case dt:
          case _t:
            break;
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      Tl || d.flags & kn && p1(d);
    }
    function mR(i) {
      switch (i.tag) {
        case k:
        case W:
        case ue: {
          if (i.mode & pn)
            try {
              Ia(), f1(i, i.return);
            } finally {
              Oa(i);
            }
          else
            f1(i, i.return);
          break;
        }
        case G: {
          var r = i.stateNode;
          typeof r.componentDidMount == "function" && lR(i, i.return, r), d1(i, i.return);
          break;
        }
        case te: {
          d1(i, i.return);
          break;
        }
      }
    }
    function vR(i, r) {
      var d = null;
      if (Kr)
        for (var m = i; ; ) {
          if (m.tag === te) {
            if (d === null) {
              d = m;
              var y = m.stateNode;
              r ? ry(y) : ay(m.stateNode, m.memoizedProps);
            }
          } else if (m.tag === $) {
            if (d === null) {
              var w = m.stateNode;
              r ? Sa(w) : yc(w, m.memoizedProps);
            }
          } else if (!((m.tag === dt || m.tag === _t) && m.memoizedState !== null && m !== i)) {
            if (m.child !== null) {
              m.child.return = m, m = m.child;
              continue;
            }
          }
          if (m === i)
            return;
          for (; m.sibling === null; ) {
            if (m.return === null || m.return === i)
              return;
            d === m && (d = null), m = m.return;
          }
          d === m && (d = null), m.sibling.return = m.return, m = m.sibling;
        }
    }
    function p1(i) {
      var r = i.ref;
      if (r !== null) {
        var d = i.stateNode, m;
        switch (i.tag) {
          case te:
            m = vr(d);
            break;
          default:
            m = d;
        }
        if (typeof r == "function") {
          var y;
          if (i.mode & pn)
            try {
              Ia(), y = r(m);
            } finally {
              Oa(i);
            }
          else
            y = r(m);
          typeof y == "function" && h("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", rt(i));
        } else
          r.hasOwnProperty("current") || h("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", rt(i)), r.current = m;
      }
    }
    function gR(i) {
      var r = i.ref;
      if (r !== null)
        if (typeof r == "function")
          if (i.mode & pn)
            try {
              Ia(), r(null);
            } finally {
              Oa(i);
            }
          else
            r(null);
        else
          r.current = null;
    }
    function m1(i, r, d) {
      switch (fi(r), r.tag) {
        case k:
        case W:
        case Se:
        case ue: {
          var m = r.updateQueue;
          if (m !== null) {
            var y = m.lastEffect;
            if (y !== null) {
              var w = y.next, D = w;
              do {
                var N = D, B = N.destroy, J = N.tag;
                B !== void 0 && ((J & bl) !== Ds ? av(r, d, B) : (J & xi) !== Ds && (vu(r), r.mode & pn ? (Ia(), av(r, d, B), Oa(r)) : av(r, d, B), Qc())), D = D.next;
              } while (D !== w);
            }
          }
          return;
        }
        case G: {
          rv(r, d);
          var re = r.stateNode;
          typeof re.componentWillUnmount == "function" && A0(r, d, re);
          return;
        }
        case te: {
          rv(r, d);
          return;
        }
        case Q: {
          Kr ? S1(i, r, d) : Zl && _R(r);
          return;
        }
        case je:
          return;
        case de:
          return;
      }
    }
    function v1(i, r, d) {
      for (var m = r; ; ) {
        if (m1(i, m, d), m.child !== null && // If we use mutation we drill down into portals using commitUnmount above.
        // If we don't use mutation we drill down into portals here instead.
        (!Kr || m.tag !== Q)) {
          m.child.return = m, m = m.child;
          continue;
        }
        if (m === r)
          return;
        for (; m.sibling === null; ) {
          if (m.return === null || m.return === r)
            return;
          m = m.return;
        }
        m.sibling.return = m.return, m = m.sibling;
      }
    }
    function yR(i) {
      var r = i.alternate;
      r !== null && (r.return = null), i.return = null;
    }
    function g1(i) {
      var r = i.alternate;
      r !== null && (i.alternate = null, g1(r));
      {
        if (i.child = null, i.deletions = null, i.sibling = null, i.tag === te) {
          var d = i.stateNode;
          d !== null && vd(d);
        }
        i.stateNode = null, i._debugOwner = null, i.return = null, i.dependencies = null, i.memoizedProps = null, i.memoizedState = null, i.pendingProps = null, i.stateNode = null, i.updateQueue = null;
      }
    }
    function _R(i) {
      if (Zl) {
        var r = i.stateNode, d = r.containerInfo, m = Ql(d);
        _c(d, m);
      }
    }
    function xR(i) {
      if (Zl) {
        switch (i.tag) {
          case G:
          case te:
          case $:
            return;
          case I:
          case Q: {
            var r = i.stateNode, d = r.containerInfo, m = r.pendingChildren;
            _c(d, m);
            return;
          }
        }
        throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    function SR(i) {
      for (var r = i.return; r !== null; ) {
        if (y1(r))
          return r;
        r = r.return;
      }
      throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function y1(i) {
      return i.tag === te || i.tag === I || i.tag === Q;
    }
    function _1(i) {
      var r = i;
      e:
        for (; ; ) {
          for (; r.sibling === null; ) {
            if (r.return === null || y1(r.return))
              return null;
            r = r.return;
          }
          for (r.sibling.return = r.return, r = r.sibling; r.tag !== te && r.tag !== $ && r.tag !== je; ) {
            if (r.flags & Le || r.child === null || r.tag === Q)
              continue e;
            r.child.return = r, r = r.child;
          }
          if (!(r.flags & Le))
            return r.stateNode;
        }
    }
    function x1(i) {
      if (Kr) {
        var r = SR(i);
        switch (r.tag) {
          case te: {
            var d = r.stateNode;
            r.flags & mn && (xd(d), r.flags &= ~mn);
            var m = _1(i);
            L0(i, m, d);
            break;
          }
          case I:
          case Q: {
            var y = r.stateNode.containerInfo, w = _1(i);
            R0(i, w, y);
            break;
          }
          default:
            throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function R0(i, r, d) {
      var m = i.tag, y = m === te || m === $;
      if (y) {
        var w = i.stateNode;
        r ? Wa(d, w, r) : vc(d, w);
      } else if (m !== Q) {
        var D = i.child;
        if (D !== null) {
          R0(D, r, d);
          for (var N = D.sibling; N !== null; )
            R0(N, r, d), N = N.sibling;
        }
      }
    }
    function L0(i, r, d) {
      var m = i.tag, y = m === te || m === $;
      if (y) {
        var w = i.stateNode;
        r ? xa(d, w, r) : ty(d, w);
      } else if (m !== Q) {
        var D = i.child;
        if (D !== null) {
          L0(D, r, d);
          for (var N = D.sibling; N !== null; )
            L0(N, r, d), N = N.sibling;
        }
      }
    }
    function S1(i, r, d) {
      for (var m = r, y = !1, w, D; ; ) {
        if (!y) {
          var N = m.return;
          e:
            for (; ; ) {
              if (N === null)
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              var B = N.stateNode;
              switch (N.tag) {
                case te:
                  w = B, D = !1;
                  break e;
                case I:
                  w = B.containerInfo, D = !0;
                  break e;
                case Q:
                  w = B.containerInfo, D = !0;
                  break e;
              }
              N = N.return;
            }
          y = !0;
        }
        if (m.tag === te || m.tag === $)
          v1(i, m, d), D ? _d(w, m.stateNode) : gc(w, m.stateNode);
        else if (m.tag === je)
          D ? $p(w, m.stateNode) : Kp(w, m.stateNode);
        else if (m.tag === Q) {
          if (m.child !== null) {
            w = m.stateNode.containerInfo, D = !0, m.child.return = m, m = m.child;
            continue;
          }
        } else if (m1(i, m, d), m.child !== null) {
          m.child.return = m, m = m.child;
          continue;
        }
        if (m === r)
          return;
        for (; m.sibling === null; ) {
          if (m.return === null || m.return === r)
            return;
          m = m.return, m.tag === Q && (y = !1);
        }
        m.sibling.return = m.return, m = m.sibling;
      }
    }
    function MR(i, r, d) {
      Kr ? S1(i, r, d) : v1(i, r, d), yR(r);
    }
    function D0(i, r) {
      if (!Kr) {
        switch (r.tag) {
          case k:
          case W:
          case Se:
          case ue: {
            if (Wr(bl | ei, r, r.return), _o(bl | ei, r), r.mode & pn)
              try {
                Ia(), Wr(xi | ei, r, r.return);
              } finally {
                Oa(r);
              }
            else
              Wr(xi | ei, r, r.return);
            return;
          }
          case ae:
            return;
          case ne: {
            M1(r), sv(r);
            return;
          }
          case Be: {
            sv(r);
            return;
          }
          case I: {
            if (ji && i !== null) {
              var d = i.memoizedState;
              if (d.isDehydrated) {
                var m = r.stateNode;
                bc(m.containerInfo);
              }
            }
            break;
          }
          case dt:
          case _t:
            return;
        }
        xR(r);
        return;
      }
      switch (r.tag) {
        case k:
        case W:
        case Se:
        case ue: {
          if (Wr(bl | ei, r, r.return), _o(bl | ei, r), r.mode & pn)
            try {
              Ia(), Wr(xi | ei, r, r.return);
            } finally {
              Oa(r);
            }
          else
            Wr(xi | ei, r, r.return);
          return;
        }
        case G:
          return;
        case te: {
          var y = r.stateNode;
          if (y != null) {
            var w = r.memoizedProps, D = i !== null ? i.memoizedProps : w, N = r.type, B = r.updateQueue;
            r.updateQueue = null, B !== null && iy(y, B, N, D, w, r);
          }
          return;
        }
        case $: {
          if (r.stateNode === null)
            throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
          var J = r.stateNode, re = r.memoizedProps, he = i !== null ? i.memoizedProps : re;
          _a(J, he, re);
          return;
        }
        case I: {
          if (ji && i !== null) {
            var Ce = i.memoizedState;
            if (Ce.isDehydrated) {
              var Ue = r.stateNode;
              bc(Ue.containerInfo);
            }
          }
          return;
        }
        case ae:
          return;
        case ne: {
          M1(r), sv(r);
          return;
        }
        case Be: {
          sv(r);
          return;
        }
        case ye:
          return;
      }
      throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function M1(i) {
      i.memoizedState;
    }
    function bR(i, r) {
      if (ji) {
        var d = r.memoizedState;
        if (d === null) {
          var m = r.alternate;
          if (m !== null) {
            var y = m.memoizedState;
            if (y !== null) {
              var w = y.dehydrated;
              w !== null && Ec(w);
            }
          }
        }
      }
    }
    function sv(i) {
      var r = i.updateQueue;
      if (r !== null) {
        i.updateQueue = null;
        var d = i.stateNode;
        d === null && (d = i.stateNode = new sR()), r.forEach(function(m) {
          var y = z3.bind(null, i, m);
          if (!d.has(m)) {
            if (d.add(m), rr)
              if (vf !== null && gf !== null)
                Uh(gf, vf);
              else
                throw Error("Expected finished root and lanes to be set. This is a bug in React.");
            m.then(y, y);
          }
        });
      }
    }
    function ER(i) {
      Kr && xd(i.stateNode);
    }
    function wR(i, r, d) {
      vf = d, gf = i, pt = r, TR(i, d), vf = null, gf = null;
    }
    function TR(i, r) {
      for (; pt !== null; ) {
        var d = pt, m = d.deletions;
        if (m !== null)
          for (var y = 0; y < m.length; y++) {
            var w = m[y];
            try {
              MR(i, w, d);
            } catch (N) {
              Ki(N), $i(w, d, N);
            }
          }
        var D = d.child;
        (d.subtreeFlags & Ht) !== X && D !== null ? (Fa(D, d), pt = D) : CR(i, r);
      }
    }
    function CR(i, r) {
      for (; pt !== null; ) {
        var d = pt;
        gn(d);
        try {
          AR(d, i, r);
        } catch (y) {
          Ki(y), $i(d, d.return, y);
        }
        Ui();
        var m = d.sibling;
        if (m !== null) {
          Fa(m, d.return), pt = m;
          return;
        }
        pt = d.return;
      }
    }
    function AR(i, r, d) {
      var m = i.flags;
      if (m & mn && ER(i), m & kn) {
        var y = i.alternate;
        y !== null && gR(y);
      }
      if (m & Rr)
        switch (i.tag) {
          case ne: {
            var w = i.memoizedState, D = w !== null;
            if (D) {
              var N = i.alternate, B = N !== null && N.memoizedState !== null;
              B || x3();
            }
            break;
          }
          case dt: {
            var J = i.memoizedState, re = J !== null, he = i.alternate, Ce = he !== null && he.memoizedState !== null, Ue = i;
            Kr && vR(Ue, re);
            {
              if (re && !Ce && (Ue.mode & En) !== kt) {
                pt = Ue;
                for (var Xe = Ue.child; Xe !== null; )
                  pt = Xe, LR(Xe), Xe = Xe.sibling;
              }
              break;
            }
          }
        }
      var Je = m & (Le | He | wi);
      switch (Je) {
        case Le: {
          x1(i), i.flags &= ~Le;
          break;
        }
        case Tt: {
          x1(i), i.flags &= ~Le;
          var Ut = i.alternate;
          D0(Ut, i);
          break;
        }
        case wi: {
          i.flags &= ~wi;
          break;
        }
        case Io: {
          i.flags &= ~wi;
          var Zt = i.alternate;
          D0(Zt, i);
          break;
        }
        case He: {
          var Ft = i.alternate;
          D0(Ft, i);
          break;
        }
      }
    }
    function RR(i, r, d) {
      vf = d, gf = r, pt = i, b1(i, r, d), vf = null, gf = null;
    }
    function b1(i, r, d) {
      for (var m = (i.mode & En) !== kt; pt !== null; ) {
        var y = pt, w = y.child;
        if (y.tag === dt && m) {
          var D = y.memoizedState !== null, N = D || iv;
          if (N) {
            P0(i, r, d);
            continue;
          } else {
            var B = y.alternate, J = B !== null && B.memoizedState !== null, re = J || Tl, he = iv, Ce = Tl;
            iv = N, Tl = re, Tl && !Ce && (pt = y, DR(y));
            for (var Ue = w; Ue !== null; )
              pt = Ue, b1(
                Ue,
                // New root; bubble back up to here and stop.
                r,
                d
              ), Ue = Ue.sibling;
            pt = y, iv = he, Tl = Ce, P0(i, r, d);
            continue;
          }
        }
        (y.subtreeFlags & Cn) !== X && w !== null ? (Fa(w, y), pt = w) : P0(i, r, d);
      }
    }
    function P0(i, r, d) {
      for (; pt !== null; ) {
        var m = pt;
        if ((m.flags & Cn) !== X) {
          var y = m.alternate;
          gn(m);
          try {
            pR(r, y, m, d);
          } catch (D) {
            Ki(D), $i(m, m.return, D);
          }
          Ui();
        }
        if (m === i) {
          pt = null;
          return;
        }
        var w = m.sibling;
        if (w !== null) {
          Fa(w, m.return), pt = w;
          return;
        }
        pt = m.return;
      }
    }
    function LR(i) {
      for (; pt !== null; ) {
        var r = pt, d = r.child;
        switch (r.tag) {
          case k:
          case W:
          case Se:
          case ue: {
            if (r.mode & pn)
              try {
                Ia(), Wr(xi, r, r.return);
              } finally {
                Oa(r);
              }
            else
              Wr(xi, r, r.return);
            break;
          }
          case G: {
            rv(r, r.return);
            var m = r.stateNode;
            typeof m.componentWillUnmount == "function" && A0(r, r.return, m);
            break;
          }
          case te: {
            rv(r, r.return);
            break;
          }
          case dt: {
            var y = r.memoizedState !== null;
            if (y) {
              E1(i);
              continue;
            }
            break;
          }
        }
        d !== null ? (d.return = r, pt = d) : E1(i);
      }
    }
    function E1(i) {
      for (; pt !== null; ) {
        var r = pt;
        if (r === i) {
          pt = null;
          return;
        }
        var d = r.sibling;
        if (d !== null) {
          d.return = r.return, pt = d;
          return;
        }
        pt = r.return;
      }
    }
    function DR(i) {
      for (; pt !== null; ) {
        var r = pt, d = r.child;
        if (r.tag === dt) {
          var m = r.memoizedState !== null;
          if (m) {
            w1(i);
            continue;
          }
        }
        d !== null ? (d.return = r, pt = d) : w1(i);
      }
    }
    function w1(i) {
      for (; pt !== null; ) {
        var r = pt;
        gn(r);
        try {
          mR(r);
        } catch (m) {
          Ki(m), $i(r, r.return, m);
        }
        if (Ui(), r === i) {
          pt = null;
          return;
        }
        var d = r.sibling;
        if (d !== null) {
          d.return = r.return, pt = d;
          return;
        }
        pt = r.return;
      }
    }
    function PR(i, r) {
      pt = r, UR(r, i);
    }
    function UR(i, r) {
      for (; pt !== null; ) {
        var d = pt, m = d.child;
        (d.subtreeFlags & Yn) !== X && m !== null ? (Fa(m, d), pt = m) : NR(i, r);
      }
    }
    function NR(i, r) {
      for (; pt !== null; ) {
        var d = pt;
        if ((d.flags & Ei) !== X) {
          gn(d);
          try {
            zR(r, d);
          } catch (y) {
            Ki(y), $i(d, d.return, y);
          }
          Ui();
        }
        if (d === i) {
          pt = null;
          return;
        }
        var m = d.sibling;
        if (m !== null) {
          Fa(m, d.return), pt = m;
          return;
        }
        pt = d.return;
      }
    }
    function zR(i, r) {
      switch (r.tag) {
        case k:
        case W:
        case ue: {
          if (r.mode & pn) {
            f0();
            try {
              _o(Ji | ei, r);
            } finally {
              c0(r);
            }
          } else
            _o(Ji | ei, r);
          break;
        }
      }
    }
    function OR(i) {
      pt = i, IR();
    }
    function IR() {
      for (; pt !== null; ) {
        var i = pt, r = i.child;
        if ((pt.flags & tn) !== X) {
          var d = i.deletions;
          if (d !== null) {
            for (var m = 0; m < d.length; m++) {
              var y = d[m];
              pt = y, HR(y, i);
            }
            {
              var w = i.alternate;
              if (w !== null) {
                var D = w.child;
                if (D !== null) {
                  w.child = null;
                  do {
                    var N = D.sibling;
                    D.sibling = null, D = N;
                  } while (D !== null);
                }
              }
            }
            pt = i;
          }
        }
        (i.subtreeFlags & Yn) !== X && r !== null ? (Fa(r, i), pt = r) : FR();
      }
    }
    function FR() {
      for (; pt !== null; ) {
        var i = pt;
        (i.flags & Ei) !== X && (gn(i), BR(i), Ui());
        var r = i.sibling;
        if (r !== null) {
          Fa(r, i.return), pt = r;
          return;
        }
        pt = i.return;
      }
    }
    function BR(i) {
      switch (i.tag) {
        case k:
        case W:
        case ue: {
          i.mode & pn ? (f0(), Wr(Ji | ei, i, i.return), c0(i)) : Wr(Ji | ei, i, i.return);
          break;
        }
      }
    }
    function HR(i, r) {
      for (; pt !== null; ) {
        var d = pt;
        gn(d), VR(d, r), Ui();
        var m = d.child;
        m !== null ? (Fa(m, d), pt = m) : kR(i);
      }
    }
    function kR(i) {
      for (; pt !== null; ) {
        var r = pt, d = r.sibling, m = r.return;
        if (g1(r), r === i) {
          pt = null;
          return;
        }
        if (d !== null) {
          Fa(d, m), pt = d;
          return;
        }
        pt = m;
      }
    }
    function VR(i, r) {
      switch (i.tag) {
        case k:
        case W:
        case ue: {
          i.mode & pn ? (f0(), Wr(Ji, i, r), c0(i)) : Wr(Ji, i, r);
          break;
        }
      }
    }
    var T1 = !1;
    function Fa(i, r) {
      !T1 && i.return !== r && (T1 = !0, h("Internal React error: Return pointer is inconsistent with parent.")), i.return = r;
    }
    function GR(i) {
      switch (i.tag) {
        case k:
        case W:
        case ue: {
          try {
            _o(xi | ei, i);
          } catch (d) {
            Ki(d), $i(i, i.return, d);
          }
          break;
        }
        case G: {
          var r = i.stateNode;
          try {
            r.componentDidMount();
          } catch (d) {
            Ki(d), $i(i, i.return, d);
          }
          break;
        }
      }
    }
    function WR(i) {
      switch (i.tag) {
        case k:
        case W:
        case ue: {
          try {
            _o(Ji | ei, i);
          } catch (r) {
            Ki(r), $i(i, i.return, r);
          }
          break;
        }
      }
    }
    function qR(i) {
      switch (i.tag) {
        case k:
        case W:
        case ue: {
          try {
            Wr(xi | ei, i, i.return);
          } catch (d) {
            Ki(d), $i(i, i.return, d);
          }
          break;
        }
        case G: {
          var r = i.stateNode;
          typeof r.componentWillUnmount == "function" && A0(i, i.return, r);
          break;
        }
      }
    }
    function XR(i) {
      switch (i.tag) {
        case k:
        case W:
        case ue:
          try {
            Wr(Ji | ei, i, i.return);
          } catch (r) {
            Ki(r), $i(i, i.return, r);
          }
      }
    }
    var ov = 0, lv = 1, uv = 2, cv = 3, fv = 4;
    if (typeof Symbol == "function" && Symbol.for) {
      var Eh = Symbol.for;
      ov = Eh("selector.component"), lv = Eh("selector.has_pseudo_class"), uv = Eh("selector.role"), cv = Eh("selector.test_id"), fv = Eh("selector.text");
    }
    function jR(i) {
      return {
        $$typeof: ov,
        value: i
      };
    }
    function YR(i) {
      return {
        $$typeof: lv,
        value: i
      };
    }
    function ZR(i) {
      return {
        $$typeof: uv,
        value: i
      };
    }
    function JR(i) {
      return {
        $$typeof: fv,
        value: i
      };
    }
    function QR(i) {
      return {
        $$typeof: cv,
        value: i
      };
    }
    function U0(i) {
      var r = md(i);
      if (r != null) {
        if (typeof r.memoizedProps["data-testname"] != "string")
          throw new Error("Invalid host root specified. Should be either a React container or a node with a testname attribute.");
        return r;
      } else {
        var d = Yp(i);
        if (d === null)
          throw new Error("Could not find React container within specified host subtree.");
        return d.stateNode.current;
      }
    }
    function N0(i, r) {
      switch (r.$$typeof) {
        case ov:
          if (i.type === r.value)
            return !0;
          break;
        case lv:
          return KR(i, r.value);
        case uv:
          if (i.tag === te) {
            var d = i.stateNode;
            if (gd(d, r.value))
              return !0;
          }
          break;
        case fv:
          if (i.tag === te || i.tag === $) {
            var m = $g(i);
            if (m !== null && m.indexOf(r.value) >= 0)
              return !0;
          }
          break;
        case cv:
          if (i.tag === te) {
            var y = i.memoizedProps["data-testname"];
            if (typeof y == "string" && y.toLowerCase() === r.value.toLowerCase())
              return !0;
          }
          break;
        default:
          throw new Error("Invalid selector type specified.");
      }
      return !1;
    }
    function z0(i) {
      switch (i.$$typeof) {
        case ov:
          var r = Pe(i.value) || "Unknown";
          return "<" + r + ">";
        case lv:
          return ":has(" + (z0(i) || "") + ")";
        case uv:
          return '[role="' + i.value + '"]';
        case fv:
          return '"' + i.value + '"';
        case cv:
          return '[data-testname="' + i.value + '"]';
        default:
          throw new Error("Invalid selector type specified.");
      }
    }
    function C1(i, r) {
      for (var d = [], m = [i, 0], y = 0; y < m.length; ) {
        var w = m[y++], D = m[y++], N = r[D];
        if (!(w.tag === te && Xn(w))) {
          for (; N != null && N0(w, N); )
            D++, N = r[D];
          if (D === r.length)
            d.push(w);
          else
            for (var B = w.child; B !== null; )
              m.push(B, D), B = B.sibling;
        }
      }
      return d;
    }
    function KR(i, r) {
      for (var d = [i, 0], m = 0; m < d.length; ) {
        var y = d[m++], w = d[m++], D = r[w];
        if (!(y.tag === te && Xn(y))) {
          for (; D != null && N0(y, D); )
            w++, D = r[w];
          if (w === r.length)
            return !0;
          for (var N = y.child; N !== null; )
            d.push(N, w), N = N.sibling;
        }
      }
      return !1;
    }
    function dv(i, r) {
      if (!ys)
        throw new Error("Test selector API is not supported by this renderer.");
      for (var d = U0(i), m = C1(d, r), y = [], w = Array.from(m), D = 0; D < w.length; ) {
        var N = w[D++];
        if (N.tag === te) {
          if (Xn(N))
            continue;
          y.push(N.stateNode);
        } else
          for (var B = N.child; B !== null; )
            w.push(B), B = B.sibling;
      }
      return y;
    }
    function $R(i, r) {
      if (!ys)
        throw new Error("Test selector API is not supported by this renderer.");
      for (var d = U0(i), m = 0, y = [], w = [d, 0], D = 0; D < w.length; ) {
        var N = w[D++], B = w[D++], J = r[B];
        if (!(N.tag === te && Xn(N)) && (N0(N, J) && (y.push(z0(J)), B++, B > m && (m = B)), B < r.length))
          for (var re = N.child; re !== null; )
            w.push(re, B), re = re.sibling;
      }
      if (m < r.length) {
        for (var he = [], Ce = m; Ce < r.length; Ce++)
          he.push(z0(r[Ce]));
        return `findAllNodes was able to match part of the selector:
` + ("  " + y.join(" > ") + `

`) + `No matching component was found for:
` + ("  " + he.join(" > "));
      }
      return null;
    }
    function e3(i, r) {
      if (!ys)
        throw new Error("Test selector API is not supported by this renderer.");
      for (var d = dv(i, r), m = [], y = 0; y < d.length; y++)
        m.push(Kg(d[y]));
      for (var w = m.length - 1; w > 0; w--)
        for (var D = m[w], N = D.x, B = N + D.width, J = D.y, re = J + D.height, he = w - 1; he >= 0; he--)
          if (w !== he) {
            var Ce = m[he], Ue = Ce.x, Xe = Ue + Ce.width, Je = Ce.y, Ut = Je + Ce.height;
            if (N >= Ue && J >= Je && B <= Xe && re <= Ut) {
              m.splice(w, 1);
              break;
            } else if (N === Ue && D.width === Ce.width && !(Ut < J) && !(Je > re)) {
              Je > J && (Ce.height += Je - J, Ce.y = J), Ut < re && (Ce.height = re - Je), m.splice(w, 1);
              break;
            } else if (J === Je && D.height === Ce.height && !(Xe < N) && !(Ue > B)) {
              Ue > N && (Ce.width += Ue - N, Ce.x = N), Xe < B && (Ce.width = B - Ue), m.splice(w, 1);
              break;
            }
          }
      return m;
    }
    function t3(i, r) {
      if (!ys)
        throw new Error("Test selector API is not supported by this renderer.");
      for (var d = U0(i), m = C1(d, r), y = Array.from(m), w = 0; w < y.length; ) {
        var D = y[w++];
        if (!Xn(D)) {
          if (D.tag === te) {
            var N = D.stateNode;
            if (ey(N))
              return !0;
          }
          for (var B = D.child; B !== null; )
            y.push(B), B = B.sibling;
        }
      }
      return !1;
    }
    var hv = [];
    function n3() {
      ys && hv.forEach(function(i) {
        return i();
      });
    }
    function i3(i, r, d, m) {
      if (!ys)
        throw new Error("Test selector API is not supported by this renderer.");
      var y = dv(i, r), w = yd(y, d, m), D = w.disconnect, N = w.observe, B = w.unobserve, J = function() {
        var re = dv(i, r);
        y.forEach(function(he) {
          re.indexOf(he) < 0 && B(he);
        }), re.forEach(function(he) {
          y.indexOf(he) < 0 && N(he);
        });
      };
      return hv.push(J), {
        disconnect: function() {
          var re = hv.indexOf(J);
          re >= 0 && hv.splice(re, 1), D();
        }
      };
    }
    var r3 = s.ReactCurrentActQueue;
    function a3(i) {
      {
        var r = (
          // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
        ), d = typeof jest < "u";
        return mc && d && r !== !1;
      }
    }
    function A1() {
      {
        var i = (
          // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
        );
        return !i && r3.current !== null && h("The current testing environment is not configured to support act(...)"), i;
      }
    }
    var s3 = Math.ceil, O0 = s.ReactCurrentDispatcher, I0 = s.ReactCurrentOwner, ti = s.ReactCurrentBatchConfig, rs = s.ReactCurrentActQueue, Ci = (
      /*             */
      0
    ), F0 = (
      /*               */
      1
    ), fr = (
      /*                */
      2
    ), as = (
      /*                */
      4
    ), xo = 0, wh = 1, Du = 2, pv = 3, Th = 4, R1 = 5, B0 = 6, en = Ci, dr = null, ni = null, Oi = We, zs = We, H0 = ba(We), Ii = xo, Ch = null, mv = We, Ah = We, vv = We, Rh = null, qr = null, k0 = 0, L1 = 500, D1 = 1 / 0, o3 = 500;
    function yf() {
      D1 = Qn() + o3;
    }
    function P1() {
      return D1;
    }
    var gv = !1, V0 = null, _f = null, Pu = !1, So = null, Lh = We, G0 = [], l3 = 50, Dh = 0, W0 = null, u3 = 50, yv = 0, Ph = zn, _v = We;
    function xv() {
      return dr;
    }
    function Er() {
      return (en & (fr | as)) !== Ci ? Qn() : (Ph !== zn || (Ph = Qn()), Ph);
    }
    function Cl(i) {
      var r = i.mode;
      if ((r & En) === kt)
        return sn;
      if ((en & fr) !== Ci && Oi !== We)
        return al(Oi);
      var d = nh() !== vm;
      if (d) {
        if (ti.transition !== null) {
          var m = ti.transition;
          m._updatedFibers || (m._updatedFibers = /* @__PURE__ */ new Set()), m._updatedFibers.add(i);
        }
        return _v === gi && (_v = om()), _v;
      }
      var y = _r();
      if (y !== gi)
        return y;
      var w = Qg();
      return w;
    }
    function c3(i) {
      var r = i.mode;
      return (r & En) === kt ? sn : lm();
    }
    function Fi(i, r, d) {
      I3();
      var m = Sv(i, r);
      return m === null ? null : (ro(m, r, d), (en & fr) !== We && m === dr ? H3(i) : (rr && Vd(m, i, r), k3(i), m === dr && ((en & fr) === Ci && (Ah = jt(Ah, r)), Ii === Th && Al(m, Oi)), Xr(m, d), r === sn && en === Ci && (i.mode & En) === kt && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
      !rs.isBatchingLegacy && (yf(), th())), m);
    }
    function f3(i, r, d) {
      var m = i.current;
      m.lanes = r, ro(i, r, d), Xr(i, d);
    }
    function Sv(i, r) {
      i.lanes = jt(i.lanes, r);
      var d = i.alternate;
      d !== null && (d.lanes = jt(d.lanes, r)), d === null && (i.flags & (Le | wi)) !== X && X1(i);
      for (var m = i, y = i.return; y !== null; )
        y.childLanes = jt(y.childLanes, r), d = y.alternate, d !== null ? d.childLanes = jt(d.childLanes, r) : (y.flags & (Le | wi)) !== X && X1(i), m = y, y = y.return;
      if (m.tag === I) {
        var w = m.stateNode;
        return w;
      } else
        return null;
    }
    function U1(i, r) {
      return (
        // TODO: Optimize slightly by comparing to root that fiber belongs to.
        // Requires some refactoring. Not a big deal though since it's rare for
        // concurrent apps to have more than a single root.
        dr !== null && (i.mode & En) !== kt && // If this is a render phase update (i.e. UNSAFE_componentWillReceiveProps),
        // then don't treat this as an interleaved update. This pattern is
        // accompanied by a warning but we haven't fully deprecated it yet. We can
        // remove once the deferRenderPhaseUpdateToNextBatch flag is enabled.
        (en & fr) === Ci
      );
    }
    function Xr(i, r) {
      var d = i.callbackNode;
      am(i, r);
      var m = hu(i, i === dr ? Oi : We);
      if (m === We) {
        d !== null && Y1(d), i.callbackNode = null, i.callbackPriority = gi;
        return;
      }
      var y = Aa(m), w = i.callbackPriority;
      if (w === y && // Special case related to `act`. If the currently scheduled task is a
      // Scheduler task, rather than an `act` task, cancel it and re-scheduled
      // on the `act` queue.
      !(rs.current !== null && d !== J0)) {
        d == null && w !== sn && h("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
        return;
      }
      d != null && Y1(d);
      var D;
      if (y === sn)
        i.tag === Ks ? (rs.isBatchingLegacy !== null && (rs.didScheduleLegacyUpdate = !0), pm(O1.bind(null, i))) : $a(O1.bind(null, i)), vn ? rs.current !== null ? rs.current.push(Hr) : jp(function() {
          en === Ci && Hr();
        }) : Av(lo, Hr), D = null;
      else {
        var N;
        switch (qd(m)) {
          case sa:
            N = lo;
            break;
          case ll:
            N = pu;
            break;
          case ul:
            N = Qa;
            break;
          case Yc:
            N = cl;
            break;
          default:
            N = Qa;
            break;
        }
        D = Av(N, N1.bind(null, i));
      }
      i.callbackPriority = y, i.callbackNode = D;
    }
    function N1(i, r) {
      if (bA(), Ph = zn, _v = We, (en & (fr | as)) !== Ci)
        throw new Error("Should not already be working.");
      var d = i.callbackNode, m = Os();
      if (m && i.callbackNode !== d)
        return null;
      var y = hu(i, i === dr ? Oi : We);
      if (y === We)
        return null;
      var w = !no(i, y) && !sm(i, y) && !r, D = w ? w3(i, y) : wv(i, y);
      if (D !== xo) {
        if (D === Du) {
          var N = Gc(i);
          N !== We && (y = N, D = q0(i, N));
        }
        if (D === wh) {
          var B = Ch;
          throw Uu(i, We), Al(i, y), Xr(i, Qn()), B;
        }
        if (D === B0)
          Al(i, y);
        else {
          var J = !no(i, y), re = i.current.alternate;
          if (J && !h3(re)) {
            if (D = wv(i, y), D === Du) {
              var he = Gc(i);
              he !== We && (y = he, D = q0(i, he));
            }
            if (D === wh) {
              var Ce = Ch;
              throw Uu(i, We), Al(i, y), Xr(i, Qn()), Ce;
            }
          }
          i.finishedWork = re, i.finishedLanes = y, d3(i, D, y);
        }
      }
      return Xr(i, Qn()), i.callbackNode === d ? N1.bind(null, i) : null;
    }
    function q0(i, r) {
      var d = Rh;
      if (As(i)) {
        var m = Uu(i, r);
        m.flags |= ln, gr(i.containerInfo);
      }
      var y = wv(i, r);
      if (y !== Du) {
        var w = qr;
        qr = d, w !== null && z1(w);
      }
      return y;
    }
    function z1(i) {
      qr === null ? qr = i : qr.push.apply(qr, i);
    }
    function d3(i, r, d) {
      switch (r) {
        case xo:
        case wh:
          throw new Error("Root did not complete. This is a bug in React.");
        case Du: {
          Nu(i, qr);
          break;
        }
        case pv: {
          if (Al(i, d), Hd(d) && // do not delay if we're inside an act() scope
          !Z1()) {
            var m = k0 + L1 - Qn();
            if (m > 10) {
              var y = hu(i, We);
              if (y !== We)
                break;
              var w = i.suspendedLanes;
              if (!sl(w, d)) {
                Er(), cm(i, w);
                break;
              }
              i.timeoutHandle = Xp(Nu.bind(null, i, qr), m);
              break;
            }
          }
          Nu(i, qr);
          break;
        }
        case Th: {
          if (Al(i, d), qc(d))
            break;
          if (!Z1()) {
            var D = im(i, d), N = D, B = Qn() - N, J = O3(B) - B;
            if (J > 10) {
              i.timeoutHandle = Xp(Nu.bind(null, i, qr), J);
              break;
            }
          }
          Nu(i, qr);
          break;
        }
        case R1: {
          Nu(i, qr);
          break;
        }
        default:
          throw new Error("Unknown root exit status.");
      }
    }
    function h3(i) {
      for (var r = i; ; ) {
        if (r.flags & ms) {
          var d = r.updateQueue;
          if (d !== null) {
            var m = d.stores;
            if (m !== null)
              for (var y = 0; y < m.length; y++) {
                var w = m[y], D = w.getSnapshot, N = w.value;
                try {
                  if (!Sr(D(), N))
                    return !1;
                } catch {
                  return !1;
                }
              }
          }
        }
        var B = r.child;
        if (r.subtreeFlags & ms && B !== null) {
          B.return = r, r = B;
          continue;
        }
        if (r === i)
          return !0;
        for (; r.sibling === null; ) {
          if (r.return === null || r.return === i)
            return !0;
          r = r.return;
        }
        r.sibling.return = r.return, r = r.sibling;
      }
      return !0;
    }
    function Al(i, r) {
      r = io(r, vv), r = io(r, Ah), um(i, r);
    }
    function O1(i) {
      if (EA(), (en & (fr | as)) !== Ci)
        throw new Error("Should not already be working.");
      Os();
      var r = hu(i, We);
      if (!Jn(r, sn))
        return Xr(i, Qn()), null;
      var d = wv(i, r);
      if (i.tag !== Ks && d === Du) {
        var m = Gc(i);
        m !== We && (r = m, d = q0(i, m));
      }
      if (d === wh) {
        var y = Ch;
        throw Uu(i, We), Al(i, r), Xr(i, Qn()), y;
      }
      if (d === B0)
        throw new Error("Root did not complete. This is a bug in React.");
      var w = i.current.alternate;
      return i.finishedWork = w, i.finishedLanes = r, Nu(i, qr), Xr(i, Qn()), null;
    }
    function p3(i, r) {
      r !== We && (so(i, jt(r, sn)), Xr(i, Qn()), (en & (fr | as)) === Ci && (yf(), Hr()));
    }
    function m3(i) {
      var r = _r(), d = ti.transition;
      try {
        return ti.transition = null, yi(ul), i();
      } finally {
        yi(r), ti.transition = d;
      }
    }
    function v3(i, r) {
      var d = en;
      en |= F0;
      try {
        return i(r);
      } finally {
        en = d, en === Ci && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
        !rs.isBatchingLegacy && (yf(), th());
      }
    }
    function g3(i, r, d, m, y) {
      var w = _r(), D = ti.transition;
      try {
        return ti.transition = null, yi(sa), i(r, d, m, y);
      } finally {
        yi(w), ti.transition = D, en === Ci && yf();
      }
    }
    function Mv(i) {
      So !== null && So.tag === Ks && (en & (fr | as)) === Ci && Os();
      var r = en;
      en |= F0;
      var d = ti.transition, m = _r();
      try {
        return ti.transition = null, yi(sa), i ? i() : void 0;
      } finally {
        yi(m), ti.transition = d, en = r, (en & (fr | as)) === Ci && Hr();
      }
    }
    function y3() {
      return (en & (fr | as)) !== Ci;
    }
    function _3(i) {
      var r = en;
      en |= F0;
      var d = ti.transition, m = _r();
      try {
        ti.transition = null, yi(sa), i();
      } finally {
        yi(m), ti.transition = d, en = r, en === Ci && (yf(), Hr());
      }
    }
    function bv(i, r) {
      An(H0, zs, i), zs = jt(zs, r);
    }
    function X0(i) {
      zs = H0.current, mi(H0, i);
    }
    function Uu(i, r) {
      i.finishedWork = null, i.finishedLanes = We;
      var d = i.timeoutHandle;
      if (d !== Bo && (i.timeoutHandle = Bo, pc(d)), ni !== null)
        for (var m = ni.return; m !== null; ) {
          var y = m.alternate;
          a1(y, m), m = m.return;
        }
      dr = i;
      var w = zu(i.current, null);
      return ni = w, Oi = zs = r, Ii = xo, Ch = null, mv = We, Ah = We, vv = We, Rh = null, qr = null, Dn(), kr.discardPendingWarnings(), w;
    }
    function I1(i, r) {
      do {
        var d = ni;
        try {
          if (l(), rM(), Ui(), I0.current = null, d === null || d.return === null) {
            Ii = wh, Ch = r, ni = null;
            return;
          }
          if (F && d.mode & pn && jm(d, !0), U)
            if (Ka(), r !== null && typeof r == "object" && typeof r.then == "function") {
              var m = r;
              Kc(d, m, Oi);
            } else
              ws(d, r, Oi);
          RA(i, d.return, d, r, Oi), k1(d);
        } catch (y) {
          r = y, ni === d && d !== null ? (d = d.return, ni = d) : d = ni;
          continue;
        }
        return;
      } while (!0);
    }
    function F1() {
      var i = O0.current;
      return O0.current = Vm, i === null ? Vm : i;
    }
    function B1(i) {
      O0.current = i;
    }
    function x3() {
      k0 = Qn();
    }
    function Ev(i) {
      mv = jt(i, mv);
    }
    function S3() {
      Ii === xo && (Ii = pv);
    }
    function j0() {
      (Ii === xo || Ii === pv || Ii === Du) && (Ii = Th), dr !== null && (Wc(mv) || Wc(Ah)) && Al(dr, Oi);
    }
    function M3(i) {
      Ii !== Th && (Ii = Du), Rh === null ? Rh = [i] : Rh.push(i);
    }
    function b3() {
      return Ii === xo;
    }
    function wv(i, r) {
      var d = en;
      en |= fr;
      var m = F1();
      if (dr !== i || Oi !== r) {
        if (rr) {
          var y = i.memoizedUpdaters;
          y.size > 0 && (Uh(i, Oi), y.clear()), Gd(i, r);
        }
        Uu(i, r);
      }
      yu(r);
      do
        try {
          E3();
          break;
        } catch (w) {
          I1(i, w);
        }
      while (!0);
      if (l(), en = d, B1(m), ni !== null)
        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
      return Gi(), dr = null, Oi = We, Ii;
    }
    function E3() {
      for (; ni !== null; )
        H1(ni);
    }
    function w3(i, r) {
      var d = en;
      en |= fr;
      var m = F1();
      if (dr !== i || Oi !== r) {
        if (rr) {
          var y = i.memoizedUpdaters;
          y.size > 0 && (Uh(i, Oi), y.clear()), Gd(i, r);
        }
        yf(), Uu(i, r);
      }
      yu(r);
      do
        try {
          T3();
          break;
        } catch (w) {
          I1(i, w);
        }
      while (!0);
      return l(), B1(m), en = d, ni !== null ? (ef(), xo) : (Gi(), dr = null, Oi = We, Ii);
    }
    function T3() {
      for (; ni !== null && !hm(); )
        H1(ni);
    }
    function H1(i) {
      var r = i.alternate;
      gn(i);
      var d;
      (i.mode & pn) !== kt ? (u0(i), d = Y0(r, i, zs), jm(i, !0)) : d = Y0(r, i, zs), Ui(), i.memoizedProps = i.pendingProps, d === null ? k1(i) : ni = d, I0.current = null;
    }
    function k1(i) {
      var r = i;
      do {
        var d = r.alternate, m = r.return;
        if ((r.flags & ee) === X) {
          gn(r);
          var y = void 0;
          if ((r.mode & pn) === kt ? y = FM(d, r, zs) : (u0(r), y = FM(d, r, zs), jm(r, !1)), Ui(), y !== null) {
            ni = y;
            return;
          }
        } else {
          var w = nR(d, r);
          if (w !== null) {
            w.flags &= O, ni = w;
            return;
          }
          if ((r.mode & pn) !== kt) {
            jm(r, !1);
            for (var D = r.actualDuration, N = r.child; N !== null; )
              D += N.actualDuration, N = N.sibling;
            r.actualDuration = D;
          }
          if (m !== null)
            m.flags |= ee, m.subtreeFlags = X, m.deletions = null;
          else {
            Ii = B0, ni = null;
            return;
          }
        }
        var B = r.sibling;
        if (B !== null) {
          ni = B;
          return;
        }
        r = m, ni = r;
      } while (r !== null);
      Ii === xo && (Ii = R1);
    }
    function Nu(i, r) {
      var d = _r(), m = ti.transition;
      try {
        ti.transition = null, yi(sa), C3(i, r, d);
      } finally {
        ti.transition = m, yi(d);
      }
      return null;
    }
    function C3(i, r, d) {
      do
        Os();
      while (So !== null);
      if (F3(), (en & (fr | as)) !== Ci)
        throw new Error("Should not already be working.");
      var m = i.finishedWork, y = i.finishedLanes;
      if (_i(y), m === null)
        return dl(), null;
      if (y === We && h("root.finishedLanes should not be empty during a commit. This is a bug in React."), i.finishedWork = null, i.finishedLanes = We, m === i.current)
        throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
      i.callbackNode = null, i.callbackPriority = gi;
      var w = jt(m.lanes, m.childLanes);
      ao(i, w), i === dr && (dr = null, ni = null, Oi = We), ((m.subtreeFlags & Yn) !== X || (m.flags & Yn) !== X) && (Pu || (Pu = !0, Av(Qa, function() {
        return Os(), null;
      })));
      var D = (m.subtreeFlags & (Ct | Ht | Cn | Yn)) !== X, N = (m.flags & (Ct | Ht | Cn | Yn)) !== X;
      if (D || N) {
        var B = ti.transition;
        ti.transition = null;
        var J = _r();
        yi(sa);
        var re = en;
        en |= as, I0.current = null, uR(i, m), RM(), wR(i, m, y), Gp(i.containerInfo), i.current = m, Ts(y), RR(m, i, y), $c(), Jc(), en = re, yi(J), ti.transition = B;
      } else
        i.current = m, RM();
      var he = Pu;
      if (Pu && (Pu = !1, So = i, Lh = y), w = i.pendingLanes, w === We && (_f = null), he || q1(i.current, !1), Kt(m.stateNode, d), rr && i.memoizedUpdaters.clear(), n3(), Xr(i, Qn()), r !== null)
        for (var Ce = i.onRecoverableError, Ue = 0; Ue < r.length; Ue++) {
          var Xe = r[Ue];
          Ce(Xe);
        }
      if (gv) {
        gv = !1;
        var Je = V0;
        throw V0 = null, Je;
      }
      return Jn(Lh, sn) && i.tag !== Ks && Os(), w = i.pendingLanes, Jn(w, sn) ? (MA(), i === W0 ? Dh++ : (Dh = 0, W0 = i)) : Dh = 0, Hr(), dl(), null;
    }
    function Os() {
      if (So !== null) {
        var i = qd(Lh), r = ly(ul, i), d = ti.transition, m = _r();
        try {
          return ti.transition = null, yi(r), R3();
        } finally {
          yi(m), ti.transition = d;
        }
      }
      return !1;
    }
    function A3(i) {
      G0.push(i), Pu || (Pu = !0, Av(Qa, function() {
        return Os(), null;
      }));
    }
    function R3() {
      if (So === null)
        return !1;
      var i = So, r = Lh;
      if (So = null, Lh = We, (en & (fr | as)) !== Ci)
        throw new Error("Cannot flush passive effects while already rendering.");
      gu(r);
      var d = en;
      en |= as, OR(i.current), PR(i, i.current);
      {
        var m = G0;
        G0 = [];
        for (var y = 0; y < m.length; y++) {
          var w = m[y];
          hR(i, w);
        }
      }
      $d(), q1(i.current, !0), en = d, Hr(), yv = So === null ? 0 : yv + 1, ci(i);
      {
        var D = i.current.stateNode;
        D.effectDuration = 0, D.passiveEffectDuration = 0;
      }
      return !0;
    }
    function V1(i) {
      return _f !== null && _f.has(i);
    }
    function L3(i) {
      _f === null ? _f = /* @__PURE__ */ new Set([i]) : _f.add(i);
    }
    function D3(i) {
      gv || (gv = !0, V0 = i);
    }
    var P3 = D3;
    function G1(i, r, d) {
      var m = Ym(d, r), y = DM(i, m, sn);
      $t(i, y);
      var w = Er(), D = Sv(i, sn);
      D !== null && (ro(D, sn, w), Xr(D, w));
    }
    function $i(i, r, d) {
      if (i.tag === I) {
        G1(i, i, d);
        return;
      }
      var m = null;
      for (m = r; m !== null; ) {
        if (m.tag === I) {
          G1(m, i, d);
          return;
        } else if (m.tag === G) {
          var y = m.type, w = m.stateNode;
          if (typeof y.getDerivedStateFromError == "function" || typeof w.componentDidCatch == "function" && !V1(w)) {
            var D = Ym(d, i), N = p0(m, D, sn);
            $t(m, N);
            var B = Er(), J = Sv(m, sn);
            J !== null && (ro(J, sn, B), Xr(J, B));
            return;
          }
        }
        m = m.return;
      }
      h(`Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.

Error message:

%s`, d);
    }
    function U3(i, r, d) {
      var m = i.pingCache;
      m !== null && m.delete(r);
      var y = Er();
      cm(i, d), V3(i), dr === i && sl(Oi, d) && (Ii === Th || Ii === pv && Hd(Oi) && Qn() - k0 < L1 ? Uu(i, We) : vv = jt(vv, d)), Xr(i, y);
    }
    function W1(i, r) {
      r === gi && (r = c3(i));
      var d = Er(), m = Sv(i, r);
      m !== null && (ro(m, r, d), Xr(m, d));
    }
    function N3(i) {
      var r = i.memoizedState, d = gi;
      r !== null && (d = r.retryLane), W1(i, d);
    }
    function z3(i, r) {
      var d = gi, m;
      switch (i.tag) {
        case ne:
          m = i.stateNode;
          var y = i.memoizedState;
          y !== null && (d = y.retryLane);
          break;
        case Be:
          m = i.stateNode;
          break;
        default:
          throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
      }
      m !== null && m.delete(r), W1(i, d);
    }
    function O3(i) {
      return i < 120 ? 120 : i < 480 ? 480 : i < 1080 ? 1080 : i < 1920 ? 1920 : i < 3e3 ? 3e3 : i < 4320 ? 4320 : s3(i / 1960) * 1960;
    }
    function I3() {
      if (Dh > l3)
        throw Dh = 0, W0 = null, new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
      yv > u3 && (yv = 0, h("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."));
    }
    function F3() {
      kr.flushLegacyContextWarning(), kr.flushPendingUnsafeLifecycleWarnings();
    }
    function q1(i, r) {
      gn(i), Tv(i, bt, qR), r && Tv(i, Mt, XR), Tv(i, bt, GR), r && Tv(i, Mt, WR), Ui();
    }
    function Tv(i, r, d) {
      for (var m = i, y = null; m !== null; ) {
        var w = m.subtreeFlags & r;
        m !== y && m.child !== null && w !== X ? m = m.child : ((m.flags & r) !== X && d(m), m.sibling !== null ? m = m.sibling : m = y = m.return);
      }
    }
    var Cv = null;
    function X1(i) {
      {
        if ((en & fr) !== Ci || !(i.mode & En))
          return;
        var r = i.tag;
        if (r !== z && r !== I && r !== G && r !== k && r !== W && r !== Se && r !== ue)
          return;
        var d = rt(i) || "ReactComponent";
        if (Cv !== null) {
          if (Cv.has(d))
            return;
          Cv.add(d);
        } else
          Cv = /* @__PURE__ */ new Set([d]);
        var m = Mr;
        try {
          gn(i), h("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally {
          m ? gn(i) : Ui();
        }
      }
    }
    var Y0;
    {
      var B3 = null;
      Y0 = function(i, r, d) {
        var m = eb(B3, r);
        try {
          return r1(i, r, d);
        } catch (w) {
          if (w !== null && typeof w == "object" && typeof w.then == "function")
            throw w;
          if (l(), rM(), a1(i, r), eb(r, m), r.mode & pn && u0(r), l1(null, r1, null, i, r, d), aR()) {
            var y = u1();
            typeof y == "object" && y !== null && y._suppressLogging && typeof w == "object" && w !== null && !w._suppressLogging && (w._suppressLogging = !0);
          }
          throw w;
        }
      };
    }
    var j1 = !1, Z0;
    Z0 = /* @__PURE__ */ new Set();
    function H3(i) {
      if (la && !_A())
        switch (i.tag) {
          case k:
          case W:
          case ue: {
            var r = ni && rt(ni) || "Unknown", d = r;
            if (!Z0.has(d)) {
              Z0.add(d);
              var m = rt(i) || "Unknown";
              h("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", m, r, r);
            }
            break;
          }
          case G: {
            j1 || (h("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."), j1 = !0);
            break;
          }
        }
    }
    function Uh(i, r) {
      if (rr) {
        var d = i.memoizedUpdaters;
        d.forEach(function(m) {
          Vd(i, m, r);
        });
      }
    }
    var J0 = {};
    function Av(i, r) {
      {
        var d = rs.current;
        return d !== null ? (d.push(r), J0) : Xd(i, r);
      }
    }
    function Y1(i) {
      if (i !== J0)
        return dm(i);
    }
    function Z1() {
      return rs.current !== null;
    }
    function k3(i) {
      {
        if (i.mode & En) {
          if (!A1())
            return;
        } else if (!a3() || en !== Ci || i.tag !== k && i.tag !== W && i.tag !== ue)
          return;
        if (rs.current === null) {
          var r = Mr;
          try {
            gn(i), h(`An update to %s inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`, rt(i));
          } finally {
            r ? gn(i) : Ui();
          }
        }
      }
    }
    function V3(i) {
      i.tag !== Ks && A1() && rs.current === null && h(`A suspended resource finished loading inside a test, but the event was not wrapped in act(...).

When testing, code that resolves suspended data should be wrapped into act(...):

act(() => {
  /* finish loading suspended data */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`);
    }
    var Ba = null, xf = null, G3 = function(i) {
      Ba = i;
    };
    function Sf(i) {
      {
        if (Ba === null)
          return i;
        var r = Ba(i);
        return r === void 0 ? i : r.current;
      }
    }
    function Q0(i) {
      return Sf(i);
    }
    function K0(i) {
      {
        if (Ba === null)
          return i;
        var r = Ba(i);
        if (r === void 0) {
          if (i != null && typeof i.render == "function") {
            var d = Sf(i.render);
            if (i.render !== d) {
              var m = {
                $$typeof: mt,
                render: d
              };
              return i.displayName !== void 0 && (m.displayName = i.displayName), m;
            }
          }
          return i;
        }
        return r.current;
      }
    }
    function J1(i, r) {
      {
        if (Ba === null)
          return !1;
        var d = i.elementType, m = r.type, y = !1, w = typeof m == "object" && m !== null ? m.$$typeof : null;
        switch (i.tag) {
          case G: {
            typeof m == "function" && (y = !0);
            break;
          }
          case k: {
            (typeof m == "function" || w === H) && (y = !0);
            break;
          }
          case W: {
            (w === mt || w === H) && (y = !0);
            break;
          }
          case Se:
          case ue: {
            (w === Y || w === H) && (y = !0);
            break;
          }
          default:
            return !1;
        }
        if (y) {
          var D = Ba(d);
          if (D !== void 0 && D === Ba(m))
            return !0;
        }
        return !1;
      }
    }
    function Q1(i) {
      {
        if (Ba === null || typeof WeakSet != "function")
          return;
        xf === null && (xf = /* @__PURE__ */ new WeakSet()), xf.add(i);
      }
    }
    var W3 = function(i, r) {
      {
        if (Ba === null)
          return;
        var d = r.staleFamilies, m = r.updatedFamilies;
        Os(), Mv(function() {
          $0(i.current, m, d);
        });
      }
    }, q3 = function(i, r) {
      {
        if (i.context !== fn)
          return;
        Os(), Mv(function() {
          ib(r, i, null, null);
        });
      }
    };
    function $0(i, r, d) {
      {
        var m = i.alternate, y = i.child, w = i.sibling, D = i.tag, N = i.type, B = null;
        switch (D) {
          case k:
          case ue:
          case G:
            B = N;
            break;
          case W:
            B = N.render;
            break;
        }
        if (Ba === null)
          throw new Error("Expected resolveFamily to be set during hot reload.");
        var J = !1, re = !1;
        if (B !== null) {
          var he = Ba(B);
          he !== void 0 && (d.has(he) ? re = !0 : r.has(he) && (D === G ? re = !0 : J = !0));
        }
        xf !== null && (xf.has(i) || m !== null && xf.has(m)) && (re = !0), re && (i._debugNeedsRemount = !0), (re || J) && Fi(i, sn, zn), y !== null && !re && $0(y, r, d), w !== null && $0(w, r, d);
      }
    }
    var X3 = function(i, r) {
      {
        var d = /* @__PURE__ */ new Set(), m = new Set(r.map(function(y) {
          return y.current;
        }));
        return e_(i.current, m, d), d;
      }
    };
    function e_(i, r, d) {
      {
        var m = i.child, y = i.sibling, w = i.tag, D = i.type, N = null;
        switch (w) {
          case k:
          case ue:
          case G:
            N = D;
            break;
          case W:
            N = D.render;
            break;
        }
        var B = !1;
        N !== null && r.has(N) && (B = !0), B ? j3(i, d) : m !== null && e_(m, r, d), y !== null && e_(y, r, d);
      }
    }
    function j3(i, r) {
      {
        var d = Y3(i, r);
        if (d)
          return;
        for (var m = i; ; ) {
          switch (m.tag) {
            case te:
              r.add(m.stateNode);
              return;
            case Q:
              r.add(m.stateNode.containerInfo);
              return;
            case I:
              r.add(m.stateNode.containerInfo);
              return;
          }
          if (m.return === null)
            throw new Error("Expected to reach root first.");
          m = m.return;
        }
      }
    }
    function Y3(i, r) {
      for (var d = i, m = !1; ; ) {
        if (d.tag === te)
          m = !0, r.add(d.stateNode);
        else if (d.child !== null) {
          d.child.return = d, d = d.child;
          continue;
        }
        if (d === i)
          return m;
        for (; d.sibling === null; ) {
          if (d.return === null || d.return === i)
            return m;
          d = d.return;
        }
        d.sibling.return = d.return, d = d.sibling;
      }
      return !1;
    }
    var t_;
    {
      t_ = !1;
      try {
        var K1 = Object.preventExtensions({});
      } catch {
        t_ = !0;
      }
    }
    function Z3(i, r, d, m) {
      this.tag = i, this.key = d, this.elementType = null, this.type = null, this.stateNode = null, this.return = null, this.child = null, this.sibling = null, this.index = 0, this.ref = null, this.pendingProps = r, this.memoizedProps = null, this.updateQueue = null, this.memoizedState = null, this.dependencies = null, this.mode = m, this.flags = X, this.subtreeFlags = X, this.deletions = null, this.lanes = We, this.childLanes = We, this.alternate = null, this.actualDuration = Number.NaN, this.actualStartTime = Number.NaN, this.selfBaseDuration = Number.NaN, this.treeBaseDuration = Number.NaN, this.actualDuration = 0, this.actualStartTime = -1, this.selfBaseDuration = 0, this.treeBaseDuration = 0, this._debugSource = null, this._debugOwner = null, this._debugNeedsRemount = !1, this._debugHookTypes = null, !t_ && typeof Object.preventExtensions == "function" && Object.preventExtensions(this);
    }
    var ua = function(i, r, d, m) {
      return new Z3(i, r, d, m);
    };
    function n_(i) {
      var r = i.prototype;
      return !!(r && r.isReactComponent);
    }
    function J3(i) {
      return typeof i == "function" && !n_(i) && i.defaultProps === void 0;
    }
    function Q3(i) {
      if (typeof i == "function")
        return n_(i) ? G : k;
      if (i != null) {
        var r = i.$$typeof;
        if (r === mt)
          return W;
        if (r === Y)
          return Se;
      }
      return z;
    }
    function zu(i, r) {
      var d = i.alternate;
      d === null ? (d = ua(i.tag, r, i.key, i.mode), d.elementType = i.elementType, d.type = i.type, d.stateNode = i.stateNode, d._debugSource = i._debugSource, d._debugOwner = i._debugOwner, d._debugHookTypes = i._debugHookTypes, d.alternate = i, i.alternate = d) : (d.pendingProps = r, d.type = i.type, d.flags = X, d.subtreeFlags = X, d.deletions = null, d.actualDuration = 0, d.actualStartTime = -1), d.flags = i.flags & bn, d.childLanes = i.childLanes, d.lanes = i.lanes, d.child = i.child, d.memoizedProps = i.memoizedProps, d.memoizedState = i.memoizedState, d.updateQueue = i.updateQueue;
      var m = i.dependencies;
      switch (d.dependencies = m === null ? null : {
        lanes: m.lanes,
        firstContext: m.firstContext
      }, d.sibling = i.sibling, d.index = i.index, d.ref = i.ref, d.selfBaseDuration = i.selfBaseDuration, d.treeBaseDuration = i.treeBaseDuration, d._debugNeedsRemount = i._debugNeedsRemount, d.tag) {
        case z:
        case k:
        case ue:
          d.type = Sf(i.type);
          break;
        case G:
          d.type = Q0(i.type);
          break;
        case W:
          d.type = K0(i.type);
          break;
      }
      return d;
    }
    function K3(i, r) {
      i.flags &= bn | Le;
      var d = i.alternate;
      if (d === null)
        i.childLanes = We, i.lanes = r, i.child = null, i.subtreeFlags = X, i.memoizedProps = null, i.memoizedState = null, i.updateQueue = null, i.dependencies = null, i.stateNode = null, i.selfBaseDuration = 0, i.treeBaseDuration = 0;
      else {
        i.childLanes = d.childLanes, i.lanes = d.lanes, i.child = d.child, i.subtreeFlags = X, i.deletions = null, i.memoizedProps = d.memoizedProps, i.memoizedState = d.memoizedState, i.updateQueue = d.updateQueue, i.type = d.type;
        var m = d.dependencies;
        i.dependencies = m === null ? null : {
          lanes: m.lanes,
          firstContext: m.firstContext
        }, i.selfBaseDuration = d.selfBaseDuration, i.treeBaseDuration = d.treeBaseDuration;
      }
      return i;
    }
    function $3(i, r, d) {
      var m;
      return i === Dd ? (m = En, r === !0 && (m |= Zn, m |= Ir)) : m = kt, rr && (m |= pn), ua(I, null, null, m);
    }
    function i_(i, r, d, m, y, w) {
      var D = z, N = i;
      if (typeof i == "function")
        n_(i) ? (D = G, N = Q0(N)) : N = Sf(N);
      else if (typeof i == "string")
        D = te;
      else
        e:
          switch (i) {
            case Ne:
              return Rl(d.children, y, w, r);
            case nt:
              D = fe, y |= Zn, (y & En) !== kt && (y |= Ir);
              break;
            case Ze:
              return e2(d, y, w, r);
            case Nt:
              return t2(d, y, w, r);
            case Wt:
              return n2(d, y, w, r);
            case ke:
              return $1(d, y, w, r);
            case Qe:
            case xe:
            case Lt:
            case ht:
            case Ve:
            default: {
              if (typeof i == "object" && i !== null)
                switch (i.$$typeof) {
                  case xt:
                    D = Te;
                    break e;
                  case Et:
                    D = Ee;
                    break e;
                  case mt:
                    D = W, N = K0(N);
                    break e;
                  case Y:
                    D = Se;
                    break e;
                  case H:
                    D = pe, N = null;
                    break e;
                }
              var B = "";
              {
                (i === void 0 || typeof i == "object" && i !== null && Object.keys(i).length === 0) && (B += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
                var J = m ? rt(m) : null;
                J && (B += `

Check the render method of \`` + J + "`.");
              }
              throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (i == null ? i : typeof i) + "." + B));
            }
          }
      var re = ua(D, d, r, y);
      return re.elementType = i, re.type = N, re.lanes = w, re._debugOwner = m, re;
    }
    function r_(i, r, d) {
      var m = null;
      m = i._owner;
      var y = i.type, w = i.key, D = i.props, N = i_(y, w, D, m, r, d);
      return N._debugSource = i._source, N._debugOwner = i._owner, N;
    }
    function Rl(i, r, d, m) {
      var y = ua(ie, i, m, r);
      return y.lanes = d, y;
    }
    function e2(i, r, d, m) {
      typeof i.id != "string" && h('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof i.id);
      var y = ua(ae, i, m, r | pn);
      return y.elementType = Ze, y.lanes = d, y.stateNode = {
        effectDuration: 0,
        passiveEffectDuration: 0
      }, y;
    }
    function t2(i, r, d, m) {
      var y = ua(ne, i, m, r);
      return y.elementType = Nt, y.lanes = d, y;
    }
    function n2(i, r, d, m) {
      var y = ua(Be, i, m, r);
      return y.elementType = Wt, y.lanes = d, y;
    }
    function $1(i, r, d, m) {
      var y = ua(dt, i, m, r);
      y.elementType = ke, y.lanes = d;
      var w = {};
      return y.stateNode = w, y;
    }
    function a_(i, r, d) {
      var m = ua($, i, null, r);
      return m.lanes = d, m;
    }
    function i2() {
      var i = ua(te, null, null, kt);
      return i.elementType = "DELETED", i;
    }
    function r2(i) {
      var r = ua(je, null, null, kt);
      return r.stateNode = i, r;
    }
    function s_(i, r, d) {
      var m = i.children !== null ? i.children : [], y = ua(Q, m, i.key, r);
      return y.lanes = d, y.stateNode = {
        containerInfo: i.containerInfo,
        pendingChildren: null,
        // Used by persistent updates
        implementation: i.implementation
      }, y;
    }
    function eb(i, r) {
      return i === null && (i = ua(z, null, null, kt)), i.tag = r.tag, i.key = r.key, i.elementType = r.elementType, i.type = r.type, i.stateNode = r.stateNode, i.return = r.return, i.child = r.child, i.sibling = r.sibling, i.index = r.index, i.ref = r.ref, i.pendingProps = r.pendingProps, i.memoizedProps = r.memoizedProps, i.updateQueue = r.updateQueue, i.memoizedState = r.memoizedState, i.dependencies = r.dependencies, i.mode = r.mode, i.flags = r.flags, i.subtreeFlags = r.subtreeFlags, i.deletions = r.deletions, i.lanes = r.lanes, i.childLanes = r.childLanes, i.alternate = r.alternate, i.actualDuration = r.actualDuration, i.actualStartTime = r.actualStartTime, i.selfBaseDuration = r.selfBaseDuration, i.treeBaseDuration = r.treeBaseDuration, i._debugSource = r._debugSource, i._debugOwner = r._debugOwner, i._debugNeedsRemount = r._debugNeedsRemount, i._debugHookTypes = r._debugHookTypes, i;
    }
    function a2(i, r, d, m, y) {
      this.tag = r, this.containerInfo = i, this.pendingChildren = null, this.current = null, this.pingCache = null, this.finishedWork = null, this.timeoutHandle = Bo, this.context = null, this.pendingContext = null, this.callbackNode = null, this.callbackPriority = gi, this.eventTimes = ol(We), this.expirationTimes = ol(zn), this.pendingLanes = We, this.suspendedLanes = We, this.pingedLanes = We, this.expiredLanes = We, this.mutableReadLanes = We, this.finishedLanes = We, this.entangledLanes = We, this.entanglements = ol(We), this.identifierPrefix = m, this.onRecoverableError = y, ji && (this.mutableSourceEagerHydrationData = null), this.effectDuration = 0, this.passiveEffectDuration = 0;
      {
        this.memoizedUpdaters = /* @__PURE__ */ new Set();
        for (var w = this.pendingUpdatersLaneMap = [], D = 0; D < lu; D++)
          w.push(/* @__PURE__ */ new Set());
      }
      switch (r) {
        case Dd:
          this._debugRootType = d ? "hydrateRoot()" : "createRoot()";
          break;
        case Ks:
          this._debugRootType = d ? "hydrate()" : "render()";
          break;
      }
    }
    function tb(i, r, d, m, y, w, D, N, B, J) {
      var re = new a2(i, r, d, N, B), he = $3(r, w);
      re.current = he, he.stateNode = re;
      {
        var Ce = {
          element: m,
          isDehydrated: d,
          cache: null,
          // not enabled yet
          transitions: null
        };
        he.memoizedState = Ce;
      }
      return At(he), re;
    }
    var s2 = "18.0.0-fc46dba67-20220329";
    function o2(i, r, d) {
      var m = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      return dy(m), {
        // This tag allow us to uniquely identify this as a React Portal
        $$typeof: Me,
        key: m == null ? null : "" + m,
        children: i,
        containerInfo: r,
        implementation: d
      };
    }
    var o_, l_;
    o_ = !1, l_ = {};
    function nb(i) {
      if (!i)
        return fn;
      var r = x(i), d = Pc(r);
      if (r.tag === G) {
        var m = r.type;
        if (Or(m))
          return ra(r, m, d);
      }
      return d;
    }
    function l2(i) {
      var r = x(i);
      if (r === void 0) {
        if (typeof i.render == "function")
          throw new Error("Unable to find node on an unmounted component.");
        var d = Object.keys(i).join(",");
        throw new Error("Argument appears to not be a ReactComponent. Keys: " + d);
      }
      var m = ki(r);
      return m === null ? null : m.stateNode;
    }
    function u2(i, r) {
      {
        var d = x(i);
        if (d === void 0) {
          if (typeof i.render == "function")
            throw new Error("Unable to find node on an unmounted component.");
          var m = Object.keys(i).join(",");
          throw new Error("Argument appears to not be a ReactComponent. Keys: " + m);
        }
        var y = ki(d);
        if (y === null)
          return null;
        if (y.mode & Zn) {
          var w = rt(d) || "Component";
          if (!l_[w]) {
            l_[w] = !0;
            var D = Mr;
            try {
              gn(y), d.mode & Zn ? h("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", r, r, w) : h("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", r, r, w);
            } finally {
              D ? gn(D) : Ui();
            }
          }
        }
        return y.stateNode;
      }
    }
    function c2(i, r, d, m, y, w, D, N) {
      var B = !1, J = null;
      return tb(i, r, B, J, d, m, y, w, D);
    }
    function f2(i, r, d, m, y, w, D, N, B, J) {
      var re = !0, he = tb(d, m, re, i, y, w, D, N, B);
      he.context = nb(null);
      var Ce = he.current, Ue = Er(), Xe = Cl(Ce), Je = It(Ue, Xe);
      return Je.callback = r ?? null, $t(Ce, Je), f3(he, Xe, Ue), he;
    }
    function ib(i, r, d, m) {
      Kn(r, i);
      var y = r.current, w = Er(), D = Cl(y);
      Cs(D);
      var N = nb(d);
      r.context === null ? r.context = N : r.pendingContext = N, la && Mr !== null && !o_ && (o_ = !0, h(`Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.

Check the render method of %s.`, rt(Mr) || "Unknown"));
      var B = It(w, D);
      B.payload = {
        element: i
      }, m = m === void 0 ? null : m, m !== null && (typeof m != "function" && h("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", m), B.callback = m), $t(y, B);
      var J = Fi(y, D, w);
      return J !== null && $n(J, y, D), D;
    }
    function d2(i) {
      var r = i.current;
      if (!r.child)
        return null;
      switch (r.child.tag) {
        case te:
          return vr(r.child.stateNode);
        default:
          return r.child.stateNode;
      }
    }
    function h2(i) {
      switch (i.tag) {
        case I:
          var r = i.stateNode;
          if (As(r)) {
            var d = Fd(r);
            p3(r, d);
          }
          break;
        case ne:
          var m = Er();
          Mv(function() {
            return Fi(i, sn, m);
          });
          var y = sn;
          u_(i, y);
          break;
      }
    }
    function rb(i, r) {
      var d = i.memoizedState;
      d !== null && d.dehydrated !== null && (d.retryLane = ft(d.retryLane, r));
    }
    function u_(i, r) {
      rb(i, r);
      var d = i.alternate;
      d && rb(d, r);
    }
    function p2(i) {
      if (i.tag === ne) {
        var r = Er(), d = Ms;
        Fi(i, d, r), u_(i, d);
      }
    }
    function m2(i) {
      if (i.tag === ne) {
        var r = Er(), d = Cl(i);
        Fi(i, d, r), u_(i, d);
      }
    }
    function v2(i) {
      var r = qt(i);
      return r === null ? null : r.stateNode;
    }
    var ab = function(i) {
      return null;
    };
    function sb(i) {
      return ab(i);
    }
    var ob = function(i) {
      return !1;
    };
    function lb(i) {
      return ob(i);
    }
    var ub = null, cb = null, fb = null, db = null, hb = null, pb = null, mb = null, vb = null, gb = null;
    {
      var yb = function(i, r, d) {
        var m = r[d], y = Jt(i) ? i.slice() : _({}, i);
        return d + 1 === r.length ? (Jt(y) ? y.splice(m, 1) : delete y[m], y) : (y[m] = yb(i[m], r, d + 1), y);
      }, _b = function(i, r) {
        return yb(i, r, 0);
      }, xb = function(i, r, d, m) {
        var y = r[m], w = Jt(i) ? i.slice() : _({}, i);
        if (m + 1 === r.length) {
          var D = d[m];
          w[D] = w[y], Jt(w) ? w.splice(y, 1) : delete w[y];
        } else
          w[y] = xb(
            // $FlowFixMe number or string is fine here
            i[y],
            r,
            d,
            m + 1
          );
        return w;
      }, Sb = function(i, r, d) {
        if (r.length !== d.length) {
          p("copyWithRename() expects paths of the same length");
          return;
        } else
          for (var m = 0; m < d.length - 1; m++)
            if (r[m] !== d[m]) {
              p("copyWithRename() expects paths to be the same except for the deepest key");
              return;
            }
        return xb(i, r, d, 0);
      }, Mb = function(i, r, d, m) {
        if (d >= r.length)
          return m;
        var y = r[d], w = Jt(i) ? i.slice() : _({}, i);
        return w[y] = Mb(i[y], r, d + 1, m), w;
      }, bb = function(i, r, d) {
        return Mb(i, r, 0, d);
      }, c_ = function(i, r) {
        for (var d = i.memoizedState; d !== null && r > 0; )
          d = d.next, r--;
        return d;
      };
      ub = function(i, r, d, m) {
        var y = c_(i, r);
        if (y !== null) {
          var w = bb(y.memoizedState, d, m);
          y.memoizedState = w, y.baseState = w, i.memoizedProps = _({}, i.memoizedProps), Fi(i, sn, zn);
        }
      }, cb = function(i, r, d) {
        var m = c_(i, r);
        if (m !== null) {
          var y = _b(m.memoizedState, d);
          m.memoizedState = y, m.baseState = y, i.memoizedProps = _({}, i.memoizedProps), Fi(i, sn, zn);
        }
      }, fb = function(i, r, d, m) {
        var y = c_(i, r);
        if (y !== null) {
          var w = Sb(y.memoizedState, d, m);
          y.memoizedState = w, y.baseState = w, i.memoizedProps = _({}, i.memoizedProps), Fi(i, sn, zn);
        }
      }, db = function(i, r, d) {
        i.pendingProps = bb(i.memoizedProps, r, d), i.alternate && (i.alternate.pendingProps = i.pendingProps), Fi(i, sn, zn);
      }, hb = function(i, r) {
        i.pendingProps = _b(i.memoizedProps, r), i.alternate && (i.alternate.pendingProps = i.pendingProps), Fi(i, sn, zn);
      }, pb = function(i, r, d) {
        i.pendingProps = Sb(i.memoizedProps, r, d), i.alternate && (i.alternate.pendingProps = i.pendingProps), Fi(i, sn, zn);
      }, mb = function(i) {
        Fi(i, sn, zn);
      }, vb = function(i) {
        ab = i;
      }, gb = function(i) {
        ob = i;
      };
    }
    function g2(i) {
      var r = ki(i);
      return r === null ? null : r.stateNode;
    }
    function y2(i) {
      return null;
    }
    function _2() {
      return Mr;
    }
    function x2(i) {
      var r = i.findFiberByHostInstance, d = s.ReactCurrentDispatcher;
      return Zd({
        bundleType: i.bundleType,
        version: i.version,
        rendererPackageName: i.rendererPackageName,
        rendererConfig: i.rendererConfig,
        overrideHookState: ub,
        overrideHookStateDeletePath: cb,
        overrideHookStateRenamePath: fb,
        overrideProps: db,
        overridePropsDeletePath: hb,
        overridePropsRenamePath: pb,
        setErrorHandler: vb,
        setSuspenseHandler: gb,
        scheduleUpdate: mb,
        currentDispatcherRef: d,
        findHostInstanceByFiber: g2,
        findFiberByHostInstance: r || y2,
        // React Refresh
        findHostInstancesForRefresh: X3,
        scheduleRefresh: W3,
        scheduleRoot: q3,
        setRefreshHandler: G3,
        // Enables DevTools to append owner stacks to error messages in DEV mode.
        getCurrentFiber: _2,
        // Enables DevTools to detect reconciler version rather than renderer version
        // which may not match for third party renderers.
        reconcilerVersion: s2
      });
    }
    return t.attemptContinuousHydration = p2, t.attemptHydrationAtCurrentPriority = m2, t.attemptSynchronousHydration = h2, t.batchedUpdates = v3, t.createComponentSelector = jR, t.createContainer = c2, t.createHasPseudoClassSelector = YR, t.createHydrationContainer = f2, t.createPortal = o2, t.createRoleSelector = ZR, t.createTestNameSelector = QR, t.createTextSelector = JR, t.deferredUpdates = m3, t.discreteUpdates = g3, t.findAllNodes = dv, t.findBoundingRects = e3, t.findHostInstance = l2, t.findHostInstanceWithNoPortals = v2, t.findHostInstanceWithWarning = u2, t.flushControlled = _3, t.flushPassiveEffects = Os, t.flushSync = Mv, t.focusWithin = t3, t.getCurrentUpdatePriority = _r, t.getFindAllNodesFailureDescription = $R, t.getPublicRootInstance = d2, t.injectIntoDevTools = x2, t.isAlreadyRendering = y3, t.observeVisibleRects = i3, t.registerMutableSourceForHydration = hA, t.runWithPriority = Wd, t.shouldError = sb, t.shouldSuspend = lb, t.updateContainer = ib, t;
  })), Dg;
}
(function(u) {
  process.env.NODE_ENV === "production" ? u.exports = ZI() : u.exports = QI();
})(qI);
const KI = /* @__PURE__ */ C2(kx);
var Pg = {}, $I = {
  get exports() {
    return Pg;
  },
  set exports(u) {
    Pg = u;
  }
}, X_ = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var aw;
function eF() {
  return aw || (aw = 1, function(u) {
    function e(W, ae) {
      var ne = W.length;
      W.push(ae);
      e:
        for (; 0 < ne; ) {
          var Se = ne - 1 >>> 1, ue = W[Se];
          if (0 < a(ue, ae))
            W[Se] = ae, W[ne] = ue, ne = Se;
          else
            break e;
        }
    }
    function t(W) {
      return W.length === 0 ? null : W[0];
    }
    function n(W) {
      if (W.length === 0)
        return null;
      var ae = W[0], ne = W.pop();
      if (ne !== ae) {
        W[0] = ne;
        e:
          for (var Se = 0, ue = W.length, pe = ue >>> 1; Se < pe; ) {
            var ye = 2 * (Se + 1) - 1, je = W[ye], Be = ye + 1, de = W[Be];
            if (0 > a(je, ne))
              Be < ue && 0 > a(de, je) ? (W[Se] = de, W[Be] = ne, Se = Be) : (W[Se] = je, W[ye] = ne, Se = ye);
            else if (Be < ue && 0 > a(de, ne))
              W[Se] = de, W[Be] = ne, Se = Be;
            else
              break e;
          }
      }
      return ae;
    }
    function a(W, ae) {
      var ne = W.sortIndex - ae.sortIndex;
      return ne !== 0 ? ne : W.id - ae.id;
    }
    if (typeof performance == "object" && typeof performance.now == "function") {
      var s = performance;
      u.unstable_now = function() {
        return s.now();
      };
    } else {
      var c = Date, f = c.now();
      u.unstable_now = function() {
        return c.now() - f;
      };
    }
    var p = [], h = [], g = 1, _ = null, x = 3, M = !1, E = !1, A = !1, T = typeof setTimeout == "function" ? setTimeout : null, b = typeof clearTimeout == "function" ? clearTimeout : null, L = typeof setImmediate < "u" ? setImmediate : null;
    typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
    function R(W) {
      for (var ae = t(h); ae !== null; ) {
        if (ae.callback === null)
          n(h);
        else if (ae.startTime <= W)
          n(h), ae.sortIndex = ae.expirationTime, e(p, ae);
        else
          break;
        ae = t(h);
      }
    }
    function U(W) {
      if (A = !1, R(W), !E)
        if (t(p) !== null)
          E = !0, Ee(F);
        else {
          var ae = t(h);
          ae !== null && Te(U, ae.startTime - W);
        }
    }
    function F(W, ae) {
      E = !1, A && (A = !1, b(G), G = -1), M = !0;
      var ne = x;
      try {
        for (R(ae), _ = t(p); _ !== null && (!(_.expirationTime > ae) || W && !Q()); ) {
          var Se = _.callback;
          if (typeof Se == "function") {
            _.callback = null, x = _.priorityLevel;
            var ue = Se(_.expirationTime <= ae);
            ae = u.unstable_now(), typeof ue == "function" ? _.callback = ue : _ === t(p) && n(p), R(ae);
          } else
            n(p);
          _ = t(p);
        }
        if (_ !== null)
          var pe = !0;
        else {
          var ye = t(h);
          ye !== null && Te(U, ye.startTime - ae), pe = !1;
        }
        return pe;
      } finally {
        _ = null, x = ne, M = !1;
      }
    }
    var V = !1, k = null, G = -1, z = 5, I = -1;
    function Q() {
      return !(u.unstable_now() - I < z);
    }
    function te() {
      if (k !== null) {
        var W = u.unstable_now();
        I = W;
        var ae = !0;
        try {
          ae = k(!0, W);
        } finally {
          ae ? $() : (V = !1, k = null);
        }
      } else
        V = !1;
    }
    var $;
    if (typeof L == "function")
      $ = function() {
        L(te);
      };
    else if (typeof MessageChannel < "u") {
      var ie = new MessageChannel(), fe = ie.port2;
      ie.port1.onmessage = te, $ = function() {
        fe.postMessage(null);
      };
    } else
      $ = function() {
        T(te, 0);
      };
    function Ee(W) {
      k = W, V || (V = !0, $());
    }
    function Te(W, ae) {
      G = T(function() {
        W(u.unstable_now());
      }, ae);
    }
    u.unstable_IdlePriority = 5, u.unstable_ImmediatePriority = 1, u.unstable_LowPriority = 4, u.unstable_NormalPriority = 3, u.unstable_Profiling = null, u.unstable_UserBlockingPriority = 2, u.unstable_cancelCallback = function(W) {
      W.callback = null;
    }, u.unstable_continueExecution = function() {
      E || M || (E = !0, Ee(F));
    }, u.unstable_forceFrameRate = function(W) {
      0 > W || 125 < W ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : z = 0 < W ? Math.floor(1e3 / W) : 5;
    }, u.unstable_getCurrentPriorityLevel = function() {
      return x;
    }, u.unstable_getFirstCallbackNode = function() {
      return t(p);
    }, u.unstable_next = function(W) {
      switch (x) {
        case 1:
        case 2:
        case 3:
          var ae = 3;
          break;
        default:
          ae = x;
      }
      var ne = x;
      x = ae;
      try {
        return W();
      } finally {
        x = ne;
      }
    }, u.unstable_pauseExecution = function() {
    }, u.unstable_requestPaint = function() {
    }, u.unstable_runWithPriority = function(W, ae) {
      switch (W) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          W = 3;
      }
      var ne = x;
      x = W;
      try {
        return ae();
      } finally {
        x = ne;
      }
    }, u.unstable_scheduleCallback = function(W, ae, ne) {
      var Se = u.unstable_now();
      switch (typeof ne == "object" && ne !== null ? (ne = ne.delay, ne = typeof ne == "number" && 0 < ne ? Se + ne : Se) : ne = Se, W) {
        case 1:
          var ue = -1;
          break;
        case 2:
          ue = 250;
          break;
        case 5:
          ue = 1073741823;
          break;
        case 4:
          ue = 1e4;
          break;
        default:
          ue = 5e3;
      }
      return ue = ne + ue, W = { id: g++, callback: ae, priorityLevel: W, startTime: ne, expirationTime: ue, sortIndex: -1 }, ne > Se ? (W.sortIndex = ne, e(h, W), t(p) === null && W === t(h) && (A ? (b(G), G = -1) : A = !0, Te(U, ne - Se))) : (W.sortIndex = ue, e(p, W), E || M || (E = !0, Ee(F))), W;
    }, u.unstable_shouldYield = Q, u.unstable_wrapCallback = function(W) {
      var ae = x;
      return function() {
        var ne = x;
        x = ae;
        try {
          return W.apply(this, arguments);
        } finally {
          x = ne;
        }
      };
    };
  }(X_)), X_;
}
var j_ = {};
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var sw;
function tF() {
  return sw || (sw = 1, function(u) {
    process.env.NODE_ENV !== "production" && function() {
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var e = !1, t = !1, n = 5;
      function a(se, me) {
        var De = se.length;
        se.push(me), f(se, me, De);
      }
      function s(se) {
        return se.length === 0 ? null : se[0];
      }
      function c(se) {
        if (se.length === 0)
          return null;
        var me = se[0], De = se.pop();
        return De !== me && (se[0] = De, p(se, De, 0)), me;
      }
      function f(se, me, De) {
        for (var Fe = De; Fe > 0; ) {
          var Pe = Fe - 1 >>> 1, wt = se[Pe];
          if (h(wt, me) > 0)
            se[Pe] = me, se[Fe] = wt, Fe = Pe;
          else
            return;
        }
      }
      function p(se, me, De) {
        for (var Fe = De, Pe = se.length, wt = Pe >>> 1; Fe < wt; ) {
          var St = (Fe + 1) * 2 - 1, rt = se[St], X = St + 1, be = se[X];
          if (h(rt, me) < 0)
            X < Pe && h(be, rt) < 0 ? (se[Fe] = be, se[X] = me, Fe = X) : (se[Fe] = rt, se[St] = me, Fe = St);
          else if (X < Pe && h(be, me) < 0)
            se[Fe] = be, se[X] = me, Fe = X;
          else
            return;
        }
      }
      function h(se, me) {
        var De = se.sortIndex - me.sortIndex;
        return De !== 0 ? De : se.id - me.id;
      }
      var g = 1, _ = 2, x = 3, M = 4, E = 5;
      function A(se, me) {
      }
      var T = typeof performance == "object" && typeof performance.now == "function";
      if (T) {
        var b = performance;
        u.unstable_now = function() {
          return b.now();
        };
      } else {
        var L = Date, R = L.now();
        u.unstable_now = function() {
          return L.now() - R;
        };
      }
      var U = 1073741823, F = -1, V = 250, k = 5e3, G = 1e4, z = U, I = [], Q = [], te = 1, $ = null, ie = x, fe = !1, Ee = !1, Te = !1, W = typeof setTimeout == "function" ? setTimeout : null, ae = typeof clearTimeout == "function" ? clearTimeout : null, ne = typeof setImmediate < "u" ? setImmediate : null;
      typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
      function Se(se) {
        for (var me = s(Q); me !== null; ) {
          if (me.callback === null)
            c(Q);
          else if (me.startTime <= se)
            c(Q), me.sortIndex = me.expirationTime, a(I, me);
          else
            return;
          me = s(Q);
        }
      }
      function ue(se) {
        if (Te = !1, Se(se), !Ee)
          if (s(I) !== null)
            Ee = !0, ke(pe);
          else {
            var me = s(Q);
            me !== null && Qe(ue, me.startTime - se);
          }
      }
      function pe(se, me) {
        Ee = !1, Te && (Te = !1, Lt()), fe = !0;
        var De = ie;
        try {
          var Fe;
          if (!t)
            return ye(se, me);
        } finally {
          $ = null, ie = De, fe = !1;
        }
      }
      function ye(se, me) {
        var De = me;
        for (Se(De), $ = s(I); $ !== null && !e && !($.expirationTime > De && (!se || mt())); ) {
          var Fe = $.callback;
          if (typeof Fe == "function") {
            $.callback = null, ie = $.priorityLevel;
            var Pe = $.expirationTime <= De, wt = Fe(Pe);
            De = u.unstable_now(), typeof wt == "function" ? $.callback = wt : $ === s(I) && c(I), Se(De);
          } else
            c(I);
          $ = s(I);
        }
        if ($ !== null)
          return !0;
        var St = s(Q);
        return St !== null && Qe(ue, St.startTime - De), !1;
      }
      function je(se, me) {
        switch (se) {
          case g:
          case _:
          case x:
          case M:
          case E:
            break;
          default:
            se = x;
        }
        var De = ie;
        ie = se;
        try {
          return me();
        } finally {
          ie = De;
        }
      }
      function Be(se) {
        var me;
        switch (ie) {
          case g:
          case _:
          case x:
            me = x;
            break;
          default:
            me = ie;
            break;
        }
        var De = ie;
        ie = me;
        try {
          return se();
        } finally {
          ie = De;
        }
      }
      function de(se) {
        var me = ie;
        return function() {
          var De = ie;
          ie = me;
          try {
            return se.apply(this, arguments);
          } finally {
            ie = De;
          }
        };
      }
      function dt(se, me, De) {
        var Fe = u.unstable_now(), Pe;
        if (typeof De == "object" && De !== null) {
          var wt = De.delay;
          typeof wt == "number" && wt > 0 ? Pe = Fe + wt : Pe = Fe;
        } else
          Pe = Fe;
        var St;
        switch (se) {
          case g:
            St = F;
            break;
          case _:
            St = V;
            break;
          case E:
            St = z;
            break;
          case M:
            St = G;
            break;
          case x:
          default:
            St = k;
            break;
        }
        var rt = Pe + St, X = {
          id: te++,
          callback: me,
          priorityLevel: se,
          startTime: Pe,
          expirationTime: rt,
          sortIndex: -1
        };
        return Pe > Fe ? (X.sortIndex = Pe, a(Q, X), s(I) === null && X === s(Q) && (Te ? Lt() : Te = !0, Qe(ue, Pe - Fe))) : (X.sortIndex = rt, a(I, X), !Ee && !fe && (Ee = !0, ke(pe))), X;
      }
      function _t() {
      }
      function qe() {
        !Ee && !fe && (Ee = !0, ke(pe));
      }
      function ot() {
        return s(I);
      }
      function Ie(se) {
        se.callback = null;
      }
      function Me() {
        return ie;
      }
      var Ne = !1, nt = null, Ze = -1, xt = n, Et = -1;
      function mt() {
        var se = u.unstable_now() - Et;
        return !(se < xt);
      }
      function Nt() {
      }
      function Wt(se) {
        if (se < 0 || se > 125) {
          console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        se > 0 ? xt = Math.floor(1e3 / se) : xt = n;
      }
      var Y = function() {
        if (nt !== null) {
          var se = u.unstable_now();
          Et = se;
          var me = !0, De = !0;
          try {
            De = nt(me, se);
          } finally {
            De ? H() : (Ne = !1, nt = null);
          }
        } else
          Ne = !1;
      }, H;
      if (typeof ne == "function")
        H = function() {
          ne(Y);
        };
      else if (typeof MessageChannel < "u") {
        var xe = new MessageChannel(), Ve = xe.port2;
        xe.port1.onmessage = Y, H = function() {
          Ve.postMessage(null);
        };
      } else
        H = function() {
          W(Y, 0);
        };
      function ke(se) {
        nt = se, Ne || (Ne = !0, H());
      }
      function Qe(se, me) {
        Ze = W(function() {
          se(u.unstable_now());
        }, me);
      }
      function Lt() {
        ae(Ze), Ze = -1;
      }
      var ht = Nt, Ae = null;
      u.unstable_IdlePriority = E, u.unstable_ImmediatePriority = g, u.unstable_LowPriority = M, u.unstable_NormalPriority = x, u.unstable_Profiling = Ae, u.unstable_UserBlockingPriority = _, u.unstable_cancelCallback = Ie, u.unstable_continueExecution = qe, u.unstable_forceFrameRate = Wt, u.unstable_getCurrentPriorityLevel = Me, u.unstable_getFirstCallbackNode = ot, u.unstable_next = Be, u.unstable_pauseExecution = _t, u.unstable_requestPaint = ht, u.unstable_runWithPriority = je, u.unstable_scheduleCallback = dt, u.unstable_shouldYield = mt, u.unstable_wrapCallback = de, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    }();
  }(j_)), j_;
}
(function(u) {
  process.env.NODE_ENV === "production" ? u.exports = eF() : u.exports = tF();
})($I);
const LS = {}, nF = (u) => void Object.assign(LS, u);
function iF(u, e) {
  function t(g, {
    args: _ = [],
    attach: x,
    ...M
  }, E) {
    let A = `${g[0].toUpperCase()}${g.slice(1)}`, T;
    if (g === "primitive") {
      if (M.object === void 0)
        throw new Error("R3F: Primitives without 'object' are invalid!");
      const b = M.object;
      T = jf(b, {
        type: g,
        root: E,
        attach: x,
        primitive: !0
      });
    } else {
      const b = LS[A];
      if (!b)
        throw new Error(`R3F: ${A} is not part of the THREE namespace! Did you forget to extend? See: https://docs.pmnd.rs/react-three-fiber/api/objects#using-3rd-party-objects-declaratively`);
      if (!Array.isArray(_))
        throw new Error("R3F: The args prop must be an array!");
      T = jf(new b(..._), {
        type: g,
        root: E,
        attach: x,
        // Save args in case we need to reconstruct later for HMR
        memoizedProps: {
          args: _
        }
      });
    }
    return T.__r3f.attach === void 0 && (T instanceof an ? T.__r3f.attach = "geometry" : T instanceof nr && (T.__r3f.attach = "material")), A !== "inject" && Z_(T, M), T;
  }
  function n(g, _) {
    let x = !1;
    if (_) {
      var M, E;
      (M = _.__r3f) != null && M.attach ? Y_(g, _, _.__r3f.attach) : _.isObject3D && g.isObject3D && (g.add(_), x = !0), x || (E = g.__r3f) == null || E.objects.push(_), _.__r3f || jf(_, {}), _.__r3f.parent = g, Gx(_), Yf(_);
    }
  }
  function a(g, _, x) {
    let M = !1;
    if (_) {
      var E, A;
      if ((E = _.__r3f) != null && E.attach)
        Y_(g, _, _.__r3f.attach);
      else if (_.isObject3D && g.isObject3D) {
        _.parent = g, _.dispatchEvent({
          type: "added"
        });
        const T = g.children.filter((L) => L !== _), b = T.indexOf(x);
        g.children = [...T.slice(0, b), _, ...T.slice(b)], M = !0;
      }
      M || (A = g.__r3f) == null || A.objects.push(_), _.__r3f || jf(_, {}), _.__r3f.parent = g, Gx(_), Yf(_);
    }
  }
  function s(g, _, x = !1) {
    g && [...g].forEach((M) => c(_, M, x));
  }
  function c(g, _, x) {
    if (_) {
      var M, E, A;
      if (_.__r3f && (_.__r3f.parent = null), (M = g.__r3f) != null && M.objects && (g.__r3f.objects = g.__r3f.objects.filter((U) => U !== _)), (E = _.__r3f) != null && E.attach)
        fw(g, _, _.__r3f.attach);
      else if (_.isObject3D && g.isObject3D) {
        var T;
        g.remove(_), (T = _.__r3f) != null && T.root && cF(_.__r3f.root, _);
      }
      const L = (A = _.__r3f) == null ? void 0 : A.primitive, R = x === void 0 ? _.dispose !== null && !L : x;
      if (!L) {
        var b;
        s((b = _.__r3f) == null ? void 0 : b.objects, _, R), s(_.children, _, R);
      }
      _.__r3f && (delete _.__r3f.root, delete _.__r3f.objects, delete _.__r3f.handlers, delete _.__r3f.memoizedProps, L || delete _.__r3f), R && _.dispose && _.type !== "Scene" && Pg.unstable_scheduleCallback(Pg.unstable_IdlePriority, () => {
        try {
          _.dispose();
        } catch {
        }
      }), Yf(g);
    }
  }
  function f(g, _, x, M) {
    var E;
    const A = (E = g.__r3f) == null ? void 0 : E.parent;
    if (!A)
      return;
    const T = t(_, x, g.__r3f.root);
    if (g.children) {
      for (const b of g.children)
        b.__r3f && n(T, b);
      g.children = g.children.filter((b) => !b.__r3f);
    }
    g.__r3f.objects.forEach((b) => n(T, b)), g.__r3f.objects = [], g.__r3f.autoRemovedBeforeAppend || c(A, g), T.parent && (T.__r3f.autoRemovedBeforeAppend = !0), n(A, T), T.raycast && T.__r3f.eventCount && T.__r3f.root.getState().internal.interaction.push(T), [M, M.alternate].forEach((b) => {
      b !== null && (b.stateNode = T, b.ref && (typeof b.ref == "function" ? b.ref(T) : b.ref.current = T));
    });
  }
  const p = () => console.warn("Text is not allowed in the R3F tree! This could be stray whitespace or characters.");
  return {
    reconciler: KI({
      createInstance: t,
      removeChild: c,
      appendChild: n,
      appendInitialChild: n,
      insertBefore: a,
      supportsMutation: !0,
      isPrimaryRenderer: !1,
      supportsPersistence: !1,
      supportsHydration: !1,
      noTimeout: -1,
      appendChildToContainer: (g, _) => {
        if (!_)
          return;
        const x = g.getState().scene;
        x.__r3f && (x.__r3f.root = g, n(x, _));
      },
      removeChildFromContainer: (g, _) => {
        _ && c(g.getState().scene, _);
      },
      insertInContainerBefore: (g, _, x) => {
        if (!_ || !x)
          return;
        const M = g.getState().scene;
        M.__r3f && a(M, _, x);
      },
      getRootHostContext: () => null,
      getChildHostContext: (g) => g,
      finalizeInitialChildren(g) {
        var _;
        return !!((_ = g == null ? void 0 : g.__r3f) != null ? _ : {}).handlers;
      },
      prepareUpdate(g, _, x, M) {
        if (g.__r3f.primitive && M.object && M.object !== g)
          return [!0];
        {
          const {
            args: E = [],
            children: A,
            ...T
          } = M, {
            args: b = [],
            children: L,
            ...R
          } = x;
          if (!Array.isArray(E))
            throw new Error("R3F: the args prop must be an array!");
          if (E.some((F, V) => F !== b[V]))
            return [!0];
          const U = DC(g, T, R, !0);
          return U.changes.length ? [!1, U] : null;
        }
      },
      commitUpdate(g, [_, x], M, E, A, T) {
        _ ? f(g, M, A, T) : Z_(g, x);
      },
      commitMount(g, _, x, M) {
        var E;
        const A = (E = g.__r3f) != null ? E : {};
        g.raycast && A.handlers && A.eventCount && g.__r3f.root.getState().internal.interaction.push(g);
      },
      getPublicInstance: (g) => g,
      prepareForCommit: () => null,
      preparePortalMount: (g) => jf(g.getState().scene),
      resetAfterCommit: () => {
      },
      shouldSetTextContent: () => !1,
      clearContainer: () => !1,
      hideInstance(g) {
        var _;
        const {
          attach: x,
          parent: M
        } = (_ = g.__r3f) != null ? _ : {};
        x && M && fw(M, g, x), g.isObject3D && (g.visible = !1), Yf(g);
      },
      unhideInstance(g, _) {
        var x;
        const {
          attach: M,
          parent: E
        } = (x = g.__r3f) != null ? x : {};
        M && E && Y_(E, g, M), (g.isObject3D && _.visible == null || _.visible) && (g.visible = !0), Yf(g);
      },
      createTextInstance: p,
      hideTextInstance: p,
      unhideTextInstance: p,
      // https://github.com/pmndrs/react-three-fiber/pull/2360#discussion_r916356874
      // @ts-ignore
      getCurrentEventPriority: () => e ? e() : Bl.DefaultEventPriority,
      beforeActiveInstanceBlur: () => {
      },
      afterActiveInstanceBlur: () => {
      },
      detachDeletedInstance: () => {
      },
      now: typeof performance < "u" && jn.fun(performance.now) ? performance.now : jn.fun(Date.now) ? Date.now : () => 0,
      // https://github.com/pmndrs/react-three-fiber/pull/2360#discussion_r920883503
      scheduleTimeout: jn.fun(setTimeout) ? setTimeout : void 0,
      cancelTimeout: jn.fun(clearTimeout) ? clearTimeout : void 0
    }),
    applyProps: Z_
  };
}
var ow, lw;
const wC = () => {
  var u;
  return (u = LS.ColorManagement) != null ? u : null;
}, TC = (u) => u && u.isOrthographicCamera, rF = (u) => u && u.hasOwnProperty("current"), Vp = typeof window < "u" && ((ow = window.document) != null && ow.createElement || ((lw = window.navigator) == null ? void 0 : lw.product) === "ReactNative") ? Ot.useLayoutEffect : Ot.useEffect;
function CC(u) {
  const e = Ot.useRef(u);
  return Vp(() => void (e.current = u), [u]), e;
}
function aF({
  set: u
}) {
  return Vp(() => (u(new Promise(() => null)), () => u(!1)), [u]), null;
}
class AC extends Ot.Component {
  constructor(...e) {
    super(...e), this.state = {
      error: !1
    };
  }
  componentDidCatch(e) {
    this.props.set(e);
  }
  render() {
    return this.state.error ? null : this.props.children;
  }
}
AC.getDerivedStateFromError = () => ({
  error: !0
});
const RC = "__default", uw = /* @__PURE__ */ new Map(), sF = (u) => u && !!u.memoized && !!u.changes;
function LC(u) {
  const e = typeof window < "u" ? window.devicePixelRatio : 1;
  return Array.isArray(u) ? Math.min(Math.max(u[0], e), u[1]) : u;
}
const Xh = (u) => {
  var e;
  return (e = u.__r3f) == null ? void 0 : e.root.getState();
}, jn = {
  obj: (u) => u === Object(u) && !jn.arr(u) && typeof u != "function",
  fun: (u) => typeof u == "function",
  str: (u) => typeof u == "string",
  num: (u) => typeof u == "number",
  boo: (u) => typeof u == "boolean",
  und: (u) => u === void 0,
  arr: (u) => Array.isArray(u),
  equ(u, e, {
    arrays: t = "shallow",
    objects: n = "reference",
    strict: a = !0
  } = {}) {
    if (typeof u != typeof e || !!u != !!e)
      return !1;
    if (jn.str(u) || jn.num(u))
      return u === e;
    const s = jn.obj(u);
    if (s && n === "reference")
      return u === e;
    const c = jn.arr(u);
    if (c && t === "reference")
      return u === e;
    if ((c || s) && u === e)
      return !0;
    let f;
    for (f in u)
      if (!(f in e))
        return !1;
    if (s && t === "shallow" && n === "shallow") {
      for (f in a ? e : u)
        if (!jn.equ(u[f], e[f], {
          strict: a,
          objects: "reference"
        }))
          return !1;
    } else
      for (f in a ? e : u)
        if (u[f] !== e[f])
          return !1;
    if (jn.und(f)) {
      if (c && u.length === 0 && e.length === 0 || s && Object.keys(u).length === 0 && Object.keys(e).length === 0)
        return !0;
      if (u !== e)
        return !1;
    }
    return !0;
  }
};
function oF(u) {
  u.dispose && u.type !== "Scene" && u.dispose();
  for (const e in u)
    e.dispose == null || e.dispose(), delete u[e];
}
function jf(u, e) {
  const t = u;
  return (e != null && e.primitive || !t.__r3f) && (t.__r3f = {
    type: "",
    root: null,
    previousAttach: null,
    memoizedProps: {},
    eventCount: 0,
    handlers: {},
    objects: [],
    parent: null,
    ...e
  }), u;
}
function Vx(u, e) {
  let t = u;
  if (e.includes("-")) {
    const n = e.split("-"), a = n.pop();
    return t = n.reduce((s, c) => s[c], u), {
      target: t,
      key: a
    };
  } else
    return {
      target: t,
      key: e
    };
}
const cw = /-\d+$/;
function Y_(u, e, t) {
  if (jn.str(t)) {
    if (cw.test(t)) {
      const s = t.replace(cw, ""), {
        target: c,
        key: f
      } = Vx(u, s);
      Array.isArray(c[f]) || (c[f] = []);
    }
    const {
      target: n,
      key: a
    } = Vx(u, t);
    e.__r3f.previousAttach = n[a], n[a] = e;
  } else
    e.__r3f.previousAttach = t(u, e);
}
function fw(u, e, t) {
  var n, a;
  if (jn.str(t)) {
    const {
      target: s,
      key: c
    } = Vx(u, t), f = e.__r3f.previousAttach;
    f === void 0 ? delete s[c] : s[c] = f;
  } else
    (n = e.__r3f) == null || n.previousAttach == null || n.previousAttach(u, e);
  (a = e.__r3f) == null || delete a.previousAttach;
}
function DC(u, {
  children: e,
  key: t,
  ref: n,
  ...a
}, {
  children: s,
  key: c,
  ref: f,
  ...p
} = {}, h = !1) {
  var g;
  const _ = (g = u == null ? void 0 : u.__r3f) != null ? g : {}, x = Object.entries(a), M = [];
  if (h) {
    const A = Object.keys(p);
    for (let T = 0; T < A.length; T++)
      a.hasOwnProperty(A[T]) || x.unshift([A[T], RC + "remove"]);
  }
  x.forEach(([A, T]) => {
    var b;
    if ((b = u.__r3f) != null && b.primitive && A === "object" || jn.equ(T, p[A]))
      return;
    if (/^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/.test(A))
      return M.push([A, T, !0, []]);
    let L = [];
    A.includes("-") && (L = A.split("-")), M.push([A, T, !1, L]);
    for (const R in a) {
      const U = a[R];
      R.startsWith(`${A}-`) && M.push([R, U, !1, R.split("-")]);
    }
  });
  const E = {
    ...a
  };
  return _.memoizedProps && _.memoizedProps.args && (E.args = _.memoizedProps.args), _.memoizedProps && _.memoizedProps.attach && (E.attach = _.memoizedProps.attach), {
    memoized: E,
    changes: M
  };
}
function Z_(u, e) {
  var t, n, a;
  const s = (t = u.__r3f) != null ? t : {}, c = s.root, f = (n = c == null || c.getState == null ? void 0 : c.getState()) != null ? n : {}, {
    memoized: p,
    changes: h
  } = sF(e) ? e : DC(u, e), g = s.eventCount;
  u.__r3f && (u.__r3f.memoizedProps = p);
  for (let x = 0; x < h.length; x++) {
    let [M, E, A, T] = h[x], b = u, L = b[M];
    if (T.length && (L = T.reduce((R, U) => R[U], u), !(L && L.set))) {
      const [R, ...U] = T.reverse();
      b = U.reverse().reduce((F, V) => F[V], u), M = R;
    }
    if (E === RC + "remove")
      if (b.constructor) {
        let R = uw.get(b.constructor);
        R || (R = new b.constructor(), uw.set(b.constructor, R)), E = R[M];
      } else
        E = 0;
    if (A)
      E ? s.handlers[M] = E : delete s.handlers[M], s.eventCount = Object.keys(s.handlers).length;
    else if (L && L.set && (L.copy || L instanceof ic)) {
      if (Array.isArray(E))
        L.fromArray ? L.fromArray(E) : L.set(...E);
      else if (L.copy && E && E.constructor && L.constructor === E.constructor)
        L.copy(E);
      else if (E !== void 0) {
        const R = L instanceof yt;
        !R && L.setScalar ? L.setScalar(E) : L instanceof ic && E instanceof ic ? L.mask = E.mask : L.set(E), !wC() && !f.linear && R && L.convertSRGBToLinear();
      }
    } else
      b[M] = E, !f.linear && b[M] instanceof pi && // sRGB textures must be RGBA8 since r137 https://github.com/mrdoob/three.js/pull/23129
      b[M].format === Jr && b[M].type === Po && (b[M].encoding = Pn);
    Yf(u);
  }
  if (s.parent && f.internal && u.raycast && g !== s.eventCount) {
    const x = f.internal.interaction.indexOf(u);
    x > -1 && f.internal.interaction.splice(x, 1), s.eventCount && f.internal.interaction.push(u);
  }
  return !(h.length === 1 && h[0][0] === "onUpdate") && h.length && (a = u.__r3f) != null && a.parent && Gx(u), u;
}
function Yf(u) {
  var e, t;
  const n = (e = u.__r3f) == null || (t = e.root) == null || t.getState == null ? void 0 : t.getState();
  n && n.internal.frames === 0 && n.invalidate();
}
function Gx(u) {
  u.onUpdate == null || u.onUpdate(u);
}
function lF(u, e) {
  u.manual || (TC(u) ? (u.left = e.width / -2, u.right = e.width / 2, u.top = e.height / 2, u.bottom = e.height / -2) : u.aspect = e.width / e.height, u.updateProjectionMatrix(), u.updateMatrixWorld());
}
function vg(u) {
  return (u.eventObject || u.object).uuid + "/" + u.index + u.instanceId;
}
function uF() {
  var u;
  const e = typeof self < "u" && self || typeof window < "u" && window;
  if (!e)
    return Bl.DefaultEventPriority;
  switch ((u = e.event) == null ? void 0 : u.type) {
    case "click":
    case "contextmenu":
    case "dblclick":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
      return Bl.DiscreteEventPriority;
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "pointerenter":
    case "pointerleave":
    case "wheel":
      return Bl.ContinuousEventPriority;
    default:
      return Bl.DefaultEventPriority;
  }
}
function PC(u, e, t, n) {
  const a = t.get(e);
  a && (t.delete(e), t.size === 0 && (u.delete(n), a.target.releasePointerCapture(n)));
}
function cF(u, e) {
  const {
    internal: t
  } = u.getState();
  t.interaction = t.interaction.filter((n) => n !== e), t.initialHits = t.initialHits.filter((n) => n !== e), t.hovered.forEach((n, a) => {
    (n.eventObject === e || n.object === e) && t.hovered.delete(a);
  }), t.capturedMap.forEach((n, a) => {
    PC(t.capturedMap, e, n, a);
  });
}
function fF(u) {
  function e(p) {
    const {
      internal: h
    } = u.getState(), g = p.offsetX - h.initialClick[0], _ = p.offsetY - h.initialClick[1];
    return Math.round(Math.sqrt(g * g + _ * _));
  }
  function t(p) {
    return p.filter((h) => ["Move", "Over", "Enter", "Out", "Leave"].some((g) => {
      var _;
      return (_ = h.__r3f) == null ? void 0 : _.handlers["onPointer" + g];
    }));
  }
  function n(p, h) {
    const g = u.getState(), _ = /* @__PURE__ */ new Set(), x = [], M = h ? h(g.internal.interaction) : g.internal.interaction;
    for (let b = 0; b < M.length; b++) {
      const L = Xh(M[b]);
      L && (L.raycaster.camera = void 0);
    }
    g.previousRoot || g.events.compute == null || g.events.compute(p, g);
    function E(b) {
      const L = Xh(b);
      if (!L || !L.events.enabled || L.raycaster.camera === null)
        return [];
      if (L.raycaster.camera === void 0) {
        var R;
        L.events.compute == null || L.events.compute(p, L, (R = L.previousRoot) == null ? void 0 : R.getState()), L.raycaster.camera === void 0 && (L.raycaster.camera = null);
      }
      return L.raycaster.camera ? L.raycaster.intersectObject(b, !0) : [];
    }
    let A = M.flatMap(E).sort((b, L) => {
      const R = Xh(b.object), U = Xh(L.object);
      return !R || !U ? b.distance - L.distance : U.events.priority - R.events.priority || b.distance - L.distance;
    }).filter((b) => {
      const L = vg(b);
      return _.has(L) ? !1 : (_.add(L), !0);
    });
    g.events.filter && (A = g.events.filter(A, g));
    for (const b of A) {
      let L = b.object;
      for (; L; ) {
        var T;
        (T = L.__r3f) != null && T.eventCount && x.push({
          ...b,
          eventObject: L
        }), L = L.parent;
      }
    }
    if ("pointerId" in p && g.internal.capturedMap.has(p.pointerId))
      for (let b of g.internal.capturedMap.get(p.pointerId).values())
        _.has(vg(b.intersection)) || x.push(b.intersection);
    return x;
  }
  function a(p, h, g, _) {
    const x = u.getState();
    if (p.length) {
      const M = {
        stopped: !1
      };
      for (const E of p) {
        const A = Xh(E.object) || x, {
          raycaster: T,
          pointer: b,
          camera: L,
          internal: R
        } = A, U = new j(b.x, b.y, 0).unproject(L), F = (I) => {
          var Q, te;
          return (Q = (te = R.capturedMap.get(I)) == null ? void 0 : te.has(E.eventObject)) != null ? Q : !1;
        }, V = (I) => {
          const Q = {
            intersection: E,
            target: h.target
          };
          R.capturedMap.has(I) ? R.capturedMap.get(I).set(E.eventObject, Q) : R.capturedMap.set(I, /* @__PURE__ */ new Map([[E.eventObject, Q]])), h.target.setPointerCapture(I);
        }, k = (I) => {
          const Q = R.capturedMap.get(I);
          Q && PC(R.capturedMap, E.eventObject, Q, I);
        };
        let G = {};
        for (let I in h) {
          let Q = h[I];
          typeof Q != "function" && (G[I] = Q);
        }
        let z = {
          ...E,
          ...G,
          pointer: b,
          intersections: p,
          stopped: M.stopped,
          delta: g,
          unprojectedPoint: U,
          ray: T.ray,
          camera: L,
          // Hijack stopPropagation, which just sets a flag
          stopPropagation() {
            const I = "pointerId" in h && R.capturedMap.get(h.pointerId);
            if (
              // ...if this pointer hasn't been captured
              (!I || // ... or if the hit object is capturing the pointer
              I.has(E.eventObject)) && (z.stopped = M.stopped = !0, R.hovered.size && Array.from(R.hovered.values()).find((Q) => Q.eventObject === E.eventObject))
            ) {
              const Q = p.slice(0, p.indexOf(E));
              s([...Q, E]);
            }
          },
          // there should be a distinction between target and currentTarget
          target: {
            hasPointerCapture: F,
            setPointerCapture: V,
            releasePointerCapture: k
          },
          currentTarget: {
            hasPointerCapture: F,
            setPointerCapture: V,
            releasePointerCapture: k
          },
          nativeEvent: h
        };
        if (_(z), M.stopped === !0)
          break;
      }
    }
    return p;
  }
  function s(p) {
    const {
      internal: h
    } = u.getState();
    for (const g of h.hovered.values())
      if (!p.length || !p.find((_) => _.object === g.object && _.index === g.index && _.instanceId === g.instanceId)) {
        const x = g.eventObject.__r3f, M = x == null ? void 0 : x.handlers;
        if (h.hovered.delete(vg(g)), x != null && x.eventCount) {
          const E = {
            ...g,
            intersections: p
          };
          M.onPointerOut == null || M.onPointerOut(E), M.onPointerLeave == null || M.onPointerLeave(E);
        }
      }
  }
  function c(p, h) {
    for (let g = 0; g < h.length; g++) {
      const _ = h[g].__r3f;
      _ == null || _.handlers.onPointerMissed == null || _.handlers.onPointerMissed(p);
    }
  }
  function f(p) {
    switch (p) {
      case "onPointerLeave":
      case "onPointerCancel":
        return () => s([]);
      case "onLostPointerCapture":
        return (h) => {
          const {
            internal: g
          } = u.getState();
          "pointerId" in h && g.capturedMap.has(h.pointerId) && requestAnimationFrame(() => {
            g.capturedMap.has(h.pointerId) && (g.capturedMap.delete(h.pointerId), s([]));
          });
        };
    }
    return function(g) {
      const {
        onPointerMissed: _,
        internal: x
      } = u.getState();
      x.lastEvent.current = g;
      const M = p === "onPointerMove", E = p === "onClick" || p === "onContextMenu" || p === "onDoubleClick", T = n(g, M ? t : void 0), b = E ? e(g) : 0;
      p === "onPointerDown" && (x.initialClick = [g.offsetX, g.offsetY], x.initialHits = T.map((R) => R.eventObject)), E && !T.length && b <= 2 && (c(g, x.interaction), _ && _(g)), M && s(T);
      function L(R) {
        const U = R.eventObject, F = U.__r3f, V = F == null ? void 0 : F.handlers;
        if (F != null && F.eventCount)
          if (M) {
            if (V.onPointerOver || V.onPointerEnter || V.onPointerOut || V.onPointerLeave) {
              const k = vg(R), G = x.hovered.get(k);
              G ? G.stopped && R.stopPropagation() : (x.hovered.set(k, R), V.onPointerOver == null || V.onPointerOver(R), V.onPointerEnter == null || V.onPointerEnter(R));
            }
            V.onPointerMove == null || V.onPointerMove(R);
          } else {
            const k = V[p];
            k ? (!E || x.initialHits.includes(U)) && (c(g, x.interaction.filter((G) => !x.initialHits.includes(G))), k(R)) : E && x.initialHits.includes(U) && c(g, x.interaction.filter((G) => !x.initialHits.includes(G)));
          }
      }
      a(T, g, b, L);
    };
  }
  return {
    handlePointer: f
  };
}
const UC = (u) => !!(u != null && u.render), NC = /* @__PURE__ */ Ot.createContext(null), dF = (u, e) => {
  const t = WI((f, p) => {
    const h = new j(), g = new j(), _ = new j();
    function x(b = p().camera, L = g, R = p().size) {
      const {
        width: U,
        height: F,
        top: V,
        left: k
      } = R, G = U / F;
      L instanceof j ? _.copy(L) : _.set(...L);
      const z = b.getWorldPosition(h).distanceTo(_);
      if (TC(b))
        return {
          width: U / b.zoom,
          height: F / b.zoom,
          top: V,
          left: k,
          factor: 1,
          distance: z,
          aspect: G
        };
      {
        const I = b.fov * Math.PI / 180, Q = 2 * Math.tan(I / 2) * z, te = Q * (U / F);
        return {
          width: te,
          height: Q,
          top: V,
          left: k,
          factor: U / te,
          distance: z,
          aspect: G
        };
      }
    }
    let M;
    const E = (b) => f((L) => ({
      performance: {
        ...L.performance,
        current: b
      }
    })), A = new Ge();
    return {
      set: f,
      get: p,
      // Mock objects that have to be configured
      gl: null,
      camera: null,
      raycaster: null,
      events: {
        priority: 1,
        enabled: !0,
        connected: !1
      },
      xr: null,
      scene: null,
      invalidate: (b = 1) => u(p(), b),
      advance: (b, L) => e(b, L, p()),
      legacy: !1,
      linear: !1,
      flat: !1,
      controls: null,
      clock: new TS(),
      pointer: A,
      mouse: A,
      frameloop: "always",
      onPointerMissed: void 0,
      performance: {
        current: 1,
        min: 0.5,
        max: 1,
        debounce: 200,
        regress: () => {
          const b = p();
          M && clearTimeout(M), b.performance.current !== b.performance.min && E(b.performance.min), M = setTimeout(() => E(p().performance.max), b.performance.debounce);
        }
      },
      size: {
        width: 0,
        height: 0,
        top: 0,
        left: 0,
        updateStyle: !1
      },
      viewport: {
        initialDpr: 0,
        dpr: 0,
        width: 0,
        height: 0,
        top: 0,
        left: 0,
        aspect: 0,
        distance: 0,
        factor: 0,
        getCurrentViewport: x
      },
      setEvents: (b) => f((L) => ({
        ...L,
        events: {
          ...L.events,
          ...b
        }
      })),
      setSize: (b, L, R, U, F) => {
        const V = p().camera, k = {
          width: b,
          height: L,
          top: U || 0,
          left: F || 0,
          updateStyle: R
        };
        f((G) => ({
          size: k,
          viewport: {
            ...G.viewport,
            ...x(V, g, k)
          }
        }));
      },
      setDpr: (b) => f((L) => {
        const R = LC(b);
        return {
          viewport: {
            ...L.viewport,
            dpr: R,
            initialDpr: L.viewport.initialDpr || R
          }
        };
      }),
      setFrameloop: (b = "always") => {
        const L = p().clock;
        L.stop(), L.elapsedTime = 0, b !== "never" && (L.start(), L.elapsedTime = 0), f(() => ({
          frameloop: b
        }));
      },
      previousRoot: void 0,
      internal: {
        active: !1,
        priority: 0,
        frames: 0,
        lastEvent: /* @__PURE__ */ Ot.createRef(),
        interaction: [],
        hovered: /* @__PURE__ */ new Map(),
        subscribers: [],
        initialClick: [0, 0],
        initialHits: [],
        capturedMap: /* @__PURE__ */ new Map(),
        subscribe: (b, L, R) => {
          const U = p().internal;
          return U.priority = U.priority + (L > 0 ? 1 : 0), U.subscribers.push({
            ref: b,
            priority: L,
            store: R
          }), U.subscribers = U.subscribers.sort((F, V) => F.priority - V.priority), () => {
            const F = p().internal;
            F != null && F.subscribers && (F.priority = F.priority - (L > 0 ? 1 : 0), F.subscribers = F.subscribers.filter((V) => V.ref !== b));
          };
        }
      }
    };
  }), n = t.getState();
  let a = n.size, s = n.viewport.dpr, c = n.camera;
  return t.subscribe(() => {
    const {
      camera: f,
      size: p,
      viewport: h,
      gl: g,
      set: _
    } = t.getState();
    if (p !== a || h.dpr !== s) {
      var x;
      a = p, s = h.dpr, lF(f, p), g.setPixelRatio(h.dpr);
      const M = (x = p.updateStyle) != null ? x : typeof HTMLCanvasElement < "u" && g.domElement instanceof HTMLCanvasElement;
      g.setSize(p.width, p.height, M);
    }
    f !== c && (c = f, _((M) => ({
      viewport: {
        ...M.viewport,
        ...M.viewport.getCurrentViewport(f)
      }
    })));
  }), t.subscribe((f) => u(f)), t;
};
let gg, hF = /* @__PURE__ */ new Set(), pF = /* @__PURE__ */ new Set(), mF = /* @__PURE__ */ new Set();
function J_(u, e) {
  if (u.size)
    for (const {
      callback: t
    } of u.values())
      t(e);
}
function jh(u, e) {
  switch (u) {
    case "before":
      return J_(hF, e);
    case "after":
      return J_(pF, e);
    case "tail":
      return J_(mF, e);
  }
}
let Q_, K_;
function $_(u, e, t) {
  let n = e.clock.getDelta();
  for (e.frameloop === "never" && typeof u == "number" && (n = u - e.clock.elapsedTime, e.clock.oldTime = e.clock.elapsedTime, e.clock.elapsedTime = u), Q_ = e.internal.subscribers, gg = 0; gg < Q_.length; gg++)
    K_ = Q_[gg], K_.ref.current(K_.store.getState(), n, t);
  return !e.internal.priority && e.gl.render && e.gl.render(e.scene, e.camera), e.internal.frames = Math.max(0, e.internal.frames - 1), e.frameloop === "always" ? 1 : e.internal.frames;
}
function vF(u) {
  let e = !1, t, n, a;
  function s(p) {
    n = requestAnimationFrame(s), e = !0, t = 0, jh("before", p);
    for (const g of u.values()) {
      var h;
      a = g.store.getState(), a.internal.active && (a.frameloop === "always" || a.internal.frames > 0) && !((h = a.gl.xr) != null && h.isPresenting) && (t += $_(p, a));
    }
    if (jh("after", p), t === 0)
      return jh("tail", p), e = !1, cancelAnimationFrame(n);
  }
  function c(p, h = 1) {
    var g;
    if (!p)
      return u.forEach((_) => c(_.store.getState()), h);
    (g = p.gl.xr) != null && g.isPresenting || !p.internal.active || p.frameloop === "never" || (p.internal.frames = Math.min(60, p.internal.frames + h), e || (e = !0, requestAnimationFrame(s)));
  }
  function f(p, h = !0, g, _) {
    if (h && jh("before", p), g)
      $_(p, g, _);
    else
      for (const x of u.values())
        $_(p, x.store.getState());
    h && jh("after", p);
  }
  return {
    loop: s,
    /**
     * Invalidates the view, requesting a frame to be rendered. Will globally invalidate unless passed a root's state.
     * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#invalidate
     */
    invalidate: c,
    /**
     * Advances the frameloop and runs render effects, useful for when manually rendering via `frameloop="never"`.
     * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#advance
     */
    advance: f
  };
}
function zC() {
  const u = Ot.useContext(NC);
  if (!u)
    throw new Error("R3F: Hooks can only be used within the Canvas component!");
  return u;
}
function ip(u = (t) => t, e) {
  return zC()(u, e);
}
function OC(u, e = 0) {
  const t = zC(), n = t.getState().internal.subscribe, a = CC(u);
  return Vp(() => n(a, e, t), [e, n, t]), null;
}
const ad = /* @__PURE__ */ new Map(), {
  invalidate: dw,
  advance: hw
} = vF(ad), {
  reconciler: Ug,
  applyProps: Yh
} = iF(ad, uF), Xf = {
  objects: "shallow",
  strict: !1
}, gF = (u, e) => {
  const t = typeof u == "function" ? u(e) : u;
  return UC(t) ? t : new oS({
    powerPreference: "high-performance",
    canvas: e,
    antialias: !0,
    alpha: !0,
    ...u
  });
};
function yF(u, e) {
  if (e)
    return e;
  if (typeof HTMLCanvasElement < "u" && u instanceof HTMLCanvasElement && u.parentElement) {
    const {
      width: t,
      height: n,
      top: a,
      left: s
    } = u.parentElement.getBoundingClientRect();
    return {
      width: t,
      height: n,
      top: a,
      left: s
    };
  } else if (typeof OffscreenCanvas < "u" && u instanceof OffscreenCanvas)
    return {
      width: u.width,
      height: u.height,
      top: 0,
      left: 0
    };
  return {
    width: 0,
    height: 0,
    top: 0,
    left: 0
  };
}
function _F(u) {
  const e = ad.get(u), t = e == null ? void 0 : e.fiber, n = e == null ? void 0 : e.store;
  e && console.warn("R3F.createRoot should only be called once!");
  const a = typeof reportError == "function" ? (
    // In modern browsers, reportError will dispatch an error event,
    // emulating an uncaught JavaScript error.
    reportError
  ) : (
    // In older browsers and test environments, fallback to console.error.
    console.error
  ), s = n || dF(dw, hw), c = t || Ug.createContainer(s, Bl.ConcurrentRoot, null, !1, null, "", a, null);
  e || ad.set(u, {
    fiber: c,
    store: s
  });
  let f, p = !1, h;
  return {
    configure(g = {}) {
      let {
        gl: _,
        size: x,
        scene: M,
        events: E,
        onCreated: A,
        shadows: T = !1,
        linear: b = !1,
        flat: L = !1,
        legacy: R = !1,
        orthographic: U = !1,
        frameloop: F = "always",
        dpr: V = [1, 2],
        performance: k,
        raycaster: G,
        camera: z,
        onPointerMissed: I
      } = g, Q = s.getState(), te = Q.gl;
      Q.gl || Q.set({
        gl: te = gF(_, u)
      });
      let $ = Q.raycaster;
      $ || Q.set({
        raycaster: $ = new MC()
      });
      const {
        params: ie,
        ...fe
      } = G || {};
      if (jn.equ(fe, $, Xf) || Yh($, {
        ...fe
      }), jn.equ(ie, $.params, Xf) || Yh($, {
        params: {
          ...$.params,
          ...ie
        }
      }), !Q.camera || Q.camera === h && !jn.equ(h, z, Xf)) {
        h = z;
        const Se = z instanceof Tp, ue = Se ? z : U ? new Ap(0, 0, 0, 0, 0.1, 1e3) : new Xi(75, 0, 0.1, 1e3);
        Se || (ue.position.z = 5, z && Yh(ue, z), !Q.camera && !(z != null && z.rotation) && ue.lookAt(0, 0, 0)), Q.set({
          camera: ue
        });
      }
      if (!Q.scene) {
        let Se;
        M instanceof Rg ? Se = M : (Se = new Rg(), M && Yh(Se, M)), Q.set({
          scene: jf(Se)
        });
      }
      if (!Q.xr) {
        const Se = (ye, je) => {
          const Be = s.getState();
          Be.frameloop !== "never" && hw(ye, !0, Be, je);
        }, ue = () => {
          const ye = s.getState();
          ye.gl.xr.enabled = ye.gl.xr.isPresenting, ye.gl.xr.setAnimationLoop(ye.gl.xr.isPresenting ? Se : null), ye.gl.xr.isPresenting || dw(ye);
        }, pe = {
          connect() {
            const ye = s.getState().gl;
            ye.xr.addEventListener("sessionstart", ue), ye.xr.addEventListener("sessionend", ue);
          },
          disconnect() {
            const ye = s.getState().gl;
            ye.xr.removeEventListener("sessionstart", ue), ye.xr.removeEventListener("sessionend", ue);
          }
        };
        te.xr && pe.connect(), Q.set({
          xr: pe
        });
      }
      if (te.shadowMap) {
        const Se = te.shadowMap.enabled, ue = te.shadowMap.type;
        if (te.shadowMap.enabled = !!T, jn.boo(T))
          te.shadowMap.type = Kh;
        else if (jn.str(T)) {
          var Ee;
          const pe = {
            basic: bw,
            percentage: Og,
            soft: Kh,
            variance: Yu
          };
          te.shadowMap.type = (Ee = pe[T]) != null ? Ee : Kh;
        } else
          jn.obj(T) && Object.assign(te.shadowMap, T);
        (Se !== te.shadowMap.enabled || ue !== te.shadowMap.type) && (te.shadowMap.needsUpdate = !0);
      }
      const Te = wC();
      Te && ("enabled" in Te ? Te.enabled = !R : "legacyMode" in Te && (Te.legacyMode = R));
      const W = b ? Uo : Pn, ae = L ? ds : jx;
      te.outputEncoding !== W && (te.outputEncoding = W), te.toneMapping !== ae && (te.toneMapping = ae), Q.legacy !== R && Q.set(() => ({
        legacy: R
      })), Q.linear !== b && Q.set(() => ({
        linear: b
      })), Q.flat !== L && Q.set(() => ({
        flat: L
      })), _ && !jn.fun(_) && !UC(_) && !jn.equ(_, te, Xf) && Yh(te, _), E && !Q.events.handlers && Q.set({
        events: E(s)
      });
      const ne = yF(u, x);
      return jn.equ(ne, Q.size, Xf) || Q.setSize(ne.width, ne.height, ne.updateStyle, ne.top, ne.left), V && Q.viewport.dpr !== LC(V) && Q.setDpr(V), Q.frameloop !== F && Q.setFrameloop(F), Q.onPointerMissed || Q.set({
        onPointerMissed: I
      }), k && !jn.equ(k, Q.performance, Xf) && Q.set((Se) => ({
        performance: {
          ...Se.performance,
          ...k
        }
      })), f = A, p = !0, this;
    },
    render(g) {
      return p || this.configure(), Ug.updateContainer(/* @__PURE__ */ Ot.createElement(xF, {
        store: s,
        children: g,
        onCreated: f,
        rootElement: u
      }), c, null, () => {
      }), s;
    },
    unmount() {
      IC(u);
    }
  };
}
function xF({
  store: u,
  children: e,
  onCreated: t,
  rootElement: n
}) {
  return Vp(() => {
    const a = u.getState();
    a.set((s) => ({
      internal: {
        ...s.internal,
        active: !0
      }
    })), t && t(a), u.getState().events.connected || a.events.connect == null || a.events.connect(n);
  }, []), /* @__PURE__ */ Ot.createElement(NC.Provider, {
    value: u
  }, e);
}
function IC(u, e) {
  const t = ad.get(u), n = t == null ? void 0 : t.fiber;
  if (n) {
    const a = t == null ? void 0 : t.store.getState();
    a && (a.internal.active = !1), Ug.updateContainer(null, n, null, () => {
      a && setTimeout(() => {
        try {
          var s, c, f, p;
          a.events.disconnect == null || a.events.disconnect(), (s = a.gl) == null || (c = s.renderLists) == null || c.dispose == null || c.dispose(), (f = a.gl) == null || f.forceContextLoss == null || f.forceContextLoss(), (p = a.gl) != null && p.xr && a.xr.disconnect(), oF(a), ad.delete(u), e && e(u);
        } catch {
        }
      }, 500);
    });
  }
}
Ug.injectIntoDevTools({
  bundleType: process.env.NODE_ENV === "production" ? 0 : 1,
  rendererPackageName: "@react-three/fiber",
  version: Ot.version
});
function Mp() {
  return Mp = Object.assign ? Object.assign.bind() : function(u) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var n in t)
        Object.prototype.hasOwnProperty.call(t, n) && (u[n] = t[n]);
    }
    return u;
  }, Mp.apply(this, arguments);
}
function Wx(u, e, t) {
  var n, a, s, c, f;
  e == null && (e = 100);
  function p() {
    var g = Date.now() - c;
    g < e && g >= 0 ? n = setTimeout(p, e - g) : (n = null, t || (f = u.apply(s, a), s = a = null));
  }
  var h = function() {
    s = this, a = arguments, c = Date.now();
    var g = t && !n;
    return n || (n = setTimeout(p, e)), g && (f = u.apply(s, a), s = a = null), f;
  };
  return h.clear = function() {
    n && (clearTimeout(n), n = null);
  }, h.flush = function() {
    n && (f = u.apply(s, a), s = a = null, clearTimeout(n), n = null);
  }, h;
}
Wx.debounce = Wx;
var pw = Wx;
function SF(u) {
  let {
    debounce: e,
    scroll: t,
    polyfill: n,
    offsetSize: a
  } = u === void 0 ? {
    debounce: 0,
    scroll: !1,
    offsetSize: !1
  } : u;
  const s = n || (typeof window > "u" ? class {
  } : window.ResizeObserver);
  if (!s)
    throw new Error("This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills");
  const [c, f] = xw({
    left: 0,
    top: 0,
    width: 0,
    height: 0,
    bottom: 0,
    right: 0,
    x: 0,
    y: 0
  }), p = Bs({
    element: null,
    scrollContainers: null,
    resizeObserver: null,
    lastBounds: c
  }), h = e ? typeof e == "number" ? e : e.scroll : null, g = e ? typeof e == "number" ? e : e.resize : null, _ = Bs(!1);
  $u(() => (_.current = !0, () => void (_.current = !1)));
  const [x, M, E] = T2(() => {
    const L = () => {
      if (!p.current.element)
        return;
      const {
        left: R,
        top: U,
        width: F,
        height: V,
        bottom: k,
        right: G,
        x: z,
        y: I
      } = p.current.element.getBoundingClientRect(), Q = {
        left: R,
        top: U,
        width: F,
        height: V,
        bottom: k,
        right: G,
        x: z,
        y: I
      };
      p.current.element instanceof HTMLElement && a && (Q.height = p.current.element.offsetHeight, Q.width = p.current.element.offsetWidth), Object.freeze(Q), _.current && !wF(p.current.lastBounds, Q) && f(p.current.lastBounds = Q);
    };
    return [L, g ? pw(L, g) : L, h ? pw(L, h) : L];
  }, [f, a, h, g]);
  function A() {
    p.current.scrollContainers && (p.current.scrollContainers.forEach((L) => L.removeEventListener("scroll", E, !0)), p.current.scrollContainers = null), p.current.resizeObserver && (p.current.resizeObserver.disconnect(), p.current.resizeObserver = null);
  }
  function T() {
    p.current.element && (p.current.resizeObserver = new s(E), p.current.resizeObserver.observe(p.current.element), t && p.current.scrollContainers && p.current.scrollContainers.forEach((L) => L.addEventListener("scroll", E, {
      capture: !0,
      passive: !0
    })));
  }
  const b = (L) => {
    !L || L === p.current.element || (A(), p.current.element = L, p.current.scrollContainers = FC(L), T());
  };
  return bF(E, !!t), MF(M), $u(() => {
    A(), T();
  }, [t, E, M]), $u(() => A, []), [b, c, x];
}
function MF(u) {
  $u(() => {
    const e = u;
    return window.addEventListener("resize", e), () => void window.removeEventListener("resize", e);
  }, [u]);
}
function bF(u, e) {
  $u(() => {
    if (e) {
      const t = u;
      return window.addEventListener("scroll", t, {
        capture: !0,
        passive: !0
      }), () => void window.removeEventListener("scroll", t, !0);
    }
  }, [u, e]);
}
function FC(u) {
  const e = [];
  if (!u || u === document.body)
    return e;
  const {
    overflow: t,
    overflowX: n,
    overflowY: a
  } = window.getComputedStyle(u);
  return [t, n, a].some((s) => s === "auto" || s === "scroll") && e.push(u), [...e, ...FC(u.parentElement)];
}
const EF = ["x", "y", "top", "bottom", "left", "right", "width", "height"], wF = (u, e) => EF.every((t) => u[t] === e[t]);
var TF = Object.defineProperty, CF = Object.defineProperties, AF = Object.getOwnPropertyDescriptors, mw = Object.getOwnPropertySymbols, RF = Object.prototype.hasOwnProperty, LF = Object.prototype.propertyIsEnumerable, vw = (u, e, t) => e in u ? TF(u, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : u[e] = t, gw = (u, e) => {
  for (var t in e || (e = {}))
    RF.call(e, t) && vw(u, t, e[t]);
  if (mw)
    for (var t of mw(e))
      LF.call(e, t) && vw(u, t, e[t]);
  return u;
}, DF = (u, e) => CF(u, AF(e));
function BC(u, e, t) {
  if (!u)
    return;
  if (t(u) === !0)
    return u;
  let n = e ? u.return : u.child;
  for (; n; ) {
    const a = BC(n, e, t);
    if (a)
      return a;
    n = e ? null : n.sibling;
  }
}
function HC(u) {
  try {
    return Object.defineProperties(u, {
      _currentRenderer: {
        get() {
          return null;
        },
        set() {
        }
      },
      _currentRenderer2: {
        get() {
          return null;
        },
        set() {
        }
      }
    });
  } catch {
    return u;
  }
}
const DS = HC(Ot.createContext(null));
class kC extends Ot.Component {
  render() {
    return /* @__PURE__ */ Ot.createElement(DS.Provider, {
      value: this._reactInternals
    }, this.props.children);
  }
}
const { ReactCurrentOwner: yw, ReactCurrentDispatcher: _w } = Ot.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
function PF() {
  const u = Ot.useContext(DS);
  if (u === null)
    throw new Error("its-fine: useFiber must be called within a <FiberProvider />!");
  const e = Ot.useId();
  return Ot.useMemo(
    () => {
      var n;
      return (n = yw == null ? void 0 : yw.current) != null ? n : BC(u, !1, (a) => {
        let s = a.memoizedState;
        for (; s; ) {
          if (s.memoizedState === e)
            return !0;
          s = s.next;
        }
      });
    },
    [u, e]
  );
}
function UF() {
  var u, e;
  const t = PF(), [n] = Ot.useState(() => /* @__PURE__ */ new Map());
  n.clear();
  let a = t;
  for (; a; ) {
    const s = (u = a.type) == null ? void 0 : u._context;
    s && s !== DS && !n.has(s) && n.set(s, (e = _w == null ? void 0 : _w.current) == null ? void 0 : e.readContext(HC(s))), a = a.return;
  }
  return n;
}
function NF() {
  const u = UF();
  return Ot.useMemo(
    () => Array.from(u.keys()).reduce(
      (e, t) => (n) => /* @__PURE__ */ Ot.createElement(e, null, /* @__PURE__ */ Ot.createElement(t.Provider, DF(gw({}, n), {
        value: u.get(t)
      }))),
      (e) => /* @__PURE__ */ Ot.createElement(kC, gw({}, e))
    ),
    [u]
  );
}
const ex = {
  onClick: ["click", !1],
  onContextMenu: ["contextmenu", !1],
  onDoubleClick: ["dblclick", !1],
  onWheel: ["wheel", !0],
  onPointerDown: ["pointerdown", !0],
  onPointerUp: ["pointerup", !0],
  onPointerLeave: ["pointerleave", !0],
  onPointerMove: ["pointermove", !0],
  onPointerCancel: ["pointercancel", !0],
  onLostPointerCapture: ["lostpointercapture", !0]
};
function zF(u) {
  const {
    handlePointer: e
  } = fF(u);
  return {
    priority: 1,
    enabled: !0,
    compute(t, n, a) {
      n.pointer.set(t.offsetX / n.size.width * 2 - 1, -(t.offsetY / n.size.height) * 2 + 1), n.raycaster.setFromCamera(n.pointer, n.camera);
    },
    connected: void 0,
    handlers: Object.keys(ex).reduce((t, n) => ({
      ...t,
      [n]: e(n)
    }), {}),
    update: () => {
      var t;
      const {
        events: n,
        internal: a
      } = u.getState();
      (t = a.lastEvent) != null && t.current && n.handlers && n.handlers.onPointerMove(a.lastEvent.current);
    },
    connect: (t) => {
      var n;
      const {
        set: a,
        events: s
      } = u.getState();
      s.disconnect == null || s.disconnect(), a((c) => ({
        events: {
          ...c.events,
          connected: t
        }
      })), Object.entries((n = s.handlers) != null ? n : []).forEach(([c, f]) => {
        const [p, h] = ex[c];
        t.addEventListener(p, f, {
          passive: h
        });
      });
    },
    disconnect: () => {
      const {
        set: t,
        events: n
      } = u.getState();
      if (n.connected) {
        var a;
        Object.entries((a = n.handlers) != null ? a : []).forEach(([s, c]) => {
          if (n && n.connected instanceof HTMLElement) {
            const [f] = ex[s];
            n.connected.removeEventListener(f, c);
          }
        }), t((s) => ({
          events: {
            ...s.events,
            connected: void 0
          }
        }));
      }
    }
  };
}
const OF = /* @__PURE__ */ Ot.forwardRef(function({
  children: e,
  fallback: t,
  resize: n,
  style: a,
  gl: s,
  events: c = zF,
  eventSource: f,
  eventPrefix: p,
  shadows: h,
  linear: g,
  flat: _,
  legacy: x,
  orthographic: M,
  frameloop: E,
  dpr: A,
  performance: T,
  raycaster: b,
  camera: L,
  onPointerMissed: R,
  onCreated: U,
  ...F
}, V) {
  Ot.useMemo(() => nF(FI), []);
  const k = NF(), [G, z] = SF({
    scroll: !0,
    debounce: {
      scroll: 50,
      resize: 0
    },
    ...n
  }), I = Ot.useRef(null), Q = Ot.useRef(null);
  Ot.useImperativeHandle(V, () => I.current);
  const te = CC(R), [$, ie] = Ot.useState(!1), [fe, Ee] = Ot.useState(!1);
  if ($)
    throw $;
  if (fe)
    throw fe;
  const Te = Ot.useRef(null);
  Vp(() => {
    const ae = I.current;
    z.width > 0 && z.height > 0 && ae && (Te.current || (Te.current = _F(ae)), Te.current.configure({
      gl: s,
      events: c,
      shadows: h,
      linear: g,
      flat: _,
      legacy: x,
      orthographic: M,
      frameloop: E,
      dpr: A,
      performance: T,
      raycaster: b,
      camera: L,
      size: z,
      // Pass mutable reference to onPointerMissed so it's free to update
      onPointerMissed: (...ne) => te.current == null ? void 0 : te.current(...ne),
      onCreated: (ne) => {
        ne.events.connect == null || ne.events.connect(f ? rF(f) ? f.current : f : Q.current), p && ne.setEvents({
          compute: (Se, ue) => {
            const pe = Se[p + "X"], ye = Se[p + "Y"];
            ue.pointer.set(pe / ue.size.width * 2 - 1, -(ye / ue.size.height) * 2 + 1), ue.raycaster.setFromCamera(ue.pointer, ue.camera);
          }
        }), U == null || U(ne);
      }
    }), Te.current.render(/* @__PURE__ */ Ot.createElement(k, null, /* @__PURE__ */ Ot.createElement(AC, {
      set: Ee
    }, /* @__PURE__ */ Ot.createElement(Ot.Suspense, {
      fallback: /* @__PURE__ */ Ot.createElement(aF, {
        set: ie
      })
    }, e)))));
  }), Ot.useEffect(() => {
    const ae = I.current;
    if (ae)
      return () => IC(ae);
  }, []);
  const W = f ? "none" : "auto";
  return /* @__PURE__ */ Ot.createElement("div", Mp({
    ref: Q,
    style: {
      position: "relative",
      width: "100%",
      height: "100%",
      overflow: "hidden",
      pointerEvents: W,
      ...a
    }
  }, F), /* @__PURE__ */ Ot.createElement("div", {
    ref: G,
    style: {
      width: "100%",
      height: "100%"
    }
  }, /* @__PURE__ */ Ot.createElement("canvas", {
    ref: I,
    style: {
      display: "block"
    }
  }, t)));
}), IF = /* @__PURE__ */ Ot.forwardRef(function(e, t) {
  return /* @__PURE__ */ Ot.createElement(kC, null, /* @__PURE__ */ Ot.createElement(OF, Mp({}, e, {
    ref: t
  })));
});
function FF(u) {
  return function(e) {
    u.forEach(function(t) {
      typeof t == "function" ? t(e) : t != null && (t.current = e);
    });
  };
}
function BF(u, e, t) {
  const {
    gl: n,
    size: a,
    viewport: s
  } = ip(), c = typeof u == "number" ? u : a.width * s.dpr, f = typeof e == "number" ? e : a.height * s.dpr, p = (typeof u == "number" ? t : u) || {}, {
    samples: h = 0,
    depth: g,
    ..._
  } = p, x = Ot.useMemo(() => {
    let M;
    return M = new Ga(c, f, {
      minFilter: ai,
      magFilter: ai,
      encoding: n.outputEncoding,
      type: ac,
      ..._
    }), g && (M.depthTexture = new sS(c, f, Hs)), M.samples = h, M;
  }, []);
  return Ot.useLayoutEffect(() => {
    x.setSize(c, f), h && (x.samples = h);
  }, [h, x, c, f]), Ot.useEffect(() => () => x.dispose(), []), x;
}
const HF = (u) => typeof u == "function", kF = /* @__PURE__ */ Ot.forwardRef(({
  envMap: u,
  resolution: e = 256,
  frames: t = 1 / 0,
  makeDefault: n,
  children: a,
  ...s
}, c) => {
  const f = ip(({
    set: T
  }) => T), p = ip(({
    camera: T
  }) => T), h = ip(({
    size: T
  }) => T), g = Ot.useRef(null), _ = Ot.useRef(null), x = BF(e);
  Ot.useLayoutEffect(() => {
    s.manual || (g.current.aspect = h.width / h.height);
  }, [h, s]), Ot.useLayoutEffect(() => {
    g.current.updateProjectionMatrix();
  });
  let M = 0, E = null;
  const A = HF(a);
  return OC((T) => {
    A && (t === 1 / 0 || M < t) && (_.current.visible = !1, T.gl.setRenderTarget(x), E = T.scene.background, u && (T.scene.background = u), T.gl.render(T.scene, g.current), T.scene.background = E, T.gl.setRenderTarget(null), _.current.visible = !0, M++);
  }), Ot.useLayoutEffect(() => {
    if (n) {
      const T = p;
      return f(() => ({
        camera: g.current
      })), () => f(() => ({
        camera: T
      }));
    }
  }, [g, n, f]), /* @__PURE__ */ Ot.createElement(Ot.Fragment, null, /* @__PURE__ */ Ot.createElement("perspectiveCamera", Mp({
    ref: FF([g, c])
  }, s), !A && a), /* @__PURE__ */ Ot.createElement("group", {
    ref: _
  }, A && a(x.texture)));
});
var VF = `uniform float time;
varying vec2 vUv;
varying vec3 vColor;
const int MAX_COLORS = 5;
uniform vec3 uColor[MAX_COLORS];

vec4 permute(vec4 x) {
    return mod(((x * 34.0) + 1.0) * x, 289.0);
}
vec4 taylorInvSqrt(vec4 r) {
    return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v) {
    const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);
    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);

    vec3 i = floor(v + dot(v, C.yyy));
    vec3 x0 = v - i + dot(i, C.xxx);

    vec3 g = step(x0.yzx, x0.xyz);
    vec3 l = 1.0 - g;
    vec3 i1 = min(g.xyz, l.zxy);
    vec3 i2 = max(g.xyz, l.zxy);

  
    vec3 x1 = x0 - i1 + 1.0 * C.xxx;
    vec3 x2 = x0 - i2 + 2.0 * C.xxx;
    vec3 x3 = x0 - 1. + 3.0 * C.xxx;

    i = mod(i, 289.0);
    vec4 p = permute(permute(permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0)) + i.x + vec4(0.0, i1.x, i2.x, 1.0));

    float n_ = 1.0 / 7.0; 
    vec3 ns = n_ * D.wyz - D.xzx;

    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  

    vec4 x_ = floor(j * ns.z);
    vec4 y_ = floor(j - 7.0 * x_);    

    vec4 x = x_ * ns.x + ns.yyyy;
    vec4 y = y_ * ns.x + ns.yyyy;
    vec4 h = 1.0 - abs(x) - abs(y);

    vec4 b0 = vec4(x.xy, y.xy);
    vec4 b1 = vec4(x.zw, y.zw);

    vec4 s0 = floor(b0) * 2.0 + 1.0;
    vec4 s1 = floor(b1) * 2.0 + 1.0;
    vec4 sh = -step(h, vec4(0.0));

    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

    vec3 p0 = vec3(a0.xy, h.x);
    vec3 p1 = vec3(a0.zw, h.y);
    vec3 p2 = vec3(a1.xy, h.z);
    vec3 p3 = vec3(a1.zw, h.w);

    vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;

    vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
    m = m * m;
    return 42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));
}

void main() {
    
    vec2 base = uv * vec2(3., 4.);

    
    float tilt = -0.5 * uv.y;
    float incline = uv.x * 0.1;

    
    float offset = incline * mix(-.25, 0.25, uv.y);

    
    float noise = snoise(vec3(base.x + time * 3., base.y, time * 10.));

    
    noise = max(0., noise);

    
    vec3 pos = vec3(position.x, position.y, position.z + noise * 0.1 + tilt + incline + offset);

    
    vColor = uColor[MAX_COLORS - 1];

    
    for(int i = 0; i < MAX_COLORS - 1; i++) {
        
        float flow = 5. + float(i) * 0.3;
        float speed = 8. + float(i) * 0.3;
        float seed = 1. + float(i) * 4.;

        vec2 frequency = vec2(0.3, 0.4);

        
        float noiseFloor = 0.2;
        float noiseCeil = 0.4 + float(i) * 0.07;

        
        float noise = smoothstep(noiseFloor, noiseCeil, snoise(vec3(base.x * frequency.x + time * flow, base.y * frequency.y, time * speed + seed)));

        
        vColor = mix(vColor, uColor[i], noise);
    }

    
    vUv = uv;
    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
}`, GF = `varying vec3 vColor;
void main() {
    gl_FragColor = vec4(vColor, 1.0);
}`;
function WF({
  colors: u,
  wireframe: e = !1,
  speed: t = 0.01,
  backgroundColor: n = "#FFFFFF",
  backgroundOpacity: a = 1,
  onGradientClick: s,
  onGradientContextMenu: c,
  onGradientDoubleClick: f,
  onGradientWheel: p,
  onGradientPointerUp: h,
  onGradientPointerDown: g,
  onGradientPointerOver: _,
  onGradientPointerOut: x,
  onGradientPointerEnter: M,
  onGradientPointerLeave: E,
  onGradientPointerMove: A,
  onGradientPropsUpdate: T
}) {
  const b = Bs(null), L = Bs(null), R = ip((k) => k.gl), [U, F] = xw(0), V = u.map((k) => new yt(k));
  return $u(() => (R.setPixelRatio(Math.min(window.devicePixelRatio, 2)), R.setClearColor(n, a), R.useLegacyLights = !0, R.outputEncoding = Pn, () => R.dispose())), OC((k, G) => F(U + t * G)), /* @__PURE__ */ tx(
    "mesh",
    {
      ref: b,
      position: new j(0, 0, 0),
      onClick: s ? (k) => s(k) : void 0,
      onContextMenu: c ? (k) => c(k) : void 0,
      onDoubleClick: f ? (k) => f(k) : void 0,
      onWheel: p ? (k) => p(k) : void 0,
      onPointerUp: h ? (k) => h(k) : void 0,
      onPointerDown: g ? (k) => g(k) : void 0,
      onPointerOver: _ ? (k) => _(k) : void 0,
      onPointerOut: x ? (k) => x(k) : void 0,
      onPointerEnter: M ? (k) => M(k) : void 0,
      onPointerLeave: E ? (k) => E(k) : void 0,
      onPointerMove: A ? (k) => A(k) : void 0,
      onUpdate: T ? (k) => T(k) : void 0,
      children: [
        /* @__PURE__ */ Qh("planeGeometry", { args: [1, 1, 500, 500] }),
        /* @__PURE__ */ Qh(
          "shaderMaterial",
          {
            extensions: {
              derivatives: !0,
              fragDepth: !1,
              drawBuffers: !1,
              shaderTextureLOD: !1
            },
            ref: L,
            side: fs,
            uniforms: {
              time: { value: U },
              uColor: { value: V }
            },
            wireframe: e,
            vertexShader: VF,
            fragmentShader: GF
          },
          Math.random()
        )
      ]
    }
  );
}
const JF = ({
  width: u,
  height: e,
  colors: t,
  wireframe: n,
  speed: a,
  backgroundColor: s,
  backgroundOpacity: c,
  onGradientClick: f,
  onGradientContextMenu: p,
  onGradientDoubleClick: h,
  onGradientWheel: g,
  onGradientPointerUp: _,
  onGradientPointerDown: x,
  onGradientPointerOver: M,
  onGradientPointerOut: E,
  onGradientPointerEnter: A,
  onGradientPointerLeave: T,
  onGradientPointerMove: b,
  onGradientPropsUpdate: L,
  style: R,
  children: U,
  ...F
}) => /* @__PURE__ */ tx(D2, { children: [
  /* @__PURE__ */ Qh("div", { style: { position: "absolute", zIndex: -1, ...R }, ...F, children: /* @__PURE__ */ tx(IF, { children: [
    /* @__PURE__ */ Qh(kF, { makeDefault: !0, manual: !0, position: new j(0, 0, 0.5), near: 1e-3, far: 1e3 }),
    /* @__PURE__ */ Qh(
      WF,
      {
        colors: t,
        wireframe: n,
        speed: a,
        backgroundColor: s,
        backgroundOpacity: c,
        onGradientClick: f,
        onGradientContextMenu: p,
        onGradientDoubleClick: h,
        onGradientWheel: g,
        onGradientPointerUp: _,
        onGradientPointerDown: x,
        onGradientPointerOver: M,
        onGradientPointerOut: E,
        onGradientPointerEnter: A,
        onGradientPointerLeave: T,
        onGradientPointerMove: b,
        onGradientPropsUpdate: L
      }
    )
  ] }) }),
  U
] });
export {
  JF as MeshGradientRenderer
};
